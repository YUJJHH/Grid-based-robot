
logistics_robot_finish_verson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f18  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  080140c8  080140c8  000150c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014648  08014648  000166f8  2**0
                  CONTENTS
  4 .ARM          00000008  08014648  08014648  00015648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014650  08014650  000166f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014650  08014650  00015650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014654  08014654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006f8  20000000  08014658  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000166f8  2**0
                  CONTENTS
 10 .bss          00003d8c  200006f8  200006f8  000166f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004484  20004484  000166f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000166f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb26  00000000  00000000  00016728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003723  00000000  00000000  0003224e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00035978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  00036ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f0b  00000000  00000000  000382e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007546  00000000  00000000  0004d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00054739  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007300  00000000  00000000  0005477c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200006f8 	.word	0x200006f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080140b0 	.word	0x080140b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200006fc 	.word	0x200006fc
 80001ec:	080140b0 	.word	0x080140b0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <linear_motor_GO>:
uint8_t linear_back_flag = 0;



void linear_motor_GO(float time)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (linear_go_flag == 0) {
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <linear_motor_GO+0x3c>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d110      	bne.n	8001058 <linear_motor_GO+0x34>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);  //방향  전진
 8001036:	2200      	movs	r2, #0
 8001038:	2104      	movs	r1, #4
 800103a:	480a      	ldr	r0, [pc, #40]	@ (8001064 <linear_motor_GO+0x40>)
 800103c:	f008 fe5c 	bl	8009cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 0);  //출발
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	4808      	ldr	r0, [pc, #32]	@ (8001068 <linear_motor_GO+0x44>)
 8001046:	f008 fe57 	bl	8009cf8 <HAL_GPIO_WritePin>
	TIM3->CCR4=8200;
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <linear_motor_GO+0x48>)
 800104c:	f242 0208 	movw	r2, #8200	@ 0x2008
 8001050:	641a      	str	r2, [r3, #64]	@ 0x40
	linear_go_flag = 1;
 8001052:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <linear_motor_GO+0x3c>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
		}
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000715 	.word	0x20000715
 8001064:	40020800 	.word	0x40020800
 8001068:	40021400 	.word	0x40021400
 800106c:	40000400 	.word	0x40000400

08001070 <linear_motor_BACK>:

void linear_motor_BACK(float time)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
	if (linear_go_flag == 1) {
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <linear_motor_BACK+0x3c>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d110      	bne.n	80010a4 <linear_motor_BACK+0x34>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);   //방향 후진
 8001082:	2201      	movs	r2, #1
 8001084:	2104      	movs	r1, #4
 8001086:	480a      	ldr	r0, [pc, #40]	@ (80010b0 <linear_motor_BACK+0x40>)
 8001088:	f008 fe36 	bl	8009cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 0);  //출발
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <linear_motor_BACK+0x44>)
 8001092:	f008 fe31 	bl	8009cf8 <HAL_GPIO_WritePin>
	TIM3->CCR4=8200;
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <linear_motor_BACK+0x48>)
 8001098:	f242 0208 	movw	r2, #8200	@ 0x2008
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
	linear_go_flag = 0;
 800109e:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <linear_motor_BACK+0x3c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
		}
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000715 	.word	0x20000715
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40000400 	.word	0x40000400

080010bc <linear_time_count_GO>:

void linear_time_count_GO(float time)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	ed87 0a01 	vstr	s0, [r7, #4]
	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0) && (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_4) == 0))
 80010c6:	2104      	movs	r1, #4
 80010c8:	4821      	ldr	r0, [pc, #132]	@ (8001150 <linear_time_count_GO+0x94>)
 80010ca:	f008 fdfd 	bl	8009cc8 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d138      	bne.n	8001146 <linear_time_count_GO+0x8a>
 80010d4:	2110      	movs	r1, #16
 80010d6:	481f      	ldr	r0, [pc, #124]	@ (8001154 <linear_time_count_GO+0x98>)
 80010d8:	f008 fdf6 	bl	8009cc8 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d131      	bne.n	8001146 <linear_time_count_GO+0x8a>
		{ //리니어      전진  && 출발

				linear_count++;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <linear_time_count_GO+0x9c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <linear_time_count_GO+0x9c>)
 80010ec:	701a      	strb	r2, [r3, #0]
				GPIOB->ODR |= 1<<0;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <linear_time_count_GO+0xa0>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a1a      	ldr	r2, [pc, #104]	@ (800115c <linear_time_count_GO+0xa0>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6153      	str	r3, [r2, #20]
				if(linear_count>=(uint16_t)100.0*time)  //time=1 이면 1초
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <linear_time_count_GO+0x9c>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001106:	edd7 7a01 	vldr	s15, [r7, #4]
 800110a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001160 <linear_time_count_GO+0xa4>
 800110e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	da00      	bge.n	800111e <linear_time_count_GO+0x62>
					Finish_flag.linear_go = TRUE;
				//	paser_flag=1;

				}
		}
}
 800111c:	e013      	b.n	8001146 <linear_time_count_GO+0x8a>
					linear_count=0;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <linear_time_count_GO+0x9c>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
					GPIOB->ODR &= ~1<<0;
 8001124:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <linear_time_count_GO+0xa0>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <linear_time_count_GO+0xa0>)
 800112a:	f023 0301 	bic.w	r3, r3, #1
 800112e:	6153      	str	r3, [r2, #20]
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 1); //정지
 8001130:	2201      	movs	r2, #1
 8001132:	2110      	movs	r1, #16
 8001134:	4807      	ldr	r0, [pc, #28]	@ (8001154 <linear_time_count_GO+0x98>)
 8001136:	f008 fddf 	bl	8009cf8 <HAL_GPIO_WritePin>
					TIM3->CCR4=0;
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <linear_time_count_GO+0xa8>)
 800113c:	2200      	movs	r2, #0
 800113e:	641a      	str	r2, [r3, #64]	@ 0x40
					Finish_flag.linear_go = TRUE;
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <linear_time_count_GO+0xac>)
 8001142:	2201      	movs	r2, #1
 8001144:	725a      	strb	r2, [r3, #9]
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40020800 	.word	0x40020800
 8001154:	40021400 	.word	0x40021400
 8001158:	20000714 	.word	0x20000714
 800115c:	40020400 	.word	0x40020400
 8001160:	42c80000 	.word	0x42c80000
 8001164:	40000400 	.word	0x40000400
 8001168:	20000c60 	.word	0x20000c60

0800116c <linear_time_count_BACK>:

void linear_time_count_BACK(float time)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	ed87 0a01 	vstr	s0, [r7, #4]
	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 1) && (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_4) == 0))
 8001176:	2104      	movs	r1, #4
 8001178:	4821      	ldr	r0, [pc, #132]	@ (8001200 <linear_time_count_BACK+0x94>)
 800117a:	f008 fda5 	bl	8009cc8 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d138      	bne.n	80011f6 <linear_time_count_BACK+0x8a>
 8001184:	2110      	movs	r1, #16
 8001186:	481f      	ldr	r0, [pc, #124]	@ (8001204 <linear_time_count_BACK+0x98>)
 8001188:	f008 fd9e 	bl	8009cc8 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d131      	bne.n	80011f6 <linear_time_count_BACK+0x8a>
		{ //리니어      후진  && 출발

				linear_count++;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <linear_time_count_BACK+0x9c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <linear_time_count_BACK+0x9c>)
 800119c:	701a      	strb	r2, [r3, #0]
				GPIOB->ODR |= 1<<0;
 800119e:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <linear_time_count_BACK+0xa0>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a1a      	ldr	r2, [pc, #104]	@ (800120c <linear_time_count_BACK+0xa0>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6153      	str	r3, [r2, #20]
				if(linear_count>= (uint16_t)100.0*time )  //time=1 이면 1초
 80011aa:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <linear_time_count_BACK+0x9c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ba:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001210 <linear_time_count_BACK+0xa4>
 80011be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	da00      	bge.n	80011ce <linear_time_count_BACK+0x62>
					Finish_flag.linear_back = TRUE;
					//paser_flag=1;

				}
		}
}
 80011cc:	e013      	b.n	80011f6 <linear_time_count_BACK+0x8a>
					GPIOB->ODR &= ~1<<0;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <linear_time_count_BACK+0xa0>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a0e      	ldr	r2, [pc, #56]	@ (800120c <linear_time_count_BACK+0xa0>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6153      	str	r3, [r2, #20]
					linear_count=0;
 80011da:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <linear_time_count_BACK+0x9c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 1); //정지
 80011e0:	2201      	movs	r2, #1
 80011e2:	2110      	movs	r1, #16
 80011e4:	4807      	ldr	r0, [pc, #28]	@ (8001204 <linear_time_count_BACK+0x98>)
 80011e6:	f008 fd87 	bl	8009cf8 <HAL_GPIO_WritePin>
					TIM3->CCR4=0;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <linear_time_count_BACK+0xa8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	641a      	str	r2, [r3, #64]	@ 0x40
					Finish_flag.linear_back = TRUE;
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <linear_time_count_BACK+0xac>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	729a      	strb	r2, [r3, #10]
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020800 	.word	0x40020800
 8001204:	40021400 	.word	0x40021400
 8001208:	20000714 	.word	0x20000714
 800120c:	40020400 	.word	0x40020400
 8001210:	42c80000 	.word	0x42c80000
 8001214:	40000400 	.word	0x40000400
 8001218:	20000c60 	.word	0x20000c60

0800121c <FALSE_Init>:
uint8_t target_3_1_flag = 0;
uint8_t target_2_2_flag = 0;
uint8_t target_3_2_flag = 0;
uint8_t box_pickup_flag = 0;
uint8_t box_dropoff_flag = 0;
void FALSE_Init() {
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	Finish_flag.x_go = FALSE;
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <FALSE_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
	Finish_flag.x_back = FALSE;
 8001226:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <FALSE_Init+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	705a      	strb	r2, [r3, #1]
	Finish_flag.y_go = FALSE;
 800122c:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <FALSE_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	709a      	strb	r2, [r3, #2]
	Finish_flag.y_back = FALSE;
 8001232:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <FALSE_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	70da      	strb	r2, [r3, #3]
	Finish_flag.ball_high = FALSE;
 8001238:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <FALSE_Init+0x94>)
 800123a:	2200      	movs	r2, #0
 800123c:	711a      	strb	r2, [r3, #4]
	Finish_flag.ball_mid = FALSE;
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <FALSE_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	715a      	strb	r2, [r3, #5]
	Finish_flag.ball_low = FALSE;
 8001244:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <FALSE_Init+0x94>)
 8001246:	2200      	movs	r2, #0
 8001248:	719a      	strb	r2, [r3, #6]
	Finish_flag.downpart_high = FALSE;
 800124a:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <FALSE_Init+0x94>)
 800124c:	2200      	movs	r2, #0
 800124e:	71da      	strb	r2, [r3, #7]
	Finish_flag.downpart_low = FALSE;
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <FALSE_Init+0x94>)
 8001252:	2200      	movs	r2, #0
 8001254:	721a      	strb	r2, [r3, #8]
	Finish_flag.linear_go = FALSE;
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <FALSE_Init+0x94>)
 8001258:	2200      	movs	r2, #0
 800125a:	725a      	strb	r2, [r3, #9]
	Finish_flag.linear_back = FALSE;
 800125c:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <FALSE_Init+0x94>)
 800125e:	2200      	movs	r2, #0
 8001260:	729a      	strb	r2, [r3, #10]

	target_1_2_flag = 0;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <FALSE_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
	target_2_1_flag = 0;
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <FALSE_Init+0x9c>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
	target_3_1_flag = 0;
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <FALSE_Init+0xa0>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
	target_2_2_flag = 0;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <FALSE_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
	target_3_2_flag = 0;
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <FALSE_Init+0xa8>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
	box_pickup_flag = 0;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <FALSE_Init+0xac>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
	box_dropoff_flag = 0;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <FALSE_Init+0xb0>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]

	pickup_run=0;
 800128c:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <FALSE_Init+0xb4>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
	dropoff_run= 0;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <FALSE_Init+0xb8>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
	Manual_mode.box_pickup = FALSE;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <FALSE_Init+0xbc>)
 800129a:	2200      	movs	r2, #0
 800129c:	715a      	strb	r2, [r3, #5]
	Manual_mode.Box_dropoff = FALSE;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <FALSE_Init+0xbc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	719a      	strb	r2, [r3, #6]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000c60 	.word	0x20000c60
 80012b4:	200010f8 	.word	0x200010f8
 80012b8:	200010f9 	.word	0x200010f9
 80012bc:	200010fa 	.word	0x200010fa
 80012c0:	200010fb 	.word	0x200010fb
 80012c4:	200010fc 	.word	0x200010fc
 80012c8:	200010fd 	.word	0x200010fd
 80012cc:	200010fe 	.word	0x200010fe
 80012d0:	20000c70 	.word	0x20000c70
 80012d4:	20000c74 	.word	0x20000c74
 80012d8:	20000c58 	.word	0x20000c58

080012dc <Box_pickup>:
//박스 ?��?�� ?��?�� : ?��?��?��?�� ?���?, 리니?�� ?���?, ?��?��?��?�� ?��?��

uint8_t box_floor;  //?��?��?��?��?��
uint32_t downpart_step_floor;

void Box_pickup(uint8_t floor) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 80012e6:	213c      	movs	r1, #60	@ 0x3c
 80012e8:	4853      	ldr	r0, [pc, #332]	@ (8001438 <Box_pickup+0x15c>)
 80012ea:	f00b f823 	bl	800c334 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 80012ee:	213c      	movs	r1, #60	@ 0x3c
 80012f0:	4852      	ldr	r0, [pc, #328]	@ (800143c <Box_pickup+0x160>)
 80012f2:	f00b f81f 	bl	800c334 <HAL_TIM_Encoder_Stop>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80012f6:	2100      	movs	r1, #0
 80012f8:	4851      	ldr	r0, [pc, #324]	@ (8001440 <Box_pickup+0x164>)
 80012fa:	f00a fe77 	bl	800bfec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80012fe:	2104      	movs	r1, #4
 8001300:	484f      	ldr	r0, [pc, #316]	@ (8001440 <Box_pickup+0x164>)
 8001302:	f00a fe73 	bl	800bfec <HAL_TIM_PWM_Stop>


	TIM3->CCR1 = 0;
 8001306:	4b4f      	ldr	r3, [pc, #316]	@ (8001444 <Box_pickup+0x168>)
 8001308:	2200      	movs	r2, #0
 800130a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 0;
 800130c:	4b4d      	ldr	r3, [pc, #308]	@ (8001444 <Box_pickup+0x168>)
 800130e:	2200      	movs	r2, #0
 8001310:	639a      	str	r2, [r3, #56]	@ 0x38
	pickup_run = 1;
 8001312:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <Box_pickup+0x16c>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]

	box_floor = floor;
 8001318:	4a4c      	ldr	r2, [pc, #304]	@ (800144c <Box_pickup+0x170>)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	7013      	strb	r3, [r2, #0]

	if (floor == 1)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d104      	bne.n	800132e <Box_pickup+0x52>
		downpart_step_floor = downpart_step_1_floor;
 8001324:	4b4a      	ldr	r3, [pc, #296]	@ (8001450 <Box_pickup+0x174>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a4a      	ldr	r2, [pc, #296]	@ (8001454 <Box_pickup+0x178>)
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e00e      	b.n	800134c <Box_pickup+0x70>
	else if (floor == 2)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d104      	bne.n	800133e <Box_pickup+0x62>
		downpart_step_floor = downpart_step_2_floor;
 8001334:	4b48      	ldr	r3, [pc, #288]	@ (8001458 <Box_pickup+0x17c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a46      	ldr	r2, [pc, #280]	@ (8001454 <Box_pickup+0x178>)
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	e006      	b.n	800134c <Box_pickup+0x70>
	else if (floor == 3)
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b03      	cmp	r3, #3
 8001342:	d103      	bne.n	800134c <Box_pickup+0x70>
		downpart_step_floor = downpart_step_3_floor;
 8001344:	4b45      	ldr	r3, [pc, #276]	@ (800145c <Box_pickup+0x180>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a42      	ldr	r2, [pc, #264]	@ (8001454 <Box_pickup+0x178>)
 800134a:	6013      	str	r3, [r2, #0]

//	if (Manual_mode.box_pickup == TRUE) {
	if (box_pickup_flag == 0) {
 800134c:	4b44      	ldr	r3, [pc, #272]	@ (8001460 <Box_pickup+0x184>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d108      	bne.n	8001366 <Box_pickup+0x8a>

		down_part_DOWN_accel(downpart_step_floor);
 8001354:	4b3f      	ldr	r3, [pc, #252]	@ (8001454 <Box_pickup+0x178>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f005 ff2e 	bl	80071bc <down_part_DOWN_accel>
		box_pickup_flag = 1;
 8001360:	4b3f      	ldr	r3, [pc, #252]	@ (8001460 <Box_pickup+0x184>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
	}

	if ((Finish_flag.downpart_low == TRUE) && (box_pickup_flag == 1)) {
 8001366:	4b3f      	ldr	r3, [pc, #252]	@ (8001464 <Box_pickup+0x188>)
 8001368:	7a1b      	ldrb	r3, [r3, #8]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d114      	bne.n	8001398 <Box_pickup+0xbc>
 800136e:	4b3c      	ldr	r3, [pc, #240]	@ (8001460 <Box_pickup+0x184>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d110      	bne.n	8001398 <Box_pickup+0xbc>
		box_pickup_flag = 2;
 8001376:	4b3a      	ldr	r3, [pc, #232]	@ (8001460 <Box_pickup+0x184>)
 8001378:	2202      	movs	r2, #2
 800137a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(700 - 1);
 800137c:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001380:	f007 f882 	bl	8008488 <HAL_Delay>

		linear_motor_GO(go_time);
 8001384:	4b38      	ldr	r3, [pc, #224]	@ (8001468 <Box_pickup+0x18c>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eeb0 0a67 	vmov.f32	s0, s15
 800138e:	f7ff fe49 	bl	8001024 <linear_motor_GO>
		Finish_flag.downpart_low = FALSE;
 8001392:	4b34      	ldr	r3, [pc, #208]	@ (8001464 <Box_pickup+0x188>)
 8001394:	2200      	movs	r2, #0
 8001396:	721a      	strb	r2, [r3, #8]
	}
	if ((Finish_flag.linear_go == TRUE) && (box_pickup_flag == 2)) {
 8001398:	4b32      	ldr	r3, [pc, #200]	@ (8001464 <Box_pickup+0x188>)
 800139a:	7a5b      	ldrb	r3, [r3, #9]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d117      	bne.n	80013d0 <Box_pickup+0xf4>
 80013a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001460 <Box_pickup+0x184>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d113      	bne.n	80013d0 <Box_pickup+0xf4>
		box_pickup_flag = 3;
 80013a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001460 <Box_pickup+0x184>)
 80013aa:	2203      	movs	r2, #3
 80013ac:	701a      	strb	r2, [r3, #0]
		HAL_Delay(700 - 1);
 80013ae:	f240 20bb 	movw	r0, #699	@ 0x2bb
 80013b2:	f007 f869 	bl	8008488 <HAL_Delay>
		down_part_UP_accel(downpart_step_floor + 10000);
 80013b6:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <Box_pickup+0x178>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80013c0:	3310      	adds	r3, #16
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f005 fea1 	bl	800710c <down_part_UP_accel>
		Finish_flag.linear_go = FALSE;
 80013ca:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <Box_pickup+0x188>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	725a      	strb	r2, [r3, #9]
	}
	if ((Finish_flag.downpart_high == TRUE) && (box_pickup_flag == 3)) {
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <Box_pickup+0x188>)
 80013d2:	79db      	ldrb	r3, [r3, #7]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d112      	bne.n	80013fe <Box_pickup+0x122>
 80013d8:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <Box_pickup+0x184>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d10e      	bne.n	80013fe <Box_pickup+0x122>
		box_pickup_flag = 4;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <Box_pickup+0x184>)
 80013e2:	2204      	movs	r2, #4
 80013e4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(120 - 1);
 80013e6:	2077      	movs	r0, #119	@ 0x77
 80013e8:	f007 f84e 	bl	8008488 <HAL_Delay>

		down_part_DOWN(130, shaft_pulse_cycle);
 80013ec:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <Box_pickup+0x190>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	2082      	movs	r0, #130	@ 0x82
 80013f4:	f005 fe4c 	bl	8007090 <down_part_DOWN>
		Finish_flag.downpart_high = FALSE;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <Box_pickup+0x188>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	71da      	strb	r2, [r3, #7]
	}
	if(	Finish_flag.downpart_low == TRUE && box_pickup_flag ==4)
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <Box_pickup+0x188>)
 8001400:	7a1b      	ldrb	r3, [r3, #8]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d113      	bne.n	800142e <Box_pickup+0x152>
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <Box_pickup+0x184>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b04      	cmp	r3, #4
 800140c:	d10f      	bne.n	800142e <Box_pickup+0x152>
	{
		box_pickup_flag =5;
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <Box_pickup+0x184>)
 8001410:	2205      	movs	r2, #5
 8001412:	701a      	strb	r2, [r3, #0]
		HAL_Delay(700 - 1);
 8001414:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001418:	f007 f836 	bl	8008488 <HAL_Delay>
		Finish_flag.downpart_low = FALSE;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <Box_pickup+0x188>)
 800141e:	2200      	movs	r2, #0
 8001420:	721a      	strb	r2, [r3, #8]
		Manual_mode.box_pickup = FALSE;
 8001422:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <Box_pickup+0x194>)
 8001424:	2200      	movs	r2, #0
 8001426:	715a      	strb	r2, [r3, #5]
		pickup_run = 0;
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <Box_pickup+0x16c>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
	}
//	}
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000081c 	.word	0x2000081c
 800143c:	200008ac 	.word	0x200008ac
 8001440:	20000864 	.word	0x20000864
 8001444:	40000400 	.word	0x40000400
 8001448:	20000c70 	.word	0x20000c70
 800144c:	200010ff 	.word	0x200010ff
 8001450:	20000028 	.word	0x20000028
 8001454:	20001100 	.word	0x20001100
 8001458:	2000002c 	.word	0x2000002c
 800145c:	20000030 	.word	0x20000030
 8001460:	200010fd 	.word	0x200010fd
 8001464:	20000c60 	.word	0x20000c60
 8001468:	20000020 	.word	0x20000020
 800146c:	200004fa 	.word	0x200004fa
 8001470:	20000c58 	.word	0x20000c58

08001474 <Box_dropoff>:

//박스 ?��?�� ?��?�� : ?��?��?��?�� ?���?, 리니?�� ?���?, ?��?��?��?�� ?��?��
void Box_dropoff(uint8_t floor) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 800147e:	213c      	movs	r1, #60	@ 0x3c
 8001480:	4852      	ldr	r0, [pc, #328]	@ (80015cc <Box_dropoff+0x158>)
 8001482:	f00a ff57 	bl	800c334 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8001486:	213c      	movs	r1, #60	@ 0x3c
 8001488:	4851      	ldr	r0, [pc, #324]	@ (80015d0 <Box_dropoff+0x15c>)
 800148a:	f00a ff53 	bl	800c334 <HAL_TIM_Encoder_Stop>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800148e:	2100      	movs	r1, #0
 8001490:	4850      	ldr	r0, [pc, #320]	@ (80015d4 <Box_dropoff+0x160>)
 8001492:	f00a fdab 	bl	800bfec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001496:	2104      	movs	r1, #4
 8001498:	484e      	ldr	r0, [pc, #312]	@ (80015d4 <Box_dropoff+0x160>)
 800149a:	f00a fda7 	bl	800bfec <HAL_TIM_PWM_Stop>

	TIM3->CCR1 = 0;
 800149e:	4b4e      	ldr	r3, [pc, #312]	@ (80015d8 <Box_dropoff+0x164>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 0;
 80014a4:	4b4c      	ldr	r3, [pc, #304]	@ (80015d8 <Box_dropoff+0x164>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	639a      	str	r2, [r3, #56]	@ 0x38

	dropoff_run = 1;
 80014aa:	4b4c      	ldr	r3, [pc, #304]	@ (80015dc <Box_dropoff+0x168>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

	box_floor = floor;
 80014b0:	4a4b      	ldr	r2, [pc, #300]	@ (80015e0 <Box_dropoff+0x16c>)
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	7013      	strb	r3, [r2, #0]

	if (floor == 1)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d104      	bne.n	80014c6 <Box_dropoff+0x52>
		downpart_step_floor = downpart_step_1_floor;
 80014bc:	4b49      	ldr	r3, [pc, #292]	@ (80015e4 <Box_dropoff+0x170>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a49      	ldr	r2, [pc, #292]	@ (80015e8 <Box_dropoff+0x174>)
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e00e      	b.n	80014e4 <Box_dropoff+0x70>
	else if (floor == 2)
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d104      	bne.n	80014d6 <Box_dropoff+0x62>
		downpart_step_floor = downpart_step_2_floor;
 80014cc:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <Box_dropoff+0x178>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a45      	ldr	r2, [pc, #276]	@ (80015e8 <Box_dropoff+0x174>)
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e006      	b.n	80014e4 <Box_dropoff+0x70>
	else if (floor == 3)
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d103      	bne.n	80014e4 <Box_dropoff+0x70>
		downpart_step_floor = downpart_step_3_floor;
 80014dc:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <Box_dropoff+0x17c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a41      	ldr	r2, [pc, #260]	@ (80015e8 <Box_dropoff+0x174>)
 80014e2:	6013      	str	r3, [r2, #0]

	//if (Manual_mode.Box_dropoff == TRUE) {
	if (box_dropoff_flag == 0) {
 80014e4:	4b43      	ldr	r3, [pc, #268]	@ (80015f4 <Box_dropoff+0x180>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d108      	bne.n	80014fe <Box_dropoff+0x8a>
		down_part_DOWN_accel(downpart_step_floor);
 80014ec:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <Box_dropoff+0x174>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 fe62 	bl	80071bc <down_part_DOWN_accel>
		box_dropoff_flag = 1;
 80014f8:	4b3e      	ldr	r3, [pc, #248]	@ (80015f4 <Box_dropoff+0x180>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
	}

	if ((Finish_flag.downpart_low == TRUE) && (box_dropoff_flag == 1)) {
 80014fe:	4b3e      	ldr	r3, [pc, #248]	@ (80015f8 <Box_dropoff+0x184>)
 8001500:	7a1b      	ldrb	r3, [r3, #8]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d114      	bne.n	8001530 <Box_dropoff+0xbc>
 8001506:	4b3b      	ldr	r3, [pc, #236]	@ (80015f4 <Box_dropoff+0x180>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d110      	bne.n	8001530 <Box_dropoff+0xbc>
		box_dropoff_flag = 2;
 800150e:	4b39      	ldr	r3, [pc, #228]	@ (80015f4 <Box_dropoff+0x180>)
 8001510:	2202      	movs	r2, #2
 8001512:	701a      	strb	r2, [r3, #0]
		HAL_Delay(700 - 1);
 8001514:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001518:	f006 ffb6 	bl	8008488 <HAL_Delay>

		linear_motor_BACK(back_time);
 800151c:	4b37      	ldr	r3, [pc, #220]	@ (80015fc <Box_dropoff+0x188>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	f7ff fda3 	bl	8001070 <linear_motor_BACK>
		Finish_flag.downpart_low = FALSE;
 800152a:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <Box_dropoff+0x184>)
 800152c:	2200      	movs	r2, #0
 800152e:	721a      	strb	r2, [r3, #8]
	}
	if ((Finish_flag.linear_back == TRUE) && (box_dropoff_flag == 2)) {
 8001530:	4b31      	ldr	r3, [pc, #196]	@ (80015f8 <Box_dropoff+0x184>)
 8001532:	7a9b      	ldrb	r3, [r3, #10]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d116      	bne.n	8001566 <Box_dropoff+0xf2>
 8001538:	4b2e      	ldr	r3, [pc, #184]	@ (80015f4 <Box_dropoff+0x180>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d112      	bne.n	8001566 <Box_dropoff+0xf2>
		box_dropoff_flag = 3;
 8001540:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <Box_dropoff+0x180>)
 8001542:	2203      	movs	r2, #3
 8001544:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200 - 1);
 8001546:	20c7      	movs	r0, #199	@ 0xc7
 8001548:	f006 ff9e 	bl	8008488 <HAL_Delay>
		down_part_UP_accel(downpart_step_floor + 10000);
 800154c:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <Box_dropoff+0x174>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8001556:	3310      	adds	r3, #16
 8001558:	b29b      	uxth	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f005 fdd6 	bl	800710c <down_part_UP_accel>
		Finish_flag.linear_back = FALSE;
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <Box_dropoff+0x184>)
 8001562:	2200      	movs	r2, #0
 8001564:	729a      	strb	r2, [r3, #10]
	}
	if ((Finish_flag.downpart_high == TRUE) && (box_dropoff_flag == 3)) {
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <Box_dropoff+0x184>)
 8001568:	79db      	ldrb	r3, [r3, #7]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d112      	bne.n	8001594 <Box_dropoff+0x120>
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <Box_dropoff+0x180>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d10e      	bne.n	8001594 <Box_dropoff+0x120>
		box_dropoff_flag = 4;
 8001576:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <Box_dropoff+0x180>)
 8001578:	2204      	movs	r2, #4
 800157a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(120 - 1);
 800157c:	2077      	movs	r0, #119	@ 0x77
 800157e:	f006 ff83 	bl	8008488 <HAL_Delay>

		down_part_DOWN(130, shaft_pulse_cycle);
 8001582:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <Box_dropoff+0x18c>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	2082      	movs	r0, #130	@ 0x82
 800158a:	f005 fd81 	bl	8007090 <down_part_DOWN>
		Finish_flag.downpart_high = FALSE;
 800158e:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <Box_dropoff+0x184>)
 8001590:	2200      	movs	r2, #0
 8001592:	71da      	strb	r2, [r3, #7]
	}
	if(Finish_flag.downpart_low == TRUE && (box_dropoff_flag == 4))
 8001594:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <Box_dropoff+0x184>)
 8001596:	7a1b      	ldrb	r3, [r3, #8]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d113      	bne.n	80015c4 <Box_dropoff+0x150>
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <Box_dropoff+0x180>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d10f      	bne.n	80015c4 <Box_dropoff+0x150>
	{
		box_dropoff_flag =5;
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <Box_dropoff+0x180>)
 80015a6:	2205      	movs	r2, #5
 80015a8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(700 - 1);
 80015aa:	f240 20bb 	movw	r0, #699	@ 0x2bb
 80015ae:	f006 ff6b 	bl	8008488 <HAL_Delay>
		Finish_flag.downpart_low = FALSE;
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <Box_dropoff+0x184>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	721a      	strb	r2, [r3, #8]
		Manual_mode.Box_dropoff = FALSE;
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <Box_dropoff+0x190>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	719a      	strb	r2, [r3, #6]
		dropoff_run = 0;
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <Box_dropoff+0x168>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
	}


//	}
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000081c 	.word	0x2000081c
 80015d0:	200008ac 	.word	0x200008ac
 80015d4:	20000864 	.word	0x20000864
 80015d8:	40000400 	.word	0x40000400
 80015dc:	20000c74 	.word	0x20000c74
 80015e0:	200010ff 	.word	0x200010ff
 80015e4:	20000028 	.word	0x20000028
 80015e8:	20001100 	.word	0x20001100
 80015ec:	2000002c 	.word	0x2000002c
 80015f0:	20000030 	.word	0x20000030
 80015f4:	200010fe 	.word	0x200010fe
 80015f8:	20000c60 	.word	0x20000c60
 80015fc:	20000024 	.word	0x20000024
 8001600:	200004fa 	.word	0x200004fa
 8001604:	20000c58 	.word	0x20000c58

08001608 <Manual_Mode_Y1>:

//y�? 1�? ?���?,  볼스?���? ?���?  ?��?��?��?�� ?��?���?					                                     			1              2           3                         4              5                       6
void Manual_Mode_Y1(float row, float col, uint8_t floor_pick,
		uint8_t floor_drop) { //볼스?���? ?��?�� 먼�? >> y ?���?, ?��?��?��?�� ?���?, 리니?�� ?���?, ?��?��?��?�� ?��?��, y ?���?, ?��?��?��?�� ?���?, 리니?�� ?���? ,?��?��?��?�� ?��?��, 볼스?���? ?��?��
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001612:	edc7 0a02 	vstr	s1, [r7, #8]
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	4613      	mov	r3, r2
 800161e:	71bb      	strb	r3, [r7, #6]
//																	      -------------------------------        ------------------------------
	if (Manual_mode.target_1_2 == TRUE) {
 8001620:	4b48      	ldr	r3, [pc, #288]	@ (8001744 <Manual_Mode_Y1+0x13c>)
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	2b01      	cmp	r3, #1
 8001626:	f040 8088 	bne.w	800173a <Manual_Mode_Y1+0x132>

		if (target_1_2_flag == 0) {
 800162a:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <Manual_Mode_Y1+0x140>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <Manual_Mode_Y1+0x3e>

			z_axis_DOWN(400 * 6 * 2 + 500, ball_screw_pulse_cycle);
 8001632:	4b46      	ldr	r3, [pc, #280]	@ (800174c <Manual_Mode_Y1+0x144>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	f241 40b4 	movw	r0, #5300	@ 0x14b4
 800163c:	f005 fcae 	bl	8006f9c <z_axis_DOWN>
			target_1_2_flag = 1;
 8001640:	4b41      	ldr	r3, [pc, #260]	@ (8001748 <Manual_Mode_Y1+0x140>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
		}

		if ((Finish_flag.ball_low == TRUE) && (target_1_2_flag == 1)) {
 8001646:	4b42      	ldr	r3, [pc, #264]	@ (8001750 <Manual_Mode_Y1+0x148>)
 8001648:	799b      	ldrb	r3, [r3, #6]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d114      	bne.n	8001678 <Manual_Mode_Y1+0x70>
 800164e:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <Manual_Mode_Y1+0x140>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d110      	bne.n	8001678 <Manual_Mode_Y1+0x70>
			target_1_2_flag = 2;
 8001656:	4b3c      	ldr	r3, [pc, #240]	@ (8001748 <Manual_Mode_Y1+0x140>)
 8001658:	2202      	movs	r2, #2
 800165a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 800165c:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001660:	f006 ff12 	bl	8008488 <HAL_Delay>
			v_t_graph_DIR_GO_Y(targetS_Y_GO);  //?��?���?
 8001664:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <Manual_Mode_Y1+0x14c>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	f003 f8b7 	bl	80047e0 <v_t_graph_DIR_GO_Y>

			Finish_flag.ball_low = FALSE;
 8001672:	4b37      	ldr	r3, [pc, #220]	@ (8001750 <Manual_Mode_Y1+0x148>)
 8001674:	2200      	movs	r2, #0
 8001676:	719a      	strb	r2, [r3, #6]
		}
		if ((Finish_flag.y_go == TRUE) && (target_1_2_flag == 2)) {
 8001678:	4b35      	ldr	r3, [pc, #212]	@ (8001750 <Manual_Mode_Y1+0x148>)
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d113      	bne.n	80016a8 <Manual_Mode_Y1+0xa0>
 8001680:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <Manual_Mode_Y1+0x140>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d10f      	bne.n	80016a8 <Manual_Mode_Y1+0xa0>
			target_1_2_flag = 3;
 8001688:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <Manual_Mode_Y1+0x140>)
 800168a:	2203      	movs	r2, #3
 800168c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2100 - 1);
 800168e:	f640 0033 	movw	r0, #2099	@ 0x833
 8001692:	f006 fef9 	bl	8008488 <HAL_Delay>

			Manual_mode.box_pickup = TRUE;
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <Manual_Mode_Y1+0x13c>)
 8001698:	2201      	movs	r2, #1
 800169a:	715a      	strb	r2, [r3, #5]
			box_floor_test_pick = floor_pick;
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	4a2e      	ldr	r2, [pc, #184]	@ (8001758 <Manual_Mode_Y1+0x150>)
 80016a0:	6013      	str	r3, [r2, #0]
			Finish_flag.y_go = FALSE;
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <Manual_Mode_Y1+0x148>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	709a      	strb	r2, [r3, #2]
		}
		if ((Manual_mode.box_pickup == FALSE) && (target_1_2_flag == 3)) {
 80016a8:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <Manual_Mode_Y1+0x13c>)
 80016aa:	795b      	ldrb	r3, [r3, #5]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d111      	bne.n	80016d4 <Manual_Mode_Y1+0xcc>
 80016b0:	4b25      	ldr	r3, [pc, #148]	@ (8001748 <Manual_Mode_Y1+0x140>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d10d      	bne.n	80016d4 <Manual_Mode_Y1+0xcc>

			target_1_2_flag = 4;
 80016b8:	4b23      	ldr	r3, [pc, #140]	@ (8001748 <Manual_Mode_Y1+0x140>)
 80016ba:	2204      	movs	r2, #4
 80016bc:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 80016be:	f240 20bb 	movw	r0, #699	@ 0x2bb
 80016c2:	f006 fee1 	bl	8008488 <HAL_Delay>
			v_t_graph_DIR_BACK_Y(targetS_Y_BACK);
 80016c6:	4b25      	ldr	r3, [pc, #148]	@ (800175c <Manual_Mode_Y1+0x154>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	eeb0 0a67 	vmov.f32	s0, s15
 80016d0:	f003 f8d4 	bl	800487c <v_t_graph_DIR_BACK_Y>

		}
		if ((Finish_flag.y_back == TRUE) && (target_1_2_flag == 4)) {
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <Manual_Mode_Y1+0x148>)
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d113      	bne.n	8001704 <Manual_Mode_Y1+0xfc>
 80016dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <Manual_Mode_Y1+0x140>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d10f      	bne.n	8001704 <Manual_Mode_Y1+0xfc>
			target_1_2_flag = 5;
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <Manual_Mode_Y1+0x140>)
 80016e6:	2205      	movs	r2, #5
 80016e8:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 80016ea:	f240 20bb 	movw	r0, #699	@ 0x2bb
 80016ee:	f006 fecb 	bl	8008488 <HAL_Delay>
			//		down_part_DOWN_accel(downpart_step_1_floor);

			Manual_mode.Box_dropoff = TRUE;
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <Manual_Mode_Y1+0x13c>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	719a      	strb	r2, [r3, #6]
			box_floor_test_drop = floor_drop;
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	4a19      	ldr	r2, [pc, #100]	@ (8001760 <Manual_Mode_Y1+0x158>)
 80016fc:	6013      	str	r3, [r2, #0]

			Finish_flag.y_back = FALSE;
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <Manual_Mode_Y1+0x148>)
 8001700:	2200      	movs	r2, #0
 8001702:	70da      	strb	r2, [r3, #3]
		}

		if ((Manual_mode.Box_dropoff == FALSE) && (target_1_2_flag == 5)) {
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <Manual_Mode_Y1+0x13c>)
 8001706:	799b      	ldrb	r3, [r3, #6]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d116      	bne.n	800173a <Manual_Mode_Y1+0x132>
 800170c:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <Manual_Mode_Y1+0x140>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d112      	bne.n	800173a <Manual_Mode_Y1+0x132>

			target_1_2_flag = 6;
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <Manual_Mode_Y1+0x140>)
 8001716:	2206      	movs	r2, #6
 8001718:	701a      	strb	r2, [r3, #0]

			HAL_Delay(900 - 1);
 800171a:	f240 3083 	movw	r0, #899	@ 0x383
 800171e:	f006 feb3 	bl	8008488 <HAL_Delay>
			z_axis_UP(400 * 6 * 2, ball_screw_pulse_cycle);
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <Manual_Mode_Y1+0x144>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	f44f 5096 	mov.w	r0, #4800	@ 0x12c0
 800172c:	f005 fbfa 	bl	8006f24 <z_axis_UP>

			FALSE_Init();
 8001730:	f7ff fd74 	bl	800121c <FALSE_Init>
			Manual_mode.target_1_2 = FALSE;
 8001734:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <Manual_Mode_Y1+0x13c>)
 8001736:	2200      	movs	r2, #0
 8001738:	709a      	strb	r2, [r3, #2]
		}
	}
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000c58 	.word	0x20000c58
 8001748:	200010f8 	.word	0x200010f8
 800174c:	200004fe 	.word	0x200004fe
 8001750:	20000c60 	.word	0x20000c60
 8001754:	20000010 	.word	0x20000010
 8001758:	20000034 	.word	0x20000034
 800175c:	20000014 	.word	0x20000014
 8001760:	20000038 	.word	0x20000038

08001764 <Manual_Mode_X1>:

//(2,1)  (3,1)    ?��기는 볼스?���? ?��?��?��?��                         //1       2          3            4       5        6          7        8
void Manual_Mode_X1(float row, float col, uint8_t floor_pick,
		uint8_t floor_drop) { // x?���? , ?��?��?��?�� ?���?, 리니?�� ?���?, ?��?��?��?�� ?��?��, x?���?, ?��?��?��?�� ?���?, 리니?�� ?���?, ?��?��?��?�� ?��?�� ?��
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	ed87 0a03 	vstr	s0, [r7, #12]
 800176e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
	//				                 -----------------------------          ----------------------------
	if (Manual_mode.target_2_1 == TRUE) {
 800177c:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <Manual_Mode_X1+0xf0>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d163      	bne.n	800184c <Manual_Mode_X1+0xe8>

		if (target_2_1_flag == 0) {
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <Manual_Mode_X1+0xf4>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <Manual_Mode_X1+0x3c>
			v_t_graph_DIR_GO_X(targetS_X_GO);  //?��?���?
 800178c:	4b33      	ldr	r3, [pc, #204]	@ (800185c <Manual_Mode_X1+0xf8>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	f002 ff97 	bl	80046c8 <v_t_graph_DIR_GO_X>

			target_2_1_flag = 1;
 800179a:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <Manual_Mode_X1+0xf4>)
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
		}

		if ((Finish_flag.x_go == TRUE) && (target_2_1_flag == 1)) {
 80017a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001860 <Manual_Mode_X1+0xfc>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d113      	bne.n	80017d0 <Manual_Mode_X1+0x6c>
 80017a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <Manual_Mode_X1+0xf4>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d10f      	bne.n	80017d0 <Manual_Mode_X1+0x6c>
			target_2_1_flag = 2;
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <Manual_Mode_X1+0xf4>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2100 - 1);
 80017b6:	f640 0033 	movw	r0, #2099	@ 0x833
 80017ba:	f006 fe65 	bl	8008488 <HAL_Delay>

			Manual_mode.box_pickup = TRUE;
 80017be:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <Manual_Mode_X1+0xf0>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	715a      	strb	r2, [r3, #5]
			box_floor_test_pick = floor_pick;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	4a27      	ldr	r2, [pc, #156]	@ (8001864 <Manual_Mode_X1+0x100>)
 80017c8:	6013      	str	r3, [r2, #0]
			Finish_flag.x_go = FALSE;
 80017ca:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <Manual_Mode_X1+0xfc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]

		}

		if ((Manual_mode.box_pickup == FALSE) && (target_2_1_flag == 2)) {
 80017d0:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <Manual_Mode_X1+0xf0>)
 80017d2:	795b      	ldrb	r3, [r3, #5]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d111      	bne.n	80017fc <Manual_Mode_X1+0x98>
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <Manual_Mode_X1+0xf4>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d10d      	bne.n	80017fc <Manual_Mode_X1+0x98>

			target_2_1_flag = 3;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <Manual_Mode_X1+0xf4>)
 80017e2:	2203      	movs	r2, #3
 80017e4:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 80017e6:	f240 20bb 	movw	r0, #699	@ 0x2bb
 80017ea:	f006 fe4d 	bl	8008488 <HAL_Delay>
			v_t_graph_DIR_BACK_X(targetS_X_BACK);
 80017ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <Manual_Mode_X1+0x104>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	f002 ffac 	bl	8004754 <v_t_graph_DIR_BACK_X>

		}
		if ((Finish_flag.x_back == TRUE) && (target_2_1_flag == 3)) {
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <Manual_Mode_X1+0xfc>)
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d113      	bne.n	800182c <Manual_Mode_X1+0xc8>
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <Manual_Mode_X1+0xf4>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d10f      	bne.n	800182c <Manual_Mode_X1+0xc8>
			target_2_1_flag = 4;
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <Manual_Mode_X1+0xf4>)
 800180e:	2204      	movs	r2, #4
 8001810:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001812:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001816:	f006 fe37 	bl	8008488 <HAL_Delay>

			Manual_mode.Box_dropoff = TRUE;
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <Manual_Mode_X1+0xf0>)
 800181c:	2201      	movs	r2, #1
 800181e:	719a      	strb	r2, [r3, #6]
			box_floor_test_drop = floor_drop;
 8001820:	79bb      	ldrb	r3, [r7, #6]
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <Manual_Mode_X1+0x108>)
 8001824:	6013      	str	r3, [r2, #0]

			Finish_flag.x_back = FALSE;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <Manual_Mode_X1+0xfc>)
 8001828:	2200      	movs	r2, #0
 800182a:	705a      	strb	r2, [r3, #1]
		}

		if ((Manual_mode.Box_dropoff == FALSE) && (target_2_1_flag == 4)) {
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <Manual_Mode_X1+0xf0>)
 800182e:	799b      	ldrb	r3, [r3, #6]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10b      	bne.n	800184c <Manual_Mode_X1+0xe8>
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <Manual_Mode_X1+0xf4>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d107      	bne.n	800184c <Manual_Mode_X1+0xe8>
			target_2_1_flag = 5;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <Manual_Mode_X1+0xf4>)
 800183e:	2205      	movs	r2, #5
 8001840:	701a      	strb	r2, [r3, #0]

			FALSE_Init();
 8001842:	f7ff fceb 	bl	800121c <FALSE_Init>
			Manual_mode.target_2_1 = FALSE;
 8001846:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <Manual_Mode_X1+0xf0>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000c58 	.word	0x20000c58
 8001858:	200010f9 	.word	0x200010f9
 800185c:	20000008 	.word	0x20000008
 8001860:	20000c60 	.word	0x20000c60
 8001864:	20000034 	.word	0x20000034
 8001868:	2000000c 	.word	0x2000000c
 800186c:	20000038 	.word	0x20000038

08001870 <Manual_Mode_X2>:

//			 1                    2                   3              4
void Manual_Mode_X2(float row, float col, uint8_t floor_pick,
		uint8_t floor_drop) { // x?���? , ?��?��?��?�� ?���?, 리니?�� ?���?, ?��?��?��?�� ?��?��, x?���?, ?��?��?��?�� ?���?, 리니?�� ?���?, ?��?��?��?�� ?��?�� ?��
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	ed87 0a03 	vstr	s0, [r7, #12]
 800187a:	edc7 0a02 	vstr	s1, [r7, #8]
 800187e:	4603      	mov	r3, r0
 8001880:	460a      	mov	r2, r1
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	4613      	mov	r3, r2
 8001886:	71bb      	strb	r3, [r7, #6]
	//				                                                   -----------------------------          ----------------------------
	if (Manual_mode.target_3_1 == TRUE) {
 8001888:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <Manual_Mode_X2+0xf0>)
 800188a:	785b      	ldrb	r3, [r3, #1]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d163      	bne.n	8001958 <Manual_Mode_X2+0xe8>

		if (target_3_1_flag == 0) {
 8001890:	4b34      	ldr	r3, [pc, #208]	@ (8001964 <Manual_Mode_X2+0xf4>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <Manual_Mode_X2+0x3c>
			v_t_graph_DIR_GO_X(targetS_X_GO2);  //?��?���?
 8001898:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <Manual_Mode_X2+0xf8>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	eeb0 0a67 	vmov.f32	s0, s15
 80018a2:	f002 ff11 	bl	80046c8 <v_t_graph_DIR_GO_X>

			target_3_1_flag = 1;
 80018a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <Manual_Mode_X2+0xf4>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
		}

		if ((Finish_flag.x_go == TRUE) && (target_3_1_flag == 1)) {
 80018ac:	4b2f      	ldr	r3, [pc, #188]	@ (800196c <Manual_Mode_X2+0xfc>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d113      	bne.n	80018dc <Manual_Mode_X2+0x6c>
 80018b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <Manual_Mode_X2+0xf4>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d10f      	bne.n	80018dc <Manual_Mode_X2+0x6c>
			target_3_1_flag = 2;
 80018bc:	4b29      	ldr	r3, [pc, #164]	@ (8001964 <Manual_Mode_X2+0xf4>)
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2100 - 1);
 80018c2:	f640 0033 	movw	r0, #2099	@ 0x833
 80018c6:	f006 fddf 	bl	8008488 <HAL_Delay>

			Manual_mode.box_pickup = TRUE;
 80018ca:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <Manual_Mode_X2+0xf0>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	715a      	strb	r2, [r3, #5]
			box_floor_test_pick = floor_pick;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	4a27      	ldr	r2, [pc, #156]	@ (8001970 <Manual_Mode_X2+0x100>)
 80018d4:	6013      	str	r3, [r2, #0]
			Finish_flag.x_go = FALSE;
 80018d6:	4b25      	ldr	r3, [pc, #148]	@ (800196c <Manual_Mode_X2+0xfc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]

		}

		if ((Manual_mode.box_pickup == FALSE) && (target_3_1_flag == 2)) {
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <Manual_Mode_X2+0xf0>)
 80018de:	795b      	ldrb	r3, [r3, #5]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d111      	bne.n	8001908 <Manual_Mode_X2+0x98>
 80018e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <Manual_Mode_X2+0xf4>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d10d      	bne.n	8001908 <Manual_Mode_X2+0x98>

			target_3_1_flag = 3;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <Manual_Mode_X2+0xf4>)
 80018ee:	2203      	movs	r2, #3
 80018f0:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 80018f2:	f240 20bb 	movw	r0, #699	@ 0x2bb
 80018f6:	f006 fdc7 	bl	8008488 <HAL_Delay>
			v_t_graph_DIR_BACK_X(targetS_X_BACK2);
 80018fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <Manual_Mode_X2+0x104>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	eeb0 0a67 	vmov.f32	s0, s15
 8001904:	f002 ff26 	bl	8004754 <v_t_graph_DIR_BACK_X>

		}
		if ((Finish_flag.x_back == TRUE) && (target_3_1_flag == 3)) {
 8001908:	4b18      	ldr	r3, [pc, #96]	@ (800196c <Manual_Mode_X2+0xfc>)
 800190a:	785b      	ldrb	r3, [r3, #1]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d113      	bne.n	8001938 <Manual_Mode_X2+0xc8>
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <Manual_Mode_X2+0xf4>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d10f      	bne.n	8001938 <Manual_Mode_X2+0xc8>
			target_3_1_flag = 4;
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <Manual_Mode_X2+0xf4>)
 800191a:	2204      	movs	r2, #4
 800191c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 800191e:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001922:	f006 fdb1 	bl	8008488 <HAL_Delay>

			Manual_mode.Box_dropoff = TRUE;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <Manual_Mode_X2+0xf0>)
 8001928:	2201      	movs	r2, #1
 800192a:	719a      	strb	r2, [r3, #6]
			box_floor_test_drop = floor_drop;
 800192c:	79bb      	ldrb	r3, [r7, #6]
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <Manual_Mode_X2+0x108>)
 8001930:	6013      	str	r3, [r2, #0]

			Finish_flag.x_back = FALSE;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <Manual_Mode_X2+0xfc>)
 8001934:	2200      	movs	r2, #0
 8001936:	705a      	strb	r2, [r3, #1]
		}

		if ((Manual_mode.Box_dropoff == FALSE) && (target_3_1_flag == 4)) {
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <Manual_Mode_X2+0xf0>)
 800193a:	799b      	ldrb	r3, [r3, #6]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10b      	bne.n	8001958 <Manual_Mode_X2+0xe8>
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <Manual_Mode_X2+0xf4>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d107      	bne.n	8001958 <Manual_Mode_X2+0xe8>
			target_3_1_flag = 5;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <Manual_Mode_X2+0xf4>)
 800194a:	2205      	movs	r2, #5
 800194c:	701a      	strb	r2, [r3, #0]

			FALSE_Init();
 800194e:	f7ff fc65 	bl	800121c <FALSE_Init>
			Manual_mode.target_3_1 = FALSE;
 8001952:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <Manual_Mode_X2+0xf0>)
 8001954:	2200      	movs	r2, #0
 8001956:	705a      	strb	r2, [r3, #1]
		}
	}
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000c58 	.word	0x20000c58
 8001964:	200010fa 	.word	0x200010fa
 8001968:	20000018 	.word	0x20000018
 800196c:	20000c60 	.word	0x20000c60
 8001970:	20000034 	.word	0x20000034
 8001974:	2000001c 	.word	0x2000001c
 8001978:	20000038 	.word	0x20000038

0800197c <Manual_Mode_X1Y1>:
//?��기서 ?��?�� ?��?�� 추�?
//x 1�? ?���? , 볼스?���? ?��?��, y�? ?���? , ?��?��?��?�� ?���?, 리니?�� ?���?, ?��?��?��?�� ?��?��, y?���?, 볼스?���? ?��, x?���?, ?��?��?��?�� ?��?��, 리니?�� ?���?, ?��?��?��?�� ?��?��
//                               ------------------------------                      --------------------------------
// 1              2         3                  4                    5       6     7          8
void Manual_Mode_X1Y1(float row, float col, uint8_t floor_pick,
		uint8_t floor_drop) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	ed87 0a03 	vstr	s0, [r7, #12]
 8001986:	edc7 0a02 	vstr	s1, [r7, #8]
 800198a:	4603      	mov	r3, r0
 800198c:	460a      	mov	r2, r1
 800198e:	71fb      	strb	r3, [r7, #7]
 8001990:	4613      	mov	r3, r2
 8001992:	71bb      	strb	r3, [r7, #6]

	if (Manual_mode.target_2_2 == TRUE) {
 8001994:	4b6a      	ldr	r3, [pc, #424]	@ (8001b40 <Manual_Mode_X1Y1+0x1c4>)
 8001996:	78db      	ldrb	r3, [r3, #3]
 8001998:	2b01      	cmp	r3, #1
 800199a:	f040 80cc 	bne.w	8001b36 <Manual_Mode_X1Y1+0x1ba>

		if (target_2_2_flag == 0) {
 800199e:	4b69      	ldr	r3, [pc, #420]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <Manual_Mode_X1Y1+0x3e>
			v_t_graph_DIR_GO_X(targetS_X_GO);  // x ?��?���?
 80019a6:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <Manual_Mode_X1Y1+0x1cc>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	eeb0 0a67 	vmov.f32	s0, s15
 80019b0:	f002 fe8a 	bl	80046c8 <v_t_graph_DIR_GO_X>

			target_2_2_flag = 1;
 80019b4:	4b63      	ldr	r3, [pc, #396]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
		}

		if ((Finish_flag.x_go == TRUE) && (target_2_2_flag == 1)) {
 80019ba:	4b64      	ldr	r3, [pc, #400]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d114      	bne.n	80019ec <Manual_Mode_X1Y1+0x70>
 80019c2:	4b60      	ldr	r3, [pc, #384]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d110      	bne.n	80019ec <Manual_Mode_X1Y1+0x70>
			target_2_2_flag = 2;
 80019ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 80019d0:	f240 20bb 	movw	r0, #699	@ 0x2bb
 80019d4:	f006 fd58 	bl	8008488 <HAL_Delay>

			z_axis_DOWN(400 * 6 * 2 + 500, ball_screw_pulse_cycle); //볼스?���? 2�? ?��?��
 80019d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001b50 <Manual_Mode_X1Y1+0x1d4>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f241 40b4 	movw	r0, #5300	@ 0x14b4
 80019e2:	f005 fadb 	bl	8006f9c <z_axis_DOWN>

			Finish_flag.x_go = FALSE;
 80019e6:	4b59      	ldr	r3, [pc, #356]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
		}
		if ((Finish_flag.ball_low == TRUE) && (target_2_2_flag == 2)) {
 80019ec:	4b57      	ldr	r3, [pc, #348]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 80019ee:	799b      	ldrb	r3, [r3, #6]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d114      	bne.n	8001a1e <Manual_Mode_X1Y1+0xa2>
 80019f4:	4b53      	ldr	r3, [pc, #332]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d110      	bne.n	8001a1e <Manual_Mode_X1Y1+0xa2>
			target_2_2_flag = 3;
 80019fc:	4b51      	ldr	r3, [pc, #324]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 80019fe:	2203      	movs	r2, #3
 8001a00:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001a02:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001a06:	f006 fd3f 	bl	8008488 <HAL_Delay>
			v_t_graph_DIR_GO_Y(targetS_Y_GO); //					// y�? ?���?
 8001a0a:	4b52      	ldr	r3, [pc, #328]	@ (8001b54 <Manual_Mode_X1Y1+0x1d8>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eeb0 0a67 	vmov.f32	s0, s15
 8001a14:	f002 fee4 	bl	80047e0 <v_t_graph_DIR_GO_Y>
			Finish_flag.ball_low = FALSE;
 8001a18:	4b4c      	ldr	r3, [pc, #304]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	719a      	strb	r2, [r3, #6]
		}
		if ((Finish_flag.y_go == TRUE) && (target_2_2_flag == 3)) {
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 8001a20:	789b      	ldrb	r3, [r3, #2]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d113      	bne.n	8001a4e <Manual_Mode_X1Y1+0xd2>
 8001a26:	4b47      	ldr	r3, [pc, #284]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d10f      	bne.n	8001a4e <Manual_Mode_X1Y1+0xd2>
			target_2_2_flag = 4;
 8001a2e:	4b45      	ldr	r3, [pc, #276]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001a30:	2204      	movs	r2, #4
 8001a32:	701a      	strb	r2, [r3, #0]
			HAL_Delay(3000 - 1);
 8001a34:	f640 30b7 	movw	r0, #2999	@ 0xbb7
 8001a38:	f006 fd26 	bl	8008488 <HAL_Delay>

			Manual_mode.box_pickup = TRUE;
 8001a3c:	4b40      	ldr	r3, [pc, #256]	@ (8001b40 <Manual_Mode_X1Y1+0x1c4>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	715a      	strb	r2, [r3, #5]
			box_floor_test_pick = floor_pick;
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4a44      	ldr	r2, [pc, #272]	@ (8001b58 <Manual_Mode_X1Y1+0x1dc>)
 8001a46:	6013      	str	r3, [r2, #0]

			Finish_flag.y_go = FALSE;
 8001a48:	4b40      	ldr	r3, [pc, #256]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	709a      	strb	r2, [r3, #2]
		}
		if ((Manual_mode.box_pickup == FALSE) && (target_2_2_flag == 4)) {
 8001a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <Manual_Mode_X1Y1+0x1c4>)
 8001a50:	795b      	ldrb	r3, [r3, #5]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d111      	bne.n	8001a7a <Manual_Mode_X1Y1+0xfe>
 8001a56:	4b3b      	ldr	r3, [pc, #236]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d10d      	bne.n	8001a7a <Manual_Mode_X1Y1+0xfe>
			target_2_2_flag = 5;
 8001a5e:	4b39      	ldr	r3, [pc, #228]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001a60:	2205      	movs	r2, #5
 8001a62:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001a64:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001a68:	f006 fd0e 	bl	8008488 <HAL_Delay>
			v_t_graph_DIR_BACK_Y(targetS_Y_BACK); //	y?���?
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <Manual_Mode_X1Y1+0x1e0>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eeb0 0a67 	vmov.f32	s0, s15
 8001a76:	f002 ff01 	bl	800487c <v_t_graph_DIR_BACK_Y>

			//Finish_flag.y_back = FALSE;
		}
		if ((Finish_flag.y_back == TRUE) && (target_2_2_flag == 5)) {
 8001a7a:	4b34      	ldr	r3, [pc, #208]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d114      	bne.n	8001aac <Manual_Mode_X1Y1+0x130>
 8001a82:	4b30      	ldr	r3, [pc, #192]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d110      	bne.n	8001aac <Manual_Mode_X1Y1+0x130>
			target_2_2_flag = 6;
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001a8c:	2206      	movs	r2, #6
 8001a8e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001a90:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001a94:	f006 fcf8 	bl	8008488 <HAL_Delay>

			z_axis_UP(400 * 6 * 2, ball_screw_pulse_cycle); //		    볼스?���? 2�? ?��
 8001a98:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <Manual_Mode_X1Y1+0x1d4>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 5096 	mov.w	r0, #4800	@ 0x12c0
 8001aa2:	f005 fa3f 	bl	8006f24 <z_axis_UP>

			Finish_flag.y_back = FALSE;
 8001aa6:	4b29      	ldr	r3, [pc, #164]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	70da      	strb	r2, [r3, #3]
		}
		if ((Finish_flag.ball_high == TRUE) && (target_2_2_flag == 6)) {
 8001aac:	4b27      	ldr	r3, [pc, #156]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 8001aae:	791b      	ldrb	r3, [r3, #4]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d114      	bne.n	8001ade <Manual_Mode_X1Y1+0x162>
 8001ab4:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b06      	cmp	r3, #6
 8001aba:	d110      	bne.n	8001ade <Manual_Mode_X1Y1+0x162>
			target_2_2_flag = 7;
 8001abc:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001abe:	2207      	movs	r2, #7
 8001ac0:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001ac2:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001ac6:	f006 fcdf 	bl	8008488 <HAL_Delay>
			v_t_graph_DIR_BACK_X(targetS_X_BACK); //
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <Manual_Mode_X1Y1+0x1e4>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	f002 fe3e 	bl	8004754 <v_t_graph_DIR_BACK_X>
			Finish_flag.ball_high = FALSE;
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	711a      	strb	r2, [r3, #4]
		}
		if ((Finish_flag.x_back == TRUE) && (target_2_2_flag == 7)) {
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 8001ae0:	785b      	ldrb	r3, [r3, #1]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d113      	bne.n	8001b0e <Manual_Mode_X1Y1+0x192>
 8001ae6:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b07      	cmp	r3, #7
 8001aec:	d10f      	bne.n	8001b0e <Manual_Mode_X1Y1+0x192>
			target_2_2_flag = 8;
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001af0:	2208      	movs	r2, #8
 8001af2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001af4:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001af8:	f006 fcc6 	bl	8008488 <HAL_Delay>

			Manual_mode.Box_dropoff = TRUE;
 8001afc:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <Manual_Mode_X1Y1+0x1c4>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	719a      	strb	r2, [r3, #6]
			box_floor_test_drop = floor_drop;
 8001b02:	79bb      	ldrb	r3, [r7, #6]
 8001b04:	4a17      	ldr	r2, [pc, #92]	@ (8001b64 <Manual_Mode_X1Y1+0x1e8>)
 8001b06:	6013      	str	r3, [r2, #0]

			Finish_flag.x_back = FALSE;
 8001b08:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <Manual_Mode_X1Y1+0x1d0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	705a      	strb	r2, [r3, #1]
		}
		if ((Manual_mode.Box_dropoff == FALSE) && (target_2_2_flag == 8)) {
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <Manual_Mode_X1Y1+0x1c4>)
 8001b10:	799b      	ldrb	r3, [r3, #6]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <Manual_Mode_X1Y1+0x1ba>
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d10b      	bne.n	8001b36 <Manual_Mode_X1Y1+0x1ba>
			target_2_2_flag = 9;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <Manual_Mode_X1Y1+0x1c8>)
 8001b20:	2209      	movs	r2, #9
 8001b22:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001b24:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001b28:	f006 fcae 	bl	8008488 <HAL_Delay>

			FALSE_Init();
 8001b2c:	f7ff fb76 	bl	800121c <FALSE_Init>
			Manual_mode.target_2_2 = FALSE;
 8001b30:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <Manual_Mode_X1Y1+0x1c4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	70da      	strb	r2, [r3, #3]
		}

	}
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000c58 	.word	0x20000c58
 8001b44:	200010fb 	.word	0x200010fb
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000c60 	.word	0x20000c60
 8001b50:	200004fe 	.word	0x200004fe
 8001b54:	20000010 	.word	0x20000010
 8001b58:	20000034 	.word	0x20000034
 8001b5c:	20000014 	.word	0x20000014
 8001b60:	2000000c 	.word	0x2000000c
 8001b64:	20000038 	.word	0x20000038

08001b68 <Manual_Mode_X2Y1>:

//x 1�? ?���? , 볼스?���? ?��?��, y�? ?���? , ?��?��?��?�� ?���?, 리니?�� ?���?, ?��?��?��?�� ?��?��, y?���?, 볼스?���? ?��, x?���?, ?��?��?��?�� ?��?��, 리니?�� ?���?, ?��?��?��?�� ?��?��
//                               ------------------------------                      --------------------------------
// 1              2         3                  4                    5       6     7          8
void Manual_Mode_X2Y1(float row, float col, uint8_t floor_pick,
		uint8_t floor_drop) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b72:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b76:	4603      	mov	r3, r0
 8001b78:	460a      	mov	r2, r1
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	71bb      	strb	r3, [r7, #6]

	if (Manual_mode.target_3_2 == TRUE) {
 8001b80:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <Manual_Mode_X2Y1+0x1c4>)
 8001b82:	791b      	ldrb	r3, [r3, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 80cc 	bne.w	8001d22 <Manual_Mode_X2Y1+0x1ba>

		if (target_3_2_flag == 0) {
 8001b8a:	4b69      	ldr	r3, [pc, #420]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <Manual_Mode_X2Y1+0x3e>
			v_t_graph_DIR_GO_X(targetS_X_GO2);  // x 2�? ?��?���?
 8001b92:	4b68      	ldr	r3, [pc, #416]	@ (8001d34 <Manual_Mode_X2Y1+0x1cc>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9c:	f002 fd94 	bl	80046c8 <v_t_graph_DIR_GO_X>

			target_3_2_flag = 1;
 8001ba0:	4b63      	ldr	r3, [pc, #396]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
		}

		if ((Finish_flag.x_go == TRUE) && (target_3_2_flag == 1)) {
 8001ba6:	4b64      	ldr	r3, [pc, #400]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d114      	bne.n	8001bd8 <Manual_Mode_X2Y1+0x70>
 8001bae:	4b60      	ldr	r3, [pc, #384]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d110      	bne.n	8001bd8 <Manual_Mode_X2Y1+0x70>
			target_3_2_flag = 2;
 8001bb6:	4b5e      	ldr	r3, [pc, #376]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001bbc:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001bc0:	f006 fc62 	bl	8008488 <HAL_Delay>

			z_axis_DOWN(400 * 6 * 2 + 500, ball_screw_pulse_cycle); //볼스?���? 2�? ?��?��
 8001bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8001d3c <Manual_Mode_X2Y1+0x1d4>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f241 40b4 	movw	r0, #5300	@ 0x14b4
 8001bce:	f005 f9e5 	bl	8006f9c <z_axis_DOWN>

			Finish_flag.x_go = FALSE;
 8001bd2:	4b59      	ldr	r3, [pc, #356]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
		}
		if ((Finish_flag.ball_low == TRUE) && (target_3_2_flag == 2)) {
 8001bd8:	4b57      	ldr	r3, [pc, #348]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001bda:	799b      	ldrb	r3, [r3, #6]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d114      	bne.n	8001c0a <Manual_Mode_X2Y1+0xa2>
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d110      	bne.n	8001c0a <Manual_Mode_X2Y1+0xa2>
			target_3_2_flag = 3;
 8001be8:	4b51      	ldr	r3, [pc, #324]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001bea:	2203      	movs	r2, #3
 8001bec:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001bee:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001bf2:	f006 fc49 	bl	8008488 <HAL_Delay>
			v_t_graph_DIR_GO_Y(targetS_Y_GO); //					// y�? ?���?
 8001bf6:	4b52      	ldr	r3, [pc, #328]	@ (8001d40 <Manual_Mode_X2Y1+0x1d8>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	f002 fdee 	bl	80047e0 <v_t_graph_DIR_GO_Y>
			Finish_flag.ball_low = FALSE;
 8001c04:	4b4c      	ldr	r3, [pc, #304]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	719a      	strb	r2, [r3, #6]
		}
		if ((Finish_flag.y_go == TRUE) && (target_3_2_flag == 3)) {
 8001c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001c0c:	789b      	ldrb	r3, [r3, #2]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d113      	bne.n	8001c3a <Manual_Mode_X2Y1+0xd2>
 8001c12:	4b47      	ldr	r3, [pc, #284]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d10f      	bne.n	8001c3a <Manual_Mode_X2Y1+0xd2>
			target_3_2_flag = 4;
 8001c1a:	4b45      	ldr	r3, [pc, #276]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2100 - 1);
 8001c20:	f640 0033 	movw	r0, #2099	@ 0x833
 8001c24:	f006 fc30 	bl	8008488 <HAL_Delay>

			Manual_mode.box_pickup = TRUE;
 8001c28:	4b40      	ldr	r3, [pc, #256]	@ (8001d2c <Manual_Mode_X2Y1+0x1c4>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	715a      	strb	r2, [r3, #5]

			box_floor_test_pick = floor_pick;
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4a44      	ldr	r2, [pc, #272]	@ (8001d44 <Manual_Mode_X2Y1+0x1dc>)
 8001c32:	6013      	str	r3, [r2, #0]

			Finish_flag.y_go = FALSE;
 8001c34:	4b40      	ldr	r3, [pc, #256]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	709a      	strb	r2, [r3, #2]
		}
		if ((Manual_mode.box_pickup == FALSE) && (target_3_2_flag == 4)) {
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <Manual_Mode_X2Y1+0x1c4>)
 8001c3c:	795b      	ldrb	r3, [r3, #5]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d111      	bne.n	8001c66 <Manual_Mode_X2Y1+0xfe>
 8001c42:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d10d      	bne.n	8001c66 <Manual_Mode_X2Y1+0xfe>
			target_3_2_flag = 5;
 8001c4a:	4b39      	ldr	r3, [pc, #228]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001c4c:	2205      	movs	r2, #5
 8001c4e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001c50:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001c54:	f006 fc18 	bl	8008488 <HAL_Delay>
			v_t_graph_DIR_BACK_Y(targetS_Y_BACK); //	y?���?
 8001c58:	4b3b      	ldr	r3, [pc, #236]	@ (8001d48 <Manual_Mode_X2Y1+0x1e0>)
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c62:	f002 fe0b 	bl	800487c <v_t_graph_DIR_BACK_Y>

			//Finish_flag.y_back = FALSE;
		}
		if ((Finish_flag.y_back == TRUE) && (target_3_2_flag == 5)) {
 8001c66:	4b34      	ldr	r3, [pc, #208]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001c68:	78db      	ldrb	r3, [r3, #3]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d114      	bne.n	8001c98 <Manual_Mode_X2Y1+0x130>
 8001c6e:	4b30      	ldr	r3, [pc, #192]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d110      	bne.n	8001c98 <Manual_Mode_X2Y1+0x130>
			target_3_2_flag = 6;
 8001c76:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001c78:	2206      	movs	r2, #6
 8001c7a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001c7c:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001c80:	f006 fc02 	bl	8008488 <HAL_Delay>

			z_axis_UP(400 * 6 * 2, ball_screw_pulse_cycle); //		    볼스?���? 2�? ?��
 8001c84:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <Manual_Mode_X2Y1+0x1d4>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 5096 	mov.w	r0, #4800	@ 0x12c0
 8001c8e:	f005 f949 	bl	8006f24 <z_axis_UP>

			Finish_flag.y_back = FALSE;
 8001c92:	4b29      	ldr	r3, [pc, #164]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	70da      	strb	r2, [r3, #3]
		}
		if ((Finish_flag.ball_high == TRUE) && (target_3_2_flag == 6)) {
 8001c98:	4b27      	ldr	r3, [pc, #156]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d114      	bne.n	8001cca <Manual_Mode_X2Y1+0x162>
 8001ca0:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b06      	cmp	r3, #6
 8001ca6:	d110      	bne.n	8001cca <Manual_Mode_X2Y1+0x162>
			target_3_2_flag = 7;
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001caa:	2207      	movs	r2, #7
 8001cac:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001cae:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001cb2:	f006 fbe9 	bl	8008488 <HAL_Delay>
			v_t_graph_DIR_BACK_X(targetS_X_BACK2); //
 8001cb6:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <Manual_Mode_X2Y1+0x1e4>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc0:	f002 fd48 	bl	8004754 <v_t_graph_DIR_BACK_X>
			Finish_flag.ball_high = FALSE;
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	711a      	strb	r2, [r3, #4]
		}
		if ((Finish_flag.x_back == TRUE) && (target_3_2_flag == 7)) {
 8001cca:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d113      	bne.n	8001cfa <Manual_Mode_X2Y1+0x192>
 8001cd2:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b07      	cmp	r3, #7
 8001cd8:	d10f      	bne.n	8001cfa <Manual_Mode_X2Y1+0x192>
			target_3_2_flag = 8;
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001cdc:	2208      	movs	r2, #8
 8001cde:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001ce0:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001ce4:	f006 fbd0 	bl	8008488 <HAL_Delay>

			Manual_mode.Box_dropoff = TRUE;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <Manual_Mode_X2Y1+0x1c4>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	719a      	strb	r2, [r3, #6]
			box_floor_test_drop = floor_drop;
 8001cee:	79bb      	ldrb	r3, [r7, #6]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <Manual_Mode_X2Y1+0x1e8>)
 8001cf2:	6013      	str	r3, [r2, #0]

			Finish_flag.x_back = FALSE;
 8001cf4:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <Manual_Mode_X2Y1+0x1d0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	705a      	strb	r2, [r3, #1]
		}
		if ((Manual_mode.Box_dropoff == FALSE) && (target_3_2_flag == 8)) {
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <Manual_Mode_X2Y1+0x1c4>)
 8001cfc:	799b      	ldrb	r3, [r3, #6]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10f      	bne.n	8001d22 <Manual_Mode_X2Y1+0x1ba>
 8001d02:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d10b      	bne.n	8001d22 <Manual_Mode_X2Y1+0x1ba>
			target_3_2_flag = 9;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <Manual_Mode_X2Y1+0x1c8>)
 8001d0c:	2209      	movs	r2, #9
 8001d0e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(700 - 1);
 8001d10:	f240 20bb 	movw	r0, #699	@ 0x2bb
 8001d14:	f006 fbb8 	bl	8008488 <HAL_Delay>

			FALSE_Init();
 8001d18:	f7ff fa80 	bl	800121c <FALSE_Init>
			Manual_mode.target_3_2 = FALSE;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <Manual_Mode_X2Y1+0x1c4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	711a      	strb	r2, [r3, #4]
		}

	}
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000c58 	.word	0x20000c58
 8001d30:	200010fc 	.word	0x200010fc
 8001d34:	20000018 	.word	0x20000018
 8001d38:	20000c60 	.word	0x20000c60
 8001d3c:	200004fe 	.word	0x200004fe
 8001d40:	20000010 	.word	0x20000010
 8001d44:	20000034 	.word	0x20000034
 8001d48:	20000014 	.word	0x20000014
 8001d4c:	2000001c 	.word	0x2000001c
 8001d50:	20000038 	.word	0x20000038

08001d54 <fillQueue>:
char pased_flag = '0';
char tmp;

bool paser_flag = FALSE;

void fillQueue(char *input) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	int input_length = strlen(input);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7fe faa7 	bl	80002b0 <strlen>
 8001d62:	4603      	mov	r3, r0
 8001d64:	60bb      	str	r3, [r7, #8]
	int i = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < input_length; i++) {
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e00a      	b.n	8001d86 <fillQueue+0x32>
		enqueue(&str_q, input[i]);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4807      	ldr	r0, [pc, #28]	@ (8001d98 <fillQueue+0x44>)
 8001d7c:	f004 fd20 	bl	80067c0 <enqueue>
	for (i = 0; i < input_length; i++) {
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3301      	adds	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbf0      	blt.n	8001d70 <fillQueue+0x1c>
	}
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200011e4 	.word	0x200011e4

08001d9c <analyzer>:
 }
 */
AnalyzerType Analyzer = { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
		FALSE, FALSE, FALSE };

void analyzer(char cmd[4], char num_) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
	num = num_;
 8001da8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e24 <analyzer+0x88>)
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	7013      	strb	r3, [r2, #0]

	if (strcmp(&cmd[0], "mov") == 0) {
 8001dae:	491e      	ldr	r1, [pc, #120]	@ (8001e28 <analyzer+0x8c>)
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7fe fa1d 	bl	80001f0 <strcmp>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d103      	bne.n	8001dc4 <analyzer+0x28>

		Analyzer.mov = TRUE;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <analyzer+0x90>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
	} else if (strcmp(&cmd[0], "plc") == 0) {

		Analyzer.plc = TRUE;

	}
	return;
 8001dc2:	e02b      	b.n	8001e1c <analyzer+0x80>
	} else if (strcmp(&cmd[0], "pov") == 0) {
 8001dc4:	491a      	ldr	r1, [pc, #104]	@ (8001e30 <analyzer+0x94>)
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fa12 	bl	80001f0 <strcmp>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d103      	bne.n	8001dda <analyzer+0x3e>
		Analyzer.pov = TRUE;
 8001dd2:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <analyzer+0x90>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	705a      	strb	r2, [r3, #1]
	return;
 8001dd8:	e020      	b.n	8001e1c <analyzer+0x80>
	} else if (strcmp(&cmd[0], "rol") == 0) {
 8001dda:	4916      	ldr	r1, [pc, #88]	@ (8001e34 <analyzer+0x98>)
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7fe fa07 	bl	80001f0 <strcmp>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d103      	bne.n	8001df0 <analyzer+0x54>
		Analyzer.rol = TRUE;
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <analyzer+0x90>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	709a      	strb	r2, [r3, #2]
	return;
 8001dee:	e015      	b.n	8001e1c <analyzer+0x80>
	} else if (strcmp(&cmd[0], "pik") == 0) {
 8001df0:	4911      	ldr	r1, [pc, #68]	@ (8001e38 <analyzer+0x9c>)
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe f9fc 	bl	80001f0 <strcmp>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <analyzer+0x6a>
		Analyzer.pik = TRUE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <analyzer+0x90>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	70da      	strb	r2, [r3, #3]
	return;
 8001e04:	e00a      	b.n	8001e1c <analyzer+0x80>
	} else if (strcmp(&cmd[0], "plc") == 0) {
 8001e06:	490d      	ldr	r1, [pc, #52]	@ (8001e3c <analyzer+0xa0>)
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7fe f9f1 	bl	80001f0 <strcmp>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d103      	bne.n	8001e1c <analyzer+0x80>
		Analyzer.plc = TRUE;
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <analyzer+0x90>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	711a      	strb	r2, [r3, #4]
	return;
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
}
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2000131a 	.word	0x2000131a
 8001e28:	080140c8 	.word	0x080140c8
 8001e2c:	2000131c 	.word	0x2000131c
 8001e30:	080140cc 	.word	0x080140cc
 8001e34:	080140d0 	.word	0x080140d0
 8001e38:	080140d4 	.word	0x080140d4
 8001e3c:	080140d8 	.word	0x080140d8

08001e40 <paser>:

void paser(char *input) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	if (pased_flag == '0') {
 8001e48:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <paser+0xf0>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b30      	cmp	r3, #48	@ 0x30
 8001e4e:	d129      	bne.n	8001ea4 <paser+0x64>
		//printf("start Queue\n");
		if (is_empty(&str_q)) {
 8001e50:	4838      	ldr	r0, [pc, #224]	@ (8001f34 <paser+0xf4>)
 8001e52:	f004 fc7b 	bl	800674c <is_empty>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <paser+0x24>
			printf("queue is empty\n");
 8001e5c:	4836      	ldr	r0, [pc, #216]	@ (8001f38 <paser+0xf8>)
 8001e5e:	f00d fadd 	bl	800f41c <puts>
			return;
 8001e62:	e062      	b.n	8001f2a <paser+0xea>
		}
		tmp = dequeue(&str_q);
 8001e64:	4833      	ldr	r0, [pc, #204]	@ (8001f34 <paser+0xf4>)
 8001e66:	f004 fcdb 	bl	8006820 <dequeue>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b33      	ldr	r3, [pc, #204]	@ (8001f3c <paser+0xfc>)
 8001e70:	701a      	strb	r2, [r3, #0]
		while (tmp != '@') {
 8001e72:	e010      	b.n	8001e96 <paser+0x56>
			if (is_empty(&str_q)) {
 8001e74:	482f      	ldr	r0, [pc, #188]	@ (8001f34 <paser+0xf4>)
 8001e76:	f004 fc69 	bl	800674c <is_empty>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <paser+0x48>
				printf("queue is empty\n");
 8001e80:	482d      	ldr	r0, [pc, #180]	@ (8001f38 <paser+0xf8>)
 8001e82:	f00d facb 	bl	800f41c <puts>
				return;
 8001e86:	e050      	b.n	8001f2a <paser+0xea>
			}
			tmp = dequeue(&str_q);
 8001e88:	482a      	ldr	r0, [pc, #168]	@ (8001f34 <paser+0xf4>)
 8001e8a:	f004 fcc9 	bl	8006820 <dequeue>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <paser+0xfc>)
 8001e94:	701a      	strb	r2, [r3, #0]
		while (tmp != '@') {
 8001e96:	4b29      	ldr	r3, [pc, #164]	@ (8001f3c <paser+0xfc>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b40      	cmp	r3, #64	@ 0x40
 8001e9c:	d1ea      	bne.n	8001e74 <paser+0x34>
		}
		pased_flag = '1';
 8001e9e:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <paser+0xf0>)
 8001ea0:	2231      	movs	r2, #49	@ 0x31
 8001ea2:	701a      	strb	r2, [r3, #0]
	}

	if (tmp == '@' || tmp == '#') {
 8001ea4:	4b25      	ldr	r3, [pc, #148]	@ (8001f3c <paser+0xfc>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b40      	cmp	r3, #64	@ 0x40
 8001eaa:	d003      	beq.n	8001eb4 <paser+0x74>
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <paser+0xfc>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b23      	cmp	r3, #35	@ 0x23
 8001eb2:	d12f      	bne.n	8001f14 <paser+0xd4>
		char cmd[4] = "   \0";
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <paser+0x100>)
 8001eb6:	60fb      	str	r3, [r7, #12]
		char num;

		int i = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 3; i++) {
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e00d      	b.n	8001ede <paser+0x9e>
			cmd[i] = dequeue(&str_q);
 8001ec2:	481c      	ldr	r0, [pc, #112]	@ (8001f34 <paser+0xf4>)
 8001ec4:	f004 fcac 	bl	8006820 <dequeue>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f107 020c 	add.w	r2, r7, #12
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 3; i++) {
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	ddee      	ble.n	8001ec2 <paser+0x82>
		}

		dequeue(&str_q);
 8001ee4:	4813      	ldr	r0, [pc, #76]	@ (8001f34 <paser+0xf4>)
 8001ee6:	f004 fc9b 	bl	8006820 <dequeue>
		num = dequeue(&str_q);
 8001eea:	4812      	ldr	r0, [pc, #72]	@ (8001f34 <paser+0xf4>)
 8001eec:	f004 fc98 	bl	8006820 <dequeue>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	74fb      	strb	r3, [r7, #19]
		tmp = dequeue(&str_q);
 8001ef4:	480f      	ldr	r0, [pc, #60]	@ (8001f34 <paser+0xf4>)
 8001ef6:	f004 fc93 	bl	8006820 <dequeue>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <paser+0xfc>)
 8001f00:	701a      	strb	r2, [r3, #0]

		analyzer(cmd, num);
 8001f02:	7cfa      	ldrb	r2, [r7, #19]
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff46 	bl	8001d9c <analyzer>
	if (tmp == '@' || tmp == '#') {
 8001f10:	bf00      	nop
		//	paser_flag=0;
	} else if (tmp == '!') {
		printf("needed new commend\n");
		pased_flag = '0';
	}
	return;
 8001f12:	e009      	b.n	8001f28 <paser+0xe8>
	} else if (tmp == '!') {
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <paser+0xfc>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b21      	cmp	r3, #33	@ 0x21
 8001f1a:	d105      	bne.n	8001f28 <paser+0xe8>
		printf("needed new commend\n");
 8001f1c:	4809      	ldr	r0, [pc, #36]	@ (8001f44 <paser+0x104>)
 8001f1e:	f00d fa7d 	bl	800f41c <puts>
		pased_flag = '0';
 8001f22:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <paser+0xf0>)
 8001f24:	2230      	movs	r2, #48	@ 0x30
 8001f26:	701a      	strb	r2, [r3, #0]
	return;
 8001f28:	bf00      	nop
}
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	2000003c 	.word	0x2000003c
 8001f34:	200011e4 	.word	0x200011e4
 8001f38:	080140dc 	.word	0x080140dc
 8001f3c:	20001318 	.word	0x20001318
 8001f40:	00202020 	.word	0x00202020
 8001f44:	080140ec 	.word	0x080140ec

08001f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b08f      	sub	sp, #60	@ 0x3c
 8001f4c:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */

	downpart_accel_initialize();
 8001f4e:	f00c fa8b 	bl	800e468 <downpart_accel_initialize>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f52:	f006 fa27 	bl	80083a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f56:	f000 fcd5 	bl	8002904 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	linear_init = 1;
 8001f5a:	4bad      	ldr	r3, [pc, #692]	@ (8002210 <main+0x2c8>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
	if (linear_init == 1) {
 8001f60:	4bab      	ldr	r3, [pc, #684]	@ (8002210 <main+0x2c8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d104      	bne.n	8001f72 <main+0x2a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 1); //?���?
 8001f68:	2201      	movs	r2, #1
 8001f6a:	2110      	movs	r1, #16
 8001f6c:	48a9      	ldr	r0, [pc, #676]	@ (8002214 <main+0x2cc>)
 8001f6e:	f007 fec3 	bl	8009cf8 <HAL_GPIO_WritePin>
	}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f72:	f001 fa4f 	bl	8003414 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f76:	f001 fa2d 	bl	80033d4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001f7a:	f001 fa01 	bl	8003380 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001f7e:	f000 fe3d 	bl	8002bfc <MX_TIM3_Init>
  MX_TIM14_Init();
 8001f82:	f001 f9af 	bl	80032e4 <MX_TIM14_Init>
  MX_UART4_Init();
 8001f86:	f001 f9d1 	bl	800332c <MX_UART4_Init>
  MX_TIM2_Init();
 8001f8a:	f000 fde3 	bl	8002b54 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001f8e:	f000 ffd1 	bl	8002f34 <MX_TIM8_Init>
  MX_TIM6_Init();
 8001f92:	f000 ff65 	bl	8002e60 <MX_TIM6_Init>
  MX_TIM13_Init();
 8001f96:	f001 f94f 	bl	8003238 <MX_TIM13_Init>
  MX_ADC3_Init();
 8001f9a:	f000 fd29 	bl	80029f0 <MX_ADC3_Init>
  MX_TIM12_Init();
 8001f9e:	f001 f911 	bl	80031c4 <MX_TIM12_Init>
  MX_TIM11_Init();
 8001fa2:	f001 f8c1 	bl	8003128 <MX_TIM11_Init>
  MX_TIM4_Init();
 8001fa6:	f000 feb9 	bl	8002d1c <MX_TIM4_Init>
  MX_TIM7_Init();
 8001faa:	f000 ff8f 	bl	8002ecc <MX_TIM7_Init>
  MX_TIM5_Init();
 8001fae:	f000 ff09 	bl	8002dc4 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001fb2:	f000 fd8f 	bl	8002ad4 <MX_I2C2_Init>
  MX_TIM9_Init();
 8001fb6:	f001 f859 	bl	800306c <MX_TIM9_Init>
  MX_TIM10_Init();
 8001fba:	f001 f891 	bl	80030e0 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001fbe:	f000 fd0b 	bl	80029d8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	linear_init = 1;
 8001fc2:	4b93      	ldr	r3, [pc, #588]	@ (8002210 <main+0x2c8>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
	if (linear_init == 1) {
 8001fc8:	4b91      	ldr	r3, [pc, #580]	@ (8002210 <main+0x2c8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d104      	bne.n	8001fda <main+0x92>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 1); //?���?
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	488f      	ldr	r0, [pc, #572]	@ (8002214 <main+0x2cc>)
 8001fd6:	f007 fe8f 	bl	8009cf8 <HAL_GPIO_WritePin>
	}
	TIM3->CCR4 = 0;
 8001fda:	4b8f      	ldr	r3, [pc, #572]	@ (8002218 <main+0x2d0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40
	MPU6050_Init();
 8001fe0:	f002 f89c 	bl	800411c <MPU6050_Init>

//	HAL_UART_Receive_IT(&huart3, &rxByte, 1);
	HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	498d      	ldr	r1, [pc, #564]	@ (800221c <main+0x2d4>)
 8001fe8:	488d      	ldr	r0, [pc, #564]	@ (8002220 <main+0x2d8>)
 8001fea:	f00b fa08 	bl	800d3fe <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart4, &data, 1);
	HAL_UART_Receive_IT(&huart4, (uint8_t*) Rx_buffer, 1);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	498c      	ldr	r1, [pc, #560]	@ (8002224 <main+0x2dc>)
 8001ff2:	488d      	ldr	r0, [pc, #564]	@ (8002228 <main+0x2e0>)
 8001ff4:	f00b fa03 	bl	800d3fe <HAL_UART_Receive_IT>

//	HAL_UART_Receive_IT(&huart4, &RxRX, 1);

	HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_value, 3);
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	498c      	ldr	r1, [pc, #560]	@ (800222c <main+0x2e4>)
 8001ffc:	488c      	ldr	r0, [pc, #560]	@ (8002230 <main+0x2e8>)
 8001ffe:	f006 fbbb 	bl	8008778 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim6);  //pid
 8002002:	488c      	ldr	r0, [pc, #560]	@ (8002234 <main+0x2ec>)
 8002004:	f009 fc32 	bl	800b86c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);  //?��?��
 8002008:	488b      	ldr	r0, [pc, #556]	@ (8002238 <main+0x2f0>)
 800200a:	f009 fc2f 	bl	800b86c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);  //RPM
 800200e:	488b      	ldr	r0, [pc, #556]	@ (800223c <main+0x2f4>)
 8002010:	f009 fc2c 	bl	800b86c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);  //vt
 8002014:	488a      	ldr	r0, [pc, #552]	@ (8002240 <main+0x2f8>)
 8002016:	f009 fc29 	bl	800b86c <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim9);
 800201a:	488a      	ldr	r0, [pc, #552]	@ (8002244 <main+0x2fc>)
 800201c:	f009 fc26 	bl	800b86c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 8002020:	4889      	ldr	r0, [pc, #548]	@ (8002248 <main+0x300>)
 8002022:	f009 fc23 	bl	800b86c <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002026:	213c      	movs	r1, #60	@ 0x3c
 8002028:	4888      	ldr	r0, [pc, #544]	@ (800224c <main+0x304>)
 800202a:	f00a f8f5 	bl	800c218 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800202e:	213c      	movs	r1, #60	@ 0x3c
 8002030:	4887      	ldr	r0, [pc, #540]	@ (8002250 <main+0x308>)
 8002032:	f00a f8f1 	bl	800c218 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim4);
 8002036:	4886      	ldr	r0, [pc, #536]	@ (8002250 <main+0x308>)
 8002038:	f009 fc18 	bl	800b86c <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim12);  //초음?�� ?��?��  ?��?? >
 800203c:	4885      	ldr	r0, [pc, #532]	@ (8002254 <main+0x30c>)
 800203e:	f009 fc15 	bl	800b86c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);  //ADC ???���?
 8002042:	4885      	ldr	r0, [pc, #532]	@ (8002258 <main+0x310>)
 8002044:	f009 fc12 	bl	800b86c <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002048:	2100      	movs	r1, #0
 800204a:	4884      	ldr	r0, [pc, #528]	@ (800225c <main+0x314>)
 800204c:	f009 ff06 	bl	800be5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002050:	2104      	movs	r1, #4
 8002052:	4882      	ldr	r0, [pc, #520]	@ (800225c <main+0x314>)
 8002054:	f009 ff02 	bl	800be5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002058:	210c      	movs	r1, #12
 800205a:	4880      	ldr	r0, [pc, #512]	@ (800225c <main+0x314>)
 800205c:	f009 fefe 	bl	800be5c <HAL_TIM_PWM_Start>
	setvbuf(stdin, NULL, _IONBF, 0);
 8002060:	4b7f      	ldr	r3, [pc, #508]	@ (8002260 <main+0x318>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6858      	ldr	r0, [r3, #4]
 8002066:	2300      	movs	r3, #0
 8002068:	2202      	movs	r2, #2
 800206a:	2100      	movs	r1, #0
 800206c:	f00d f9de 	bl	800f42c <setvbuf>

	gridInit(IsEmpty);
 8002070:	2000      	movs	r0, #0
 8002072:	f004 f939 	bl	80062e8 <gridInit>
	setDpp(0, 0, 5, 5); //0,0 ?��?�� 1,2�?
 8002076:	2305      	movs	r3, #5
 8002078:	2205      	movs	r2, #5
 800207a:	2100      	movs	r1, #0
 800207c:	2000      	movs	r0, #0
 800207e:	f004 f9af 	bl	80063e0 <setDpp>
	readPath(lpp(), path);
 8002082:	463b      	mov	r3, r7
 8002084:	4618      	mov	r0, r3
 8002086:	f004 fa61 	bl	800654c <lpp>
 800208a:	4b76      	ldr	r3, [pc, #472]	@ (8002264 <main+0x31c>)
 800208c:	9304      	str	r3, [sp, #16]
 800208e:	466c      	mov	r4, sp
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800209a:	463b      	mov	r3, r7
 800209c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800209e:	f004 faf5 	bl	800668c <readPath>

	TIM3->CCR4 = 0;
 80020a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002218 <main+0x2d0>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 1); //?���?
 80020a8:	2201      	movs	r2, #1
 80020aa:	2110      	movs	r1, #16
 80020ac:	4859      	ldr	r0, [pc, #356]	@ (8002214 <main+0x2cc>)
 80020ae:	f007 fe23 	bl	8009cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1); //리니?��  ?���?
 80020b2:	2201      	movs	r2, #1
 80020b4:	2104      	movs	r1, #4
 80020b6:	486c      	ldr	r0, [pc, #432]	@ (8002268 <main+0x320>)
 80020b8:	f007 fe1e 	bl	8009cf8 <HAL_GPIO_WritePin>

	down_high_test = 0;
 80020bc:	4b6b      	ldr	r3, [pc, #428]	@ (800226c <main+0x324>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
	ball_min_test = 0;
 80020c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002270 <main+0x328>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
	x_go = 0;
 80020c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002274 <main+0x32c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
	x_back = 0;
 80020ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <main+0x330>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
	y_go = 0;
 80020d4:	4b69      	ldr	r3, [pc, #420]	@ (800227c <main+0x334>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
	y_back = 0;
 80020da:	4b69      	ldr	r3, [pc, #420]	@ (8002280 <main+0x338>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
	ball_high = 0;
 80020e0:	4b68      	ldr	r3, [pc, #416]	@ (8002284 <main+0x33c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

	RPM_X_go = 0;
 80020e6:	4b68      	ldr	r3, [pc, #416]	@ (8002288 <main+0x340>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
	RPM_X_back = 0;
 80020ec:	4b67      	ldr	r3, [pc, #412]	@ (800228c <main+0x344>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
	RPM_Y_go = 0;
 80020f2:	4b67      	ldr	r3, [pc, #412]	@ (8002290 <main+0x348>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
	RPM_Y_back = 0;
 80020f8:	4b66      	ldr	r3, [pc, #408]	@ (8002294 <main+0x34c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]

	PID_X_finish = 0;
 80020fe:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <main+0x350>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
	PID_Y_finish = 0;
 8002104:	4b65      	ldr	r3, [pc, #404]	@ (800229c <main+0x354>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
//	downpart_run=0;
	ballscrew_up_run = 0;
 800210a:	4b65      	ldr	r3, [pc, #404]	@ (80022a0 <main+0x358>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
	ballscrew_down_run = 0;
 8002110:	4b64      	ldr	r3, [pc, #400]	@ (80022a4 <main+0x35c>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
	pickup_run = 0;
 8002116:	4b64      	ldr	r3, [pc, #400]	@ (80022a8 <main+0x360>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
	dropoff_run = 0;
 800211c:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <main+0x364>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

	step_count_for_flag__ = 0;
 8002122:	4b63      	ldr	r3, [pc, #396]	@ (80022b0 <main+0x368>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]

	shaft_accel_flag = 0; //0:?��?�� ,1 �??��
 8002128:	4b62      	ldr	r3, [pc, #392]	@ (80022b4 <main+0x36c>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]

	DC_Y_go_sensor_flag = 0;
 800212e:	4b62      	ldr	r3, [pc, #392]	@ (80022b8 <main+0x370>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
	DC_Y_back_sensor_flag = 0;
 8002134:	4b61      	ldr	r3, [pc, #388]	@ (80022bc <main+0x374>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

	//   DC_X_now_posiotion=0;
	DC_Y_now_posiotion = 0;
 800213a:	4b61      	ldr	r3, [pc, #388]	@ (80022c0 <main+0x378>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]





	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 8002140:	2201      	movs	r2, #1
 8002142:	2101      	movs	r1, #1
 8002144:	485f      	ldr	r0, [pc, #380]	@ (80022c4 <main+0x37c>)
 8002146:	f007 fdd7 	bl	8009cf8 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002150:	485d      	ldr	r0, [pc, #372]	@ (80022c8 <main+0x380>)
 8002152:	f007 fdd1 	bl	8009cf8 <HAL_GPIO_WritePin>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (tim12_flag == TRUE)  //0.1s
 8002156:	4b5d      	ldr	r3, [pc, #372]	@ (80022cc <main+0x384>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	f040 8297 	bne.w	800268e <main+0x746>
		{
			///////////////// ?��?�� 버튼 깔짝
			if(  key_value=='>' || RxRX =='R')
 8002160:	4b2e      	ldr	r3, [pc, #184]	@ (800221c <main+0x2d4>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b3e      	cmp	r3, #62	@ 0x3e
 8002166:	d003      	beq.n	8002170 <main+0x228>
 8002168:	4b59      	ldr	r3, [pc, #356]	@ (80022d0 <main+0x388>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b52      	cmp	r3, #82	@ 0x52
 800216e:	d11e      	bne.n	80021ae <main+0x266>
			{		if (down_max_flag == 1 ) {
 8002170:	4b58      	ldr	r3, [pc, #352]	@ (80022d4 <main+0x38c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d109      	bne.n	800218c <main+0x244>

					tim9_flag = 0;
 8002178:	4b57      	ldr	r3, [pc, #348]	@ (80022d8 <main+0x390>)
 800217a:	2200      	movs	r2, #0
 800217c:	801a      	strh	r2, [r3, #0]
					down_max_flag_ = TRUE;
 800217e:	4b57      	ldr	r3, [pc, #348]	@ (80022dc <main+0x394>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
					down_max_flag = 0 ;
 8002184:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <main+0x38c>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e010      	b.n	80021ae <main+0x266>
				}
				else if (down_max_flag_ == TRUE) {
 800218c:	4b53      	ldr	r3, [pc, #332]	@ (80022dc <main+0x394>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d10c      	bne.n	80021ae <main+0x266>
					if (tim9_flag >= 2)   //0.1�? 마다++ >> 10: 1s
 8002194:	4b50      	ldr	r3, [pc, #320]	@ (80022d8 <main+0x390>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d908      	bls.n	80021ae <main+0x266>
					{
						down_part_DOWN(130, shaft_pulse_cycle);
 800219c:	4b50      	ldr	r3, [pc, #320]	@ (80022e0 <main+0x398>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	2082      	movs	r0, #130	@ 0x82
 80021a4:	f004 ff74 	bl	8007090 <down_part_DOWN>
						down_max_flag_ = FALSE;
 80021a8:	4b4c      	ldr	r3, [pc, #304]	@ (80022dc <main+0x394>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]

				}
			}
////////////////////////////////  ?��?��리�?

			 if (Analyzer.mov == TRUE)
 80021ae:	4b4d      	ldr	r3, [pc, #308]	@ (80022e4 <main+0x39c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d109      	bne.n	80021ca <main+0x282>
			 {
				 tim9_flag = 0;
 80021b6:	4b48      	ldr	r3, [pc, #288]	@ (80022d8 <main+0x390>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	801a      	strh	r2, [r3, #0]
				 Analyzer.mov_ = TRUE;
 80021bc:	4b49      	ldr	r3, [pc, #292]	@ (80022e4 <main+0x39c>)
 80021be:	2201      	movs	r2, #1
 80021c0:	715a      	strb	r2, [r3, #5]

				 Analyzer.mov = FALSE;
 80021c2:	4b48      	ldr	r3, [pc, #288]	@ (80022e4 <main+0x39c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e25e      	b.n	8002688 <main+0x740>
			 }
			 else if (Analyzer.mov_ == TRUE)
 80021ca:	4b46      	ldr	r3, [pc, #280]	@ (80022e4 <main+0x39c>)
 80021cc:	795b      	ldrb	r3, [r3, #5]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	f040 80d3 	bne.w	800237a <main+0x432>
			 {

				 if (tim9_flag >= 14)   //0.1�? 마다++ >> 2.5�? ??�?
 80021d4:	4b40      	ldr	r3, [pc, #256]	@ (80022d8 <main+0x390>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	2b0d      	cmp	r3, #13
 80021da:	f240 8255 	bls.w	8002688 <main+0x740>
				 {

					 if (rol % 2 == 0)  //짝수: x방향  ?���?
 80021de:	4b42      	ldr	r3, [pc, #264]	@ (80022e8 <main+0x3a0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8097 	bne.w	800231a <main+0x3d2>
					 {

						 if (num == '1')
 80021ec:	4b3f      	ldr	r3, [pc, #252]	@ (80022ec <main+0x3a4>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b31      	cmp	r3, #49	@ 0x31
 80021f2:	f040 8081 	bne.w	80022f8 <main+0x3b0>
						 {
							 v_t_graph_DIR_BACK_X(targetS_X_BACK);
 80021f6:	4b3e      	ldr	r3, [pc, #248]	@ (80022f0 <main+0x3a8>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002200:	f002 faa8 	bl	8004754 <v_t_graph_DIR_BACK_X>
							 algo_x_back++;
 8002204:	4b3b      	ldr	r3, [pc, #236]	@ (80022f4 <main+0x3ac>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4a3a      	ldr	r2, [pc, #232]	@ (80022f4 <main+0x3ac>)
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e0b0      	b.n	8002372 <main+0x42a>
 8002210:	20001104 	.word	0x20001104
 8002214:	40021400 	.word	0x40021400
 8002218:	40000400 	.word	0x40000400
 800221c:	20000716 	.word	0x20000716
 8002220:	20000c0c 	.word	0x20000c0c
 8002224:	200011d0 	.word	0x200011d0
 8002228:	20000bc4 	.word	0x20000bc4
 800222c:	20000718 	.word	0x20000718
 8002230:	20000720 	.word	0x20000720
 8002234:	2000093c 	.word	0x2000093c
 8002238:	20000984 	.word	0x20000984
 800223c:	20000b7c 	.word	0x20000b7c
 8002240:	200008f4 	.word	0x200008f4
 8002244:	20000a14 	.word	0x20000a14
 8002248:	20000a5c 	.word	0x20000a5c
 800224c:	2000081c 	.word	0x2000081c
 8002250:	200008ac 	.word	0x200008ac
 8002254:	20000aec 	.word	0x20000aec
 8002258:	200009cc 	.word	0x200009cc
 800225c:	20000864 	.word	0x20000864
 8002260:	2000052c 	.word	0x2000052c
 8002264:	20000c78 	.word	0x20000c78
 8002268:	40020800 	.word	0x40020800
 800226c:	2000132c 	.word	0x2000132c
 8002270:	20001330 	.word	0x20001330
 8002274:	20001334 	.word	0x20001334
 8002278:	20001338 	.word	0x20001338
 800227c:	2000133c 	.word	0x2000133c
 8002280:	20001340 	.word	0x20001340
 8002284:	20001344 	.word	0x20001344
 8002288:	20001348 	.word	0x20001348
 800228c:	2000134c 	.word	0x2000134c
 8002290:	20001350 	.word	0x20001350
 8002294:	20001354 	.word	0x20001354
 8002298:	2000135c 	.word	0x2000135c
 800229c:	20001358 	.word	0x20001358
 80022a0:	20001360 	.word	0x20001360
 80022a4:	20001364 	.word	0x20001364
 80022a8:	20000c70 	.word	0x20000c70
 80022ac:	20000c74 	.word	0x20000c74
 80022b0:	20001368 	.word	0x20001368
 80022b4:	20001369 	.word	0x20001369
 80022b8:	2000136c 	.word	0x2000136c
 80022bc:	20001370 	.word	0x20001370
 80022c0:	20001374 	.word	0x20001374
 80022c4:	40021800 	.word	0x40021800
 80022c8:	40020400 	.word	0x40020400
 80022cc:	2000137a 	.word	0x2000137a
 80022d0:	200013b4 	.word	0x200013b4
 80022d4:	200031e4 	.word	0x200031e4
 80022d8:	20001378 	.word	0x20001378
 80022dc:	2000137b 	.word	0x2000137b
 80022e0:	200004fa 	.word	0x200004fa
 80022e4:	2000131c 	.word	0x2000131c
 80022e8:	200011e0 	.word	0x200011e0
 80022ec:	2000131a 	.word	0x2000131a
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	20001388 	.word	0x20001388
						 }
						 else if (num == '2')
 80022f8:	4b96      	ldr	r3, [pc, #600]	@ (8002554 <main+0x60c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b32      	cmp	r3, #50	@ 0x32
 80022fe:	d138      	bne.n	8002372 <main+0x42a>
						 {
							 v_t_graph_DIR_BACK_X(targetS_X_BACK2);
 8002300:	4b95      	ldr	r3, [pc, #596]	@ (8002558 <main+0x610>)
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	eeb0 0a67 	vmov.f32	s0, s15
 800230a:	f002 fa23 	bl	8004754 <v_t_graph_DIR_BACK_X>
							 algo_x_back2++;
 800230e:	4b93      	ldr	r3, [pc, #588]	@ (800255c <main+0x614>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	4a91      	ldr	r2, [pc, #580]	@ (800255c <main+0x614>)
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	e02b      	b.n	8002372 <main+0x42a>
						 }
					 }
				 else if (rol % 2 == 1)  //???�� y방향  ?���?
 800231a:	4b91      	ldr	r3, [pc, #580]	@ (8002560 <main+0x618>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	bfb8      	it	lt
 8002326:	425b      	neglt	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d122      	bne.n	8002372 <main+0x42a>
				 {
					 if (num == '1')
 800232c:	4b89      	ldr	r3, [pc, #548]	@ (8002554 <main+0x60c>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b31      	cmp	r3, #49	@ 0x31
 8002332:	d11e      	bne.n	8002372 <main+0x42a>
					 {
							HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8002334:	213c      	movs	r1, #60	@ 0x3c
 8002336:	488b      	ldr	r0, [pc, #556]	@ (8002564 <main+0x61c>)
 8002338:	f009 fffc 	bl	800c334 <HAL_TIM_Encoder_Stop>
							HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800233c:	213c      	movs	r1, #60	@ 0x3c
 800233e:	488a      	ldr	r0, [pc, #552]	@ (8002568 <main+0x620>)
 8002340:	f009 ff6a 	bl	800c218 <HAL_TIM_Encoder_Start>

							HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002344:	2100      	movs	r1, #0
 8002346:	4889      	ldr	r0, [pc, #548]	@ (800256c <main+0x624>)
 8002348:	f009 fe50 	bl	800bfec <HAL_TIM_PWM_Stop>
							HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800234c:	2104      	movs	r1, #4
 800234e:	4887      	ldr	r0, [pc, #540]	@ (800256c <main+0x624>)
 8002350:	f009 fd84 	bl	800be5c <HAL_TIM_PWM_Start>
							HAL_Delay(80);
 8002354:	2050      	movs	r0, #80	@ 0x50
 8002356:	f006 f897 	bl	8008488 <HAL_Delay>
						 v_t_graph_DIR_BACK_Y(targetS_Y_BACK);
 800235a:	4b85      	ldr	r3, [pc, #532]	@ (8002570 <main+0x628>)
 800235c:	edd3 7a00 	vldr	s15, [r3]
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	f002 fa8a 	bl	800487c <v_t_graph_DIR_BACK_Y>
						// v_t_graph_DIR_BACK_Y(targetS_Y_BACK);
						 algo_y_back++;
 8002368:	4b82      	ldr	r3, [pc, #520]	@ (8002574 <main+0x62c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	4a81      	ldr	r2, [pc, #516]	@ (8002574 <main+0x62c>)
 8002370:	6013      	str	r3, [r2, #0]
					 }

				 }
					 Analyzer.mov_ = FALSE;
 8002372:	4b81      	ldr	r3, [pc, #516]	@ (8002578 <main+0x630>)
 8002374:	2200      	movs	r2, #0
 8002376:	715a      	strb	r2, [r3, #5]
 8002378:	e186      	b.n	8002688 <main+0x740>
				 }
			 }

			 else if (Analyzer.pov == TRUE)
 800237a:	4b7f      	ldr	r3, [pc, #508]	@ (8002578 <main+0x630>)
 800237c:	785b      	ldrb	r3, [r3, #1]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d109      	bne.n	8002396 <main+0x44e>
			 {
				 tim9_flag = 0;
 8002382:	4b7e      	ldr	r3, [pc, #504]	@ (800257c <main+0x634>)
 8002384:	2200      	movs	r2, #0
 8002386:	801a      	strh	r2, [r3, #0]
				 Analyzer.pov_ = TRUE;
 8002388:	4b7b      	ldr	r3, [pc, #492]	@ (8002578 <main+0x630>)
 800238a:	2201      	movs	r2, #1
 800238c:	719a      	strb	r2, [r3, #6]

				 Analyzer.pov = FALSE;
 800238e:	4b7a      	ldr	r3, [pc, #488]	@ (8002578 <main+0x630>)
 8002390:	2200      	movs	r2, #0
 8002392:	705a      	strb	r2, [r3, #1]
 8002394:	e178      	b.n	8002688 <main+0x740>
			 }
			 else if (Analyzer.pov_ == TRUE)
 8002396:	4b78      	ldr	r3, [pc, #480]	@ (8002578 <main+0x630>)
 8002398:	799b      	ldrb	r3, [r3, #6]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d159      	bne.n	8002452 <main+0x50a>
			 {
				 if (tim9_flag >= 14)   //0.1�? 마다++ >> 2.5�? ??�?
 800239e:	4b77      	ldr	r3, [pc, #476]	@ (800257c <main+0x634>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	2b0d      	cmp	r3, #13
 80023a4:	f240 8170 	bls.w	8002688 <main+0x740>
				 {

					 if (rol % 2 == 0)  //짝수: x방향 ?���?
 80023a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002560 <main+0x618>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d121      	bne.n	80023f8 <main+0x4b0>
					 {
						 if (num == '1')
 80023b4:	4b67      	ldr	r3, [pc, #412]	@ (8002554 <main+0x60c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b31      	cmp	r3, #49	@ 0x31
 80023ba:	d10c      	bne.n	80023d6 <main+0x48e>
						 {
							 v_t_graph_DIR_GO_X(targetS_X_GO);  // x ?��?���?
 80023bc:	4b70      	ldr	r3, [pc, #448]	@ (8002580 <main+0x638>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	eeb0 0a67 	vmov.f32	s0, s15
 80023c6:	f002 f97f 	bl	80046c8 <v_t_graph_DIR_GO_X>
							 algo_x_go++;
 80023ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002584 <main+0x63c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	4a6c      	ldr	r2, [pc, #432]	@ (8002584 <main+0x63c>)
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e039      	b.n	800244a <main+0x502>
						 }
						 else if (num == '2')
 80023d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002554 <main+0x60c>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b32      	cmp	r3, #50	@ 0x32
 80023dc:	d135      	bne.n	800244a <main+0x502>
						 {
							 v_t_graph_DIR_GO_X(targetS_X_GO2);  // x ?��?���?
 80023de:	4b6a      	ldr	r3, [pc, #424]	@ (8002588 <main+0x640>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	eeb0 0a67 	vmov.f32	s0, s15
 80023e8:	f002 f96e 	bl	80046c8 <v_t_graph_DIR_GO_X>
							 algo_x_go2++;
 80023ec:	4b67      	ldr	r3, [pc, #412]	@ (800258c <main+0x644>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	4a66      	ldr	r2, [pc, #408]	@ (800258c <main+0x644>)
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e028      	b.n	800244a <main+0x502>
						 }
					 }
					 else if (rol % 2 == 1)  //???�� y방향  ?���?
 80023f8:	4b59      	ldr	r3, [pc, #356]	@ (8002560 <main+0x618>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	bfb8      	it	lt
 8002404:	425b      	neglt	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d11f      	bne.n	800244a <main+0x502>
					 {
						 if (num == '1')
 800240a:	4b52      	ldr	r3, [pc, #328]	@ (8002554 <main+0x60c>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b31      	cmp	r3, #49	@ 0x31
 8002410:	d11b      	bne.n	800244a <main+0x502>
						 {
								HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8002412:	213c      	movs	r1, #60	@ 0x3c
 8002414:	4853      	ldr	r0, [pc, #332]	@ (8002564 <main+0x61c>)
 8002416:	f009 ff8d 	bl	800c334 <HAL_TIM_Encoder_Stop>
								HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800241a:	213c      	movs	r1, #60	@ 0x3c
 800241c:	4852      	ldr	r0, [pc, #328]	@ (8002568 <main+0x620>)
 800241e:	f009 fefb 	bl	800c218 <HAL_TIM_Encoder_Start>

								HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002422:	2100      	movs	r1, #0
 8002424:	4851      	ldr	r0, [pc, #324]	@ (800256c <main+0x624>)
 8002426:	f009 fde1 	bl	800bfec <HAL_TIM_PWM_Stop>
								HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800242a:	2104      	movs	r1, #4
 800242c:	484f      	ldr	r0, [pc, #316]	@ (800256c <main+0x624>)
 800242e:	f009 fd15 	bl	800be5c <HAL_TIM_PWM_Start>
							//	HAL_Delay(80);
							 v_t_graph_DIR_GO_Y(targetS_Y_GO);
 8002432:	4b57      	ldr	r3, [pc, #348]	@ (8002590 <main+0x648>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	eeb0 0a67 	vmov.f32	s0, s15
 800243c:	f002 f9d0 	bl	80047e0 <v_t_graph_DIR_GO_Y>
							// v_t_graph_DIR_GO_Y(targetS_Y_GO);
							 algo_y_go++;
 8002440:	4b54      	ldr	r3, [pc, #336]	@ (8002594 <main+0x64c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	4a53      	ldr	r2, [pc, #332]	@ (8002594 <main+0x64c>)
 8002448:	6013      	str	r3, [r2, #0]


						 }

					 }
						 Analyzer.pov_ = FALSE;
 800244a:	4b4b      	ldr	r3, [pc, #300]	@ (8002578 <main+0x630>)
 800244c:	2200      	movs	r2, #0
 800244e:	719a      	strb	r2, [r3, #6]
 8002450:	e11a      	b.n	8002688 <main+0x740>
				 }
			 }

			 else if (Analyzer.rol == TRUE)
 8002452:	4b49      	ldr	r3, [pc, #292]	@ (8002578 <main+0x630>)
 8002454:	789b      	ldrb	r3, [r3, #2]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d109      	bne.n	800246e <main+0x526>
			 {
				 tim9_flag = 0;
 800245a:	4b48      	ldr	r3, [pc, #288]	@ (800257c <main+0x634>)
 800245c:	2200      	movs	r2, #0
 800245e:	801a      	strh	r2, [r3, #0]
				 Analyzer.rol_ = TRUE;
 8002460:	4b45      	ldr	r3, [pc, #276]	@ (8002578 <main+0x630>)
 8002462:	2201      	movs	r2, #1
 8002464:	71da      	strb	r2, [r3, #7]

				 Analyzer.rol = FALSE;
 8002466:	4b44      	ldr	r3, [pc, #272]	@ (8002578 <main+0x630>)
 8002468:	2200      	movs	r2, #0
 800246a:	709a      	strb	r2, [r3, #2]
 800246c:	e10c      	b.n	8002688 <main+0x740>
			 }
			 else if (Analyzer.rol_ == TRUE)
 800246e:	4b42      	ldr	r3, [pc, #264]	@ (8002578 <main+0x630>)
 8002470:	79db      	ldrb	r3, [r3, #7]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d12e      	bne.n	80024d4 <main+0x58c>
			 {
				 if (tim9_flag >= 14)   //0.1�? 마다++ >> 2.5�? ??�?
 8002476:	4b41      	ldr	r3, [pc, #260]	@ (800257c <main+0x634>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	2b0d      	cmp	r3, #13
 800247c:	f240 8104 	bls.w	8002688 <main+0x740>
				 {

					 if (num == '0')
 8002480:	4b34      	ldr	r3, [pc, #208]	@ (8002554 <main+0x60c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b30      	cmp	r3, #48	@ 0x30
 8002486:	d10c      	bne.n	80024a2 <main+0x55a>
					 {
						 z_axis_DOWN(400 * 6 * 2 + 700, ball_screw_pulse_cycle); //�? ?���? x -> y
 8002488:	4b43      	ldr	r3, [pc, #268]	@ (8002598 <main+0x650>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f241 507c 	movw	r0, #5500	@ 0x157c
 8002492:	f004 fd83 	bl	8006f9c <z_axis_DOWN>
						 algo_rol_down++;
 8002496:	4b41      	ldr	r3, [pc, #260]	@ (800259c <main+0x654>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	4a3f      	ldr	r2, [pc, #252]	@ (800259c <main+0x654>)
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	e00f      	b.n	80024c2 <main+0x57a>
					 }
					 else if (num == '1')
 80024a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002554 <main+0x60c>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b31      	cmp	r3, #49	@ 0x31
 80024a8:	d10b      	bne.n	80024c2 <main+0x57a>
					 {
						 z_axis_UP(400 * 6 * 2, ball_screw_pulse_cycle); //�? ?���? y -> x
 80024aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002598 <main+0x650>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	f44f 5096 	mov.w	r0, #4800	@ 0x12c0
 80024b4:	f004 fd36 	bl	8006f24 <z_axis_UP>
						 algo_rol_up++;
 80024b8:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <main+0x658>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a38      	ldr	r2, [pc, #224]	@ (80025a0 <main+0x658>)
 80024c0:	6013      	str	r3, [r2, #0]
					 }
					 rol++;
 80024c2:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <main+0x618>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	4a25      	ldr	r2, [pc, #148]	@ (8002560 <main+0x618>)
 80024ca:	6013      	str	r3, [r2, #0]

				 	 Analyzer.rol_ = FALSE;
 80024cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002578 <main+0x630>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	71da      	strb	r2, [r3, #7]
 80024d2:	e0d9      	b.n	8002688 <main+0x740>
				 }
			 }

			 else if (Analyzer.pik == TRUE)
 80024d4:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <main+0x630>)
 80024d6:	78db      	ldrb	r3, [r3, #3]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d109      	bne.n	80024f0 <main+0x5a8>
			 {
				 tim9_flag = 0;
 80024dc:	4b27      	ldr	r3, [pc, #156]	@ (800257c <main+0x634>)
 80024de:	2200      	movs	r2, #0
 80024e0:	801a      	strh	r2, [r3, #0]
				 Analyzer.pik_ = TRUE;
 80024e2:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <main+0x630>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	721a      	strb	r2, [r3, #8]

				 Analyzer.pik = FALSE;
 80024e8:	4b23      	ldr	r3, [pc, #140]	@ (8002578 <main+0x630>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	70da      	strb	r2, [r3, #3]
 80024ee:	e0cb      	b.n	8002688 <main+0x740>
			 }
			 else if (Analyzer.pik_ == TRUE)
 80024f0:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <main+0x630>)
 80024f2:	7a1b      	ldrb	r3, [r3, #8]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d174      	bne.n	80025e2 <main+0x69a>
			 {
				 if (tim9_flag >= 15)   //0.1�? 마다++ >> 2.5�? ??�?
 80024f8:	4b20      	ldr	r3, [pc, #128]	@ (800257c <main+0x634>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	2b0e      	cmp	r3, #14
 80024fe:	f240 80c3 	bls.w	8002688 <main+0x740>
				 {

					 pik++;  //?��?�� ???��?�� : 물건?�� ?��고있?�� ?��?��?��, 짝수: �? ?��?��
 8002502:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <main+0x65c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	4a26      	ldr	r2, [pc, #152]	@ (80025a4 <main+0x65c>)
 800250a:	6013      	str	r3, [r2, #0]
					 //			HAL_Delay(2500);
					 if (num == '1')
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <main+0x60c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b31      	cmp	r3, #49	@ 0x31
 8002512:	d10d      	bne.n	8002530 <main+0x5e8>
					 {
						 FALSE_Init();
 8002514:	f7fe fe82 	bl	800121c <FALSE_Init>

						 Manual_mode.box_pickup = TRUE;
 8002518:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <main+0x660>)
 800251a:	2201      	movs	r2, #1
 800251c:	715a      	strb	r2, [r3, #5]
						 box_floor_test_pick = 1;
 800251e:	4b23      	ldr	r3, [pc, #140]	@ (80025ac <main+0x664>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]
						 algo_pik1++;
 8002524:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <main+0x668>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	4a21      	ldr	r2, [pc, #132]	@ (80025b0 <main+0x668>)
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e054      	b.n	80025da <main+0x692>
					 }
					 else if (num == '2')
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <main+0x60c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b32      	cmp	r3, #50	@ 0x32
 8002536:	d13f      	bne.n	80025b8 <main+0x670>
					 {
						 FALSE_Init();
 8002538:	f7fe fe70 	bl	800121c <FALSE_Init>

						 Manual_mode.box_pickup = TRUE;
 800253c:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <main+0x660>)
 800253e:	2201      	movs	r2, #1
 8002540:	715a      	strb	r2, [r3, #5]
						 box_floor_test_pick = 2;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <main+0x664>)
 8002544:	2202      	movs	r2, #2
 8002546:	601a      	str	r2, [r3, #0]
						 algo_pik2++;
 8002548:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <main+0x66c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	4a19      	ldr	r2, [pc, #100]	@ (80025b4 <main+0x66c>)
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e042      	b.n	80025da <main+0x692>
 8002554:	2000131a 	.word	0x2000131a
 8002558:	2000001c 	.word	0x2000001c
 800255c:	20001390 	.word	0x20001390
 8002560:	200011e0 	.word	0x200011e0
 8002564:	2000081c 	.word	0x2000081c
 8002568:	200008ac 	.word	0x200008ac
 800256c:	20000864 	.word	0x20000864
 8002570:	20000014 	.word	0x20000014
 8002574:	20001380 	.word	0x20001380
 8002578:	2000131c 	.word	0x2000131c
 800257c:	20001378 	.word	0x20001378
 8002580:	20000008 	.word	0x20000008
 8002584:	20001384 	.word	0x20001384
 8002588:	20000018 	.word	0x20000018
 800258c:	2000138c 	.word	0x2000138c
 8002590:	20000010 	.word	0x20000010
 8002594:	2000137c 	.word	0x2000137c
 8002598:	200004fe 	.word	0x200004fe
 800259c:	20001398 	.word	0x20001398
 80025a0:	20001394 	.word	0x20001394
 80025a4:	200011dc 	.word	0x200011dc
 80025a8:	20000c58 	.word	0x20000c58
 80025ac:	20000034 	.word	0x20000034
 80025b0:	2000139c 	.word	0x2000139c
 80025b4:	200013a0 	.word	0x200013a0
					 }
					 else if (num == '3')
 80025b8:	4b90      	ldr	r3, [pc, #576]	@ (80027fc <main+0x8b4>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b33      	cmp	r3, #51	@ 0x33
 80025be:	d10c      	bne.n	80025da <main+0x692>
					 {
						 FALSE_Init();
 80025c0:	f7fe fe2c 	bl	800121c <FALSE_Init>

						 Manual_mode.box_pickup = TRUE;
 80025c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002800 <main+0x8b8>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	715a      	strb	r2, [r3, #5]
						 box_floor_test_pick = 3;
 80025ca:	4b8e      	ldr	r3, [pc, #568]	@ (8002804 <main+0x8bc>)
 80025cc:	2203      	movs	r2, #3
 80025ce:	601a      	str	r2, [r3, #0]
						 algo_pik3++;
 80025d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002808 <main+0x8c0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	4a8c      	ldr	r2, [pc, #560]	@ (8002808 <main+0x8c0>)
 80025d8:	6013      	str	r3, [r2, #0]
					 }

					Analyzer.pik_ = FALSE;
 80025da:	4b8c      	ldr	r3, [pc, #560]	@ (800280c <main+0x8c4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	721a      	strb	r2, [r3, #8]
 80025e0:	e052      	b.n	8002688 <main+0x740>
				 }
			 }

			 else if (Analyzer.plc == TRUE)
 80025e2:	4b8a      	ldr	r3, [pc, #552]	@ (800280c <main+0x8c4>)
 80025e4:	791b      	ldrb	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d109      	bne.n	80025fe <main+0x6b6>
			 {
				 tim9_flag = 0;
 80025ea:	4b89      	ldr	r3, [pc, #548]	@ (8002810 <main+0x8c8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	801a      	strh	r2, [r3, #0]
				 Analyzer.plc_ = TRUE;
 80025f0:	4b86      	ldr	r3, [pc, #536]	@ (800280c <main+0x8c4>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	725a      	strb	r2, [r3, #9]

				 Analyzer.plc = FALSE;
 80025f6:	4b85      	ldr	r3, [pc, #532]	@ (800280c <main+0x8c4>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	711a      	strb	r2, [r3, #4]
 80025fc:	e044      	b.n	8002688 <main+0x740>
			 }
			 else if (Analyzer.plc_ == TRUE)
 80025fe:	4b83      	ldr	r3, [pc, #524]	@ (800280c <main+0x8c4>)
 8002600:	7a5b      	ldrb	r3, [r3, #9]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d140      	bne.n	8002688 <main+0x740>
			 {
				 if (tim9_flag >= 9)   //0.1�? 마다++ >> 2.5�? ??
 8002606:	4b82      	ldr	r3, [pc, #520]	@ (8002810 <main+0x8c8>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	2b08      	cmp	r3, #8
 800260c:	d93c      	bls.n	8002688 <main+0x740>
				 {

					 plc++;
 800260e:	4b81      	ldr	r3, [pc, #516]	@ (8002814 <main+0x8cc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	4a7f      	ldr	r2, [pc, #508]	@ (8002814 <main+0x8cc>)
 8002616:	6013      	str	r3, [r2, #0]
					 //		HAL_Delay(2500);
					 if (num == '1')
 8002618:	4b78      	ldr	r3, [pc, #480]	@ (80027fc <main+0x8b4>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b31      	cmp	r3, #49	@ 0x31
 800261e:	d10d      	bne.n	800263c <main+0x6f4>
					 {
						 FALSE_Init();
 8002620:	f7fe fdfc 	bl	800121c <FALSE_Init>

						 Manual_mode.Box_dropoff = TRUE;
 8002624:	4b76      	ldr	r3, [pc, #472]	@ (8002800 <main+0x8b8>)
 8002626:	2201      	movs	r2, #1
 8002628:	719a      	strb	r2, [r3, #6]
						 box_floor_test_drop = 1;
 800262a:	4b7b      	ldr	r3, [pc, #492]	@ (8002818 <main+0x8d0>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]
						 algo_plc1++;
 8002630:	4b7a      	ldr	r3, [pc, #488]	@ (800281c <main+0x8d4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a79      	ldr	r2, [pc, #484]	@ (800281c <main+0x8d4>)
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e022      	b.n	8002682 <main+0x73a>
					 }
					 else if (num == '2')
 800263c:	4b6f      	ldr	r3, [pc, #444]	@ (80027fc <main+0x8b4>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b32      	cmp	r3, #50	@ 0x32
 8002642:	d10d      	bne.n	8002660 <main+0x718>
					 {
						 FALSE_Init();
 8002644:	f7fe fdea 	bl	800121c <FALSE_Init>

						 Manual_mode.Box_dropoff = TRUE;
 8002648:	4b6d      	ldr	r3, [pc, #436]	@ (8002800 <main+0x8b8>)
 800264a:	2201      	movs	r2, #1
 800264c:	719a      	strb	r2, [r3, #6]
						 box_floor_test_drop = 2;
 800264e:	4b72      	ldr	r3, [pc, #456]	@ (8002818 <main+0x8d0>)
 8002650:	2202      	movs	r2, #2
 8002652:	601a      	str	r2, [r3, #0]
						 algo_plc2++;
 8002654:	4b72      	ldr	r3, [pc, #456]	@ (8002820 <main+0x8d8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	4a71      	ldr	r2, [pc, #452]	@ (8002820 <main+0x8d8>)
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e010      	b.n	8002682 <main+0x73a>
					 }
					 else if (num == '3')
 8002660:	4b66      	ldr	r3, [pc, #408]	@ (80027fc <main+0x8b4>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b33      	cmp	r3, #51	@ 0x33
 8002666:	d10c      	bne.n	8002682 <main+0x73a>
					 {
						 FALSE_Init();
 8002668:	f7fe fdd8 	bl	800121c <FALSE_Init>

						 Manual_mode.Box_dropoff = TRUE;
 800266c:	4b64      	ldr	r3, [pc, #400]	@ (8002800 <main+0x8b8>)
 800266e:	2201      	movs	r2, #1
 8002670:	719a      	strb	r2, [r3, #6]
						 box_floor_test_drop = 3;
 8002672:	4b69      	ldr	r3, [pc, #420]	@ (8002818 <main+0x8d0>)
 8002674:	2203      	movs	r2, #3
 8002676:	601a      	str	r2, [r3, #0]
						 algo_plc3++;
 8002678:	4b6a      	ldr	r3, [pc, #424]	@ (8002824 <main+0x8dc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	4a69      	ldr	r2, [pc, #420]	@ (8002824 <main+0x8dc>)
 8002680:	6013      	str	r3, [r2, #0]
					 }
					Analyzer.plc_ = FALSE;
 8002682:	4b62      	ldr	r3, [pc, #392]	@ (800280c <main+0x8c4>)
 8002684:	2200      	movs	r2, #0
 8002686:	725a      	strb	r2, [r3, #9]




//////////////////////////
			tim12_flag = FALSE;
 8002688:	4b67      	ldr	r3, [pc, #412]	@ (8002828 <main+0x8e0>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
		 DC_Y_back_sensor_flag = 0;
		 }
		 */
		////////////////////

		if (tim6_flag == 1)  //1ms
 800268e:	4b67      	ldr	r3, [pc, #412]	@ (800282c <main+0x8e4>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <main+0x754>





			tim6_flag = 0;
 8002696:	4b65      	ldr	r3, [pc, #404]	@ (800282c <main+0x8e4>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
		}
		if (key_value == '#')
 800269c:	4b64      	ldr	r3, [pc, #400]	@ (8002830 <main+0x8e8>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b23      	cmp	r3, #35	@ 0x23
 80026a2:	d10d      	bne.n	80026c0 <main+0x778>
			Manual_Mode_Y1(1, 2, box_floor_test_pick, box_floor_test_drop);
 80026a4:	4b57      	ldr	r3, [pc, #348]	@ (8002804 <main+0x8bc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002818 <main+0x8d0>)
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80026b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80026bc:	f7fe ffa4 	bl	8001608 <Manual_Mode_Y1>

		if (key_value == '!')
 80026c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002830 <main+0x8e8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b21      	cmp	r3, #33	@ 0x21
 80026c6:	d10d      	bne.n	80026e4 <main+0x79c>
			Manual_Mode_X1(2, 1, box_floor_test_pick, box_floor_test_drop);
 80026c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002804 <main+0x8bc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4a52      	ldr	r2, [pc, #328]	@ (8002818 <main+0x8d0>)
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80026dc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80026e0:	f7ff f840 	bl	8001764 <Manual_Mode_X1>

		if (key_value == '@')
 80026e4:	4b52      	ldr	r3, [pc, #328]	@ (8002830 <main+0x8e8>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b40      	cmp	r3, #64	@ 0x40
 80026ea:	d10d      	bne.n	8002708 <main+0x7c0>
			Manual_Mode_X2(3, 1, box_floor_test_pick, box_floor_test_drop);
 80026ec:	4b45      	ldr	r3, [pc, #276]	@ (8002804 <main+0x8bc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	4a49      	ldr	r2, [pc, #292]	@ (8002818 <main+0x8d0>)
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002700:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002704:	f7ff f8b4 	bl	8001870 <Manual_Mode_X2>

		if (key_value == '$')
 8002708:	4b49      	ldr	r3, [pc, #292]	@ (8002830 <main+0x8e8>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b24      	cmp	r3, #36	@ 0x24
 800270e:	d10d      	bne.n	800272c <main+0x7e4>
			Manual_Mode_X1Y1(2, 2, box_floor_test_pick, box_floor_test_drop);
 8002710:	4b3c      	ldr	r3, [pc, #240]	@ (8002804 <main+0x8bc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4a40      	ldr	r2, [pc, #256]	@ (8002818 <main+0x8d0>)
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002724:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002728:	f7ff f928 	bl	800197c <Manual_Mode_X1Y1>

		if (key_value == '%')
 800272c:	4b40      	ldr	r3, [pc, #256]	@ (8002830 <main+0x8e8>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b25      	cmp	r3, #37	@ 0x25
 8002732:	d10d      	bne.n	8002750 <main+0x808>

			Manual_Mode_X2Y1(3, 2, box_floor_test_pick, box_floor_test_drop);
 8002734:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <main+0x8bc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4a37      	ldr	r2, [pc, #220]	@ (8002818 <main+0x8d0>)
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002748:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800274c:	f7ff fa0c 	bl	8001b68 <Manual_Mode_X2Y1>


		if ((Manual_mode.box_pickup == TRUE) && (RPM_X == 0) && (RPM_Y == 0)) {
 8002750:	4b2b      	ldr	r3, [pc, #172]	@ (8002800 <main+0x8b8>)
 8002752:	795b      	ldrb	r3, [r3, #5]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d118      	bne.n	800278a <main+0x842>
 8002758:	4b36      	ldr	r3, [pc, #216]	@ (8002834 <main+0x8ec>)
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	d110      	bne.n	800278a <main+0x842>
 8002768:	4b33      	ldr	r3, [pc, #204]	@ (8002838 <main+0x8f0>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	d108      	bne.n	800278a <main+0x842>
		i_v_t_count = 0;
 8002778:	4b30      	ldr	r3, [pc, #192]	@ (800283c <main+0x8f4>)
 800277a:	2200      	movs	r2, #0
 800277c:	801a      	strh	r2, [r3, #0]

					Box_pickup(box_floor_test_pick);
 800277e:	4b21      	ldr	r3, [pc, #132]	@ (8002804 <main+0x8bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fda9 	bl	80012dc <Box_pickup>
				}

				if ((Manual_mode.Box_dropoff == TRUE) && (RPM_X == 0) && (RPM_Y == 0)) {
 800278a:	4b1d      	ldr	r3, [pc, #116]	@ (8002800 <main+0x8b8>)
 800278c:	799b      	ldrb	r3, [r3, #6]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d118      	bne.n	80027c4 <main+0x87c>
 8002792:	4b28      	ldr	r3, [pc, #160]	@ (8002834 <main+0x8ec>)
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	eef5 7a40 	vcmp.f32	s15, #0.0
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a0:	d110      	bne.n	80027c4 <main+0x87c>
 80027a2:	4b25      	ldr	r3, [pc, #148]	@ (8002838 <main+0x8f0>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	d108      	bne.n	80027c4 <main+0x87c>
					i_v_t_count = 0;
 80027b2:	4b22      	ldr	r3, [pc, #136]	@ (800283c <main+0x8f4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	801a      	strh	r2, [r3, #0]
					Box_dropoff(box_floor_test_drop);
 80027b8:	4b17      	ldr	r3, [pc, #92]	@ (8002818 <main+0x8d0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fe58 	bl	8001474 <Box_dropoff>
		 RPM_X_back=0;

		 PID_X_finish=0;
		 }
		 */
		if (photo_X_go == TRUE) {
 80027c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <main+0x8f8>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d141      	bne.n	8002850 <main+0x908>
			if (RPM_X == 0) {
 80027cc:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <main+0x8ec>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	d154      	bne.n	8002886 <main+0x93e>
				HAL_Delay(200);
 80027dc:	20c8      	movs	r0, #200	@ 0xc8
 80027de:	f005 fe53 	bl	8008488 <HAL_Delay>
				RPM_X_go = 0;
 80027e2:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <main+0x8fc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
				RPM_X_back = 0;
 80027e8:	4b17      	ldr	r3, [pc, #92]	@ (8002848 <main+0x900>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

				save_X_IN = 0;
 80027ee:	4b17      	ldr	r3, [pc, #92]	@ (800284c <main+0x904>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
				//	PID_X_finish=0;
				photo_X_go = FALSE;
 80027f4:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <main+0x8f8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e044      	b.n	8002886 <main+0x93e>
 80027fc:	2000131a 	.word	0x2000131a
 8002800:	20000c58 	.word	0x20000c58
 8002804:	20000034 	.word	0x20000034
 8002808:	200013a4 	.word	0x200013a4
 800280c:	2000131c 	.word	0x2000131c
 8002810:	20001378 	.word	0x20001378
 8002814:	200011d8 	.word	0x200011d8
 8002818:	20000038 	.word	0x20000038
 800281c:	200013a8 	.word	0x200013a8
 8002820:	200013ac 	.word	0x200013ac
 8002824:	200013b0 	.word	0x200013b0
 8002828:	2000137a 	.word	0x2000137a
 800282c:	200041c7 	.word	0x200041c7
 8002830:	20000716 	.word	0x20000716
 8002834:	20002c64 	.word	0x20002c64
 8002838:	20002c70 	.word	0x20002c70
 800283c:	200014c8 	.word	0x200014c8
 8002840:	20000c6b 	.word	0x20000c6b
 8002844:	20001348 	.word	0x20001348
 8002848:	2000134c 	.word	0x2000134c
 800284c:	200031d8 	.word	0x200031d8
			}

		} else if (photo_X_back == TRUE) {
 8002850:	4b21      	ldr	r3, [pc, #132]	@ (80028d8 <main+0x990>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d116      	bne.n	8002886 <main+0x93e>
			if (RPM_X == 0) {
 8002858:	4b20      	ldr	r3, [pc, #128]	@ (80028dc <main+0x994>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002866:	d10e      	bne.n	8002886 <main+0x93e>
				HAL_Delay(200);
 8002868:	20c8      	movs	r0, #200	@ 0xc8
 800286a:	f005 fe0d 	bl	8008488 <HAL_Delay>
				RPM_X_go = 0;
 800286e:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <main+0x998>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
				RPM_X_back = 0;
 8002874:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <main+0x99c>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

				save_X_IN = 0;
 800287a:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <main+0x9a0>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
				//	PID_X_finish=0;
				photo_X_back = FALSE;
 8002880:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <main+0x990>)
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
		 }
		 }
		 */

		//?��고리�? ?��?��
		if (Transfer_finish) {
 8002886:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <main+0x9a4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <main+0x95e>

			fillQueue(Rx_data);
 800288e:	4818      	ldr	r0, [pc, #96]	@ (80028f0 <main+0x9a8>)
 8002890:	f7ff fa60 	bl	8001d54 <fillQueue>
			//	int i = 0;
			pased_flag = '0';
 8002894:	4b17      	ldr	r3, [pc, #92]	@ (80028f4 <main+0x9ac>)
 8002896:	2230      	movs	r2, #48	@ 0x30
 8002898:	701a      	strb	r2, [r3, #0]
			//		for (i = 0; i < countCmd(Rx_data); i++) {
			//			paser(Rx_data);
			//			//count____++;
			//		}
			paser(Rx_data);
 800289a:	4815      	ldr	r0, [pc, #84]	@ (80028f0 <main+0x9a8>)
 800289c:	f7ff fad0 	bl	8001e40 <paser>

			Transfer_finish = 0;
 80028a0:	4b12      	ldr	r3, [pc, #72]	@ (80028ec <main+0x9a4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
		}

		if (tim5_flag == 1) { //0.01s
 80028a6:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <main+0x9b0>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f47f ac53 	bne.w	8002156 <main+0x20e>
			if (paser_flag == 1) {
 80028b0:	4b12      	ldr	r3, [pc, #72]	@ (80028fc <main+0x9b4>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10a      	bne.n	80028ce <main+0x986>
				paser(Rx_data);
 80028b8:	480d      	ldr	r0, [pc, #52]	@ (80028f0 <main+0x9a8>)
 80028ba:	f7ff fac1 	bl	8001e40 <paser>
				//		HAL_Delay(1500);

				paser_flag = 0;
 80028be:	4b0f      	ldr	r3, [pc, #60]	@ (80028fc <main+0x9b4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
				count____++;
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <main+0x9b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <main+0x9b8>)
 80028cc:	6013      	str	r3, [r2, #0]
			}
			tim5_flag = 0;
 80028ce:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <main+0x9b0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
		if (tim12_flag == TRUE)  //0.1s
 80028d4:	e43f      	b.n	8002156 <main+0x20e>
 80028d6:	bf00      	nop
 80028d8:	20000c6c 	.word	0x20000c6c
 80028dc:	20002c64 	.word	0x20002c64
 80028e0:	20001348 	.word	0x20001348
 80028e4:	2000134c 	.word	0x2000134c
 80028e8:	200031d8 	.word	0x200031d8
 80028ec:	200011d4 	.word	0x200011d4
 80028f0:	20001108 	.word	0x20001108
 80028f4:	2000003c 	.word	0x2000003c
 80028f8:	200041c6 	.word	0x200041c6
 80028fc:	20001319 	.word	0x20001319
 8002900:	20001328 	.word	0x20001328

08002904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b094      	sub	sp, #80	@ 0x50
 8002908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800290a:	f107 0320 	add.w	r3, r7, #32
 800290e:	2230      	movs	r2, #48	@ 0x30
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f00c ff36 	bl	800f784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002918:	f107 030c 	add.w	r3, r7, #12
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <SystemClock_Config+0xcc>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4a27      	ldr	r2, [pc, #156]	@ (80029d0 <SystemClock_Config+0xcc>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
 8002938:	4b25      	ldr	r3, [pc, #148]	@ (80029d0 <SystemClock_Config+0xcc>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002944:	2300      	movs	r3, #0
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	4b22      	ldr	r3, [pc, #136]	@ (80029d4 <SystemClock_Config+0xd0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a21      	ldr	r2, [pc, #132]	@ (80029d4 <SystemClock_Config+0xd0>)
 800294e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b1f      	ldr	r3, [pc, #124]	@ (80029d4 <SystemClock_Config+0xd0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002960:	2301      	movs	r3, #1
 8002962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002964:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800296a:	2302      	movs	r3, #2
 800296c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800296e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002974:	2304      	movs	r3, #4
 8002976:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002978:	23a8      	movs	r3, #168	@ 0xa8
 800297a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800297c:	2302      	movs	r3, #2
 800297e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002980:	2307      	movs	r3, #7
 8002982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002984:	f107 0320 	add.w	r3, r7, #32
 8002988:	4618      	mov	r0, r3
 800298a:	f008 fa87 	bl	800ae9c <HAL_RCC_OscConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002994:	f001 fbbc 	bl	8004110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002998:	230f      	movs	r3, #15
 800299a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800299c:	2302      	movs	r3, #2
 800299e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029b0:	f107 030c 	add.w	r3, r7, #12
 80029b4:	2105      	movs	r1, #5
 80029b6:	4618      	mov	r0, r3
 80029b8:	f008 fce8 	bl	800b38c <HAL_RCC_ClockConfig>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029c2:	f001 fba5 	bl	8004110 <Error_Handler>
  }
}
 80029c6:	bf00      	nop
 80029c8:	3750      	adds	r7, #80	@ 0x50
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000

080029d8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80029dc:	2200      	movs	r2, #0
 80029de:	2100      	movs	r1, #0
 80029e0:	2009      	movs	r0, #9
 80029e2:	f006 fb8c 	bl	80090fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80029e6:	2009      	movs	r0, #9
 80029e8:	f006 fba5 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029f6:	463b      	mov	r3, r7
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002a02:	4b32      	ldr	r3, [pc, #200]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a04:	4a32      	ldr	r2, [pc, #200]	@ (8002ad0 <MX_ADC3_Init+0xe0>)
 8002a06:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a08:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a0e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002a10:	4b2e      	ldr	r3, [pc, #184]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8002a16:	4b2d      	ldr	r3, [pc, #180]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 8002a22:	4b2a      	ldr	r3, [pc, #168]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 3;
 8002a2a:	4b28      	ldr	r3, [pc, #160]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a30:	4b26      	ldr	r3, [pc, #152]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8002a38:	4b24      	ldr	r3, [pc, #144]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a3a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a40:	4b22      	ldr	r3, [pc, #136]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8002a46:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a48:	2203      	movs	r2, #3
 8002a4a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a54:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002a5a:	481c      	ldr	r0, [pc, #112]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a5c:	f005 fd38 	bl	80084d0 <HAL_ADC_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_ADC3_Init+0x7a>
  {
    Error_Handler();
 8002a66:	f001 fb53 	bl	8004110 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002a6a:	230d      	movs	r3, #13
 8002a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002a72:	2307      	movs	r3, #7
 8002a74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a76:	463b      	mov	r3, r7
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4814      	ldr	r0, [pc, #80]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a7c:	f005 ffaa 	bl	80089d4 <HAL_ADC_ConfigChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8002a86:	f001 fb43 	bl	8004110 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002a8a:	230a      	movs	r3, #10
 8002a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a92:	463b      	mov	r3, r7
 8002a94:	4619      	mov	r1, r3
 8002a96:	480d      	ldr	r0, [pc, #52]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002a98:	f005 ff9c 	bl	80089d4 <HAL_ADC_ConfigChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8002aa2:	f001 fb35 	bl	8004110 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002aa6:	230b      	movs	r3, #11
 8002aa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002aae:	463b      	mov	r3, r7
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4806      	ldr	r0, [pc, #24]	@ (8002acc <MX_ADC3_Init+0xdc>)
 8002ab4:	f005 ff8e 	bl	80089d4 <HAL_ADC_ConfigChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8002abe:	f001 fb27 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000720 	.word	0x20000720
 8002ad0:	40012200 	.word	0x40012200

08002ad4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002ada:	4a1c      	ldr	r2, [pc, #112]	@ (8002b4c <MX_I2C2_Init+0x78>)
 8002adc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002ade:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b50 <MX_I2C2_Init+0x7c>)
 8002ae2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ae4:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002aea:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002af0:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002af2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002af6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002afe:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b04:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b10:	480d      	ldr	r0, [pc, #52]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b12:	f007 f923 	bl	8009d5c <HAL_I2C_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b1c:	f001 faf8 	bl	8004110 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b20:	2100      	movs	r1, #0
 8002b22:	4809      	ldr	r0, [pc, #36]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b24:	f008 f93e 	bl	800ada4 <HAL_I2CEx_ConfigAnalogFilter>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002b2e:	f001 faef 	bl	8004110 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002b32:	2100      	movs	r1, #0
 8002b34:	4804      	ldr	r0, [pc, #16]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b36:	f008 f971 	bl	800ae1c <HAL_I2CEx_ConfigDigitalFilter>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002b40:	f001 fae6 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200007c8 	.word	0x200007c8
 8002b4c:	40005800 	.word	0x40005800
 8002b50:	000186a0 	.word	0x000186a0

08002b54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	@ 0x30
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	2224      	movs	r2, #36	@ 0x24
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f00c fe0e 	bl	800f784 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b70:	4b21      	ldr	r3, [pc, #132]	@ (8002bf8 <MX_TIM2_Init+0xa4>)
 8002b72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 8002b78:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf8 <MX_TIM2_Init+0xa4>)
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf8 <MX_TIM2_Init+0xa4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8002b84:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <MX_TIM2_Init+0xa4>)
 8002b86:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <MX_TIM2_Init+0xa4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b92:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <MX_TIM2_Init+0xa4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480d      	ldr	r0, [pc, #52]	@ (8002bf8 <MX_TIM2_Init+0xa4>)
 8002bc4:	f009 fa82 	bl	800c0cc <HAL_TIM_Encoder_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002bce:	f001 fa9f 	bl	8004110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4806      	ldr	r0, [pc, #24]	@ (8002bf8 <MX_TIM2_Init+0xa4>)
 8002be0:	f00a fa50 	bl	800d084 <HAL_TIMEx_MasterConfigSynchronization>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002bea:	f001 fa91 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	3730      	adds	r7, #48	@ 0x30
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000081c 	.word	0x2000081c

08002bfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	@ 0x38
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c10:	f107 0320 	add.w	r3, r7, #32
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
 8002c28:	615a      	str	r2, [r3, #20]
 8002c2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c2c:	4b39      	ldr	r3, [pc, #228]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002c2e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d18 <MX_TIM3_Init+0x11c>)
 8002c30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002c32:	4b38      	ldr	r3, [pc, #224]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002c34:	2253      	movs	r2, #83	@ 0x53
 8002c36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	4b36      	ldr	r3, [pc, #216]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002c3e:	4b35      	ldr	r3, [pc, #212]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002c40:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002c44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c46:	4b33      	ldr	r3, [pc, #204]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4c:	4b31      	ldr	r3, [pc, #196]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c52:	4830      	ldr	r0, [pc, #192]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002c54:	f008 fdba 	bl	800b7cc <HAL_TIM_Base_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002c5e:	f001 fa57 	bl	8004110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4829      	ldr	r0, [pc, #164]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002c70:	f009 fe06 	bl	800c880 <HAL_TIM_ConfigClockSource>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002c7a:	f001 fa49 	bl	8004110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c7e:	4825      	ldr	r0, [pc, #148]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002c80:	f009 f892 	bl	800bda8 <HAL_TIM_PWM_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002c8a:	f001 fa41 	bl	8004110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c96:	f107 0320 	add.w	r3, r7, #32
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	481d      	ldr	r0, [pc, #116]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002c9e:	f00a f9f1 	bl	800d084 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002ca8:	f001 fa32 	bl	8004110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cac:	2360      	movs	r3, #96	@ 0x60
 8002cae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 600;
 8002cb0:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8002cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4813      	ldr	r0, [pc, #76]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002cc6:	f009 fd19 	bl	800c6fc <HAL_TIM_PWM_ConfigChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002cd0:	f001 fa1e 	bl	8004110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	480e      	ldr	r0, [pc, #56]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002cdc:	f009 fd0e 	bl	800c6fc <HAL_TIM_PWM_ConfigChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002ce6:	f001 fa13 	bl	8004110 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	220c      	movs	r2, #12
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4807      	ldr	r0, [pc, #28]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002cf6:	f009 fd01 	bl	800c6fc <HAL_TIM_PWM_ConfigChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8002d00:	f001 fa06 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d04:	4803      	ldr	r0, [pc, #12]	@ (8002d14 <MX_TIM3_Init+0x118>)
 8002d06:	f004 fd9b 	bl	8007840 <HAL_TIM_MspPostInit>

}
 8002d0a:	bf00      	nop
 8002d0c:	3738      	adds	r7, #56	@ 0x38
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000864 	.word	0x20000864
 8002d18:	40000400 	.word	0x40000400

08002d1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	@ 0x30
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	2224      	movs	r2, #36	@ 0x24
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f00c fd2a 	bl	800f784 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d38:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <MX_TIM4_Init+0xa0>)
 8002d3a:	4a21      	ldr	r2, [pc, #132]	@ (8002dc0 <MX_TIM4_Init+0xa4>)
 8002d3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dbc <MX_TIM4_Init+0xa0>)
 8002d40:	220f      	movs	r2, #15
 8002d42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d44:	4b1d      	ldr	r3, [pc, #116]	@ (8002dbc <MX_TIM4_Init+0xa0>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dbc <MX_TIM4_Init+0xa0>)
 8002d4c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002d50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	@ (8002dbc <MX_TIM4_Init+0xa0>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d58:	4b18      	ldr	r3, [pc, #96]	@ (8002dbc <MX_TIM4_Init+0xa0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d66:	2301      	movs	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d76:	2301      	movs	r3, #1
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	4619      	mov	r1, r3
 8002d88:	480c      	ldr	r0, [pc, #48]	@ (8002dbc <MX_TIM4_Init+0xa0>)
 8002d8a:	f009 f99f 	bl	800c0cc <HAL_TIM_Encoder_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002d94:	f001 f9bc 	bl	8004110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	4619      	mov	r1, r3
 8002da4:	4805      	ldr	r0, [pc, #20]	@ (8002dbc <MX_TIM4_Init+0xa0>)
 8002da6:	f00a f96d 	bl	800d084 <HAL_TIMEx_MasterConfigSynchronization>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002db0:	f001 f9ae 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002db4:	bf00      	nop
 8002db6:	3730      	adds	r7, #48	@ 0x30
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	200008ac 	.word	0x200008ac
 8002dc0:	40000800 	.word	0x40000800

08002dc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dca:	f107 0308 	add.w	r3, r7, #8
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd8:	463b      	mov	r3, r7
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002de0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <MX_TIM5_Init+0x94>)
 8002de2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e5c <MX_TIM5_Init+0x98>)
 8002de4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8002de6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e58 <MX_TIM5_Init+0x94>)
 8002de8:	2253      	movs	r2, #83	@ 0x53
 8002dea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dec:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <MX_TIM5_Init+0x94>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8002df2:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <MX_TIM5_Init+0x94>)
 8002df4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002df8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfa:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <MX_TIM5_Init+0x94>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e00:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <MX_TIM5_Init+0x94>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e06:	4814      	ldr	r0, [pc, #80]	@ (8002e58 <MX_TIM5_Init+0x94>)
 8002e08:	f008 fce0 	bl	800b7cc <HAL_TIM_Base_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002e12:	f001 f97d 	bl	8004110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e1c:	f107 0308 	add.w	r3, r7, #8
 8002e20:	4619      	mov	r1, r3
 8002e22:	480d      	ldr	r0, [pc, #52]	@ (8002e58 <MX_TIM5_Init+0x94>)
 8002e24:	f009 fd2c 	bl	800c880 <HAL_TIM_ConfigClockSource>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002e2e:	f001 f96f 	bl	8004110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4806      	ldr	r0, [pc, #24]	@ (8002e58 <MX_TIM5_Init+0x94>)
 8002e40:	f00a f920 	bl	800d084 <HAL_TIMEx_MasterConfigSynchronization>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002e4a:	f001 f961 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200008f4 	.word	0x200008f4
 8002e5c:	40000c00 	.word	0x40000c00

08002e60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_Init 0 */
	//0.001s = 1ms
	//PID ?��?���? 주기
  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e66:	463b      	mov	r3, r7
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ec4 <MX_TIM6_Init+0x64>)
 8002e70:	4a15      	ldr	r2, [pc, #84]	@ (8002ec8 <MX_TIM6_Init+0x68>)
 8002e72:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8002e74:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <MX_TIM6_Init+0x64>)
 8002e76:	2253      	movs	r2, #83	@ 0x53
 8002e78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7a:	4b12      	ldr	r3, [pc, #72]	@ (8002ec4 <MX_TIM6_Init+0x64>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002e80:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <MX_TIM6_Init+0x64>)
 8002e82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec4 <MX_TIM6_Init+0x64>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e8e:	480d      	ldr	r0, [pc, #52]	@ (8002ec4 <MX_TIM6_Init+0x64>)
 8002e90:	f008 fc9c 	bl	800b7cc <HAL_TIM_Base_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002e9a:	f001 f939 	bl	8004110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ea6:	463b      	mov	r3, r7
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4806      	ldr	r0, [pc, #24]	@ (8002ec4 <MX_TIM6_Init+0x64>)
 8002eac:	f00a f8ea 	bl	800d084 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002eb6:	f001 f92b 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	2000093c 	.word	0x2000093c
 8002ec8:	40001000 	.word	0x40001000

08002ecc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002eda:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <MX_TIM7_Init+0x60>)
 8002edc:	4a14      	ldr	r2, [pc, #80]	@ (8002f30 <MX_TIM7_Init+0x64>)
 8002ede:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 8002ee0:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <MX_TIM7_Init+0x60>)
 8002ee2:	2253      	movs	r2, #83	@ 0x53
 8002ee4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee6:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <MX_TIM7_Init+0x60>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8002eec:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <MX_TIM7_Init+0x60>)
 8002eee:	2263      	movs	r2, #99	@ 0x63
 8002ef0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <MX_TIM7_Init+0x60>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002ef8:	480c      	ldr	r0, [pc, #48]	@ (8002f2c <MX_TIM7_Init+0x60>)
 8002efa:	f008 fc67 	bl	800b7cc <HAL_TIM_Base_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002f04:	f001 f904 	bl	8004110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f10:	463b      	mov	r3, r7
 8002f12:	4619      	mov	r1, r3
 8002f14:	4805      	ldr	r0, [pc, #20]	@ (8002f2c <MX_TIM7_Init+0x60>)
 8002f16:	f00a f8b5 	bl	800d084 <HAL_TIMEx_MasterConfigSynchronization>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002f20:	f001 f8f6 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000984 	.word	0x20000984
 8002f30:	40001400 	.word	0x40001400

08002f34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b096      	sub	sp, #88	@ 0x58
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */
	//ADC 측정 ???���? , ?��중엔 ?��?�� x
  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	615a      	str	r2, [r3, #20]
 8002f64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2220      	movs	r2, #32
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f00c fc09 	bl	800f784 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002f72:	4b3c      	ldr	r3, [pc, #240]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002f74:	4a3c      	ldr	r2, [pc, #240]	@ (8003068 <MX_TIM8_Init+0x134>)
 8002f76:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84-1;
 8002f78:	4b3a      	ldr	r3, [pc, #232]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002f7a:	2253      	movs	r2, #83	@ 0x53
 8002f7c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7e:	4b39      	ldr	r3, [pc, #228]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 300-1;
 8002f84:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002f86:	f240 122b 	movw	r2, #299	@ 0x12b
 8002f8a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8c:	4b35      	ldr	r3, [pc, #212]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f92:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f98:	4b32      	ldr	r3, [pc, #200]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002f9e:	4831      	ldr	r0, [pc, #196]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002fa0:	f008 fc14 	bl	800b7cc <HAL_TIM_Base_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002faa:	f001 f8b1 	bl	8004110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002fb4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002fb8:	4619      	mov	r1, r3
 8002fba:	482a      	ldr	r0, [pc, #168]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002fbc:	f009 fc60 	bl	800c880 <HAL_TIM_ConfigClockSource>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002fc6:	f001 f8a3 	bl	8004110 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002fca:	4826      	ldr	r0, [pc, #152]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002fcc:	f008 fcbe 	bl	800b94c <HAL_TIM_OC_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002fd6:	f001 f89b 	bl	8004110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002fe2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	481e      	ldr	r0, [pc, #120]	@ (8003064 <MX_TIM8_Init+0x130>)
 8002fea:	f00a f84b 	bl	800d084 <HAL_TIMEx_MasterConfigSynchronization>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002ff4:	f001 f88c 	bl	8004110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 2000;
 8002ffc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003000:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003002:	2300      	movs	r3, #0
 8003004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003006:	2300      	movs	r3, #0
 8003008:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003016:	220c      	movs	r2, #12
 8003018:	4619      	mov	r1, r3
 800301a:	4812      	ldr	r0, [pc, #72]	@ (8003064 <MX_TIM8_Init+0x130>)
 800301c:	f009 fb12 	bl	800c644 <HAL_TIM_OC_ConfigChannel>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003026:	f001 f873 	bl	8004110 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800303e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003042:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	4619      	mov	r1, r3
 800304c:	4805      	ldr	r0, [pc, #20]	@ (8003064 <MX_TIM8_Init+0x130>)
 800304e:	f00a f895 	bl	800d17c <HAL_TIMEx_ConfigBreakDeadTime>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8003058:	f001 f85a 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800305c:	bf00      	nop
 800305e:	3758      	adds	r7, #88	@ 0x58
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	200009cc 	.word	0x200009cc
 8003068:	40010400 	.word	0x40010400

0800306c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003072:	463b      	mov	r3, r7
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800307e:	4b16      	ldr	r3, [pc, #88]	@ (80030d8 <MX_TIM9_Init+0x6c>)
 8003080:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <MX_TIM9_Init+0x70>)
 8003082:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800-1;
 8003084:	4b14      	ldr	r3, [pc, #80]	@ (80030d8 <MX_TIM9_Init+0x6c>)
 8003086:	f244 129f 	movw	r2, #16799	@ 0x419f
 800308a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308c:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <MX_TIM9_Init+0x6c>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8003092:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <MX_TIM9_Init+0x6c>)
 8003094:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003098:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309a:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <MX_TIM9_Init+0x6c>)
 800309c:	2200      	movs	r2, #0
 800309e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a0:	4b0d      	ldr	r3, [pc, #52]	@ (80030d8 <MX_TIM9_Init+0x6c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80030a6:	480c      	ldr	r0, [pc, #48]	@ (80030d8 <MX_TIM9_Init+0x6c>)
 80030a8:	f008 fb90 	bl	800b7cc <HAL_TIM_Base_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80030b2:	f001 f82d 	bl	8004110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ba:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80030bc:	463b      	mov	r3, r7
 80030be:	4619      	mov	r1, r3
 80030c0:	4805      	ldr	r0, [pc, #20]	@ (80030d8 <MX_TIM9_Init+0x6c>)
 80030c2:	f009 fbdd 	bl	800c880 <HAL_TIM_ConfigClockSource>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80030cc:	f001 f820 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000a14 	.word	0x20000a14
 80030dc:	40014000 	.word	0x40014000

080030e0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80030e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <MX_TIM10_Init+0x40>)
 80030e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003124 <MX_TIM10_Init+0x44>)
 80030e8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16800-1;
 80030ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <MX_TIM10_Init+0x40>)
 80030ec:	f244 129f 	movw	r2, #16799	@ 0x419f
 80030f0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <MX_TIM10_Init+0x40>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <MX_TIM10_Init+0x40>)
 80030fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80030fe:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003100:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <MX_TIM10_Init+0x40>)
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <MX_TIM10_Init+0x40>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800310c:	4804      	ldr	r0, [pc, #16]	@ (8003120 <MX_TIM10_Init+0x40>)
 800310e:	f008 fb5d 	bl	800b7cc <HAL_TIM_Base_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003118:	f000 fffa 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000a5c 	.word	0x20000a5c
 8003124:	40014400 	.word	0x40014400

08003128 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800312e:	1d3b      	adds	r3, r7, #4
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
 800313c:	615a      	str	r2, [r3, #20]
 800313e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003140:	4b1e      	ldr	r3, [pc, #120]	@ (80031bc <MX_TIM11_Init+0x94>)
 8003142:	4a1f      	ldr	r2, [pc, #124]	@ (80031c0 <MX_TIM11_Init+0x98>)
 8003144:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8003146:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <MX_TIM11_Init+0x94>)
 8003148:	22a7      	movs	r2, #167	@ 0xa7
 800314a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <MX_TIM11_Init+0x94>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 800-1;
 8003152:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <MX_TIM11_Init+0x94>)
 8003154:	f240 321f 	movw	r2, #799	@ 0x31f
 8003158:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800315a:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <MX_TIM11_Init+0x94>)
 800315c:	2200      	movs	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003160:	4b16      	ldr	r3, [pc, #88]	@ (80031bc <MX_TIM11_Init+0x94>)
 8003162:	2280      	movs	r2, #128	@ 0x80
 8003164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003166:	4815      	ldr	r0, [pc, #84]	@ (80031bc <MX_TIM11_Init+0x94>)
 8003168:	f008 fb30 	bl	800b7cc <HAL_TIM_Base_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003172:	f000 ffcd 	bl	8004110 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8003176:	4811      	ldr	r0, [pc, #68]	@ (80031bc <MX_TIM11_Init+0x94>)
 8003178:	f008 fbe8 	bl	800b94c <HAL_TIM_OC_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003182:	f000 ffc5 	bl	8004110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003186:	2330      	movs	r3, #48	@ 0x30
 8003188:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 800318a:	2332      	movs	r3, #50	@ 0x32
 800318c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	2200      	movs	r2, #0
 800319a:	4619      	mov	r1, r3
 800319c:	4807      	ldr	r0, [pc, #28]	@ (80031bc <MX_TIM11_Init+0x94>)
 800319e:	f009 fa51 	bl	800c644 <HAL_TIM_OC_ConfigChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80031a8:	f000 ffb2 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80031ac:	4803      	ldr	r0, [pc, #12]	@ (80031bc <MX_TIM11_Init+0x94>)
 80031ae:	f004 fb47 	bl	8007840 <HAL_TIM_MspPostInit>

}
 80031b2:	bf00      	nop
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000aa4 	.word	0x20000aa4
 80031c0:	40014800 	.word	0x40014800

080031c4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */
	// 초음?�� ?��?��
  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ca:	463b      	mov	r3, r7
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80031d6:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <MX_TIM12_Init+0x6c>)
 80031d8:	4a16      	ldr	r2, [pc, #88]	@ (8003234 <MX_TIM12_Init+0x70>)
 80031da:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 8400-1;
 80031dc:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <MX_TIM12_Init+0x6c>)
 80031de:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80031e2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e4:	4b12      	ldr	r3, [pc, #72]	@ (8003230 <MX_TIM12_Init+0x6c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 80031ea:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <MX_TIM12_Init+0x6c>)
 80031ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031f0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003230 <MX_TIM12_Init+0x6c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <MX_TIM12_Init+0x6c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80031fe:	480c      	ldr	r0, [pc, #48]	@ (8003230 <MX_TIM12_Init+0x6c>)
 8003200:	f008 fae4 	bl	800b7cc <HAL_TIM_Base_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800320a:	f000 ff81 	bl	8004110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800320e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003212:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003214:	463b      	mov	r3, r7
 8003216:	4619      	mov	r1, r3
 8003218:	4805      	ldr	r0, [pc, #20]	@ (8003230 <MX_TIM12_Init+0x6c>)
 800321a:	f009 fb31 	bl	800c880 <HAL_TIM_ConfigClockSource>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8003224:	f000 ff74 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000aec 	.word	0x20000aec
 8003234:	40001800 	.word	0x40001800

08003238 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */
// ?��?��?�� ?��
  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
 800324c:	615a      	str	r2, [r3, #20]
 800324e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003250:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <MX_TIM13_Init+0xa4>)
 8003252:	4a23      	ldr	r2, [pc, #140]	@ (80032e0 <MX_TIM13_Init+0xa8>)
 8003254:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 8003256:	4b21      	ldr	r3, [pc, #132]	@ (80032dc <MX_TIM13_Init+0xa4>)
 8003258:	2253      	movs	r2, #83	@ 0x53
 800325a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325c:	4b1f      	ldr	r3, [pc, #124]	@ (80032dc <MX_TIM13_Init+0xa4>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 800-1;
 8003262:	4b1e      	ldr	r3, [pc, #120]	@ (80032dc <MX_TIM13_Init+0xa4>)
 8003264:	f240 321f 	movw	r2, #799	@ 0x31f
 8003268:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800326a:	4b1c      	ldr	r3, [pc, #112]	@ (80032dc <MX_TIM13_Init+0xa4>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003270:	4b1a      	ldr	r3, [pc, #104]	@ (80032dc <MX_TIM13_Init+0xa4>)
 8003272:	2280      	movs	r2, #128	@ 0x80
 8003274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003276:	4819      	ldr	r0, [pc, #100]	@ (80032dc <MX_TIM13_Init+0xa4>)
 8003278:	f008 faa8 	bl	800b7cc <HAL_TIM_Base_Init>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003282:	f000 ff45 	bl	8004110 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8003286:	4815      	ldr	r0, [pc, #84]	@ (80032dc <MX_TIM13_Init+0xa4>)
 8003288:	f008 fb60 	bl	800b94c <HAL_TIM_OC_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003292:	f000 ff3d 	bl	8004110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003296:	2330      	movs	r3, #48	@ 0x30
 8003298:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 130;
 800329a:	2382      	movs	r3, #130	@ 0x82
 800329c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	2200      	movs	r2, #0
 80032aa:	4619      	mov	r1, r3
 80032ac:	480b      	ldr	r0, [pc, #44]	@ (80032dc <MX_TIM13_Init+0xa4>)
 80032ae:	f009 f9c9 	bl	800c644 <HAL_TIM_OC_ConfigChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80032b8:	f000 ff2a 	bl	8004110 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim13, TIM_CHANNEL_1);
 80032bc:	4b07      	ldr	r3, [pc, #28]	@ (80032dc <MX_TIM13_Init+0xa4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <MX_TIM13_Init+0xa4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0208 	orr.w	r2, r2, #8
 80032ca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM13_Init 2 */
	//HAL_TIM_MspPostInit(&htim13);
  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80032cc:	4803      	ldr	r0, [pc, #12]	@ (80032dc <MX_TIM13_Init+0xa4>)
 80032ce:	f004 fab7 	bl	8007840 <HAL_TIM_MspPostInit>

}
 80032d2:	bf00      	nop
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000b34 	.word	0x20000b34
 80032e0:	40001c00 	.word	0x40001c00

080032e4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80032e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <MX_TIM14_Init+0x40>)
 80032ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003328 <MX_TIM14_Init+0x44>)
 80032ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <MX_TIM14_Init+0x40>)
 80032f0:	2253      	movs	r2, #83	@ 0x53
 80032f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <MX_TIM14_Init+0x40>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80032fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <MX_TIM14_Init+0x40>)
 80032fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003300:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003302:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <MX_TIM14_Init+0x40>)
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003308:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <MX_TIM14_Init+0x40>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800330e:	4805      	ldr	r0, [pc, #20]	@ (8003324 <MX_TIM14_Init+0x40>)
 8003310:	f008 fa5c 	bl	800b7cc <HAL_TIM_Base_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800331a:	f000 fef9 	bl	8004110 <Error_Handler>
//	TIM14->DIER |= (1 << 0);   // CC1IE: Enable the Tim14 UG interrupt
//	NVIC->ISER[1] |= (1 << (45 - 32)); // TIM14_CC
//	TIM14->CR1 |= (1 << 0);	// CEN: Counter TIM14 enable
  /* USER CODE END TIM14_Init 2 */

}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000b7c 	.word	0x20000b7c
 8003328:	40002000 	.word	0x40002000

0800332c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003330:	4b11      	ldr	r3, [pc, #68]	@ (8003378 <MX_UART4_Init+0x4c>)
 8003332:	4a12      	ldr	r2, [pc, #72]	@ (800337c <MX_UART4_Init+0x50>)
 8003334:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <MX_UART4_Init+0x4c>)
 8003338:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800333c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800333e:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <MX_UART4_Init+0x4c>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <MX_UART4_Init+0x4c>)
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800334a:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <MX_UART4_Init+0x4c>)
 800334c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003350:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003352:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <MX_UART4_Init+0x4c>)
 8003354:	220c      	movs	r2, #12
 8003356:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003358:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <MX_UART4_Init+0x4c>)
 800335a:	2200      	movs	r2, #0
 800335c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800335e:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <MX_UART4_Init+0x4c>)
 8003360:	2200      	movs	r2, #0
 8003362:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003364:	4804      	ldr	r0, [pc, #16]	@ (8003378 <MX_UART4_Init+0x4c>)
 8003366:	f009 ff6f 	bl	800d248 <HAL_UART_Init>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8003370:	f000 fece 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003374:	bf00      	nop
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000bc4 	.word	0x20000bc4
 800337c:	40004c00 	.word	0x40004c00

08003380 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003384:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <MX_USART3_UART_Init+0x4c>)
 8003386:	4a12      	ldr	r2, [pc, #72]	@ (80033d0 <MX_USART3_UART_Init+0x50>)
 8003388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800338a:	4b10      	ldr	r3, [pc, #64]	@ (80033cc <MX_USART3_UART_Init+0x4c>)
 800338c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003392:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <MX_USART3_UART_Init+0x4c>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <MX_USART3_UART_Init+0x4c>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <MX_USART3_UART_Init+0x4c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033a4:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <MX_USART3_UART_Init+0x4c>)
 80033a6:	220c      	movs	r2, #12
 80033a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033aa:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <MX_USART3_UART_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b0:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <MX_USART3_UART_Init+0x4c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033b6:	4805      	ldr	r0, [pc, #20]	@ (80033cc <MX_USART3_UART_Init+0x4c>)
 80033b8:	f009 ff46 	bl	800d248 <HAL_UART_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80033c2:	f000 fea5 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000c0c 	.word	0x20000c0c
 80033d0:	40004800 	.word	0x40004800

080033d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <MX_DMA_Init+0x3c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	4a0b      	ldr	r2, [pc, #44]	@ (8003410 <MX_DMA_Init+0x3c>)
 80033e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ea:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <MX_DMA_Init+0x3c>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	2039      	movs	r0, #57	@ 0x39
 80033fc:	f005 fe7f 	bl	80090fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003400:	2039      	movs	r0, #57	@ 0x39
 8003402:	f005 fe98 	bl	8009136 <HAL_NVIC_EnableIRQ>

}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800

08003414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08e      	sub	sp, #56	@ 0x38
 8003418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	623b      	str	r3, [r7, #32]
 800342e:	4bb6      	ldr	r3, [pc, #728]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	4ab5      	ldr	r2, [pc, #724]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6313      	str	r3, [r2, #48]	@ 0x30
 800343a:	4bb3      	ldr	r3, [pc, #716]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	4baf      	ldr	r3, [pc, #700]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	4aae      	ldr	r2, [pc, #696]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 8003450:	f043 0320 	orr.w	r3, r3, #32
 8003454:	6313      	str	r3, [r2, #48]	@ 0x30
 8003456:	4bac      	ldr	r3, [pc, #688]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	4ba8      	ldr	r3, [pc, #672]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	4aa7      	ldr	r2, [pc, #668]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 800346c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003470:	6313      	str	r3, [r2, #48]	@ 0x30
 8003472:	4ba5      	ldr	r3, [pc, #660]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	4ba1      	ldr	r3, [pc, #644]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	4aa0      	ldr	r2, [pc, #640]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6313      	str	r3, [r2, #48]	@ 0x30
 800348e:	4b9e      	ldr	r3, [pc, #632]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	4b9a      	ldr	r3, [pc, #616]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	4a99      	ldr	r2, [pc, #612]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034aa:	4b97      	ldr	r3, [pc, #604]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	4b93      	ldr	r3, [pc, #588]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	4a92      	ldr	r2, [pc, #584]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034c6:	4b90      	ldr	r3, [pc, #576]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	4b8c      	ldr	r3, [pc, #560]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	4a8b      	ldr	r2, [pc, #556]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034dc:	f043 0308 	orr.w	r3, r3, #8
 80034e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e2:	4b89      	ldr	r3, [pc, #548]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	4b85      	ldr	r3, [pc, #532]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	4a84      	ldr	r2, [pc, #528]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 80034f8:	f043 0310 	orr.w	r3, r3, #16
 80034fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034fe:	4b82      	ldr	r3, [pc, #520]	@ (8003708 <MX_GPIO_Init+0x2f4>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, linear_DIR_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800350a:	2200      	movs	r2, #0
 800350c:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8003510:	487e      	ldr	r0, [pc, #504]	@ (800370c <MX_GPIO_Init+0x2f8>)
 8003512:	f006 fbf1 	bl	8009cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(linear_goback_GPIO_Port, linear_goback_Pin, GPIO_PIN_RESET);
 8003516:	2200      	movs	r2, #0
 8003518:	2104      	movs	r1, #4
 800351a:	487d      	ldr	r0, [pc, #500]	@ (8003710 <MX_GPIO_Init+0x2fc>)
 800351c:	f006 fbec 	bl	8009cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DC_M_GO_Y_Pin|DC_M_DIR_Y_Pin|LD3_Pin
 8003520:	2200      	movs	r2, #0
 8003522:	f644 4181 	movw	r1, #19585	@ 0x4c81
 8003526:	487b      	ldr	r0, [pc, #492]	@ (8003714 <MX_GPIO_Init+0x300>)
 8003528:	f006 fbe6 	bl	8009cf8 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DC_M_GO_X_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800352c:	2200      	movs	r2, #0
 800352e:	210d      	movs	r1, #13
 8003530:	4879      	ldr	r0, [pc, #484]	@ (8003718 <MX_GPIO_Init+0x304>)
 8003532:	f006 fbe1 	bl	8009cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8003536:	2200      	movs	r2, #0
 8003538:	2180      	movs	r1, #128	@ 0x80
 800353a:	4878      	ldr	r0, [pc, #480]	@ (800371c <MX_GPIO_Init+0x308>)
 800353c:	f006 fbdc 	bl	8009cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_M_DIR_X_GPIO_Port, DC_M_DIR_X_Pin, GPIO_PIN_RESET);
 8003540:	2200      	movs	r2, #0
 8003542:	2101      	movs	r1, #1
 8003544:	4876      	ldr	r0, [pc, #472]	@ (8003720 <MX_GPIO_Init+0x30c>)
 8003546:	f006 fbd7 	bl	8009cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_Btn_Pin PC6 */
  GPIO_InitStruct.Pin = USER_Btn_Pin|GPIO_PIN_6;
 800354a:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003550:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800355e:	4619      	mov	r1, r3
 8003560:	486b      	ldr	r0, [pc, #428]	@ (8003710 <MX_GPIO_Init+0x2fc>)
 8003562:	f006 fa05 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003566:	2304      	movs	r3, #4
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800356a:	2300      	movs	r3, #0
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	2300      	movs	r3, #0
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003576:	4619      	mov	r1, r3
 8003578:	4864      	ldr	r0, [pc, #400]	@ (800370c <MX_GPIO_Init+0x2f8>)
 800357a:	f006 f9f9 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pins : linear_DIR_Pin PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = linear_DIR_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800357e:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8003582:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003584:	2301      	movs	r3, #1
 8003586:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358c:	2300      	movs	r3, #0
 800358e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003594:	4619      	mov	r1, r3
 8003596:	485d      	ldr	r0, [pc, #372]	@ (800370c <MX_GPIO_Init+0x2f8>)
 8003598:	f006 f9ea 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pin : linear_goback_Pin */
  GPIO_InitStruct.Pin = linear_goback_Pin;
 800359c:	2304      	movs	r3, #4
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a0:	2301      	movs	r3, #1
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a8:	2300      	movs	r3, #0
 80035aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(linear_goback_GPIO_Port, &GPIO_InitStruct);
 80035ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035b0:	4619      	mov	r1, r3
 80035b2:	4857      	ldr	r0, [pc, #348]	@ (8003710 <MX_GPIO_Init+0x2fc>)
 80035b4:	f006 f9dc 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOWN_LIMIT_SW_Pin */
  GPIO_InitStruct.Pin = DOWN_LIMIT_SW_Pin;
 80035b8:	2308      	movs	r3, #8
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80035c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DOWN_LIMIT_SW_GPIO_Port, &GPIO_InitStruct);
 80035c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ca:	4619      	mov	r1, r3
 80035cc:	4855      	ldr	r0, [pc, #340]	@ (8003724 <MX_GPIO_Init+0x310>)
 80035ce:	f006 f9cf 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035d2:	2380      	movs	r3, #128	@ 0x80
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d6:	2300      	movs	r3, #0
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035e2:	4619      	mov	r1, r3
 80035e4:	484f      	ldr	r0, [pc, #316]	@ (8003724 <MX_GPIO_Init+0x310>)
 80035e6:	f006 f9c3 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DC_M_GO_Y_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DC_M_GO_Y_Pin|LD3_Pin|LD2_Pin;
 80035ea:	f244 4381 	movw	r3, #17537	@ 0x4481
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f0:	2301      	movs	r3, #1
 80035f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f8:	2300      	movs	r3, #0
 80035fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003600:	4619      	mov	r1, r3
 8003602:	4844      	ldr	r0, [pc, #272]	@ (8003714 <MX_GPIO_Init+0x300>)
 8003604:	f006 f9b4 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_M_GO_X_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = DC_M_GO_X_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8003608:	230d      	movs	r3, #13
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360c:	2301      	movs	r3, #1
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003614:	2300      	movs	r3, #0
 8003616:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800361c:	4619      	mov	r1, r3
 800361e:	483e      	ldr	r0, [pc, #248]	@ (8003718 <MX_GPIO_Init+0x304>)
 8003620:	f006 f9a6 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_M_DIR_Y_Pin */
  GPIO_InitStruct.Pin = DC_M_DIR_Y_Pin;
 8003624:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800362a:	2301      	movs	r3, #1
 800362c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003632:	2303      	movs	r3, #3
 8003634:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DC_M_DIR_Y_GPIO_Port, &GPIO_InitStruct);
 8003636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800363a:	4619      	mov	r1, r3
 800363c:	4835      	ldr	r0, [pc, #212]	@ (8003714 <MX_GPIO_Init+0x300>)
 800363e:	f006 f997 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003646:	2300      	movs	r3, #0
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800364e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003652:	4619      	mov	r1, r3
 8003654:	4830      	ldr	r0, [pc, #192]	@ (8003718 <MX_GPIO_Init+0x304>)
 8003656:	f006 f98b 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pins : BALL_HIGH_Pin PD2 PD6 */
  GPIO_InitStruct.Pin = BALL_HIGH_Pin|GPIO_PIN_2|GPIO_PIN_6;
 800365a:	2345      	movs	r3, #69	@ 0x45
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800365e:	2300      	movs	r3, #0
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800366a:	4619      	mov	r1, r3
 800366c:	482b      	ldr	r0, [pc, #172]	@ (800371c <MX_GPIO_Init+0x308>)
 800366e:	f006 f97f 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_MID_Pin */
  GPIO_InitStruct.Pin = BALL_MID_Pin;
 8003672:	2302      	movs	r3, #2
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003676:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800367a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BALL_MID_GPIO_Port, &GPIO_InitStruct);
 8003680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003684:	4619      	mov	r1, r3
 8003686:	4825      	ldr	r0, [pc, #148]	@ (800371c <MX_GPIO_Init+0x308>)
 8003688:	f006 f972 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800368c:	2380      	movs	r3, #128	@ 0x80
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003690:	2301      	movs	r3, #1
 8003692:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003698:	2300      	movs	r3, #0
 800369a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800369c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036a0:	4619      	mov	r1, r3
 80036a2:	481e      	ldr	r0, [pc, #120]	@ (800371c <MX_GPIO_Init+0x308>)
 80036a4:	f006 f964 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor_X_Pin sensor_Y_Pin */
  GPIO_InitStruct.Pin = sensor_X_Pin|sensor_Y_Pin;
 80036a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036ba:	4619      	mov	r1, r3
 80036bc:	4815      	ldr	r0, [pc, #84]	@ (8003714 <MX_GPIO_Init+0x300>)
 80036be:	f006 f957 	bl	8009970 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_M_DIR_X_Pin */
  GPIO_InitStruct.Pin = DC_M_DIR_X_Pin;
 80036c2:	2301      	movs	r3, #1
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c6:	2301      	movs	r3, #1
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DC_M_DIR_X_GPIO_Port, &GPIO_InitStruct);
 80036d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036d6:	4619      	mov	r1, r3
 80036d8:	4811      	ldr	r0, [pc, #68]	@ (8003720 <MX_GPIO_Init+0x30c>)
 80036da:	f006 f949 	bl	8009970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80036de:	2200      	movs	r2, #0
 80036e0:	2102      	movs	r1, #2
 80036e2:	2007      	movs	r0, #7
 80036e4:	f005 fd0b 	bl	80090fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80036e8:	2007      	movs	r0, #7
 80036ea:	f005 fd24 	bl	8009136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	2017      	movs	r0, #23
 80036f4:	f005 fd03 	bl	80090fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80036f8:	2017      	movs	r0, #23
 80036fa:	f005 fd1c 	bl	8009136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	2028      	movs	r0, #40	@ 0x28
 8003704:	e010      	b.n	8003728 <MX_GPIO_Init+0x314>
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40021400 	.word	0x40021400
 8003710:	40020800 	.word	0x40020800
 8003714:	40020400 	.word	0x40020400
 8003718:	40021800 	.word	0x40021800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40021000 	.word	0x40021000
 8003724:	40020000 	.word	0x40020000
 8003728:	f005 fce9 	bl	80090fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800372c:	2028      	movs	r0, #40	@ 0x28
 800372e:	f005 fd02 	bl	8009136 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003732:	bf00      	nop
 8003734:	3738      	adds	r7, #56	@ 0x38
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop

0800373c <__io_putchar>:

float input_encodor_Y_GO = 10880 * 2;
float input_encodor_Y_BACK = -10880 * 2;

PUTCHAR_PROTOTYPE  //?��?��??
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8003744:	1d39      	adds	r1, r7, #4
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	2201      	movs	r2, #1
 800374c:	4803      	ldr	r0, [pc, #12]	@ (800375c <__io_putchar+0x20>)
 800374e:	f009 fdcb 	bl	800d2e8 <HAL_UART_Transmit>
	return ch;
 8003752:	687b      	ldr	r3, [r7, #4]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000c0c 	.word	0x20000c0c

08003760 <SerialSendChar_ESP>:
		;
	USART3->DR = (Ch1 & 0x01FF);	// ?��?�� (최�? 9bit ?���?�? 0x01FF�? masking)
}

void SerialSendChar_ESP(uint8_t Ch2) // 1문자 보내�? ?��?��
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
	while ((UART4->SR & 1 << 7) == RESET)
 800376a:	bf00      	nop
 800376c:	4b07      	ldr	r3, [pc, #28]	@ (800378c <SerialSendChar_ESP+0x2c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f9      	beq.n	800376c <SerialSendChar_ESP+0xc>
		;
	UART4->DR = (Ch2 & 0x01FF);
 8003778:	4a04      	ldr	r2, [pc, #16]	@ (800378c <SerialSendChar_ESP+0x2c>)
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	6053      	str	r3, [r2, #4]
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40004c00 	.word	0x40004c00

08003790 <STM32_to_ESP>:
uint16_t battery_uint16;

uint8_t buffer[50];

void STM32_to_ESP(void)                    // ESP�? ?��?��?�� 보냄
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0

#define test 1
#if test ==1
//	GPIOB->ODR ^= 1 << 7;
	RPM_uint16 = RPM_X * 10;
 8003794:	4b39      	ldr	r3, [pc, #228]	@ (800387c <STM32_to_ESP+0xec>)
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800379e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a6:	ee17 3a90 	vmov	r3, s15
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	4b34      	ldr	r3, [pc, #208]	@ (8003880 <STM32_to_ESP+0xf0>)
 80037ae:	801a      	strh	r2, [r3, #0]
	battery_uint16 = battery_V * 100;
 80037b0:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <STM32_to_ESP+0xf4>)
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003888 <STM32_to_ESP+0xf8>
 80037ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037c2:	ee17 3a90 	vmov	r3, s15
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	4b30      	ldr	r3, [pc, #192]	@ (800388c <STM32_to_ESP+0xfc>)
 80037ca:	801a      	strh	r2, [r3, #0]

	SerialSendChar_ESP('?');
 80037cc:	203f      	movs	r0, #63	@ 0x3f
 80037ce:	f7ff ffc7 	bl	8003760 <SerialSendChar_ESP>

	//?��?��?��

	if (ADC3_value[0] >= 1000 && ADC3_value[0] <= 4095) {
 80037d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003890 <STM32_to_ESP+0x100>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037da:	d34c      	bcc.n	8003876 <STM32_to_ESP+0xe6>
 80037dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003890 <STM32_to_ESP+0x100>)
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e4:	d247      	bcs.n	8003876 <STM32_to_ESP+0xe6>

		sprintf((char*) buffer, "%d\n\r", ADC3_value[0]);
 80037e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003890 <STM32_to_ESP+0x100>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	4929      	ldr	r1, [pc, #164]	@ (8003894 <STM32_to_ESP+0x104>)
 80037ee:	482a      	ldr	r0, [pc, #168]	@ (8003898 <STM32_to_ESP+0x108>)
 80037f0:	f00b fed0 	bl	800f594 <siprintf>
		//		HAL_UART_Transmit(&huart3, buffer, strlen((char*) buffer), 100);
		sprintf((char*) buffer, "%d\n\r", ADC3_value[0]);
 80037f4:	4b26      	ldr	r3, [pc, #152]	@ (8003890 <STM32_to_ESP+0x100>)
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4926      	ldr	r1, [pc, #152]	@ (8003894 <STM32_to_ESP+0x104>)
 80037fc:	4826      	ldr	r0, [pc, #152]	@ (8003898 <STM32_to_ESP+0x108>)
 80037fe:	f00b fec9 	bl	800f594 <siprintf>
		//		HAL_UART_Transmit(&huart3, buffer, strlen((char*) buffer), 100);
		sprintf((char*) buffer, "%d\n\r", ADC3_value[0]);
 8003802:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <STM32_to_ESP+0x100>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	4922      	ldr	r1, [pc, #136]	@ (8003894 <STM32_to_ESP+0x104>)
 800380a:	4823      	ldr	r0, [pc, #140]	@ (8003898 <STM32_to_ESP+0x108>)
 800380c:	f00b fec2 	bl	800f594 <siprintf>
		//	HAL_UART_Transmit(&huart3, buffer, strlen((char*) buffer), 100);

		//배터�?, ?��?�� ?��?��
		sprintf((char*) buffer, "%d", ADC3_value[0]);
 8003810:	4b1f      	ldr	r3, [pc, #124]	@ (8003890 <STM32_to_ESP+0x100>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	4921      	ldr	r1, [pc, #132]	@ (800389c <STM32_to_ESP+0x10c>)
 8003818:	481f      	ldr	r0, [pc, #124]	@ (8003898 <STM32_to_ESP+0x108>)
 800381a:	f00b febb 	bl	800f594 <siprintf>
		HAL_UART_Transmit(&huart4, buffer, strlen((char*) buffer), 100);
 800381e:	481e      	ldr	r0, [pc, #120]	@ (8003898 <STM32_to_ESP+0x108>)
 8003820:	f7fc fd46 	bl	80002b0 <strlen>
 8003824:	4603      	mov	r3, r0
 8003826:	b29a      	uxth	r2, r3
 8003828:	2364      	movs	r3, #100	@ 0x64
 800382a:	491b      	ldr	r1, [pc, #108]	@ (8003898 <STM32_to_ESP+0x108>)
 800382c:	481c      	ldr	r0, [pc, #112]	@ (80038a0 <STM32_to_ESP+0x110>)
 800382e:	f009 fd5b 	bl	800d2e8 <HAL_UART_Transmit>
		sprintf((char*) buffer, "%d", ADC3_value[0]);
 8003832:	4b17      	ldr	r3, [pc, #92]	@ (8003890 <STM32_to_ESP+0x100>)
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	4918      	ldr	r1, [pc, #96]	@ (800389c <STM32_to_ESP+0x10c>)
 800383a:	4817      	ldr	r0, [pc, #92]	@ (8003898 <STM32_to_ESP+0x108>)
 800383c:	f00b feaa 	bl	800f594 <siprintf>
		HAL_UART_Transmit(&huart4, buffer, strlen((char*) buffer), 100);
 8003840:	4815      	ldr	r0, [pc, #84]	@ (8003898 <STM32_to_ESP+0x108>)
 8003842:	f7fc fd35 	bl	80002b0 <strlen>
 8003846:	4603      	mov	r3, r0
 8003848:	b29a      	uxth	r2, r3
 800384a:	2364      	movs	r3, #100	@ 0x64
 800384c:	4912      	ldr	r1, [pc, #72]	@ (8003898 <STM32_to_ESP+0x108>)
 800384e:	4814      	ldr	r0, [pc, #80]	@ (80038a0 <STM32_to_ESP+0x110>)
 8003850:	f009 fd4a 	bl	800d2e8 <HAL_UART_Transmit>
		sprintf((char*) buffer, "%d", ADC3_value[0]);
 8003854:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <STM32_to_ESP+0x100>)
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4910      	ldr	r1, [pc, #64]	@ (800389c <STM32_to_ESP+0x10c>)
 800385c:	480e      	ldr	r0, [pc, #56]	@ (8003898 <STM32_to_ESP+0x108>)
 800385e:	f00b fe99 	bl	800f594 <siprintf>
		HAL_UART_Transmit(&huart4, buffer, strlen((char*) buffer), 100);
 8003862:	480d      	ldr	r0, [pc, #52]	@ (8003898 <STM32_to_ESP+0x108>)
 8003864:	f7fc fd24 	bl	80002b0 <strlen>
 8003868:	4603      	mov	r3, r0
 800386a:	b29a      	uxth	r2, r3
 800386c:	2364      	movs	r3, #100	@ 0x64
 800386e:	490a      	ldr	r1, [pc, #40]	@ (8003898 <STM32_to_ESP+0x108>)
 8003870:	480b      	ldr	r0, [pc, #44]	@ (80038a0 <STM32_to_ESP+0x110>)
 8003872:	f009 fd39 	bl	800d2e8 <HAL_UART_Transmit>
		 HAL_UART_Transmit(&huart4, buffer, strlen((char*) buffer), 100);
		 sprintf((char*) buffer, "%d", battery_uint16);
		 HAL_UART_Transmit(&huart4, buffer, strlen((char*) buffer), 100);
		 #endif

}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20002c64 	.word	0x20002c64
 8003880:	200013b6 	.word	0x200013b6
 8003884:	200041b8 	.word	0x200041b8
 8003888:	42c80000 	.word	0x42c80000
 800388c:	200013b8 	.word	0x200013b8
 8003890:	20000718 	.word	0x20000718
 8003894:	08014100 	.word	0x08014100
 8003898:	200013bc 	.word	0x200013bc
 800389c:	08014108 	.word	0x08014108
 80038a0:	20000bc4 	.word	0x20000bc4

080038a4 <UART3_RX_PC_to_STM32>:

extern real_T rtb_Clock;
extern int downpart_accel_step_max;

void UART3_RX_PC_to_STM32(void) // UART3: STM32 <-> PC
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
	// ?��?�� 바이?�� ?��?�� �?�?
	//     HAL_UART_Receive_IT(&huart3, &rxByte, 1);

#elif com_test ==1

	HAL_UART_Receive_IT(&huart3, &key_value, 1);
 80038a8:	2201      	movs	r2, #1
 80038aa:	49d1      	ldr	r1, [pc, #836]	@ (8003bf0 <UART3_RX_PC_to_STM32+0x34c>)
 80038ac:	48d1      	ldr	r0, [pc, #836]	@ (8003bf4 <UART3_RX_PC_to_STM32+0x350>)
 80038ae:	f009 fda6 	bl	800d3fe <HAL_UART_Receive_IT>

	printf("%d,^^ %c \r\n", key_value, key_value);
 80038b2:	4bcf      	ldr	r3, [pc, #828]	@ (8003bf0 <UART3_RX_PC_to_STM32+0x34c>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	4619      	mov	r1, r3
 80038b8:	4bcd      	ldr	r3, [pc, #820]	@ (8003bf0 <UART3_RX_PC_to_STM32+0x34c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	48ce      	ldr	r0, [pc, #824]	@ (8003bf8 <UART3_RX_PC_to_STM32+0x354>)
 80038c0:	f00b fd44 	bl	800f34c <iprintf>

	switch (key_value) {
 80038c4:	4bca      	ldr	r3, [pc, #808]	@ (8003bf0 <UART3_RX_PC_to_STM32+0x34c>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	3b21      	subs	r3, #33	@ 0x21
 80038ca:	2b5c      	cmp	r3, #92	@ 0x5c
 80038cc:	f200 827c 	bhi.w	8003dc8 <UART3_RX_PC_to_STM32+0x524>
 80038d0:	a201      	add	r2, pc, #4	@ (adr r2, 80038d8 <UART3_RX_PC_to_STM32+0x34>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	08003d61 	.word	0x08003d61
 80038dc:	08003dc9 	.word	0x08003dc9
 80038e0:	08003d79 	.word	0x08003d79
 80038e4:	08003d85 	.word	0x08003d85
 80038e8:	08003d91 	.word	0x08003d91
 80038ec:	08003dc9 	.word	0x08003dc9
 80038f0:	08003dc9 	.word	0x08003dc9
 80038f4:	08003bc7 	.word	0x08003bc7
 80038f8:	08003bd1 	.word	0x08003bd1
 80038fc:	08003bbd 	.word	0x08003bbd
 8003900:	08003dc9 	.word	0x08003dc9
 8003904:	08003cb7 	.word	0x08003cb7
 8003908:	08003dc9 	.word	0x08003dc9
 800390c:	08003ce9 	.word	0x08003ce9
 8003910:	08003d01 	.word	0x08003d01
 8003914:	08003dc9 	.word	0x08003dc9
 8003918:	08003a7d 	.word	0x08003a7d
 800391c:	08003a89 	.word	0x08003a89
 8003920:	08003aa5 	.word	0x08003aa5
 8003924:	08003aaf 	.word	0x08003aaf
 8003928:	08003ab9 	.word	0x08003ab9
 800392c:	08003dc9 	.word	0x08003dc9
 8003930:	08003dc9 	.word	0x08003dc9
 8003934:	08003ba9 	.word	0x08003ba9
 8003938:	08003bb3 	.word	0x08003bb3
 800393c:	08003c93 	.word	0x08003c93
 8003940:	08003c71 	.word	0x08003c71
 8003944:	08003cd7 	.word	0x08003cd7
 8003948:	08003dc9 	.word	0x08003dc9
 800394c:	08003d19 	.word	0x08003d19
 8003950:	08003d2d 	.word	0x08003d2d
 8003954:	08003d6d 	.word	0x08003d6d
 8003958:	08003d9d 	.word	0x08003d9d
 800395c:	08003dc9 	.word	0x08003dc9
 8003960:	08003dc9 	.word	0x08003dc9
 8003964:	08003dc9 	.word	0x08003dc9
 8003968:	08003dc9 	.word	0x08003dc9
 800396c:	08003dc9 	.word	0x08003dc9
 8003970:	08003dc9 	.word	0x08003dc9
 8003974:	08003dc9 	.word	0x08003dc9
 8003978:	08003b55 	.word	0x08003b55
 800397c:	08003dc9 	.word	0x08003dc9
 8003980:	08003dc9 	.word	0x08003dc9
 8003984:	08003c83 	.word	0x08003c83
 8003988:	08003cc5 	.word	0x08003cc5
 800398c:	08003dc9 	.word	0x08003dc9
 8003990:	08003b5f 	.word	0x08003b5f
 8003994:	08003b69 	.word	0x08003b69
 8003998:	08003dc9 	.word	0x08003dc9
 800399c:	08003dc9 	.word	0x08003dc9
 80039a0:	08003da9 	.word	0x08003da9
 80039a4:	08003dc9 	.word	0x08003dc9
 80039a8:	08003dc9 	.word	0x08003dc9
 80039ac:	08003dc9 	.word	0x08003dc9
 80039b0:	08003dc9 	.word	0x08003dc9
 80039b4:	08003dc9 	.word	0x08003dc9
 80039b8:	08003dc9 	.word	0x08003dc9
 80039bc:	08003dc9 	.word	0x08003dc9
 80039c0:	08003dc9 	.word	0x08003dc9
 80039c4:	08003dc9 	.word	0x08003dc9
 80039c8:	08003dc9 	.word	0x08003dc9
 80039cc:	08003dc9 	.word	0x08003dc9
 80039d0:	08003be1 	.word	0x08003be1
 80039d4:	08003dc9 	.word	0x08003dc9
 80039d8:	08003af7 	.word	0x08003af7
 80039dc:	08003dc9 	.word	0x08003dc9
 80039e0:	08003db5 	.word	0x08003db5
 80039e4:	08003ac3 	.word	0x08003ac3
 80039e8:	08003b23 	.word	0x08003b23
 80039ec:	08003add 	.word	0x08003add
 80039f0:	08003dc9 	.word	0x08003dc9
 80039f4:	08003dc9 	.word	0x08003dc9
 80039f8:	08003b41 	.word	0x08003b41
 80039fc:	08003c41 	.word	0x08003c41
 8003a00:	08003c53 	.word	0x08003c53
 8003a04:	08003c5f 	.word	0x08003c5f
 8003a08:	08003ca3 	.word	0x08003ca3
 8003a0c:	08003dc9 	.word	0x08003dc9
 8003a10:	08003b4b 	.word	0x08003b4b
 8003a14:	08003dc9 	.word	0x08003dc9
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003b2d 	.word	0x08003b2d
 8003a20:	08003b05 	.word	0x08003b05
 8003a24:	08003b37 	.word	0x08003b37
 8003a28:	08003dc9 	.word	0x08003dc9
 8003a2c:	08003dbf 	.word	0x08003dbf
 8003a30:	08003a65 	.word	0x08003a65
 8003a34:	08003d51 	.word	0x08003d51
 8003a38:	08003dc9 	.word	0x08003dc9
 8003a3c:	08003d41 	.word	0x08003d41
 8003a40:	08003b79 	.word	0x08003b79
 8003a44:	08003b99 	.word	0x08003b99
 8003a48:	08003b89 	.word	0x08003b89
	case 'q':
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);  //방향 go
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2101      	movs	r1, #1
 8003a50:	486a      	ldr	r0, [pc, #424]	@ (8003bfc <UART3_RX_PC_to_STM32+0x358>)
 8003a52:	f006 f951 	bl	8009cf8 <HAL_GPIO_WritePin>

		GPIOB->ODR |= 1 << 0;  //LD1
 8003a56:	4b6a      	ldr	r3, [pc, #424]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	4a69      	ldr	r2, [pc, #420]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6153      	str	r3, [r2, #20]

		break;
 8003a62:	e1b1      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'w':

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);  //방향 back
 8003a64:	2201      	movs	r2, #1
 8003a66:	2101      	movs	r1, #1
 8003a68:	4864      	ldr	r0, [pc, #400]	@ (8003bfc <UART3_RX_PC_to_STM32+0x358>)
 8003a6a:	f006 f945 	bl	8009cf8 <HAL_GPIO_WritePin>
		GPIOB->ODR &= ~1 << 0;  //LD1
 8003a6e:	4b64      	ldr	r3, [pc, #400]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4a63      	ldr	r2, [pc, #396]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	6153      	str	r3, [r2, #20]

		break;
 8003a7a:	e1a5      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '1':
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);  //stop
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4860      	ldr	r0, [pc, #384]	@ (8003c04 <UART3_RX_PC_to_STM32+0x360>)
 8003a82:	f006 f939 	bl	8009cf8 <HAL_GPIO_WritePin>

		break;
 8003a86:	e19f      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '2':
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);  //start
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	485d      	ldr	r0, [pc, #372]	@ (8003c04 <UART3_RX_PC_to_STM32+0x360>)
 8003a8e:	f006 f933 	bl	8009cf8 <HAL_GPIO_WritePin>
		HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003a92:	213c      	movs	r1, #60	@ 0x3c
 8003a94:	485c      	ldr	r0, [pc, #368]	@ (8003c08 <UART3_RX_PC_to_STM32+0x364>)
 8003a96:	f008 fbbf 	bl	800c218 <HAL_TIM_Encoder_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	485b      	ldr	r0, [pc, #364]	@ (8003c0c <UART3_RX_PC_to_STM32+0x368>)
 8003a9e:	f008 f9dd 	bl	800be5c <HAL_TIM_PWM_Start>
		break;
 8003aa2:	e191      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '3':
		TIM3->CCR1 = 400;
 8003aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c10 <UART3_RX_PC_to_STM32+0x36c>)
 8003aa6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003aaa:	635a      	str	r2, [r3, #52]	@ 0x34

		break;
 8003aac:	e18c      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '4':
		TIM3->CCR1 = 1700;
 8003aae:	4b58      	ldr	r3, [pc, #352]	@ (8003c10 <UART3_RX_PC_to_STM32+0x36c>)
 8003ab0:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8003ab4:	635a      	str	r2, [r3, #52]	@ 0x34

		break;
 8003ab6:	e187      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '5':
		TIM3->CCR1 = 6000;
 8003ab8:	4b55      	ldr	r3, [pc, #340]	@ (8003c10 <UART3_RX_PC_to_STM32+0x36c>)
 8003aba:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003abe:	635a      	str	r2, [r3, #52]	@ 0x34

		break;
 8003ac0:	e182      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

		/////////////////////////////////////////////////////////////////y�? ?��?��

	case 'd':
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);  //y�? 방향 go
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ac8:	484d      	ldr	r0, [pc, #308]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003aca:	f006 f915 	bl	8009cf8 <HAL_GPIO_WritePin>

		GPIOB->ODR |= 1 << 0;  //LD1
 8003ace:	4b4c      	ldr	r3, [pc, #304]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	4a4b      	ldr	r2, [pc, #300]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6153      	str	r3, [r2, #20]

		break;
 8003ada:	e175      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'f':

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);  //y�? 방향 back
 8003adc:	2201      	movs	r2, #1
 8003ade:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ae2:	4847      	ldr	r0, [pc, #284]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003ae4:	f006 f908 	bl	8009cf8 <HAL_GPIO_WritePin>
		GPIOB->ODR &= ~1 << 0;  //LD1
 8003ae8:	4b45      	ldr	r3, [pc, #276]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	4a44      	ldr	r2, [pc, #272]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6153      	str	r3, [r2, #20]

		break;
 8003af4:	e168      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'a':
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);  //stop
 8003af6:	2201      	movs	r2, #1
 8003af8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003afc:	4840      	ldr	r0, [pc, #256]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003afe:	f006 f8fb 	bl	8009cf8 <HAL_GPIO_WritePin>

		break;
 8003b02:	e161      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 's':
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003b04:	2104      	movs	r1, #4
 8003b06:	4841      	ldr	r0, [pc, #260]	@ (8003c0c <UART3_RX_PC_to_STM32+0x368>)
 8003b08:	f008 f9a8 	bl	800be5c <HAL_TIM_PWM_Start>
		HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8003b0c:	213c      	movs	r1, #60	@ 0x3c
 8003b0e:	4841      	ldr	r0, [pc, #260]	@ (8003c14 <UART3_RX_PC_to_STM32+0x370>)
 8003b10:	f008 fb82 	bl	800c218 <HAL_TIM_Encoder_Start>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);  //start
 8003b14:	2200      	movs	r2, #0
 8003b16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b1a:	4839      	ldr	r0, [pc, #228]	@ (8003c00 <UART3_RX_PC_to_STM32+0x35c>)
 8003b1c:	f006 f8ec 	bl	8009cf8 <HAL_GPIO_WritePin>

		break;
 8003b20:	e152      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'e':
		TIM3->CCR2 = 400;
 8003b22:	4b3b      	ldr	r3, [pc, #236]	@ (8003c10 <UART3_RX_PC_to_STM32+0x36c>)
 8003b24:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38

		break;
 8003b2a:	e14d      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'r':
		TIM3->CCR2 = 1700;
 8003b2c:	4b38      	ldr	r3, [pc, #224]	@ (8003c10 <UART3_RX_PC_to_STM32+0x36c>)
 8003b2e:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8003b32:	639a      	str	r2, [r3, #56]	@ 0x38

		break;
 8003b34:	e148      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case 't':
		TIM3->CCR2 = 6000;
 8003b36:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <UART3_RX_PC_to_STM32+0x36c>)
 8003b38:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003b3c:	639a      	str	r2, [r3, #56]	@ 0x38

		break;
 8003b3e:	e143      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
		///////////////////////////////////////////////////////////////// x�? 바�?? PID

	case 'i':

		dc_motor_pid_X(34816);
 8003b40:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8003c18 <UART3_RX_PC_to_STM32+0x374>
 8003b44:	f000 fee8 	bl	8004918 <dc_motor_pid_X>

		break;
 8003b48:	e13e      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'o':
		dc_motor_pid_X(-34816);
 8003b4a:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8003c1c <UART3_RX_PC_to_STM32+0x378>
 8003b4e:	f000 fee3 	bl	8004918 <dc_motor_pid_X>

		break;
 8003b52:	e139      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

//		break;
		////////////////////////////////////////////////////////////////x�? vt
	case 'I':  //30cm

		v_t_graph_DIR_GO_X(30);  //?��?���? 30cm
 8003b54:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003b58:	f000 fdb6 	bl	80046c8 <v_t_graph_DIR_GO_X>

		break;
 8003b5c:	e134      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case 'O':

		v_t_graph_DIR_BACK_X(30); //?���? 30cm
 8003b5e:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003b62:	f000 fdf7 	bl	8004754 <v_t_graph_DIR_BACK_X>

		break;
 8003b66:	e12f      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case 'P':

		v_t_graph_DIR_GO_X(targetS_X_GO);  //?��?���?
 8003b68:	4b2d      	ldr	r3, [pc, #180]	@ (8003c20 <UART3_RX_PC_to_STM32+0x37c>)
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b72:	f000 fda9 	bl	80046c8 <v_t_graph_DIR_GO_X>

		break;
 8003b76:	e127      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case '{':

		v_t_graph_DIR_BACK_X(targetS_X_BACK); //?���?
 8003b78:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <UART3_RX_PC_to_STM32+0x380>)
 8003b7a:	edd3 7a00 	vldr	s15, [r3]
 8003b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b82:	f000 fde7 	bl	8004754 <v_t_graph_DIR_BACK_X>

		break;
 8003b86:	e11f      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case '}':

		v_t_graph_DIR_GO_X(targetS_X_GO2);  //?��?���?
 8003b88:	4b27      	ldr	r3, [pc, #156]	@ (8003c28 <UART3_RX_PC_to_STM32+0x384>)
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b92:	f000 fd99 	bl	80046c8 <v_t_graph_DIR_GO_X>

		break;
 8003b96:	e117      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '|':

		v_t_graph_DIR_BACK_X(targetS_X_BACK2); //?���?
 8003b98:	4b24      	ldr	r3, [pc, #144]	@ (8003c2c <UART3_RX_PC_to_STM32+0x388>)
 8003b9a:	edd3 7a00 	vldr	s15, [r3]
 8003b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba2:	f000 fdd7 	bl	8004754 <v_t_graph_DIR_BACK_X>

		break;
 8003ba6:	e10f      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

		///////////////////////////////////////////////////////// y�?  바�??  PID

	case '8':

		dc_motor_pid_Y(10880);
 8003ba8:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8003c30 <UART3_RX_PC_to_STM32+0x38c>
 8003bac:	f000 fefe 	bl	80049ac <dc_motor_pid_Y>
		break;
 8003bb0:	e10a      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '9':
		dc_motor_pid_Y(-10880);
 8003bb2:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8003c34 <UART3_RX_PC_to_STM32+0x390>
 8003bb6:	f000 fef9 	bl	80049ac <dc_motor_pid_Y>
		break;
 8003bba:	e105      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
//		dc_motor_pid_Y(input_encodor_Y_BACK);
//		break;
//////////////////////////////////////////////////////////      Y  VT
	case '*':

		v_t_graph_DIR_GO_Y(30);   //Y�? vt ?��
 8003bbc:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003bc0:	f000 fe0e 	bl	80047e0 <v_t_graph_DIR_GO_Y>
		break;
 8003bc4:	e100      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '(':
		v_t_graph_DIR_BACK_Y(30);   //?��
 8003bc6:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003bca:	f000 fe57 	bl	800487c <v_t_graph_DIR_BACK_Y>
		break;
 8003bce:	e0fb      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case ')':
		v_t_graph_DIR_GO_Y(targetS_Y_GO);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	@ (8003c38 <UART3_RX_PC_to_STM32+0x394>)
 8003bd2:	edd3 7a00 	vldr	s15, [r3]
 8003bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bda:	f000 fe01 	bl	80047e0 <v_t_graph_DIR_GO_Y>
		break;
 8003bde:	e0f3      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '_':
		v_t_graph_DIR_BACK_Y(targetS_Y_BACK);
 8003be0:	4b16      	ldr	r3, [pc, #88]	@ (8003c3c <UART3_RX_PC_to_STM32+0x398>)
 8003be2:	edd3 7a00 	vldr	s15, [r3]
 8003be6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bea:	f000 fe47 	bl	800487c <v_t_graph_DIR_BACK_Y>
		break;
 8003bee:	e0eb      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
 8003bf0:	20000716 	.word	0x20000716
 8003bf4:	20000c0c 	.word	0x20000c0c
 8003bf8:	0801410c 	.word	0x0801410c
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40020400 	.word	0x40020400
 8003c04:	40021800 	.word	0x40021800
 8003c08:	2000081c 	.word	0x2000081c
 8003c0c:	20000864 	.word	0x20000864
 8003c10:	40000400 	.word	0x40000400
 8003c14:	200008ac 	.word	0x200008ac
 8003c18:	47080000 	.word	0x47080000
 8003c1c:	c7080000 	.word	0xc7080000
 8003c20:	20000008 	.word	0x20000008
 8003c24:	2000000c 	.word	0x2000000c
 8003c28:	20000018 	.word	0x20000018
 8003c2c:	2000001c 	.word	0x2000001c
 8003c30:	462a0000 	.word	0x462a0000
 8003c34:	c62a0000 	.word	0xc62a0000
 8003c38:	20000010 	.word	0x20000010
 8003c3c:	20000014 	.word	0x20000014

		//////////////////////////////////////////////////////z�? 볼스?���? ?��?��모터,  0625?��?��: ?��?��?��?���? enable
	case 'j':
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);  //?���?
 8003c40:	2201      	movs	r2, #1
 8003c42:	2104      	movs	r1, #4
 8003c44:	4861      	ldr	r0, [pc, #388]	@ (8003dcc <UART3_RX_PC_to_STM32+0x528>)
 8003c46:	f006 f857 	bl	8009cf8 <HAL_GPIO_WritePin>
		step_pulse_count_tim11 = 0;
 8003c4a:	4b61      	ldr	r3, [pc, #388]	@ (8003dd0 <UART3_RX_PC_to_STM32+0x52c>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	801a      	strh	r2, [r3, #0]
		break;
 8003c50:	e0ba      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'k':
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0);  //출발
 8003c52:	2200      	movs	r2, #0
 8003c54:	2104      	movs	r1, #4
 8003c56:	485d      	ldr	r0, [pc, #372]	@ (8003dcc <UART3_RX_PC_to_STM32+0x528>)
 8003c58:	f006 f84e 	bl	8009cf8 <HAL_GPIO_WritePin>

		break;
 8003c5c:	e0b4      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'l':   //cw 미소 ?��?��             ?��계방?��  ?���?
		z_axis_UP(ball_step, ball_screw_pulse_cycle);
 8003c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8003dd4 <UART3_RX_PC_to_STM32+0x530>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	4a5d      	ldr	r2, [pc, #372]	@ (8003dd8 <UART3_RX_PC_to_STM32+0x534>)
 8003c64:	8812      	ldrh	r2, [r2, #0]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f003 f95b 	bl	8006f24 <z_axis_UP>

		break;
 8003c6e:	e0ab      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case ';':    //ccw 미소 ?��?��           반시계방?��  ?��?���?
		z_axis_DOWN(ball_step, ball_screw_pulse_cycle);
 8003c70:	4b58      	ldr	r3, [pc, #352]	@ (8003dd4 <UART3_RX_PC_to_STM32+0x530>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	4a58      	ldr	r2, [pc, #352]	@ (8003dd8 <UART3_RX_PC_to_STM32+0x534>)
 8003c76:	8812      	ldrh	r2, [r2, #0]
 8003c78:	4611      	mov	r1, r2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f003 f98e 	bl	8006f9c <z_axis_DOWN>

		break;
 8003c80:	e0a2      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'L':   //cw              ?��계방?��  ?���?
		z_axis_UP(400 * 6, ball_screw_pulse_cycle);
 8003c82:	4b55      	ldr	r3, [pc, #340]	@ (8003dd8 <UART3_RX_PC_to_STM32+0x534>)
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	4619      	mov	r1, r3
 8003c88:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8003c8c:	f003 f94a 	bl	8006f24 <z_axis_UP>

		break;
 8003c90:	e09a      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case ':':    //ccw            반시계방?��  ?��?���?

		z_axis_DOWN(400 * 6 + 300, ball_screw_pulse_cycle);
 8003c92:	4b51      	ldr	r3, [pc, #324]	@ (8003dd8 <UART3_RX_PC_to_STM32+0x534>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	4619      	mov	r1, r3
 8003c98:	f640 208c 	movw	r0, #2700	@ 0xa8c
 8003c9c:	f003 f97e 	bl	8006f9c <z_axis_DOWN>

		break;
 8003ca0:	e092      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

		/////////////////////////////////////////////////////////////////////?��?��?��?�� �? ?��?��모터
	case 'm':
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);  //?���? ?��?��?��?���?
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ca8:	484c      	ldr	r0, [pc, #304]	@ (8003ddc <UART3_RX_PC_to_STM32+0x538>)
 8003caa:	f006 f825 	bl	8009cf8 <HAL_GPIO_WritePin>
		step_pulse_count_tim13 = 0;
 8003cae:	4b4c      	ldr	r3, [pc, #304]	@ (8003de0 <UART3_RX_PC_to_STM32+0x53c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
		break;
 8003cb4:	e088      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case ',':
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);  //출발  ?��?��?���?
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cbc:	4847      	ldr	r0, [pc, #284]	@ (8003ddc <UART3_RX_PC_to_STM32+0x538>)
 8003cbe:	f006 f81b 	bl	8009cf8 <HAL_GPIO_WritePin>

		break;
 8003cc2:	e081      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'M':  //�??��
		FALSE_Init();
 8003cc4:	f7fd faaa 	bl	800121c <FALSE_Init>
		down_part_UP_accel(downpart_step);
 8003cc8:	4b46      	ldr	r3, [pc, #280]	@ (8003de4 <UART3_RX_PC_to_STM32+0x540>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f003 fa1c 	bl	800710c <down_part_UP_accel>

		break;
 8003cd4:	e078      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case '<': //�??��
		FALSE_Init();
 8003cd6:	f7fd faa1 	bl	800121c <FALSE_Init>
		down_part_DOWN_accel(downpart_step);
 8003cda:	4b42      	ldr	r3, [pc, #264]	@ (8003de4 <UART3_RX_PC_to_STM32+0x540>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fa6b 	bl	80071bc <down_part_DOWN_accel>

		break;
 8003ce6:	e06f      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case '.':
		FALSE_Init();
 8003ce8:	f7fd fa98 	bl	800121c <FALSE_Init>
		down_part_UP(downpart_step, shaft_pulse_cycle);
 8003cec:	4b3d      	ldr	r3, [pc, #244]	@ (8003de4 <UART3_RX_PC_to_STM32+0x540>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8003de8 <UART3_RX_PC_to_STM32+0x544>)
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f003 f98b 	bl	8007014 <down_part_UP>

		break;
 8003cfe:	e063      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '/':
		FALSE_Init();
 8003d00:	f7fd fa8c 	bl	800121c <FALSE_Init>
		down_part_DOWN(downpart_step, shaft_pulse_cycle);
 8003d04:	4b37      	ldr	r3, [pc, #220]	@ (8003de4 <UART3_RX_PC_to_STM32+0x540>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	4a37      	ldr	r2, [pc, #220]	@ (8003de8 <UART3_RX_PC_to_STM32+0x544>)
 8003d0c:	8812      	ldrh	r2, [r2, #0]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f003 f9bd 	bl	8007090 <down_part_DOWN>

		break;
 8003d16:	e057      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case '>':
		FALSE_Init();
 8003d18:	f7fd fa80 	bl	800121c <FALSE_Init>
		down_part_UP(400, shaft_pulse_cycle);
 8003d1c:	4b32      	ldr	r3, [pc, #200]	@ (8003de8 <UART3_RX_PC_to_STM32+0x544>)
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	4619      	mov	r1, r3
 8003d22:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8003d26:	f003 f975 	bl	8007014 <down_part_UP>

		break;
 8003d2a:	e04d      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '?':
		FALSE_Init();
 8003d2c:	f7fd fa76 	bl	800121c <FALSE_Init>
		down_part_DOWN(400, shaft_pulse_cycle);
 8003d30:	4b2d      	ldr	r3, [pc, #180]	@ (8003de8 <UART3_RX_PC_to_STM32+0x544>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	4619      	mov	r1, r3
 8003d36:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8003d3a:	f003 f9a9 	bl	8007090 <down_part_DOWN>

		break;
 8003d3e:	e043      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
//
//		break;

	case 'z': //방향 �? ?���?

		linear_motor_GO(go_time);
 8003d40:	4b2a      	ldr	r3, [pc, #168]	@ (8003dec <UART3_RX_PC_to_STM32+0x548>)
 8003d42:	edd3 7a00 	vldr	s15, [r3]
 8003d46:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4a:	f7fd f96b 	bl	8001024 <linear_motor_GO>

		break;
 8003d4e:	e03b      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case 'x': //방향 �? ?���?

		linear_motor_BACK(back_time);
 8003d50:	4b27      	ldr	r3, [pc, #156]	@ (8003df0 <UART3_RX_PC_to_STM32+0x54c>)
 8003d52:	edd3 7a00 	vldr	s15, [r3]
 8003d56:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5a:	f7fd f989 	bl	8001070 <linear_motor_BACK>

		break;
 8003d5e:	e033      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

		/////////////////////////////////////////////////////////?��?�� 조작
	case '!':  // (2,1)
		FALSE_Init();
 8003d60:	f7fd fa5c 	bl	800121c <FALSE_Init>
		Manual_mode.target_2_1 = TRUE;
 8003d64:	4b23      	ldr	r3, [pc, #140]	@ (8003df4 <UART3_RX_PC_to_STM32+0x550>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]

		break;
 8003d6a:	e02d      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case '@': //  (3,1)
		FALSE_Init();
 8003d6c:	f7fd fa56 	bl	800121c <FALSE_Init>
		Manual_mode.target_3_1 = TRUE;
 8003d70:	4b20      	ldr	r3, [pc, #128]	@ (8003df4 <UART3_RX_PC_to_STM32+0x550>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	705a      	strb	r2, [r3, #1]

		break;
 8003d76:	e027      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '#':  //(1,2)
		FALSE_Init();
 8003d78:	f7fd fa50 	bl	800121c <FALSE_Init>
		Manual_mode.target_1_2 = TRUE;
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003df4 <UART3_RX_PC_to_STM32+0x550>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	709a      	strb	r2, [r3, #2]

		break;
 8003d82:	e021      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case '$': // (2,2)
		FALSE_Init();
 8003d84:	f7fd fa4a 	bl	800121c <FALSE_Init>
		Manual_mode.target_2_2 = TRUE;
 8003d88:	4b1a      	ldr	r3, [pc, #104]	@ (8003df4 <UART3_RX_PC_to_STM32+0x550>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	70da      	strb	r2, [r3, #3]
		break;
 8003d8e:	e01b      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case '%':
		FALSE_Init();
 8003d90:	f7fd fa44 	bl	800121c <FALSE_Init>
		Manual_mode.target_3_2 = TRUE;
 8003d94:	4b17      	ldr	r3, [pc, #92]	@ (8003df4 <UART3_RX_PC_to_STM32+0x550>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	711a      	strb	r2, [r3, #4]
		break;
 8003d9a:	e015      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'A':
		FALSE_Init();
 8003d9c:	f7fd fa3e 	bl	800121c <FALSE_Init>
		Manual_mode.box_pickup = TRUE;
 8003da0:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <UART3_RX_PC_to_STM32+0x550>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	715a      	strb	r2, [r3, #5]
		break;
 8003da6:	e00f      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'S':
		FALSE_Init();
 8003da8:	f7fd fa38 	bl	800121c <FALSE_Init>
		Manual_mode.Box_dropoff = TRUE;
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <UART3_RX_PC_to_STM32+0x550>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	719a      	strb	r2, [r3, #6]
		break;
 8003db2:	e009      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>

	case 'c':
		HAL_TIM_OC_Start_IT(&htim13, TIM_CHANNEL_1);
 8003db4:	2100      	movs	r1, #0
 8003db6:	4810      	ldr	r0, [pc, #64]	@ (8003df8 <UART3_RX_PC_to_STM32+0x554>)
 8003db8:	f007 fe22 	bl	800ba00 <HAL_TIM_OC_Start_IT>
		break;
 8003dbc:	e004      	b.n	8003dc8 <UART3_RX_PC_to_STM32+0x524>
	case 'v':
			HAL_TIM_OC_Stop_IT(&htim13, TIM_CHANNEL_1);
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	480d      	ldr	r0, [pc, #52]	@ (8003df8 <UART3_RX_PC_to_STM32+0x554>)
 8003dc2:	f007 ff33 	bl	800bc2c <HAL_TIM_OC_Stop_IT>
			break;
 8003dc6:	bf00      	nop
	}
#endif
}
 8003dc8:	bf00      	nop
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021800 	.word	0x40021800
 8003dd0:	200041d4 	.word	0x200041d4
 8003dd4:	20000040 	.word	0x20000040
 8003dd8:	200004fe 	.word	0x200004fe
 8003ddc:	40021400 	.word	0x40021400
 8003de0:	200041d0 	.word	0x200041d0
 8003de4:	20000044 	.word	0x20000044
 8003de8:	200004fa 	.word	0x200004fa
 8003dec:	20000020 	.word	0x20000020
 8003df0:	20000024 	.word	0x20000024
 8003df4:	20000c58 	.word	0x20000c58
 8003df8:	20000b34 	.word	0x20000b34

08003dfc <UART4_RX_ESP_to_STM32>:

extern uint8_t linear_go_flag;

void UART4_RX_ESP_to_STM32(void) // UART4: esp <-> stm32
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0

	static uint16_t rxIndex = 0;
	static int start_found = 0;  // ?��?�� 문자 발견 ?���?

	if (Rx_buffer[0] == '<') {  // ?��?�� 문자 발견
 8003e00:	4bb5      	ldr	r3, [pc, #724]	@ (80040d8 <UART4_RX_ESP_to_STM32+0x2dc>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b3c      	cmp	r3, #60	@ 0x3c
 8003e06:	d10b      	bne.n	8003e20 <UART4_RX_ESP_to_STM32+0x24>
		start_found = 1;
 8003e08:	4bb4      	ldr	r3, [pc, #720]	@ (80040dc <UART4_RX_ESP_to_STM32+0x2e0>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
		memset(Rx_data, 0, DATA_SIZE);  // Rx_data 버퍼 초기?��
 8003e0e:	22c8      	movs	r2, #200	@ 0xc8
 8003e10:	2100      	movs	r1, #0
 8003e12:	48b3      	ldr	r0, [pc, #716]	@ (80040e0 <UART4_RX_ESP_to_STM32+0x2e4>)
 8003e14:	f00b fcb6 	bl	800f784 <memset>
		rxIndex = 0;  // 카운?�� 초기?��
 8003e18:	4bb2      	ldr	r3, [pc, #712]	@ (80040e4 <UART4_RX_ESP_to_STM32+0x2e8>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	801a      	strh	r2, [r3, #0]
 8003e1e:	e023      	b.n	8003e68 <UART4_RX_ESP_to_STM32+0x6c>
	} else if (Rx_buffer[0] == '>' && start_found) {  // ?�� 문자 발견
 8003e20:	4bad      	ldr	r3, [pc, #692]	@ (80040d8 <UART4_RX_ESP_to_STM32+0x2dc>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e26:	d110      	bne.n	8003e4a <UART4_RX_ESP_to_STM32+0x4e>
 8003e28:	4bac      	ldr	r3, [pc, #688]	@ (80040dc <UART4_RX_ESP_to_STM32+0x2e0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00c      	beq.n	8003e4a <UART4_RX_ESP_to_STM32+0x4e>
		Rx_buffer[rxIndex] = '\0';
 8003e30:	4bac      	ldr	r3, [pc, #688]	@ (80040e4 <UART4_RX_ESP_to_STM32+0x2e8>)
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4ba8      	ldr	r3, [pc, #672]	@ (80040d8 <UART4_RX_ESP_to_STM32+0x2dc>)
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]
		Transfer_finish = 1;  // ?��?��?�� 메시�? ?��?�� ?���?
 8003e3c:	4baa      	ldr	r3, [pc, #680]	@ (80040e8 <UART4_RX_ESP_to_STM32+0x2ec>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
		start_found = 0;  // 메시�? 종료
 8003e42:	4ba6      	ldr	r3, [pc, #664]	@ (80040dc <UART4_RX_ESP_to_STM32+0x2e0>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e00e      	b.n	8003e68 <UART4_RX_ESP_to_STM32+0x6c>

	} else if (start_found) {
 8003e4a:	4ba4      	ldr	r3, [pc, #656]	@ (80040dc <UART4_RX_ESP_to_STM32+0x2e0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART4_RX_ESP_to_STM32+0x6c>
		Rx_data[rxIndex++] = Rx_buffer[0];  // ?��?�� 문자 ?��?�� ?��?��?�� ???��
 8003e52:	4ba4      	ldr	r3, [pc, #656]	@ (80040e4 <UART4_RX_ESP_to_STM32+0x2e8>)
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	b291      	uxth	r1, r2
 8003e5a:	4aa2      	ldr	r2, [pc, #648]	@ (80040e4 <UART4_RX_ESP_to_STM32+0x2e8>)
 8003e5c:	8011      	strh	r1, [r2, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b9d      	ldr	r3, [pc, #628]	@ (80040d8 <UART4_RX_ESP_to_STM32+0x2dc>)
 8003e62:	7819      	ldrb	r1, [r3, #0]
 8003e64:	4b9e      	ldr	r3, [pc, #632]	@ (80040e0 <UART4_RX_ESP_to_STM32+0x2e4>)
 8003e66:	5499      	strb	r1, [r3, r2]

	}



	HAL_UART_Receive_IT(&huart4, (uint8_t*) Rx_buffer, 1);  // ?��?�� 문자 ?��?�� ??�?
 8003e68:	2201      	movs	r2, #1
 8003e6a:	499b      	ldr	r1, [pc, #620]	@ (80040d8 <UART4_RX_ESP_to_STM32+0x2dc>)
 8003e6c:	489f      	ldr	r0, [pc, #636]	@ (80040ec <UART4_RX_ESP_to_STM32+0x2f0>)
 8003e6e:	f009 fac6 	bl	800d3fe <HAL_UART_Receive_IT>


	if (Rx_buffer[0] == '[') {  // ?��?�� 문자 발견
 8003e72:	4b99      	ldr	r3, [pc, #612]	@ (80040d8 <UART4_RX_ESP_to_STM32+0x2dc>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b5b      	cmp	r3, #91	@ 0x5b
 8003e78:	d10b      	bne.n	8003e92 <UART4_RX_ESP_to_STM32+0x96>
				start_found = 1;
 8003e7a:	4b98      	ldr	r3, [pc, #608]	@ (80040dc <UART4_RX_ESP_to_STM32+0x2e0>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
				memset(Rx_data, 0, DATA_SIZE);  // Rx_data 버퍼 초기?��
 8003e80:	22c8      	movs	r2, #200	@ 0xc8
 8003e82:	2100      	movs	r1, #0
 8003e84:	4896      	ldr	r0, [pc, #600]	@ (80040e0 <UART4_RX_ESP_to_STM32+0x2e4>)
 8003e86:	f00b fc7d 	bl	800f784 <memset>
				rxIndex = 0;  // 카운?�� 초기?��
 8003e8a:	4b96      	ldr	r3, [pc, #600]	@ (80040e4 <UART4_RX_ESP_to_STM32+0x2e8>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	801a      	strh	r2, [r3, #0]
 8003e90:	e019      	b.n	8003ec6 <UART4_RX_ESP_to_STM32+0xca>
			} else if (Rx_buffer[0] == ']' && start_found) {  // ?�� 문자 발견
 8003e92:	4b91      	ldr	r3, [pc, #580]	@ (80040d8 <UART4_RX_ESP_to_STM32+0x2dc>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b5d      	cmp	r3, #93	@ 0x5d
 8003e98:	d10d      	bne.n	8003eb6 <UART4_RX_ESP_to_STM32+0xba>
 8003e9a:	4b90      	ldr	r3, [pc, #576]	@ (80040dc <UART4_RX_ESP_to_STM32+0x2e0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <UART4_RX_ESP_to_STM32+0xba>
				Rx_buffer[rxIndex] = '\0';
 8003ea2:	4b90      	ldr	r3, [pc, #576]	@ (80040e4 <UART4_RX_ESP_to_STM32+0x2e8>)
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b8b      	ldr	r3, [pc, #556]	@ (80040d8 <UART4_RX_ESP_to_STM32+0x2dc>)
 8003eaa:	2100      	movs	r1, #0
 8003eac:	5499      	strb	r1, [r3, r2]
				//Transfer_finish = 1;  // ?��?��?�� 메시�? ?��?�� ?���?
				start_found = 0;  // 메시�? 종료
 8003eae:	4b8b      	ldr	r3, [pc, #556]	@ (80040dc <UART4_RX_ESP_to_STM32+0x2e0>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e007      	b.n	8003ec6 <UART4_RX_ESP_to_STM32+0xca>

			} else if (start_found) {
 8003eb6:	4b89      	ldr	r3, [pc, #548]	@ (80040dc <UART4_RX_ESP_to_STM32+0x2e0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <UART4_RX_ESP_to_STM32+0xca>
				RxRX = Rx_buffer[0];  // ?��?�� 문자 ?��?�� ?��?��?�� ???��
 8003ebe:	4b86      	ldr	r3, [pc, #536]	@ (80040d8 <UART4_RX_ESP_to_STM32+0x2dc>)
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80040f0 <UART4_RX_ESP_to_STM32+0x2f4>)
 8003ec4:	701a      	strb	r2, [r3, #0]

			}


	HAL_UART_Receive_IT(&huart4, (uint8_t*) &RxRX, 1);
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	4989      	ldr	r1, [pc, #548]	@ (80040f0 <UART4_RX_ESP_to_STM32+0x2f4>)
 8003eca:	4888      	ldr	r0, [pc, #544]	@ (80040ec <UART4_RX_ESP_to_STM32+0x2f0>)
 8003ecc:	f009 fa97 	bl	800d3fe <HAL_UART_Receive_IT>


	// HAL_UART_Receive_IT(&huart4, &data, 1);

//	 printf("%d -- %c \r\n", data, data);
	 switch (RxRX) {
 8003ed0:	4b87      	ldr	r3, [pc, #540]	@ (80040f0 <UART4_RX_ESP_to_STM32+0x2f4>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	3b30      	subs	r3, #48	@ 0x30
 8003ed6:	2b4a      	cmp	r3, #74	@ 0x4a
 8003ed8:	f200 80fc 	bhi.w	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>
 8003edc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee4 <UART4_RX_ESP_to_STM32+0xe8>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	080040d3 	.word	0x080040d3
 8003ee8:	080040d5 	.word	0x080040d5
 8003eec:	080040d5 	.word	0x080040d5
 8003ef0:	080040d5 	.word	0x080040d5
 8003ef4:	080040d5 	.word	0x080040d5
 8003ef8:	080040d5 	.word	0x080040d5
 8003efc:	080040d5 	.word	0x080040d5
 8003f00:	080040d5 	.word	0x080040d5
 8003f04:	080040d5 	.word	0x080040d5
 8003f08:	080040d5 	.word	0x080040d5
 8003f0c:	080040d5 	.word	0x080040d5
 8003f10:	080040d5 	.word	0x080040d5
 8003f14:	080040d5 	.word	0x080040d5
 8003f18:	080040d5 	.word	0x080040d5
 8003f1c:	080040d5 	.word	0x080040d5
 8003f20:	080040d5 	.word	0x080040d5
 8003f24:	080040d5 	.word	0x080040d5
 8003f28:	080040d5 	.word	0x080040d5
 8003f2c:	080040d5 	.word	0x080040d5
 8003f30:	080040d5 	.word	0x080040d5
 8003f34:	080040d5 	.word	0x080040d5
 8003f38:	08004047 	.word	0x08004047
 8003f3c:	080040d5 	.word	0x080040d5
 8003f40:	080040d5 	.word	0x080040d5
 8003f44:	080040d5 	.word	0x080040d5
 8003f48:	080040d5 	.word	0x080040d5
 8003f4c:	080040d5 	.word	0x080040d5
 8003f50:	080040d5 	.word	0x080040d5
 8003f54:	080040d5 	.word	0x080040d5
 8003f58:	080040d5 	.word	0x080040d5
 8003f5c:	080040d5 	.word	0x080040d5
 8003f60:	080040d5 	.word	0x080040d5
 8003f64:	080040d5 	.word	0x080040d5
 8003f68:	08004037 	.word	0x08004037
 8003f6c:	0800407b 	.word	0x0800407b
 8003f70:	080040d5 	.word	0x080040d5
 8003f74:	0800408f 	.word	0x0800408f
 8003f78:	080040d5 	.word	0x080040d5
 8003f7c:	080040d5 	.word	0x080040d5
 8003f80:	080040d5 	.word	0x080040d5
 8003f84:	080040d5 	.word	0x080040d5
 8003f88:	080040d5 	.word	0x080040d5
 8003f8c:	080040d5 	.word	0x080040d5
 8003f90:	080040d5 	.word	0x080040d5
 8003f94:	080040d5 	.word	0x080040d5
 8003f98:	080040d5 	.word	0x080040d5
 8003f9c:	080040d5 	.word	0x080040d5
 8003fa0:	080040d5 	.word	0x080040d5
 8003fa4:	080040d5 	.word	0x080040d5
 8003fa8:	080040d5 	.word	0x080040d5
 8003fac:	080040d5 	.word	0x080040d5
 8003fb0:	080040d5 	.word	0x080040d5
 8003fb4:	080040d5 	.word	0x080040d5
 8003fb8:	08004069 	.word	0x08004069
 8003fbc:	080040d5 	.word	0x080040d5
 8003fc0:	080040d5 	.word	0x080040d5
 8003fc4:	080040d5 	.word	0x080040d5
 8003fc8:	080040d5 	.word	0x080040d5
 8003fcc:	080040d5 	.word	0x080040d5
 8003fd0:	080040d5 	.word	0x080040d5
 8003fd4:	080040d5 	.word	0x080040d5
 8003fd8:	080040d5 	.word	0x080040d5
 8003fdc:	080040d5 	.word	0x080040d5
 8003fe0:	080040d5 	.word	0x080040d5
 8003fe4:	080040d5 	.word	0x080040d5
 8003fe8:	08004057 	.word	0x08004057
 8003fec:	080040a3 	.word	0x080040a3
 8003ff0:	080040d5 	.word	0x080040d5
 8003ff4:	080040bb 	.word	0x080040bb
 8003ff8:	080040d5 	.word	0x080040d5
 8003ffc:	080040d5 	.word	0x080040d5
 8004000:	080040d5 	.word	0x080040d5
 8004004:	08004021 	.word	0x08004021
 8004008:	080040d5 	.word	0x080040d5
 800400c:	08004011 	.word	0x08004011
	 case '0':

	 break;

	 case 'z':
		 linear_motor_GO(go_time);
 8004010:	4b38      	ldr	r3, [pc, #224]	@ (80040f4 <UART4_RX_ESP_to_STM32+0x2f8>)
 8004012:	edd3 7a00 	vldr	s15, [r3]
 8004016:	eeb0 0a67 	vmov.f32	s0, s15
 800401a:	f7fd f803 	bl	8001024 <linear_motor_GO>
	 	 break;
 800401e:	e059      	b.n	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>
	 case 'x':
			linear_go_flag=1;
 8004020:	4b35      	ldr	r3, [pc, #212]	@ (80040f8 <UART4_RX_ESP_to_STM32+0x2fc>)
 8004022:	2201      	movs	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
		 linear_motor_BACK(back_time);
 8004026:	4b35      	ldr	r3, [pc, #212]	@ (80040fc <UART4_RX_ESP_to_STM32+0x300>)
 8004028:	edd3 7a00 	vldr	s15, [r3]
 800402c:	eeb0 0a67 	vmov.f32	s0, s15
 8004030:	f7fd f81e 	bl	8001070 <linear_motor_BACK>
	 	 break;
 8004034:	e04e      	b.n	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>
	 case 'Q':
		 z_axis_UP(400 * 6, ball_screw_pulse_cycle);
 8004036:	4b32      	ldr	r3, [pc, #200]	@ (8004100 <UART4_RX_ESP_to_STM32+0x304>)
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	4619      	mov	r1, r3
 800403c:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8004040:	f002 ff70 	bl	8006f24 <z_axis_UP>
	 	 break;
 8004044:	e046      	b.n	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>
	 case 'E':
		 z_axis_DOWN(400 * 6 + 100, ball_screw_pulse_cycle);
 8004046:	4b2e      	ldr	r3, [pc, #184]	@ (8004100 <UART4_RX_ESP_to_STM32+0x304>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	4619      	mov	r1, r3
 800404c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8004050:	f002 ffa4 	bl	8006f9c <z_axis_DOWN>
	 	 break;
 8004054:	e03e      	b.n	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>
	 case 'q':
		 z_axis_UP(ball_step, ball_screw_pulse_cycle);
 8004056:	4b2b      	ldr	r3, [pc, #172]	@ (8004104 <UART4_RX_ESP_to_STM32+0x308>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	4a29      	ldr	r2, [pc, #164]	@ (8004100 <UART4_RX_ESP_to_STM32+0x304>)
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f002 ff5f 	bl	8006f24 <z_axis_UP>
	 	 break;
 8004066:	e035      	b.n	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>
	 case 'e':
		 z_axis_DOWN(ball_step, ball_screw_pulse_cycle);
 8004068:	4b26      	ldr	r3, [pc, #152]	@ (8004104 <UART4_RX_ESP_to_STM32+0x308>)
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	4a24      	ldr	r2, [pc, #144]	@ (8004100 <UART4_RX_ESP_to_STM32+0x304>)
 800406e:	8812      	ldrh	r2, [r2, #0]
 8004070:	4611      	mov	r1, r2
 8004072:	4618      	mov	r0, r3
 8004074:	f002 ff92 	bl	8006f9c <z_axis_DOWN>
	 	 break;
 8004078:	e02c      	b.n	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>



	 case 'R':
		 FALSE_Init();
 800407a:	f7fd f8cf 	bl	800121c <FALSE_Init>
		 down_part_UP(3000, shaft_pulse_cycle);
 800407e:	4b22      	ldr	r3, [pc, #136]	@ (8004108 <UART4_RX_ESP_to_STM32+0x30c>)
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	4619      	mov	r1, r3
 8004084:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004088:	f002 ffc4 	bl	8007014 <down_part_UP>
	 	 break;
 800408c:	e022      	b.n	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>
	 case 'T':
		 FALSE_Init();
 800408e:	f7fd f8c5 	bl	800121c <FALSE_Init>
		 down_part_DOWN(3000, shaft_pulse_cycle);
 8004092:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <UART4_RX_ESP_to_STM32+0x30c>)
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	4619      	mov	r1, r3
 8004098:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800409c:	f002 fff8 	bl	8007090 <down_part_DOWN>
	 	 break;
 80040a0:	e018      	b.n	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>
	 case 'r':
		 FALSE_Init();
 80040a2:	f7fd f8bb 	bl	800121c <FALSE_Init>
		 down_part_UP(downpart_step, shaft_pulse_cycle);
 80040a6:	4b19      	ldr	r3, [pc, #100]	@ (800410c <UART4_RX_ESP_to_STM32+0x310>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	4a16      	ldr	r2, [pc, #88]	@ (8004108 <UART4_RX_ESP_to_STM32+0x30c>)
 80040ae:	8812      	ldrh	r2, [r2, #0]
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f002 ffae 	bl	8007014 <down_part_UP>
	 	 break;
 80040b8:	e00c      	b.n	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>
	 case 't':
		 FALSE_Init();
 80040ba:	f7fd f8af 	bl	800121c <FALSE_Init>
		 		down_part_DOWN(downpart_step, shaft_pulse_cycle);
 80040be:	4b13      	ldr	r3, [pc, #76]	@ (800410c <UART4_RX_ESP_to_STM32+0x310>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	4a10      	ldr	r2, [pc, #64]	@ (8004108 <UART4_RX_ESP_to_STM32+0x30c>)
 80040c6:	8812      	ldrh	r2, [r2, #0]
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f002 ffe0 	bl	8007090 <down_part_DOWN>
	 	 	 break;
 80040d0:	e000      	b.n	80040d4 <UART4_RX_ESP_to_STM32+0x2d8>
	 break;
 80040d2:	bf00      	nop


	 }


}
 80040d4:	bf00      	nop
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200011d0 	.word	0x200011d0
 80040dc:	200013f0 	.word	0x200013f0
 80040e0:	20001108 	.word	0x20001108
 80040e4:	200013f4 	.word	0x200013f4
 80040e8:	200011d4 	.word	0x200011d4
 80040ec:	20000bc4 	.word	0x20000bc4
 80040f0:	200013b4 	.word	0x200013b4
 80040f4:	20000020 	.word	0x20000020
 80040f8:	20000715 	.word	0x20000715
 80040fc:	20000024 	.word	0x20000024
 8004100:	200004fe 	.word	0x200004fe
 8004104:	20000040 	.word	0x20000040
 8004108:	200004fa 	.word	0x200004fa
 800410c:	20000044 	.word	0x20000044

08004110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004114:	b672      	cpsid	i
}
 8004116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <Error_Handler+0x8>

0800411c <MPU6050_Init>:
}typedef_accel_gyro;

typedef_accel_gyro Acceo_Gyro;

void MPU6050_Init (void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8004122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004126:	9302      	str	r3, [sp, #8]
 8004128:	2301      	movs	r3, #1
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	1dfb      	adds	r3, r7, #7
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2301      	movs	r3, #1
 8004132:	2275      	movs	r2, #117	@ 0x75
 8004134:	21d0      	movs	r1, #208	@ 0xd0
 8004136:	4823      	ldr	r0, [pc, #140]	@ (80041c4 <MPU6050_Init+0xa8>)
 8004138:	f006 f84e 	bl	800a1d8 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	2b68      	cmp	r3, #104	@ 0x68
 8004140:	d13b      	bne.n	80041ba <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8004146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	2301      	movs	r3, #1
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	1dbb      	adds	r3, r7, #6
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2301      	movs	r3, #1
 8004156:	226b      	movs	r2, #107	@ 0x6b
 8004158:	21d0      	movs	r1, #208	@ 0xd0
 800415a:	481a      	ldr	r0, [pc, #104]	@ (80041c4 <MPU6050_Init+0xa8>)
 800415c:	f005 ff42 	bl	8009fe4 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8004160:	2307      	movs	r3, #7
 8004162:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8004164:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004168:	9302      	str	r3, [sp, #8]
 800416a:	2301      	movs	r3, #1
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	1dbb      	adds	r3, r7, #6
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	2301      	movs	r3, #1
 8004174:	2219      	movs	r2, #25
 8004176:	21d0      	movs	r1, #208	@ 0xd0
 8004178:	4812      	ldr	r0, [pc, #72]	@ (80041c4 <MPU6050_Init+0xa8>)
 800417a:	f005 ff33 	bl	8009fe4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 800417e:	2300      	movs	r3, #0
 8004180:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8004182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004186:	9302      	str	r3, [sp, #8]
 8004188:	2301      	movs	r3, #1
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	1dbb      	adds	r3, r7, #6
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2301      	movs	r3, #1
 8004192:	221c      	movs	r2, #28
 8004194:	21d0      	movs	r1, #208	@ 0xd0
 8004196:	480b      	ldr	r0, [pc, #44]	@ (80041c4 <MPU6050_Init+0xa8>)
 8004198:	f005 ff24 	bl	8009fe4 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 800419c:	2300      	movs	r3, #0
 800419e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80041a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041a4:	9302      	str	r3, [sp, #8]
 80041a6:	2301      	movs	r3, #1
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	1dbb      	adds	r3, r7, #6
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2301      	movs	r3, #1
 80041b0:	221b      	movs	r2, #27
 80041b2:	21d0      	movs	r1, #208	@ 0xd0
 80041b4:	4803      	ldr	r0, [pc, #12]	@ (80041c4 <MPU6050_Init+0xa8>)
 80041b6:	f005 ff15 	bl	8009fe4 <HAL_I2C_Mem_Write>
	}

}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200007c8 	.word	0x200007c8

080041c8 <v_t_graph>:
float radio =11;//최대속도 27
int v_t_static_flag = 0;

extern uint8_t sensor_flag;

void v_t_graph(float targetS) {
 80041c8:	b5b0      	push	{r4, r5, r7, lr}
 80041ca:	b08a      	sub	sp, #40	@ 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	ed87 0a01 	vstr	s0, [r7, #4]

	float vTmp;

	//maxV = 17; //cm/s
	//maxA = 30; //cm/s^2
	samplingHz = 100; //100Hz
 80041d2:	4bd7      	ldr	r3, [pc, #860]	@ (8004530 <v_t_graph+0x368>)
 80041d4:	617b      	str	r3, [r7, #20]
	samplingT = 1 / samplingHz; //0.01s
 80041d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041da:	ed97 7a05 	vldr	s14, [r7, #20]
 80041de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041e2:	edc7 7a04 	vstr	s15, [r7, #16]

//targetS = 30; //30cm

	tAccR = maxV / maxA;
 80041e6:	4bd3      	ldr	r3, [pc, #844]	@ (8004534 <v_t_graph+0x36c>)
 80041e8:	edd3 6a00 	vldr	s13, [r3]
 80041ec:	4bd2      	ldr	r3, [pc, #840]	@ (8004538 <v_t_graph+0x370>)
 80041ee:	ed93 7a00 	vldr	s14, [r3]
 80041f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	tAccF = maxV / (maxA_+maxA__*radio);
 80041fa:	4bce      	ldr	r3, [pc, #824]	@ (8004534 <v_t_graph+0x36c>)
 80041fc:	edd3 6a00 	vldr	s13, [r3]
 8004200:	4bce      	ldr	r3, [pc, #824]	@ (800453c <v_t_graph+0x374>)
 8004202:	ed93 7a00 	vldr	s14, [r3]
 8004206:	4bce      	ldr	r3, [pc, #824]	@ (8004540 <v_t_graph+0x378>)
 8004208:	edd3 7a00 	vldr	s15, [r3]
 800420c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004210:	4bcc      	ldr	r3, [pc, #816]	@ (8004544 <v_t_graph+0x37c>)
 8004212:	edd3 7a00 	vldr	s15, [r3]
 8004216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800421a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800421e:	edc7 7a08 	vstr	s15, [r7, #32]

	if(targetS/(tAccR+tAccF) > maxV){
 8004222:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004226:	edd7 7a08 	vldr	s15, [r7, #32]
 800422a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800422e:	edd7 6a01 	vldr	s13, [r7, #4]
 8004232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004236:	4bbf      	ldr	r3, [pc, #764]	@ (8004534 <v_t_graph+0x36c>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004244:	dd44      	ble.n	80042d0 <v_t_graph+0x108>
		maxV_ = maxA__*radio*tAccF;
 8004246:	4bbd      	ldr	r3, [pc, #756]	@ (800453c <v_t_graph+0x374>)
 8004248:	ed93 7a00 	vldr	s14, [r3]
 800424c:	4bbc      	ldr	r3, [pc, #752]	@ (8004540 <v_t_graph+0x378>)
 800424e:	edd3 7a00 	vldr	s15, [r3]
 8004252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004256:	edd7 7a08 	vldr	s15, [r7, #32]
 800425a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425e:	4bba      	ldr	r3, [pc, #744]	@ (8004548 <v_t_graph+0x380>)
 8004260:	edc3 7a00 	vstr	s15, [r3]

		tStatic = targetS/maxV - tAccR/2 - tAccF/2 - maxV_/(2*maxV)*tAccF*(1+radio);
 8004264:	4bb3      	ldr	r3, [pc, #716]	@ (8004534 <v_t_graph+0x36c>)
 8004266:	edd3 7a00 	vldr	s15, [r3]
 800426a:	edd7 6a01 	vldr	s13, [r7, #4]
 800426e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004272:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004276:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800427a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800427e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004282:	edd7 6a08 	vldr	s13, [r7, #32]
 8004286:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800428a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800428e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004292:	4bad      	ldr	r3, [pc, #692]	@ (8004548 <v_t_graph+0x380>)
 8004294:	ed93 6a00 	vldr	s12, [r3]
 8004298:	4ba6      	ldr	r3, [pc, #664]	@ (8004534 <v_t_graph+0x36c>)
 800429a:	edd3 7a00 	vldr	s15, [r3]
 800429e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042a2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80042a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80042aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042ae:	4ba4      	ldr	r3, [pc, #656]	@ (8004540 <v_t_graph+0x378>)
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80042b8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80042bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c4:	edc7 7a07 	vstr	s15, [r7, #28]
		v_t_static_flag =1;
 80042c8:	4ba0      	ldr	r3, [pc, #640]	@ (800454c <v_t_graph+0x384>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e0bf      	b.n	8004450 <v_t_graph+0x288>
	}else{
		float K = pow(maxA_+maxA__*radio,2)/(2*maxA)+(maxA_+maxA__*radio)/2+maxA__*radio*radio/2+maxA__*radio/2;
 80042d0:	4b9a      	ldr	r3, [pc, #616]	@ (800453c <v_t_graph+0x374>)
 80042d2:	ed93 7a00 	vldr	s14, [r3]
 80042d6:	4b9a      	ldr	r3, [pc, #616]	@ (8004540 <v_t_graph+0x378>)
 80042d8:	edd3 7a00 	vldr	s15, [r3]
 80042dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042e0:	4b98      	ldr	r3, [pc, #608]	@ (8004544 <v_t_graph+0x37c>)
 80042e2:	edd3 7a00 	vldr	s15, [r3]
 80042e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ea:	ee17 0a90 	vmov	r0, s15
 80042ee:	f7fc f94b 	bl	8000588 <__aeabi_f2d>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	ed9f 1b8c 	vldr	d1, [pc, #560]	@ 8004528 <v_t_graph+0x360>
 80042fa:	ec43 2b10 	vmov	d0, r2, r3
 80042fe:	f00e fdcf 	bl	8012ea0 <pow>
 8004302:	ec55 4b10 	vmov	r4, r5, d0
 8004306:	4b8c      	ldr	r3, [pc, #560]	@ (8004538 <v_t_graph+0x370>)
 8004308:	edd3 7a00 	vldr	s15, [r3]
 800430c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004310:	ee17 0a90 	vmov	r0, s15
 8004314:	f7fc f938 	bl	8000588 <__aeabi_f2d>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4620      	mov	r0, r4
 800431e:	4629      	mov	r1, r5
 8004320:	f7fc fab4 	bl	800088c <__aeabi_ddiv>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4614      	mov	r4, r2
 800432a:	461d      	mov	r5, r3
 800432c:	4b83      	ldr	r3, [pc, #524]	@ (800453c <v_t_graph+0x374>)
 800432e:	ed93 7a00 	vldr	s14, [r3]
 8004332:	4b83      	ldr	r3, [pc, #524]	@ (8004540 <v_t_graph+0x378>)
 8004334:	edd3 7a00 	vldr	s15, [r3]
 8004338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800433c:	4b81      	ldr	r3, [pc, #516]	@ (8004544 <v_t_graph+0x37c>)
 800433e:	edd3 7a00 	vldr	s15, [r3]
 8004342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004346:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800434a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800434e:	ee16 0a90 	vmov	r0, s13
 8004352:	f7fc f919 	bl	8000588 <__aeabi_f2d>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f7fb ffb5 	bl	80002cc <__adddf3>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4614      	mov	r4, r2
 8004368:	461d      	mov	r5, r3
 800436a:	4b74      	ldr	r3, [pc, #464]	@ (800453c <v_t_graph+0x374>)
 800436c:	ed93 7a00 	vldr	s14, [r3]
 8004370:	4b73      	ldr	r3, [pc, #460]	@ (8004540 <v_t_graph+0x378>)
 8004372:	edd3 7a00 	vldr	s15, [r3]
 8004376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800437a:	4b71      	ldr	r3, [pc, #452]	@ (8004540 <v_t_graph+0x378>)
 800437c:	edd3 7a00 	vldr	s15, [r3]
 8004380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004384:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004388:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800438c:	ee16 0a90 	vmov	r0, s13
 8004390:	f7fc f8fa 	bl	8000588 <__aeabi_f2d>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4620      	mov	r0, r4
 800439a:	4629      	mov	r1, r5
 800439c:	f7fb ff96 	bl	80002cc <__adddf3>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4614      	mov	r4, r2
 80043a6:	461d      	mov	r5, r3
 80043a8:	4b64      	ldr	r3, [pc, #400]	@ (800453c <v_t_graph+0x374>)
 80043aa:	ed93 7a00 	vldr	s14, [r3]
 80043ae:	4b64      	ldr	r3, [pc, #400]	@ (8004540 <v_t_graph+0x378>)
 80043b0:	edd3 7a00 	vldr	s15, [r3]
 80043b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80043bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80043c0:	ee16 0a90 	vmov	r0, s13
 80043c4:	f7fc f8e0 	bl	8000588 <__aeabi_f2d>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4620      	mov	r0, r4
 80043ce:	4629      	mov	r1, r5
 80043d0:	f7fb ff7c 	bl	80002cc <__adddf3>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	f7fc fc24 	bl	8000c28 <__aeabi_d2f>
 80043e0:	4603      	mov	r3, r0
 80043e2:	60fb      	str	r3, [r7, #12]
		tAccF = sqrt(targetS/K);
 80043e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80043e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80043ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043f0:	ee16 0a90 	vmov	r0, s13
 80043f4:	f7fc f8c8 	bl	8000588 <__aeabi_f2d>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	ec43 2b10 	vmov	d0, r2, r3
 8004400:	f00e fdbe 	bl	8012f80 <sqrt>
 8004404:	ec53 2b10 	vmov	r2, r3, d0
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	f7fc fc0c 	bl	8000c28 <__aeabi_d2f>
 8004410:	4603      	mov	r3, r0
 8004412:	623b      	str	r3, [r7, #32]
		tAccR = tAccF*(maxA_+maxA__*radio)/maxA;
 8004414:	4b49      	ldr	r3, [pc, #292]	@ (800453c <v_t_graph+0x374>)
 8004416:	ed93 7a00 	vldr	s14, [r3]
 800441a:	4b49      	ldr	r3, [pc, #292]	@ (8004540 <v_t_graph+0x378>)
 800441c:	edd3 7a00 	vldr	s15, [r3]
 8004420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004424:	4b47      	ldr	r3, [pc, #284]	@ (8004544 <v_t_graph+0x37c>)
 8004426:	edd3 7a00 	vldr	s15, [r3]
 800442a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800442e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004432:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004436:	4b40      	ldr	r3, [pc, #256]	@ (8004538 <v_t_graph+0x370>)
 8004438:	ed93 7a00 	vldr	s14, [r3]
 800443c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004440:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		tStatic = 0;
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
		v_t_static_flag =0;
 800444a:	4b40      	ldr	r3, [pc, #256]	@ (800454c <v_t_graph+0x384>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
	}

	tTotal = tAccR+tAccF*(1+radio) + tStatic;
 8004450:	4b3b      	ldr	r3, [pc, #236]	@ (8004540 <v_t_graph+0x378>)
 8004452:	edd3 7a00 	vldr	s15, [r3]
 8004456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800445a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800445e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004466:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800446a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800446e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004476:	edc7 7a02 	vstr	s15, [r7, #8]

	orderN = (int) (tTotal / samplingT);
 800447a:	edd7 6a02 	vldr	s13, [r7, #8]
 800447e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800448a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800448e:	4b30      	ldr	r3, [pc, #192]	@ (8004550 <v_t_graph+0x388>)
 8004490:	edc3 7a00 	vstr	s15, [r3]
	raisingN = (int) (tAccR / samplingT);
 8004494:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004498:	ed97 7a04 	vldr	s14, [r7, #16]
 800449c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004554 <v_t_graph+0x38c>)
 80044aa:	edc3 7a00 	vstr	s15, [r3]
	fallingN = (int) (tAccF / samplingT);
 80044ae:	edd7 6a08 	vldr	s13, [r7, #32]
 80044b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80044b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c2:	4b25      	ldr	r3, [pc, #148]	@ (8004558 <v_t_graph+0x390>)
 80044c4:	edc3 7a00 	vstr	s15, [r3]
	fallingN_ = (int) (tAccF*radio / samplingT);
 80044c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004540 <v_t_graph+0x378>)
 80044ca:	ed93 7a00 	vldr	s14, [r3]
 80044ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80044d2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80044d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80044da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e6:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <v_t_graph+0x394>)
 80044e8:	edc3 7a00 	vstr	s15, [r3]
	staticN = orderN - raisingN - fallingN - fallingN_;
 80044ec:	4b18      	ldr	r3, [pc, #96]	@ (8004550 <v_t_graph+0x388>)
 80044ee:	ed93 7a00 	vldr	s14, [r3]
 80044f2:	4b18      	ldr	r3, [pc, #96]	@ (8004554 <v_t_graph+0x38c>)
 80044f4:	edd3 7a00 	vldr	s15, [r3]
 80044f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044fc:	4b16      	ldr	r3, [pc, #88]	@ (8004558 <v_t_graph+0x390>)
 80044fe:	edd3 7a00 	vldr	s15, [r3]
 8004502:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004506:	4b15      	ldr	r3, [pc, #84]	@ (800455c <v_t_graph+0x394>)
 8004508:	edd3 7a00 	vldr	s15, [r3]
 800450c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004510:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <v_t_graph+0x398>)
 8004512:	edc3 7a00 	vstr	s15, [r3]

	//orderArr = (float*) malloc(sizeof(float) * orderN);
	vTmp = 0;
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]


		for (i_v_t_count = 0; i_v_t_count < orderN; i_v_t_count++) {
 800451c:	4b11      	ldr	r3, [pc, #68]	@ (8004564 <v_t_graph+0x39c>)
 800451e:	2200      	movs	r2, #0
 8004520:	801a      	strh	r2, [r3, #0]
 8004522:	e0a8      	b.n	8004676 <v_t_graph+0x4ae>
 8004524:	f3af 8000 	nop.w
 8004528:	00000000 	.word	0x00000000
 800452c:	40000000 	.word	0x40000000
 8004530:	42c80000 	.word	0x42c80000
 8004534:	20000058 	.word	0x20000058
 8004538:	2000005c 	.word	0x2000005c
 800453c:	20000064 	.word	0x20000064
 8004540:	20000068 	.word	0x20000068
 8004544:	20000060 	.word	0x20000060
 8004548:	20002c50 	.word	0x20002c50
 800454c:	20002c54 	.word	0x20002c54
 8004550:	20002c3c 	.word	0x20002c3c
 8004554:	20002c40 	.word	0x20002c40
 8004558:	20002c44 	.word	0x20002c44
 800455c:	20002c48 	.word	0x20002c48
 8004560:	20002c4c 	.word	0x20002c4c
 8004564:	200014c8 	.word	0x200014c8

		orderArr[i_v_t_count] = vTmp;
 8004568:	4b4e      	ldr	r3, [pc, #312]	@ (80046a4 <v_t_graph+0x4dc>)
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	4a4e      	ldr	r2, [pc, #312]	@ (80046a8 <v_t_graph+0x4e0>)
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	601a      	str	r2, [r3, #0]

		if (i_v_t_count < raisingN) {
 8004576:	4b4b      	ldr	r3, [pc, #300]	@ (80046a4 <v_t_graph+0x4dc>)
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004582:	4b4a      	ldr	r3, [pc, #296]	@ (80046ac <v_t_graph+0x4e4>)
 8004584:	edd3 7a00 	vldr	s15, [r3]
 8004588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800458c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004590:	d50d      	bpl.n	80045ae <v_t_graph+0x3e6>
			vTmp = vTmp + maxA * samplingT;
 8004592:	4b47      	ldr	r3, [pc, #284]	@ (80046b0 <v_t_graph+0x4e8>)
 8004594:	ed93 7a00 	vldr	s14, [r3]
 8004598:	edd7 7a04 	vldr	s15, [r7, #16]
 800459c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80045a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045a8:	edc7 7a06 	vstr	s15, [r7, #24]
 80045ac:	e05d      	b.n	800466a <v_t_graph+0x4a2>
		}

		else if (raisingN+staticN+fallingN >i_v_t_count && i_v_t_count >= raisingN + staticN) {
 80045ae:	4b3f      	ldr	r3, [pc, #252]	@ (80046ac <v_t_graph+0x4e4>)
 80045b0:	ed93 7a00 	vldr	s14, [r3]
 80045b4:	4b3f      	ldr	r3, [pc, #252]	@ (80046b4 <v_t_graph+0x4ec>)
 80045b6:	edd3 7a00 	vldr	s15, [r3]
 80045ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045be:	4b3e      	ldr	r3, [pc, #248]	@ (80046b8 <v_t_graph+0x4f0>)
 80045c0:	edd3 7a00 	vldr	s15, [r3]
 80045c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045c8:	4b36      	ldr	r3, [pc, #216]	@ (80046a4 <v_t_graph+0x4dc>)
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045dc:	dd20      	ble.n	8004620 <v_t_graph+0x458>
 80045de:	4b31      	ldr	r3, [pc, #196]	@ (80046a4 <v_t_graph+0x4dc>)
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ea:	4b30      	ldr	r3, [pc, #192]	@ (80046ac <v_t_graph+0x4e4>)
 80045ec:	edd3 6a00 	vldr	s13, [r3]
 80045f0:	4b30      	ldr	r3, [pc, #192]	@ (80046b4 <v_t_graph+0x4ec>)
 80045f2:	edd3 7a00 	vldr	s15, [r3]
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004602:	db0d      	blt.n	8004620 <v_t_graph+0x458>
			vTmp = vTmp - maxA_ * samplingT;
 8004604:	4b2d      	ldr	r3, [pc, #180]	@ (80046bc <v_t_graph+0x4f4>)
 8004606:	ed93 7a00 	vldr	s14, [r3]
 800460a:	edd7 7a04 	vldr	s15, [r7, #16]
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	ed97 7a06 	vldr	s14, [r7, #24]
 8004616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800461a:	edc7 7a06 	vstr	s15, [r7, #24]
 800461e:	e024      	b.n	800466a <v_t_graph+0x4a2>
		}else if(i_v_t_count >= raisingN+staticN+fallingN){
 8004620:	4b20      	ldr	r3, [pc, #128]	@ (80046a4 <v_t_graph+0x4dc>)
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800462c:	4b1f      	ldr	r3, [pc, #124]	@ (80046ac <v_t_graph+0x4e4>)
 800462e:	edd3 6a00 	vldr	s13, [r3]
 8004632:	4b20      	ldr	r3, [pc, #128]	@ (80046b4 <v_t_graph+0x4ec>)
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800463c:	4b1e      	ldr	r3, [pc, #120]	@ (80046b8 <v_t_graph+0x4f0>)
 800463e:	edd3 7a00 	vldr	s15, [r3]
 8004642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464e:	db0c      	blt.n	800466a <v_t_graph+0x4a2>
			vTmp = vTmp - maxA__ * samplingT;
 8004650:	4b1b      	ldr	r3, [pc, #108]	@ (80046c0 <v_t_graph+0x4f8>)
 8004652:	ed93 7a00 	vldr	s14, [r3]
 8004656:	edd7 7a04 	vldr	s15, [r7, #16]
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004666:	edc7 7a06 	vstr	s15, [r7, #24]
		for (i_v_t_count = 0; i_v_t_count < orderN; i_v_t_count++) {
 800466a:	4b0e      	ldr	r3, [pc, #56]	@ (80046a4 <v_t_graph+0x4dc>)
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	4b0c      	ldr	r3, [pc, #48]	@ (80046a4 <v_t_graph+0x4dc>)
 8004674:	801a      	strh	r2, [r3, #0]
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <v_t_graph+0x4dc>)
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004682:	4b10      	ldr	r3, [pc, #64]	@ (80046c4 <v_t_graph+0x4fc>)
 8004684:	edd3 7a00 	vldr	s15, [r3]
 8004688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	f53f af6a 	bmi.w	8004568 <v_t_graph+0x3a0>

	}



	i_v_t_count = 0;
 8004694:	4b03      	ldr	r3, [pc, #12]	@ (80046a4 <v_t_graph+0x4dc>)
 8004696:	2200      	movs	r2, #0
 8004698:	801a      	strh	r2, [r3, #0]
}
 800469a:	bf00      	nop
 800469c:	3728      	adds	r7, #40	@ 0x28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bdb0      	pop	{r4, r5, r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200014c8 	.word	0x200014c8
 80046a8:	200014cc 	.word	0x200014cc
 80046ac:	20002c40 	.word	0x20002c40
 80046b0:	2000005c 	.word	0x2000005c
 80046b4:	20002c4c 	.word	0x20002c4c
 80046b8:	20002c44 	.word	0x20002c44
 80046bc:	20000060 	.word	0x20000060
 80046c0:	20000064 	.word	0x20000064
 80046c4:	20002c3c 	.word	0x20002c3c

080046c8 <v_t_graph_DIR_GO_X>:
extern uint32_t save_Y_GO_IN;
extern uint32_t save_Y_BACK_IN;


void v_t_graph_DIR_GO_X(float targetS)               // X축 v_t 전진
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	ed87 0a01 	vstr	s0, [r7, #4]
//	save_X_GO_IN=0;

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80046d2:	213c      	movs	r1, #60	@ 0x3c
 80046d4:	4816      	ldr	r0, [pc, #88]	@ (8004730 <v_t_graph_DIR_GO_X+0x68>)
 80046d6:	f007 fd9f 	bl	800c218 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 80046da:	213c      	movs	r1, #60	@ 0x3c
 80046dc:	4815      	ldr	r0, [pc, #84]	@ (8004734 <v_t_graph_DIR_GO_X+0x6c>)
 80046de:	f007 fe29 	bl	800c334 <HAL_TIM_Encoder_Stop>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80046e2:	2100      	movs	r1, #0
 80046e4:	4814      	ldr	r0, [pc, #80]	@ (8004738 <v_t_graph_DIR_GO_X+0x70>)
 80046e6:	f007 fbb9 	bl	800be5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80046ea:	2104      	movs	r1, #4
 80046ec:	4812      	ldr	r0, [pc, #72]	@ (8004738 <v_t_graph_DIR_GO_X+0x70>)
 80046ee:	f007 fc7d 	bl	800bfec <HAL_TIM_PWM_Stop>


	//if(DC_X_now_posiotion >= 0 && DC_X_now_posiotion <=1 )
//	{
		RPM_X_go=0;
 80046f2:	4b12      	ldr	r3, [pc, #72]	@ (800473c <v_t_graph_DIR_GO_X+0x74>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]


		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);  //start
 80046f8:	2200      	movs	r2, #0
 80046fa:	2101      	movs	r1, #1
 80046fc:	4810      	ldr	r0, [pc, #64]	@ (8004740 <v_t_graph_DIR_GO_X+0x78>)
 80046fe:	f005 fafb 	bl	8009cf8 <HAL_GPIO_WritePin>
		TIM2->CNT = 1000000;
 8004702:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004706:	4a0f      	ldr	r2, [pc, #60]	@ (8004744 <v_t_graph_DIR_GO_X+0x7c>)
 8004708:	625a      	str	r2, [r3, #36]	@ 0x24
		vt_start = 1;
 800470a:	4b0f      	ldr	r3, [pc, #60]	@ (8004748 <v_t_graph_DIR_GO_X+0x80>)
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
		v_t_dir_back_X_flag = 0;  //0: 전진 , 1: 후진
 8004710:	4b0e      	ldr	r3, [pc, #56]	@ (800474c <v_t_graph_DIR_GO_X+0x84>)
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);  //방향 go
 8004716:	2200      	movs	r2, #0
 8004718:	2101      	movs	r1, #1
 800471a:	480d      	ldr	r0, [pc, #52]	@ (8004750 <v_t_graph_DIR_GO_X+0x88>)
 800471c:	f005 faec 	bl	8009cf8 <HAL_GPIO_WritePin>

	//	if(targetS == targetS_X_GO2  &&  DC_X_now_posiotion==1) HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);  //stop

		v_t_graph(targetS);
 8004720:	ed97 0a01 	vldr	s0, [r7, #4]
 8004724:	f7ff fd50 	bl	80041c8 <v_t_graph>
	//	}


	//}

}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	2000081c 	.word	0x2000081c
 8004734:	200008ac 	.word	0x200008ac
 8004738:	20000864 	.word	0x20000864
 800473c:	20001348 	.word	0x20001348
 8004740:	40021800 	.word	0x40021800
 8004744:	000f4240 	.word	0x000f4240
 8004748:	200041b2 	.word	0x200041b2
 800474c:	20002c58 	.word	0x20002c58
 8004750:	40021000 	.word	0x40021000

08004754 <v_t_graph_DIR_BACK_X>:
void v_t_graph_DIR_BACK_X(float targetS)         //  X축 v_t 후진
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	ed87 0a01 	vstr	s0, [r7, #4]
//	save_X_BACK_IN=0;

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800475e:	213c      	movs	r1, #60	@ 0x3c
 8004760:	4816      	ldr	r0, [pc, #88]	@ (80047bc <v_t_graph_DIR_BACK_X+0x68>)
 8004762:	f007 fd59 	bl	800c218 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8004766:	213c      	movs	r1, #60	@ 0x3c
 8004768:	4815      	ldr	r0, [pc, #84]	@ (80047c0 <v_t_graph_DIR_BACK_X+0x6c>)
 800476a:	f007 fde3 	bl	800c334 <HAL_TIM_Encoder_Stop>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800476e:	2100      	movs	r1, #0
 8004770:	4814      	ldr	r0, [pc, #80]	@ (80047c4 <v_t_graph_DIR_BACK_X+0x70>)
 8004772:	f007 fb73 	bl	800be5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8004776:	2104      	movs	r1, #4
 8004778:	4812      	ldr	r0, [pc, #72]	@ (80047c4 <v_t_graph_DIR_BACK_X+0x70>)
 800477a:	f007 fc37 	bl	800bfec <HAL_TIM_PWM_Stop>

//	if(DC_X_now_posiotion >= 1 && DC_X_now_posiotion <=2)
//	{


		RPM_X_back=0;
 800477e:	4b12      	ldr	r3, [pc, #72]	@ (80047c8 <v_t_graph_DIR_BACK_X+0x74>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);  //start
 8004784:	2200      	movs	r2, #0
 8004786:	2101      	movs	r1, #1
 8004788:	4810      	ldr	r0, [pc, #64]	@ (80047cc <v_t_graph_DIR_BACK_X+0x78>)
 800478a:	f005 fab5 	bl	8009cf8 <HAL_GPIO_WritePin>
		TIM2->CNT = 1000000;
 800478e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004792:	4a0f      	ldr	r2, [pc, #60]	@ (80047d0 <v_t_graph_DIR_BACK_X+0x7c>)
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24
		vt_start = 1;
 8004796:	4b0f      	ldr	r3, [pc, #60]	@ (80047d4 <v_t_graph_DIR_BACK_X+0x80>)
 8004798:	2201      	movs	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
		v_t_dir_back_X_flag = 1;  //0: 전진 , 1: 후진
 800479c:	4b0e      	ldr	r3, [pc, #56]	@ (80047d8 <v_t_graph_DIR_BACK_X+0x84>)
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);  //방향 back
 80047a2:	2201      	movs	r2, #1
 80047a4:	2101      	movs	r1, #1
 80047a6:	480d      	ldr	r0, [pc, #52]	@ (80047dc <v_t_graph_DIR_BACK_X+0x88>)
 80047a8:	f005 faa6 	bl	8009cf8 <HAL_GPIO_WritePin>

	//	if(targetS == targetS_X_BACK2 &&  DC_X_now_posiotion==1 ) HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);  //stop
		v_t_graph(targetS);
 80047ac:	ed97 0a01 	vldr	s0, [r7, #4]
 80047b0:	f7ff fd0a 	bl	80041c8 <v_t_graph>

	//	if(targetS == targetS_X_BACK) DC_X_now_posiotion--;
	//	else if(targetS == targetS_X_BACK2 && DC_X_now_posiotion == 2) DC_X_now_posiotion-=2;
	//}
}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	2000081c 	.word	0x2000081c
 80047c0:	200008ac 	.word	0x200008ac
 80047c4:	20000864 	.word	0x20000864
 80047c8:	2000134c 	.word	0x2000134c
 80047cc:	40021800 	.word	0x40021800
 80047d0:	000f4240 	.word	0x000f4240
 80047d4:	200041b2 	.word	0x200041b2
 80047d8:	20002c58 	.word	0x20002c58
 80047dc:	40021000 	.word	0x40021000

080047e0 <v_t_graph_DIR_GO_Y>:

void v_t_graph_DIR_GO_Y(float targetS_Y)         // Y축 v_t 전진
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	ed87 0a01 	vstr	s0, [r7, #4]
	algo_vt_y_go++;
 80047ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004858 <v_t_graph_DIR_GO_Y+0x78>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3301      	adds	r3, #1
 80047f0:	4a19      	ldr	r2, [pc, #100]	@ (8004858 <v_t_graph_DIR_GO_Y+0x78>)
 80047f2:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 80047f4:	213c      	movs	r1, #60	@ 0x3c
 80047f6:	4819      	ldr	r0, [pc, #100]	@ (800485c <v_t_graph_DIR_GO_Y+0x7c>)
 80047f8:	f007 fd9c 	bl	800c334 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80047fc:	213c      	movs	r1, #60	@ 0x3c
 80047fe:	4818      	ldr	r0, [pc, #96]	@ (8004860 <v_t_graph_DIR_GO_Y+0x80>)
 8004800:	f007 fd0a 	bl	800c218 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8004804:	2100      	movs	r1, #0
 8004806:	4817      	ldr	r0, [pc, #92]	@ (8004864 <v_t_graph_DIR_GO_Y+0x84>)
 8004808:	f007 fbf0 	bl	800bfec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800480c:	2104      	movs	r1, #4
 800480e:	4815      	ldr	r0, [pc, #84]	@ (8004864 <v_t_graph_DIR_GO_Y+0x84>)
 8004810:	f007 fb24 	bl	800be5c <HAL_TIM_PWM_Start>
//	if (DC_Y_now_posiotion==0)
//	{
		RPM_Y_go=0;
 8004814:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <v_t_graph_DIR_GO_Y+0x88>)
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);  //start
 800481a:	2200      	movs	r2, #0
 800481c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004820:	4812      	ldr	r0, [pc, #72]	@ (800486c <v_t_graph_DIR_GO_Y+0x8c>)
 8004822:	f005 fa69 	bl	8009cf8 <HAL_GPIO_WritePin>
		TIM4->CNT = 30000;
 8004826:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <v_t_graph_DIR_GO_Y+0x90>)
 8004828:	f247 5230 	movw	r2, #30000	@ 0x7530
 800482c:	625a      	str	r2, [r3, #36]	@ 0x24
		//	tim4_encoder_overflow = 1000000 - TIM4->CNT;


		vt_start_Y = 1;
 800482e:	4b11      	ldr	r3, [pc, #68]	@ (8004874 <v_t_graph_DIR_GO_Y+0x94>)
 8004830:	2201      	movs	r2, #1
 8004832:	701a      	strb	r2, [r3, #0]
		v_t_dir_back_Y_flag = 0;  //0: 전진 , 1: 후진
 8004834:	4b10      	ldr	r3, [pc, #64]	@ (8004878 <v_t_graph_DIR_GO_Y+0x98>)
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);  //y축 방향 go
 800483a:	2200      	movs	r2, #0
 800483c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004840:	480a      	ldr	r0, [pc, #40]	@ (800486c <v_t_graph_DIR_GO_Y+0x8c>)
 8004842:	f005 fa59 	bl	8009cf8 <HAL_GPIO_WritePin>
		v_t_graph(targetS_Y);
 8004846:	ed97 0a01 	vldr	s0, [r7, #4]
 800484a:	f7ff fcbd 	bl	80041c8 <v_t_graph>

//		DC_Y_now_posiotion++;
//	}
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20002c5c 	.word	0x20002c5c
 800485c:	2000081c 	.word	0x2000081c
 8004860:	200008ac 	.word	0x200008ac
 8004864:	20000864 	.word	0x20000864
 8004868:	20001350 	.word	0x20001350
 800486c:	40020400 	.word	0x40020400
 8004870:	40000800 	.word	0x40000800
 8004874:	200041b3 	.word	0x200041b3
 8004878:	20002c59 	.word	0x20002c59

0800487c <v_t_graph_DIR_BACK_Y>:
void v_t_graph_DIR_BACK_Y(float targetS_Y)          // Y축 v_t 후진
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	ed87 0a01 	vstr	s0, [r7, #4]
	algo_vt_y_back++;
 8004886:	4b1b      	ldr	r3, [pc, #108]	@ (80048f4 <v_t_graph_DIR_BACK_Y+0x78>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	4a19      	ldr	r2, [pc, #100]	@ (80048f4 <v_t_graph_DIR_BACK_Y+0x78>)
 800488e:	6013      	str	r3, [r2, #0]

	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8004890:	213c      	movs	r1, #60	@ 0x3c
 8004892:	4819      	ldr	r0, [pc, #100]	@ (80048f8 <v_t_graph_DIR_BACK_Y+0x7c>)
 8004894:	f007 fd4e 	bl	800c334 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8004898:	213c      	movs	r1, #60	@ 0x3c
 800489a:	4818      	ldr	r0, [pc, #96]	@ (80048fc <v_t_graph_DIR_BACK_Y+0x80>)
 800489c:	f007 fcbc 	bl	800c218 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80048a0:	2100      	movs	r1, #0
 80048a2:	4817      	ldr	r0, [pc, #92]	@ (8004900 <v_t_graph_DIR_BACK_Y+0x84>)
 80048a4:	f007 fba2 	bl	800bfec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80048a8:	2104      	movs	r1, #4
 80048aa:	4815      	ldr	r0, [pc, #84]	@ (8004900 <v_t_graph_DIR_BACK_Y+0x84>)
 80048ac:	f007 fad6 	bl	800be5c <HAL_TIM_PWM_Start>
	//if (DC_Y_now_posiotion==1)
//	{
		RPM_Y_back=0;
 80048b0:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <v_t_graph_DIR_BACK_Y+0x88>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);  //start
 80048b6:	2200      	movs	r2, #0
 80048b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048bc:	4812      	ldr	r0, [pc, #72]	@ (8004908 <v_t_graph_DIR_BACK_Y+0x8c>)
 80048be:	f005 fa1b 	bl	8009cf8 <HAL_GPIO_WritePin>
		TIM4->CNT = 30000;
 80048c2:	4b12      	ldr	r3, [pc, #72]	@ (800490c <v_t_graph_DIR_BACK_Y+0x90>)
 80048c4:	f247 5230 	movw	r2, #30000	@ 0x7530
 80048c8:	625a      	str	r2, [r3, #36]	@ 0x24
		//	tim4_encoder_overflow = 1000000 - TIM4->CNT;


		vt_start_Y = 1;
 80048ca:	4b11      	ldr	r3, [pc, #68]	@ (8004910 <v_t_graph_DIR_BACK_Y+0x94>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
		v_t_dir_back_Y_flag = 1;  //0: 전진 , 1: 후진
 80048d0:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <v_t_graph_DIR_BACK_Y+0x98>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);  //y축 방향 back
 80048d6:	2201      	movs	r2, #1
 80048d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80048dc:	480a      	ldr	r0, [pc, #40]	@ (8004908 <v_t_graph_DIR_BACK_Y+0x8c>)
 80048de:	f005 fa0b 	bl	8009cf8 <HAL_GPIO_WritePin>
		v_t_graph(targetS_Y);
 80048e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80048e6:	f7ff fc6f 	bl	80041c8 <v_t_graph>

	//	DC_Y_now_posiotion--;
//	}

}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20002c60 	.word	0x20002c60
 80048f8:	2000081c 	.word	0x2000081c
 80048fc:	200008ac 	.word	0x200008ac
 8004900:	20000864 	.word	0x20000864
 8004904:	20001354 	.word	0x20001354
 8004908:	40020400 	.word	0x40020400
 800490c:	40000800 	.word	0x40000800
 8004910:	200041b3 	.word	0x200041b3
 8004914:	20002c59 	.word	0x20002c59

08004918 <dc_motor_pid_X>:



///////////////////////////  DC PID  엔코더 입력 함수
void dc_motor_pid_X(float input_encoder)  //X축 pid
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8004922:	213c      	movs	r1, #60	@ 0x3c
 8004924:	4817      	ldr	r0, [pc, #92]	@ (8004984 <dc_motor_pid_X+0x6c>)
 8004926:	f007 fc77 	bl	800c218 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 800492a:	213c      	movs	r1, #60	@ 0x3c
 800492c:	4816      	ldr	r0, [pc, #88]	@ (8004988 <dc_motor_pid_X+0x70>)
 800492e:	f007 fd01 	bl	800c334 <HAL_TIM_Encoder_Stop>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004932:	2100      	movs	r1, #0
 8004934:	4815      	ldr	r0, [pc, #84]	@ (800498c <dc_motor_pid_X+0x74>)
 8004936:	f007 fa91 	bl	800be5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800493a:	2104      	movs	r1, #4
 800493c:	4813      	ldr	r0, [pc, #76]	@ (800498c <dc_motor_pid_X+0x74>)
 800493e:	f007 fb55 	bl	800bfec <HAL_TIM_PWM_Stop>

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);  //start
 8004942:	2200      	movs	r2, #0
 8004944:	2101      	movs	r1, #1
 8004946:	4812      	ldr	r0, [pc, #72]	@ (8004990 <dc_motor_pid_X+0x78>)
 8004948:	f005 f9d6 	bl	8009cf8 <HAL_GPIO_WritePin>
	position_start = 1;
 800494c:	4b11      	ldr	r3, [pc, #68]	@ (8004994 <dc_motor_pid_X+0x7c>)
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
	TIM2->CNT = 1000000;
 8004952:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004956:	4a10      	ldr	r2, [pc, #64]	@ (8004998 <dc_motor_pid_X+0x80>)
 8004958:	625a      	str	r2, [r3, #36]	@ 0x24

	input_position_X = 1000000 + input_encoder;
 800495a:	edd7 7a01 	vldr	s15, [r7, #4]
 800495e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800499c <dc_motor_pid_X+0x84>
 8004962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004966:	4b0e      	ldr	r3, [pc, #56]	@ (80049a0 <dc_motor_pid_X+0x88>)
 8004968:	edc3 7a00 	vstr	s15, [r3]
	err_sum_X = 0;
 800496c:	4b0d      	ldr	r3, [pc, #52]	@ (80049a4 <dc_motor_pid_X+0x8c>)
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
	err_sum_s_X = 0;
 8004974:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <dc_motor_pid_X+0x90>)
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

}
 800497c:	bf00      	nop
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	2000081c 	.word	0x2000081c
 8004988:	200008ac 	.word	0x200008ac
 800498c:	20000864 	.word	0x20000864
 8004990:	40021800 	.word	0x40021800
 8004994:	200041b0 	.word	0x200041b0
 8004998:	000f4240 	.word	0x000f4240
 800499c:	49742400 	.word	0x49742400
 80049a0:	20001460 	.word	0x20001460
 80049a4:	20001498 	.word	0x20001498
 80049a8:	20001494 	.word	0x20001494

080049ac <dc_motor_pid_Y>:



void dc_motor_pid_Y(float input_encoder)  //Y축 pid
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 80049b6:	213c      	movs	r1, #60	@ 0x3c
 80049b8:	4818      	ldr	r0, [pc, #96]	@ (8004a1c <dc_motor_pid_Y+0x70>)
 80049ba:	f007 fcbb 	bl	800c334 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80049be:	213c      	movs	r1, #60	@ 0x3c
 80049c0:	4817      	ldr	r0, [pc, #92]	@ (8004a20 <dc_motor_pid_Y+0x74>)
 80049c2:	f007 fc29 	bl	800c218 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80049c6:	2100      	movs	r1, #0
 80049c8:	4816      	ldr	r0, [pc, #88]	@ (8004a24 <dc_motor_pid_Y+0x78>)
 80049ca:	f007 fb0f 	bl	800bfec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80049ce:	2104      	movs	r1, #4
 80049d0:	4814      	ldr	r0, [pc, #80]	@ (8004a24 <dc_motor_pid_Y+0x78>)
 80049d2:	f007 fa43 	bl	800be5c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);  //start
 80049d6:	2200      	movs	r2, #0
 80049d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049dc:	4812      	ldr	r0, [pc, #72]	@ (8004a28 <dc_motor_pid_Y+0x7c>)
 80049de:	f005 f98b 	bl	8009cf8 <HAL_GPIO_WritePin>
	position_start_Y = 1;
 80049e2:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <dc_motor_pid_Y+0x80>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
	TIM4->CNT = 30000;
 80049e8:	4b11      	ldr	r3, [pc, #68]	@ (8004a30 <dc_motor_pid_Y+0x84>)
 80049ea:	f247 5230 	movw	r2, #30000	@ 0x7530
 80049ee:	625a      	str	r2, [r3, #36]	@ 0x24
//	tim4_encoder_overflow = 1000000 - TIM4->CNT;

	input_position_Y = 30000 + input_encoder;
 80049f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80049f4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8004a34 <dc_motor_pid_Y+0x88>
 80049f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a38 <dc_motor_pid_Y+0x8c>)
 80049fe:	edc3 7a00 	vstr	s15, [r3]
	err_sum_Y = 0;
 8004a02:	4b0e      	ldr	r3, [pc, #56]	@ (8004a3c <dc_motor_pid_Y+0x90>)
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
	err_sum_s_Y = 0;
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <dc_motor_pid_Y+0x94>)
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]

}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	2000081c 	.word	0x2000081c
 8004a20:	200008ac 	.word	0x200008ac
 8004a24:	20000864 	.word	0x20000864
 8004a28:	40020400 	.word	0x40020400
 8004a2c:	200041b1 	.word	0x200041b1
 8004a30:	40000800 	.word	0x40000800
 8004a34:	46ea6000 	.word	0x46ea6000
 8004a38:	200013f8 	.word	0x200013f8
 8004a3c:	20001430 	.word	0x20001430
 8004a40:	2000142c 	.word	0x2000142c

08004a44 <dc_motor_pid_X_with_photosensor1>:


void dc_motor_pid_X_with_photosensor1(uint32_t input_encoder)  //X축 pid
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8004a4c:	213c      	movs	r1, #60	@ 0x3c
 8004a4e:	4815      	ldr	r0, [pc, #84]	@ (8004aa4 <dc_motor_pid_X_with_photosensor1+0x60>)
 8004a50:	f007 fbe2 	bl	800c218 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8004a54:	213c      	movs	r1, #60	@ 0x3c
 8004a56:	4814      	ldr	r0, [pc, #80]	@ (8004aa8 <dc_motor_pid_X_with_photosensor1+0x64>)
 8004a58:	f007 fc6c 	bl	800c334 <HAL_TIM_Encoder_Stop>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4813      	ldr	r0, [pc, #76]	@ (8004aac <dc_motor_pid_X_with_photosensor1+0x68>)
 8004a60:	f007 f9fc 	bl	800be5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8004a64:	2104      	movs	r1, #4
 8004a66:	4811      	ldr	r0, [pc, #68]	@ (8004aac <dc_motor_pid_X_with_photosensor1+0x68>)
 8004a68:	f007 fac0 	bl	800bfec <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);  //start
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2101      	movs	r1, #1
 8004a70:	480f      	ldr	r0, [pc, #60]	@ (8004ab0 <dc_motor_pid_X_with_photosensor1+0x6c>)
 8004a72:	f005 f941 	bl	8009cf8 <HAL_GPIO_WritePin>
	position_start = 1;
 8004a76:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab4 <dc_motor_pid_X_with_photosensor1+0x70>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
//	TIM2->CNT = 1000000;


		input_position_X = input_encoder;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <dc_motor_pid_X_with_photosensor1+0x74>)
 8004a88:	edc3 7a00 	vstr	s15, [r3]



	err_sum_X = 0;
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004abc <dc_motor_pid_X_with_photosensor1+0x78>)
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
	err_sum_s_X = 0;
 8004a94:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac0 <dc_motor_pid_X_with_photosensor1+0x7c>)
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	2000081c 	.word	0x2000081c
 8004aa8:	200008ac 	.word	0x200008ac
 8004aac:	20000864 	.word	0x20000864
 8004ab0:	40021800 	.word	0x40021800
 8004ab4:	200041b0 	.word	0x200041b0
 8004ab8:	20001460 	.word	0x20001460
 8004abc:	20001498 	.word	0x20001498
 8004ac0:	20001494 	.word	0x20001494

08004ac4 <dc_motor_pid_Y_with_photosensor2>:
void dc_motor_pid_Y_with_photosensor2(uint32_t input_encoder)  //y축 pid
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8004acc:	213c      	movs	r1, #60	@ 0x3c
 8004ace:	4816      	ldr	r0, [pc, #88]	@ (8004b28 <dc_motor_pid_Y_with_photosensor2+0x64>)
 8004ad0:	f007 fc30 	bl	800c334 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8004ad4:	213c      	movs	r1, #60	@ 0x3c
 8004ad6:	4815      	ldr	r0, [pc, #84]	@ (8004b2c <dc_motor_pid_Y_with_photosensor2+0x68>)
 8004ad8:	f007 fb9e 	bl	800c218 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8004adc:	2100      	movs	r1, #0
 8004ade:	4814      	ldr	r0, [pc, #80]	@ (8004b30 <dc_motor_pid_Y_with_photosensor2+0x6c>)
 8004ae0:	f007 fa84 	bl	800bfec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004ae4:	2104      	movs	r1, #4
 8004ae6:	4812      	ldr	r0, [pc, #72]	@ (8004b30 <dc_motor_pid_Y_with_photosensor2+0x6c>)
 8004ae8:	f007 f9b8 	bl	800be5c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);  //start
 8004aec:	2200      	movs	r2, #0
 8004aee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004af2:	4810      	ldr	r0, [pc, #64]	@ (8004b34 <dc_motor_pid_Y_with_photosensor2+0x70>)
 8004af4:	f005 f900 	bl	8009cf8 <HAL_GPIO_WritePin>
	position_start_Y = 1;
 8004af8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b38 <dc_motor_pid_Y_with_photosensor2+0x74>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]


		input_position_Y = input_encoder;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b08:	4b0c      	ldr	r3, [pc, #48]	@ (8004b3c <dc_motor_pid_Y_with_photosensor2+0x78>)
 8004b0a:	edc3 7a00 	vstr	s15, [r3]



	err_sum_Y = 0;
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <dc_motor_pid_Y_with_photosensor2+0x7c>)
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
	err_sum_s_Y = 0;
 8004b16:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <dc_motor_pid_Y_with_photosensor2+0x80>)
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]

}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	2000081c 	.word	0x2000081c
 8004b2c:	200008ac 	.word	0x200008ac
 8004b30:	20000864 	.word	0x20000864
 8004b34:	40020400 	.word	0x40020400
 8004b38:	200041b1 	.word	0x200041b1
 8004b3c:	200013f8 	.word	0x200013f8
 8004b40:	20001430 	.word	0x20001430
 8004b44:	2000142c 	.word	0x2000142c

08004b48 <dc_motor_RPM>:
float RPM_X, RPS_X, Omega_X;
float RPM_Y, RPS_Y, Omega_Y;
extern float current_A_X;

void dc_motor_RPM(void)  //RPM측정 x,y 둘 다
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
	encoder_count_x = TIM4->CNT ;
 8004b4c:	4b92      	ldr	r3, [pc, #584]	@ (8004d98 <dc_motor_RPM+0x250>)
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	4a92      	ldr	r2, [pc, #584]	@ (8004d9c <dc_motor_RPM+0x254>)
 8004b52:	6013      	str	r3, [r2, #0]

	static uint32_t ENCODER_NEW_X = 0, ENCODER_OLD_X;
	static uint32_t ENCODER_NEW_Y = 0, ENCODER_OLD_Y;

	//////////////////////////////////////////////DC motor1 X
	ENCODER_OLD_X = ENCODER_NEW_X;
 8004b54:	4b92      	ldr	r3, [pc, #584]	@ (8004da0 <dc_motor_RPM+0x258>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a92      	ldr	r2, [pc, #584]	@ (8004da4 <dc_motor_RPM+0x25c>)
 8004b5a:	6013      	str	r3, [r2, #0]
	ENCODER_NEW_X = TIM2->CNT;
 8004b5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	4a8f      	ldr	r2, [pc, #572]	@ (8004da0 <dc_motor_RPM+0x258>)
 8004b64:	6013      	str	r3, [r2, #0]

	RPM_X = (abs(ENCODER_NEW_X - ENCODER_OLD_X) * 60) / 0.01 / 68 / 512;
 8004b66:	4b8e      	ldr	r3, [pc, #568]	@ (8004da0 <dc_motor_RPM+0x258>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b8e      	ldr	r3, [pc, #568]	@ (8004da4 <dc_motor_RPM+0x25c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004b74:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004b78:	4613      	mov	r3, r2
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fb fcef 	bl	8000564 <__aeabi_i2d>
 8004b86:	a380      	add	r3, pc, #512	@ (adr r3, 8004d88 <dc_motor_RPM+0x240>)
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f7fb fe7e 	bl	800088c <__aeabi_ddiv>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	4b82      	ldr	r3, [pc, #520]	@ (8004da8 <dc_motor_RPM+0x260>)
 8004b9e:	f7fb fe75 	bl	800088c <__aeabi_ddiv>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8004bb2:	f7fb fe6b 	bl	800088c <__aeabi_ddiv>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f7fc f833 	bl	8000c28 <__aeabi_d2f>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4a79      	ldr	r2, [pc, #484]	@ (8004dac <dc_motor_RPM+0x264>)
 8004bc6:	6013      	str	r3, [r2, #0]
	RPS_X = RPM_X / 60;
 8004bc8:	4b78      	ldr	r3, [pc, #480]	@ (8004dac <dc_motor_RPM+0x264>)
 8004bca:	ed93 7a00 	vldr	s14, [r3]
 8004bce:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8004db0 <dc_motor_RPM+0x268>
 8004bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bd6:	4b77      	ldr	r3, [pc, #476]	@ (8004db4 <dc_motor_RPM+0x26c>)
 8004bd8:	edc3 7a00 	vstr	s15, [r3]
	Omega_X = RPS_X * 2 * M_PI;
 8004bdc:	4b75      	ldr	r3, [pc, #468]	@ (8004db4 <dc_motor_RPM+0x26c>)
 8004bde:	edd3 7a00 	vldr	s15, [r3]
 8004be2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004be6:	ee17 0a90 	vmov	r0, s15
 8004bea:	f7fb fccd 	bl	8000588 <__aeabi_f2d>
 8004bee:	a368      	add	r3, pc, #416	@ (adr r3, 8004d90 <dc_motor_RPM+0x248>)
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f7fb fd20 	bl	8000638 <__aeabi_dmul>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	f7fc f812 	bl	8000c28 <__aeabi_d2f>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4a6c      	ldr	r2, [pc, #432]	@ (8004db8 <dc_motor_RPM+0x270>)
 8004c08:	6013      	str	r3, [r2, #0]

	if (( GPIOE->ODR & 1 << 0) == 0)	// if  앞으로
 8004c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8004dbc <dc_motor_RPM+0x274>)
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d110      	bne.n	8004c38 <dc_motor_RPM+0xf0>
			{
		RPM_X = RPM_X;
 8004c16:	4b65      	ldr	r3, [pc, #404]	@ (8004dac <dc_motor_RPM+0x264>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a64      	ldr	r2, [pc, #400]	@ (8004dac <dc_motor_RPM+0x264>)
 8004c1c:	6013      	str	r3, [r2, #0]
		RPS_X = RPS_X;
 8004c1e:	4b65      	ldr	r3, [pc, #404]	@ (8004db4 <dc_motor_RPM+0x26c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a64      	ldr	r2, [pc, #400]	@ (8004db4 <dc_motor_RPM+0x26c>)
 8004c24:	6013      	str	r3, [r2, #0]
		Omega_X = Omega_X;
 8004c26:	4b64      	ldr	r3, [pc, #400]	@ (8004db8 <dc_motor_RPM+0x270>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a63      	ldr	r2, [pc, #396]	@ (8004db8 <dc_motor_RPM+0x270>)
 8004c2c:	6013      	str	r3, [r2, #0]

		current_A_X = current_A_X;
 8004c2e:	4b64      	ldr	r3, [pc, #400]	@ (8004dc0 <dc_motor_RPM+0x278>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a63      	ldr	r2, [pc, #396]	@ (8004dc0 <dc_motor_RPM+0x278>)
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e01f      	b.n	8004c78 <dc_motor_RPM+0x130>
	} else {
		RPM_X = -RPM_X;
 8004c38:	4b5c      	ldr	r3, [pc, #368]	@ (8004dac <dc_motor_RPM+0x264>)
 8004c3a:	edd3 7a00 	vldr	s15, [r3]
 8004c3e:	eef1 7a67 	vneg.f32	s15, s15
 8004c42:	4b5a      	ldr	r3, [pc, #360]	@ (8004dac <dc_motor_RPM+0x264>)
 8004c44:	edc3 7a00 	vstr	s15, [r3]
		RPS_X = -RPS_X;
 8004c48:	4b5a      	ldr	r3, [pc, #360]	@ (8004db4 <dc_motor_RPM+0x26c>)
 8004c4a:	edd3 7a00 	vldr	s15, [r3]
 8004c4e:	eef1 7a67 	vneg.f32	s15, s15
 8004c52:	4b58      	ldr	r3, [pc, #352]	@ (8004db4 <dc_motor_RPM+0x26c>)
 8004c54:	edc3 7a00 	vstr	s15, [r3]
		Omega_X = -Omega_X;
 8004c58:	4b57      	ldr	r3, [pc, #348]	@ (8004db8 <dc_motor_RPM+0x270>)
 8004c5a:	edd3 7a00 	vldr	s15, [r3]
 8004c5e:	eef1 7a67 	vneg.f32	s15, s15
 8004c62:	4b55      	ldr	r3, [pc, #340]	@ (8004db8 <dc_motor_RPM+0x270>)
 8004c64:	edc3 7a00 	vstr	s15, [r3]

		current_A_X = -current_A_X;
 8004c68:	4b55      	ldr	r3, [pc, #340]	@ (8004dc0 <dc_motor_RPM+0x278>)
 8004c6a:	edd3 7a00 	vldr	s15, [r3]
 8004c6e:	eef1 7a67 	vneg.f32	s15, s15
 8004c72:	4b53      	ldr	r3, [pc, #332]	@ (8004dc0 <dc_motor_RPM+0x278>)
 8004c74:	edc3 7a00 	vstr	s15, [r3]
	}
	//////////////////////////////////////////////////////////DC motor2 Y
//	encoder_count_y = TIM4->CNT + tim4_encoder_overflow;
	ENCODER_OLD_Y = ENCODER_NEW_Y;
 8004c78:	4b52      	ldr	r3, [pc, #328]	@ (8004dc4 <dc_motor_RPM+0x27c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	@ (8004dc8 <dc_motor_RPM+0x280>)
 8004c7e:	6013      	str	r3, [r2, #0]
	ENCODER_NEW_Y = TIM4->CNT;
 8004c80:	4b45      	ldr	r3, [pc, #276]	@ (8004d98 <dc_motor_RPM+0x250>)
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	4a4f      	ldr	r2, [pc, #316]	@ (8004dc4 <dc_motor_RPM+0x27c>)
 8004c86:	6013      	str	r3, [r2, #0]

	RPM_Y = (abs(ENCODER_NEW_Y - ENCODER_OLD_Y) * 60) / 0.01 / 21.25 / 512;
 8004c88:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc4 <dc_motor_RPM+0x27c>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc8 <dc_motor_RPM+0x280>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004c96:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fb fc5e 	bl	8000564 <__aeabi_i2d>
 8004ca8:	a337      	add	r3, pc, #220	@ (adr r3, 8004d88 <dc_motor_RPM+0x240>)
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f7fb fded 	bl	800088c <__aeabi_ddiv>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	4b43      	ldr	r3, [pc, #268]	@ (8004dcc <dc_motor_RPM+0x284>)
 8004cc0:	f7fb fde4 	bl	800088c <__aeabi_ddiv>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8004cd4:	f7fb fdda 	bl	800088c <__aeabi_ddiv>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f7fb ffa2 	bl	8000c28 <__aeabi_d2f>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8004dd0 <dc_motor_RPM+0x288>)
 8004ce8:	6013      	str	r3, [r2, #0]
	RPS_Y = RPM_Y / 60;
 8004cea:	4b39      	ldr	r3, [pc, #228]	@ (8004dd0 <dc_motor_RPM+0x288>)
 8004cec:	ed93 7a00 	vldr	s14, [r3]
 8004cf0:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8004db0 <dc_motor_RPM+0x268>
 8004cf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cf8:	4b36      	ldr	r3, [pc, #216]	@ (8004dd4 <dc_motor_RPM+0x28c>)
 8004cfa:	edc3 7a00 	vstr	s15, [r3]
	Omega_Y = RPS_Y * 2 * M_PI;
 8004cfe:	4b35      	ldr	r3, [pc, #212]	@ (8004dd4 <dc_motor_RPM+0x28c>)
 8004d00:	edd3 7a00 	vldr	s15, [r3]
 8004d04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d08:	ee17 0a90 	vmov	r0, s15
 8004d0c:	f7fb fc3c 	bl	8000588 <__aeabi_f2d>
 8004d10:	a31f      	add	r3, pc, #124	@ (adr r3, 8004d90 <dc_motor_RPM+0x248>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f7fb fc8f 	bl	8000638 <__aeabi_dmul>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	f7fb ff81 	bl	8000c28 <__aeabi_d2f>
 8004d26:	4603      	mov	r3, r0
 8004d28:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd8 <dc_motor_RPM+0x290>)
 8004d2a:	6013      	str	r3, [r2, #0]

	if (( GPIOB->ODR & 1 << 10) == 0)	// if  PB10==0  : go
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ddc <dc_motor_RPM+0x294>)
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10c      	bne.n	8004d52 <dc_motor_RPM+0x20a>
			{
		RPM_Y = RPM_Y;
 8004d38:	4b25      	ldr	r3, [pc, #148]	@ (8004dd0 <dc_motor_RPM+0x288>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a24      	ldr	r2, [pc, #144]	@ (8004dd0 <dc_motor_RPM+0x288>)
 8004d3e:	6013      	str	r3, [r2, #0]
		RPS_Y = RPS_Y;
 8004d40:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <dc_motor_RPM+0x28c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a23      	ldr	r2, [pc, #140]	@ (8004dd4 <dc_motor_RPM+0x28c>)
 8004d46:	6013      	str	r3, [r2, #0]
		Omega_Y = Omega_Y;
 8004d48:	4b23      	ldr	r3, [pc, #140]	@ (8004dd8 <dc_motor_RPM+0x290>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	@ (8004dd8 <dc_motor_RPM+0x290>)
 8004d4e:	6013      	str	r3, [r2, #0]
		Omega_Y = -Omega_Y;

		//current_A = -current_A;
	}

}
 8004d50:	e017      	b.n	8004d82 <dc_motor_RPM+0x23a>
		RPM_Y = -RPM_Y;
 8004d52:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd0 <dc_motor_RPM+0x288>)
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	eef1 7a67 	vneg.f32	s15, s15
 8004d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd0 <dc_motor_RPM+0x288>)
 8004d5e:	edc3 7a00 	vstr	s15, [r3]
		RPS_Y = -RPS_Y;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd4 <dc_motor_RPM+0x28c>)
 8004d64:	edd3 7a00 	vldr	s15, [r3]
 8004d68:	eef1 7a67 	vneg.f32	s15, s15
 8004d6c:	4b19      	ldr	r3, [pc, #100]	@ (8004dd4 <dc_motor_RPM+0x28c>)
 8004d6e:	edc3 7a00 	vstr	s15, [r3]
		Omega_Y = -Omega_Y;
 8004d72:	4b19      	ldr	r3, [pc, #100]	@ (8004dd8 <dc_motor_RPM+0x290>)
 8004d74:	edd3 7a00 	vldr	s15, [r3]
 8004d78:	eef1 7a67 	vneg.f32	s15, s15
 8004d7c:	4b16      	ldr	r3, [pc, #88]	@ (8004dd8 <dc_motor_RPM+0x290>)
 8004d7e:	edc3 7a00 	vstr	s15, [r3]
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	47ae147b 	.word	0x47ae147b
 8004d8c:	3f847ae1 	.word	0x3f847ae1
 8004d90:	54442d18 	.word	0x54442d18
 8004d94:	400921fb 	.word	0x400921fb
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	20000000 	.word	0x20000000
 8004da0:	20002cec 	.word	0x20002cec
 8004da4:	20002cf0 	.word	0x20002cf0
 8004da8:	40510000 	.word	0x40510000
 8004dac:	20002c64 	.word	0x20002c64
 8004db0:	42700000 	.word	0x42700000
 8004db4:	20002c68 	.word	0x20002c68
 8004db8:	20002c6c 	.word	0x20002c6c
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	200041cc 	.word	0x200041cc
 8004dc4:	20002cf4 	.word	0x20002cf4
 8004dc8:	20002cf8 	.word	0x20002cf8
 8004dcc:	40354000 	.word	0x40354000
 8004dd0:	20002c70 	.word	0x20002c70
 8004dd4:	20002c74 	.word	0x20002c74
 8004dd8:	20002c78 	.word	0x20002c78
 8004ddc:	40020400 	.word	0x40020400

08004de0 <VT_control_X>:
float speed_sensor_Y_vt;
float speed_input_Y_vt;
float errorgap_s_Y_vt;


void VT_control_X(void) {
 8004de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0


	if (v_t_dir_back_X_flag == 1)  //후진이면
 8004de8:	4baf      	ldr	r3, [pc, #700]	@ (80050a8 <VT_control_X+0x2c8>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d124      	bne.n	8004e3a <VT_control_X+0x5a>
	{
		speed_sensor_X_vt = ((-RPM_X / 60) * 3.141592 * 9.5);  //  cm/s
 8004df0:	4bae      	ldr	r3, [pc, #696]	@ (80050ac <VT_control_X+0x2cc>)
 8004df2:	edd3 7a00 	vldr	s15, [r3]
 8004df6:	eef1 7a67 	vneg.f32	s15, s15
 8004dfa:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80050b0 <VT_control_X+0x2d0>
 8004dfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e02:	ee16 0a90 	vmov	r0, s13
 8004e06:	f7fb fbbf 	bl	8000588 <__aeabi_f2d>
 8004e0a:	a3a1      	add	r3, pc, #644	@ (adr r3, 8005090 <VT_control_X+0x2b0>)
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f7fb fc12 	bl	8000638 <__aeabi_dmul>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	4ba4      	ldr	r3, [pc, #656]	@ (80050b4 <VT_control_X+0x2d4>)
 8004e22:	f7fb fc09 	bl	8000638 <__aeabi_dmul>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	f7fb fefb 	bl	8000c28 <__aeabi_d2f>
 8004e32:	4603      	mov	r3, r0
 8004e34:	4aa0      	ldr	r2, [pc, #640]	@ (80050b8 <VT_control_X+0x2d8>)
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	e021      	b.n	8004e7e <VT_control_X+0x9e>
	} else {
		speed_sensor_X_vt = (RPM_X / 60) * 3.141592 * 9.5;  //  cm/s
 8004e3a:	4b9c      	ldr	r3, [pc, #624]	@ (80050ac <VT_control_X+0x2cc>)
 8004e3c:	edd3 7a00 	vldr	s15, [r3]
 8004e40:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 80050b0 <VT_control_X+0x2d0>
 8004e44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e48:	ee16 0a90 	vmov	r0, s13
 8004e4c:	f7fb fb9c 	bl	8000588 <__aeabi_f2d>
 8004e50:	a38f      	add	r3, pc, #572	@ (adr r3, 8005090 <VT_control_X+0x2b0>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	f7fb fbef 	bl	8000638 <__aeabi_dmul>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	4b93      	ldr	r3, [pc, #588]	@ (80050b4 <VT_control_X+0x2d4>)
 8004e68:	f7fb fbe6 	bl	8000638 <__aeabi_dmul>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4610      	mov	r0, r2
 8004e72:	4619      	mov	r1, r3
 8004e74:	f7fb fed8 	bl	8000c28 <__aeabi_d2f>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4a8f      	ldr	r2, [pc, #572]	@ (80050b8 <VT_control_X+0x2d8>)
 8004e7c:	6013      	str	r3, [r2, #0]
	}

	if (i_v_t_count <= orderN) {
 8004e7e:	4b8f      	ldr	r3, [pc, #572]	@ (80050bc <VT_control_X+0x2dc>)
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80050c0 <VT_control_X+0x2e0>)
 8004e8c:	edd3 7a00 	vldr	s15, [r3]
 8004e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e98:	d80b      	bhi.n	8004eb2 <VT_control_X+0xd2>
		speed_input_X_vt = orderArr[i_v_t_count++];
 8004e9a:	4b88      	ldr	r3, [pc, #544]	@ (80050bc <VT_control_X+0x2dc>)
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	b291      	uxth	r1, r2
 8004ea2:	4a86      	ldr	r2, [pc, #536]	@ (80050bc <VT_control_X+0x2dc>)
 8004ea4:	8011      	strh	r1, [r2, #0]
 8004ea6:	4a87      	ldr	r2, [pc, #540]	@ (80050c4 <VT_control_X+0x2e4>)
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a86      	ldr	r2, [pc, #536]	@ (80050c8 <VT_control_X+0x2e8>)
 8004eb0:	6013      	str	r3, [r2, #0]

	}

	errorgap_s_X_vt = speed_input_X_vt - speed_sensor_X_vt - err_s_X_vt;
 8004eb2:	4b85      	ldr	r3, [pc, #532]	@ (80050c8 <VT_control_X+0x2e8>)
 8004eb4:	ed93 7a00 	vldr	s14, [r3]
 8004eb8:	4b7f      	ldr	r3, [pc, #508]	@ (80050b8 <VT_control_X+0x2d8>)
 8004eba:	edd3 7a00 	vldr	s15, [r3]
 8004ebe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ec2:	4b82      	ldr	r3, [pc, #520]	@ (80050cc <VT_control_X+0x2ec>)
 8004ec4:	edd3 7a00 	vldr	s15, [r3]
 8004ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ecc:	4b80      	ldr	r3, [pc, #512]	@ (80050d0 <VT_control_X+0x2f0>)
 8004ece:	edc3 7a00 	vstr	s15, [r3]
	err_s_X_vt = speed_input_X_vt - speed_sensor_X_vt;
 8004ed2:	4b7d      	ldr	r3, [pc, #500]	@ (80050c8 <VT_control_X+0x2e8>)
 8004ed4:	ed93 7a00 	vldr	s14, [r3]
 8004ed8:	4b77      	ldr	r3, [pc, #476]	@ (80050b8 <VT_control_X+0x2d8>)
 8004eda:	edd3 7a00 	vldr	s15, [r3]
 8004ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ee2:	4b7a      	ldr	r3, [pc, #488]	@ (80050cc <VT_control_X+0x2ec>)
 8004ee4:	edc3 7a00 	vstr	s15, [r3]
	err_sum_s_X_vt += err_s_X_vt * 0.01;
 8004ee8:	4b7a      	ldr	r3, [pc, #488]	@ (80050d4 <VT_control_X+0x2f4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fb fb4b 	bl	8000588 <__aeabi_f2d>
 8004ef2:	4682      	mov	sl, r0
 8004ef4:	468b      	mov	fp, r1
 8004ef6:	4b75      	ldr	r3, [pc, #468]	@ (80050cc <VT_control_X+0x2ec>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fb fb44 	bl	8000588 <__aeabi_f2d>
 8004f00:	a365      	add	r3, pc, #404	@ (adr r3, 8005098 <VT_control_X+0x2b8>)
 8004f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f06:	f7fb fb97 	bl	8000638 <__aeabi_dmul>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4650      	mov	r0, sl
 8004f10:	4659      	mov	r1, fp
 8004f12:	f7fb f9db 	bl	80002cc <__adddf3>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f7fb fe83 	bl	8000c28 <__aeabi_d2f>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4a6b      	ldr	r2, [pc, #428]	@ (80050d4 <VT_control_X+0x2f4>)
 8004f26:	6013      	str	r3, [r2, #0]

	if ((i_v_t_count >= raisingN) && (i_v_t_count <= (staticN+ raisingN))) {
 8004f28:	4b64      	ldr	r3, [pc, #400]	@ (80050bc <VT_control_X+0x2dc>)
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f34:	4b68      	ldr	r3, [pc, #416]	@ (80050d8 <VT_control_X+0x2f8>)
 8004f36:	edd3 7a00 	vldr	s15, [r3]
 8004f3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f42:	db16      	blt.n	8004f72 <VT_control_X+0x192>
 8004f44:	4b5d      	ldr	r3, [pc, #372]	@ (80050bc <VT_control_X+0x2dc>)
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	ee07 3a90 	vmov	s15, r3
 8004f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f50:	4b62      	ldr	r3, [pc, #392]	@ (80050dc <VT_control_X+0x2fc>)
 8004f52:	edd3 6a00 	vldr	s13, [r3]
 8004f56:	4b60      	ldr	r3, [pc, #384]	@ (80050d8 <VT_control_X+0x2f8>)
 8004f58:	edd3 7a00 	vldr	s15, [r3]
 8004f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f68:	d803      	bhi.n	8004f72 <VT_control_X+0x192>
		s_ki_X_vt = 50;
 8004f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80050e0 <VT_control_X+0x300>)
 8004f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80050e4 <VT_control_X+0x304>)
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e003      	b.n	8004f7a <VT_control_X+0x19a>
	} else
		s_ki_X_vt = 0;
 8004f72:	4b5b      	ldr	r3, [pc, #364]	@ (80050e0 <VT_control_X+0x300>)
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]

	if (i_v_t_count >= orderN) {
 8004f7a:	4b50      	ldr	r3, [pc, #320]	@ (80050bc <VT_control_X+0x2dc>)
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f86:	4b4e      	ldr	r3, [pc, #312]	@ (80050c0 <VT_control_X+0x2e0>)
 8004f88:	edd3 7a00 	vldr	s15, [r3]
 8004f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	db17      	blt.n	8004fc6 <VT_control_X+0x1e6>
		for (int x = orderN; x <= 3000; x++) {
 8004f96:	4b4a      	ldr	r3, [pc, #296]	@ (80050c0 <VT_control_X+0x2e0>)
 8004f98:	edd3 7a00 	vldr	s15, [r3]
 8004f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fa0:	ee17 3a90 	vmov	r3, s15
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	e009      	b.n	8004fbc <VT_control_X+0x1dc>
			orderArr[x] = 0;
 8004fa8:	4a46      	ldr	r2, [pc, #280]	@ (80050c4 <VT_control_X+0x2e4>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
		for (int x = orderN; x <= 3000; x++) {
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	ddf0      	ble.n	8004fa8 <VT_control_X+0x1c8>
		}

	}

	if (s_PID_X_vt == 0) {
 8004fc6:	4b48      	ldr	r3, [pc, #288]	@ (80050e8 <VT_control_X+0x308>)
 8004fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	f7fb fd98 	bl	8000b08 <__aeabi_dcmpeq>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <VT_control_X+0x206>
		err_sum_s_X_vt = 0;
 8004fde:	4b3d      	ldr	r3, [pc, #244]	@ (80050d4 <VT_control_X+0x2f4>)
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
	}
	S_KP_X_vt = err_s_X_vt * s_kp_X_vt;
 8004fe6:	4b39      	ldr	r3, [pc, #228]	@ (80050cc <VT_control_X+0x2ec>)
 8004fe8:	ed93 7a00 	vldr	s14, [r3]
 8004fec:	4b3f      	ldr	r3, [pc, #252]	@ (80050ec <VT_control_X+0x30c>)
 8004fee:	edd3 7a00 	vldr	s15, [r3]
 8004ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80050f0 <VT_control_X+0x310>)
 8004ff8:	edc3 7a00 	vstr	s15, [r3]
	S_KI_X_vt = err_sum_s_X_vt * s_ki_X_vt;
 8004ffc:	4b35      	ldr	r3, [pc, #212]	@ (80050d4 <VT_control_X+0x2f4>)
 8004ffe:	ed93 7a00 	vldr	s14, [r3]
 8005002:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <VT_control_X+0x300>)
 8005004:	edd3 7a00 	vldr	s15, [r3]
 8005008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500c:	4b39      	ldr	r3, [pc, #228]	@ (80050f4 <VT_control_X+0x314>)
 800500e:	edc3 7a00 	vstr	s15, [r3]

	S_KD_X_vt = s_kd_X_vt * errorgap_s_X_vt / 0.01;
 8005012:	4b39      	ldr	r3, [pc, #228]	@ (80050f8 <VT_control_X+0x318>)
 8005014:	ed93 7a00 	vldr	s14, [r3]
 8005018:	4b2d      	ldr	r3, [pc, #180]	@ (80050d0 <VT_control_X+0x2f0>)
 800501a:	edd3 7a00 	vldr	s15, [r3]
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	ee17 0a90 	vmov	r0, s15
 8005026:	f7fb faaf 	bl	8000588 <__aeabi_f2d>
 800502a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005098 <VT_control_X+0x2b8>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f7fb fc2c 	bl	800088c <__aeabi_ddiv>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4930      	ldr	r1, [pc, #192]	@ (80050fc <VT_control_X+0x31c>)
 800503a:	e9c1 2300 	strd	r2, r3, [r1]

	s_PID_X_vt = S_KP_X_vt + S_KI_X_vt + S_KD_X_vt;
 800503e:	4b2c      	ldr	r3, [pc, #176]	@ (80050f0 <VT_control_X+0x310>)
 8005040:	ed93 7a00 	vldr	s14, [r3]
 8005044:	4b2b      	ldr	r3, [pc, #172]	@ (80050f4 <VT_control_X+0x314>)
 8005046:	edd3 7a00 	vldr	s15, [r3]
 800504a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800504e:	ee17 0a90 	vmov	r0, s15
 8005052:	f7fb fa99 	bl	8000588 <__aeabi_f2d>
 8005056:	4b29      	ldr	r3, [pc, #164]	@ (80050fc <VT_control_X+0x31c>)
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f7fb f936 	bl	80002cc <__adddf3>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4920      	ldr	r1, [pc, #128]	@ (80050e8 <VT_control_X+0x308>)
 8005066:	e9c1 2300 	strd	r2, r3, [r1]

	if (s_PID_X_vt >= 8500) {
 800506a:	4b1f      	ldr	r3, [pc, #124]	@ (80050e8 <VT_control_X+0x308>)
 800506c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005070:	a30b      	add	r3, pc, #44	@ (adr r3, 80050a0 <VT_control_X+0x2c0>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f7fb fd65 	bl	8000b44 <__aeabi_dcmpge>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d03f      	beq.n	8005100 <VT_control_X+0x320>
		s_PID_X_vt = 8500;
 8005080:	4919      	ldr	r1, [pc, #100]	@ (80050e8 <VT_control_X+0x308>)
 8005082:	a307      	add	r3, pc, #28	@ (adr r3, 80050a0 <VT_control_X+0x2c0>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	e9c1 2300 	strd	r2, r3, [r1]
 800508c:	e049      	b.n	8005122 <VT_control_X+0x342>
 800508e:	bf00      	nop
 8005090:	fc8b007a 	.word	0xfc8b007a
 8005094:	400921fa 	.word	0x400921fa
 8005098:	47ae147b 	.word	0x47ae147b
 800509c:	3f847ae1 	.word	0x3f847ae1
 80050a0:	00000000 	.word	0x00000000
 80050a4:	40c09a00 	.word	0x40c09a00
 80050a8:	20002c58 	.word	0x20002c58
 80050ac:	20002c64 	.word	0x20002c64
 80050b0:	42700000 	.word	0x42700000
 80050b4:	40230000 	.word	0x40230000
 80050b8:	20002ca8 	.word	0x20002ca8
 80050bc:	200014c8 	.word	0x200014c8
 80050c0:	20002c3c 	.word	0x20002c3c
 80050c4:	200014cc 	.word	0x200014cc
 80050c8:	20002cac 	.word	0x20002cac
 80050cc:	20002c84 	.word	0x20002c84
 80050d0:	20002cb0 	.word	0x20002cb0
 80050d4:	20002c88 	.word	0x20002c88
 80050d8:	20002c40 	.word	0x20002c40
 80050dc:	20002c4c 	.word	0x20002c4c
 80050e0:	20002c7c 	.word	0x20002c7c
 80050e4:	42480000 	.word	0x42480000
 80050e8:	20002ca0 	.word	0x20002ca0
 80050ec:	2000006c 	.word	0x2000006c
 80050f0:	20002c8c 	.word	0x20002c8c
 80050f4:	20002c90 	.word	0x20002c90
 80050f8:	20002c80 	.word	0x20002c80
 80050fc:	20002c98 	.word	0x20002c98
	} else if (s_PID_X_vt <= -8500) {
 8005100:	4b3d      	ldr	r3, [pc, #244]	@ (80051f8 <VT_control_X+0x418>)
 8005102:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005106:	a33a      	add	r3, pc, #232	@ (adr r3, 80051f0 <VT_control_X+0x410>)
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f7fb fd10 	bl	8000b30 <__aeabi_dcmple>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <VT_control_X+0x342>
		s_PID_X_vt = -8500;
 8005116:	4938      	ldr	r1, [pc, #224]	@ (80051f8 <VT_control_X+0x418>)
 8005118:	a335      	add	r3, pc, #212	@ (adr r3, 80051f0 <VT_control_X+0x410>)
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(photo_sensor_flag_x !=1)
 8005122:	4b36      	ldr	r3, [pc, #216]	@ (80051fc <VT_control_X+0x41c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d05c      	beq.n	80051e4 <VT_control_X+0x404>
	{
		if (s_PID_X_vt > 0)
 800512a:	4b33      	ldr	r3, [pc, #204]	@ (80051f8 <VT_control_X+0x418>)
 800512c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	f7fb fd0e 	bl	8000b58 <__aeabi_dcmpgt>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <VT_control_X+0x378>
		{
			//	GPIOE->ODR &= ~1 << 0; // go
			TIM3->CCR1 = s_PID_X_vt;
 8005142:	4b2d      	ldr	r3, [pc, #180]	@ (80051f8 <VT_control_X+0x418>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	4c2d      	ldr	r4, [pc, #180]	@ (8005200 <VT_control_X+0x420>)
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	f7fb fd4b 	bl	8000be8 <__aeabi_d2uiz>
 8005152:	4603      	mov	r3, r0
 8005154:	6363      	str	r3, [r4, #52]	@ 0x34
			}

		}
	}

}
 8005156:	e045      	b.n	80051e4 <VT_control_X+0x404>
		else if (s_PID_X_vt < 0)
 8005158:	4b27      	ldr	r3, [pc, #156]	@ (80051f8 <VT_control_X+0x418>)
 800515a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	f7fb fcd9 	bl	8000b1c <__aeabi_dcmplt>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d016      	beq.n	800519e <VT_control_X+0x3be>
			s_PID_X_vt = -s_PID_X_vt;
 8005170:	4b21      	ldr	r3, [pc, #132]	@ (80051f8 <VT_control_X+0x418>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	4614      	mov	r4, r2
 8005178:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800517c:	4b1e      	ldr	r3, [pc, #120]	@ (80051f8 <VT_control_X+0x418>)
 800517e:	e9c3 4500 	strd	r4, r5, [r3]
			TIM3->CCR1 = -s_PID_X_vt;
 8005182:	4b1d      	ldr	r3, [pc, #116]	@ (80051f8 <VT_control_X+0x418>)
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	4690      	mov	r8, r2
 800518a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800518e:	4c1c      	ldr	r4, [pc, #112]	@ (8005200 <VT_control_X+0x420>)
 8005190:	4640      	mov	r0, r8
 8005192:	4649      	mov	r1, r9
 8005194:	f7fb fd28 	bl	8000be8 <__aeabi_d2uiz>
 8005198:	4603      	mov	r3, r0
 800519a:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800519c:	e022      	b.n	80051e4 <VT_control_X+0x404>
			s_PID_X_vt = 0;
 800519e:	4916      	ldr	r1, [pc, #88]	@ (80051f8 <VT_control_X+0x418>)
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	e9c1 2300 	strd	r2, r3, [r1]
			TIM3->CCR1 = s_PID_X_vt;
 80051ac:	4b12      	ldr	r3, [pc, #72]	@ (80051f8 <VT_control_X+0x418>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	4c13      	ldr	r4, [pc, #76]	@ (8005200 <VT_control_X+0x420>)
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	f7fb fd16 	bl	8000be8 <__aeabi_d2uiz>
 80051bc:	4603      	mov	r3, r0
 80051be:	6363      	str	r3, [r4, #52]	@ 0x34
			if (i_v_t_count >= orderN)
 80051c0:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <VT_control_X+0x424>)
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <VT_control_X+0x428>)
 80051ce:	edd3 7a00 	vldr	s15, [r3]
 80051d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051da:	da00      	bge.n	80051de <VT_control_X+0x3fe>
}
 80051dc:	e002      	b.n	80051e4 <VT_control_X+0x404>
				vt_start = 0;
 80051de:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <VT_control_X+0x42c>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ee:	bf00      	nop
 80051f0:	00000000 	.word	0x00000000
 80051f4:	c0c09a00 	.word	0xc0c09a00
 80051f8:	20002ca0 	.word	0x20002ca0
 80051fc:	200031dc 	.word	0x200031dc
 8005200:	40000400 	.word	0x40000400
 8005204:	200014c8 	.word	0x200014c8
 8005208:	20002c3c 	.word	0x20002c3c
 800520c:	200041b2 	.word	0x200041b2

08005210 <VT_control_Y>:
void VT_control_Y(void) {
 8005210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0


	if (v_t_dir_back_Y_flag == 1)  //후진이면
 8005218:	4baf      	ldr	r3, [pc, #700]	@ (80054d8 <VT_control_Y+0x2c8>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d124      	bne.n	800526a <VT_control_Y+0x5a>
	{
		speed_sensor_Y_vt = ((-RPM_Y / 60) * 3.141592 * 9.5);  //  cm/s
 8005220:	4bae      	ldr	r3, [pc, #696]	@ (80054dc <VT_control_Y+0x2cc>)
 8005222:	edd3 7a00 	vldr	s15, [r3]
 8005226:	eef1 7a67 	vneg.f32	s15, s15
 800522a:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80054e0 <VT_control_Y+0x2d0>
 800522e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005232:	ee16 0a90 	vmov	r0, s13
 8005236:	f7fb f9a7 	bl	8000588 <__aeabi_f2d>
 800523a:	a3a1      	add	r3, pc, #644	@ (adr r3, 80054c0 <VT_control_Y+0x2b0>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f7fb f9fa 	bl	8000638 <__aeabi_dmul>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4610      	mov	r0, r2
 800524a:	4619      	mov	r1, r3
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	4ba4      	ldr	r3, [pc, #656]	@ (80054e4 <VT_control_Y+0x2d4>)
 8005252:	f7fb f9f1 	bl	8000638 <__aeabi_dmul>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	f7fb fce3 	bl	8000c28 <__aeabi_d2f>
 8005262:	4603      	mov	r3, r0
 8005264:	4aa0      	ldr	r2, [pc, #640]	@ (80054e8 <VT_control_Y+0x2d8>)
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	e021      	b.n	80052ae <VT_control_Y+0x9e>
	//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);  //y축 방향 back
	}
	else
	{
		speed_sensor_Y_vt = (RPM_Y / 60) * 3.141592 * 9.5;  //  cm/s
 800526a:	4b9c      	ldr	r3, [pc, #624]	@ (80054dc <VT_control_Y+0x2cc>)
 800526c:	edd3 7a00 	vldr	s15, [r3]
 8005270:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 80054e0 <VT_control_Y+0x2d0>
 8005274:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005278:	ee16 0a90 	vmov	r0, s13
 800527c:	f7fb f984 	bl	8000588 <__aeabi_f2d>
 8005280:	a38f      	add	r3, pc, #572	@ (adr r3, 80054c0 <VT_control_Y+0x2b0>)
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	f7fb f9d7 	bl	8000638 <__aeabi_dmul>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4610      	mov	r0, r2
 8005290:	4619      	mov	r1, r3
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	4b93      	ldr	r3, [pc, #588]	@ (80054e4 <VT_control_Y+0x2d4>)
 8005298:	f7fb f9ce 	bl	8000638 <__aeabi_dmul>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	f7fb fcc0 	bl	8000c28 <__aeabi_d2f>
 80052a8:	4603      	mov	r3, r0
 80052aa:	4a8f      	ldr	r2, [pc, #572]	@ (80054e8 <VT_control_Y+0x2d8>)
 80052ac:	6013      	str	r3, [r2, #0]
	}

	if (i_v_t_count <= orderN)
 80052ae:	4b8f      	ldr	r3, [pc, #572]	@ (80054ec <VT_control_Y+0x2dc>)
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052ba:	4b8d      	ldr	r3, [pc, #564]	@ (80054f0 <VT_control_Y+0x2e0>)
 80052bc:	edd3 7a00 	vldr	s15, [r3]
 80052c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c8:	d80b      	bhi.n	80052e2 <VT_control_Y+0xd2>
	{
		speed_input_Y_vt = orderArr[i_v_t_count++];
 80052ca:	4b88      	ldr	r3, [pc, #544]	@ (80054ec <VT_control_Y+0x2dc>)
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	b291      	uxth	r1, r2
 80052d2:	4a86      	ldr	r2, [pc, #536]	@ (80054ec <VT_control_Y+0x2dc>)
 80052d4:	8011      	strh	r1, [r2, #0]
 80052d6:	4a87      	ldr	r2, [pc, #540]	@ (80054f4 <VT_control_Y+0x2e4>)
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a86      	ldr	r2, [pc, #536]	@ (80054f8 <VT_control_Y+0x2e8>)
 80052e0:	6013      	str	r3, [r2, #0]
	}
	errorgap_s_Y_vt = speed_input_Y_vt - speed_sensor_Y_vt - err_s_Y_vt;
 80052e2:	4b85      	ldr	r3, [pc, #532]	@ (80054f8 <VT_control_Y+0x2e8>)
 80052e4:	ed93 7a00 	vldr	s14, [r3]
 80052e8:	4b7f      	ldr	r3, [pc, #508]	@ (80054e8 <VT_control_Y+0x2d8>)
 80052ea:	edd3 7a00 	vldr	s15, [r3]
 80052ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052f2:	4b82      	ldr	r3, [pc, #520]	@ (80054fc <VT_control_Y+0x2ec>)
 80052f4:	edd3 7a00 	vldr	s15, [r3]
 80052f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052fc:	4b80      	ldr	r3, [pc, #512]	@ (8005500 <VT_control_Y+0x2f0>)
 80052fe:	edc3 7a00 	vstr	s15, [r3]
	err_s_Y_vt = speed_input_Y_vt - speed_sensor_Y_vt;
 8005302:	4b7d      	ldr	r3, [pc, #500]	@ (80054f8 <VT_control_Y+0x2e8>)
 8005304:	ed93 7a00 	vldr	s14, [r3]
 8005308:	4b77      	ldr	r3, [pc, #476]	@ (80054e8 <VT_control_Y+0x2d8>)
 800530a:	edd3 7a00 	vldr	s15, [r3]
 800530e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005312:	4b7a      	ldr	r3, [pc, #488]	@ (80054fc <VT_control_Y+0x2ec>)
 8005314:	edc3 7a00 	vstr	s15, [r3]
	err_sum_s_Y_vt += err_s_Y_vt * 0.01;
 8005318:	4b7a      	ldr	r3, [pc, #488]	@ (8005504 <VT_control_Y+0x2f4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f7fb f933 	bl	8000588 <__aeabi_f2d>
 8005322:	4682      	mov	sl, r0
 8005324:	468b      	mov	fp, r1
 8005326:	4b75      	ldr	r3, [pc, #468]	@ (80054fc <VT_control_Y+0x2ec>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fb f92c 	bl	8000588 <__aeabi_f2d>
 8005330:	a365      	add	r3, pc, #404	@ (adr r3, 80054c8 <VT_control_Y+0x2b8>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fb f97f 	bl	8000638 <__aeabi_dmul>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4650      	mov	r0, sl
 8005340:	4659      	mov	r1, fp
 8005342:	f7fa ffc3 	bl	80002cc <__adddf3>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	f7fb fc6b 	bl	8000c28 <__aeabi_d2f>
 8005352:	4603      	mov	r3, r0
 8005354:	4a6b      	ldr	r2, [pc, #428]	@ (8005504 <VT_control_Y+0x2f4>)
 8005356:	6013      	str	r3, [r2, #0]

	if ((i_v_t_count >= raisingN) && (i_v_t_count <= (staticN+ raisingN))) {
 8005358:	4b64      	ldr	r3, [pc, #400]	@ (80054ec <VT_control_Y+0x2dc>)
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005364:	4b68      	ldr	r3, [pc, #416]	@ (8005508 <VT_control_Y+0x2f8>)
 8005366:	edd3 7a00 	vldr	s15, [r3]
 800536a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800536e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005372:	db16      	blt.n	80053a2 <VT_control_Y+0x192>
 8005374:	4b5d      	ldr	r3, [pc, #372]	@ (80054ec <VT_control_Y+0x2dc>)
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	ee07 3a90 	vmov	s15, r3
 800537c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005380:	4b62      	ldr	r3, [pc, #392]	@ (800550c <VT_control_Y+0x2fc>)
 8005382:	edd3 6a00 	vldr	s13, [r3]
 8005386:	4b60      	ldr	r3, [pc, #384]	@ (8005508 <VT_control_Y+0x2f8>)
 8005388:	edd3 7a00 	vldr	s15, [r3]
 800538c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005398:	d803      	bhi.n	80053a2 <VT_control_Y+0x192>
		s_ki_Y_vt = 50;
 800539a:	4b5d      	ldr	r3, [pc, #372]	@ (8005510 <VT_control_Y+0x300>)
 800539c:	4a5d      	ldr	r2, [pc, #372]	@ (8005514 <VT_control_Y+0x304>)
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e003      	b.n	80053aa <VT_control_Y+0x19a>
	} else
		s_ki_Y_vt = 0;
 80053a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005510 <VT_control_Y+0x300>)
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

	if (i_v_t_count >= orderN) {
 80053aa:	4b50      	ldr	r3, [pc, #320]	@ (80054ec <VT_control_Y+0x2dc>)
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053b6:	4b4e      	ldr	r3, [pc, #312]	@ (80054f0 <VT_control_Y+0x2e0>)
 80053b8:	edd3 7a00 	vldr	s15, [r3]
 80053bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c4:	db17      	blt.n	80053f6 <VT_control_Y+0x1e6>
		for (int x = orderN; x <= 3000; x++) {
 80053c6:	4b4a      	ldr	r3, [pc, #296]	@ (80054f0 <VT_control_Y+0x2e0>)
 80053c8:	edd3 7a00 	vldr	s15, [r3]
 80053cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053d0:	ee17 3a90 	vmov	r3, s15
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	e009      	b.n	80053ec <VT_control_Y+0x1dc>
			orderArr[x] = 0;
 80053d8:	4a46      	ldr	r2, [pc, #280]	@ (80054f4 <VT_control_Y+0x2e4>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
		for (int x = orderN; x <= 3000; x++) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3301      	adds	r3, #1
 80053ea:	607b      	str	r3, [r7, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80053f2:	4293      	cmp	r3, r2
 80053f4:	ddf0      	ble.n	80053d8 <VT_control_Y+0x1c8>
		}

	}

	if (s_PID_Y_vt == 0) {
 80053f6:	4b48      	ldr	r3, [pc, #288]	@ (8005518 <VT_control_Y+0x308>)
 80053f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	f7fb fb80 	bl	8000b08 <__aeabi_dcmpeq>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <VT_control_Y+0x206>
		err_sum_s_Y_vt = 0;
 800540e:	4b3d      	ldr	r3, [pc, #244]	@ (8005504 <VT_control_Y+0x2f4>)
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
	}
	S_KP_Y_vt = err_s_Y_vt * s_kp_Y_vt;
 8005416:	4b39      	ldr	r3, [pc, #228]	@ (80054fc <VT_control_Y+0x2ec>)
 8005418:	ed93 7a00 	vldr	s14, [r3]
 800541c:	4b3f      	ldr	r3, [pc, #252]	@ (800551c <VT_control_Y+0x30c>)
 800541e:	edd3 7a00 	vldr	s15, [r3]
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	4b3e      	ldr	r3, [pc, #248]	@ (8005520 <VT_control_Y+0x310>)
 8005428:	edc3 7a00 	vstr	s15, [r3]
	S_KI_Y_vt = err_sum_s_Y_vt * s_ki_Y_vt;
 800542c:	4b35      	ldr	r3, [pc, #212]	@ (8005504 <VT_control_Y+0x2f4>)
 800542e:	ed93 7a00 	vldr	s14, [r3]
 8005432:	4b37      	ldr	r3, [pc, #220]	@ (8005510 <VT_control_Y+0x300>)
 8005434:	edd3 7a00 	vldr	s15, [r3]
 8005438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543c:	4b39      	ldr	r3, [pc, #228]	@ (8005524 <VT_control_Y+0x314>)
 800543e:	edc3 7a00 	vstr	s15, [r3]

	S_KD_Y_vt = s_kd_Y_vt * errorgap_s_Y_vt / 0.01;
 8005442:	4b39      	ldr	r3, [pc, #228]	@ (8005528 <VT_control_Y+0x318>)
 8005444:	ed93 7a00 	vldr	s14, [r3]
 8005448:	4b2d      	ldr	r3, [pc, #180]	@ (8005500 <VT_control_Y+0x2f0>)
 800544a:	edd3 7a00 	vldr	s15, [r3]
 800544e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005452:	ee17 0a90 	vmov	r0, s15
 8005456:	f7fb f897 	bl	8000588 <__aeabi_f2d>
 800545a:	a31b      	add	r3, pc, #108	@ (adr r3, 80054c8 <VT_control_Y+0x2b8>)
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f7fb fa14 	bl	800088c <__aeabi_ddiv>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4930      	ldr	r1, [pc, #192]	@ (800552c <VT_control_Y+0x31c>)
 800546a:	e9c1 2300 	strd	r2, r3, [r1]

	s_PID_Y_vt = S_KP_Y_vt + S_KI_Y_vt + S_KD_Y_vt;
 800546e:	4b2c      	ldr	r3, [pc, #176]	@ (8005520 <VT_control_Y+0x310>)
 8005470:	ed93 7a00 	vldr	s14, [r3]
 8005474:	4b2b      	ldr	r3, [pc, #172]	@ (8005524 <VT_control_Y+0x314>)
 8005476:	edd3 7a00 	vldr	s15, [r3]
 800547a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547e:	ee17 0a90 	vmov	r0, s15
 8005482:	f7fb f881 	bl	8000588 <__aeabi_f2d>
 8005486:	4b29      	ldr	r3, [pc, #164]	@ (800552c <VT_control_Y+0x31c>)
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f7fa ff1e 	bl	80002cc <__adddf3>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4920      	ldr	r1, [pc, #128]	@ (8005518 <VT_control_Y+0x308>)
 8005496:	e9c1 2300 	strd	r2, r3, [r1]

	if (s_PID_Y_vt >= 8500)
 800549a:	4b1f      	ldr	r3, [pc, #124]	@ (8005518 <VT_control_Y+0x308>)
 800549c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054a0:	a30b      	add	r3, pc, #44	@ (adr r3, 80054d0 <VT_control_Y+0x2c0>)
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f7fb fb4d 	bl	8000b44 <__aeabi_dcmpge>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d03f      	beq.n	8005530 <VT_control_Y+0x320>
	{
		s_PID_Y_vt = 8500;
 80054b0:	4919      	ldr	r1, [pc, #100]	@ (8005518 <VT_control_Y+0x308>)
 80054b2:	a307      	add	r3, pc, #28	@ (adr r3, 80054d0 <VT_control_Y+0x2c0>)
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	e9c1 2300 	strd	r2, r3, [r1]
 80054bc:	e049      	b.n	8005552 <VT_control_Y+0x342>
 80054be:	bf00      	nop
 80054c0:	fc8b007a 	.word	0xfc8b007a
 80054c4:	400921fa 	.word	0x400921fa
 80054c8:	47ae147b 	.word	0x47ae147b
 80054cc:	3f847ae1 	.word	0x3f847ae1
 80054d0:	00000000 	.word	0x00000000
 80054d4:	40c09a00 	.word	0x40c09a00
 80054d8:	20002c59 	.word	0x20002c59
 80054dc:	20002c70 	.word	0x20002c70
 80054e0:	42700000 	.word	0x42700000
 80054e4:	40230000 	.word	0x40230000
 80054e8:	20002ce0 	.word	0x20002ce0
 80054ec:	200014c8 	.word	0x200014c8
 80054f0:	20002c3c 	.word	0x20002c3c
 80054f4:	200014cc 	.word	0x200014cc
 80054f8:	20002ce4 	.word	0x20002ce4
 80054fc:	20002cbc 	.word	0x20002cbc
 8005500:	20002ce8 	.word	0x20002ce8
 8005504:	20002cc0 	.word	0x20002cc0
 8005508:	20002c40 	.word	0x20002c40
 800550c:	20002c4c 	.word	0x20002c4c
 8005510:	20002cb4 	.word	0x20002cb4
 8005514:	42480000 	.word	0x42480000
 8005518:	20002cd8 	.word	0x20002cd8
 800551c:	20000070 	.word	0x20000070
 8005520:	20002cc4 	.word	0x20002cc4
 8005524:	20002cc8 	.word	0x20002cc8
 8005528:	20002cb8 	.word	0x20002cb8
 800552c:	20002cd0 	.word	0x20002cd0
	}
	else if (s_PID_Y_vt <= -8500)
 8005530:	4b3d      	ldr	r3, [pc, #244]	@ (8005628 <VT_control_Y+0x418>)
 8005532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005536:	a33a      	add	r3, pc, #232	@ (adr r3, 8005620 <VT_control_Y+0x410>)
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f7fb faf8 	bl	8000b30 <__aeabi_dcmple>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <VT_control_Y+0x342>
	{
		s_PID_Y_vt = -8500;
 8005546:	4938      	ldr	r1, [pc, #224]	@ (8005628 <VT_control_Y+0x418>)
 8005548:	a335      	add	r3, pc, #212	@ (adr r3, 8005620 <VT_control_Y+0x410>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	e9c1 2300 	strd	r2, r3, [r1]
	}


if(photo_sensor_flag_y !=1 )
 8005552:	4b36      	ldr	r3, [pc, #216]	@ (800562c <VT_control_Y+0x41c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d05c      	beq.n	8005614 <VT_control_Y+0x404>
	{
		if (s_PID_Y_vt > 0) {
 800555a:	4b33      	ldr	r3, [pc, #204]	@ (8005628 <VT_control_Y+0x418>)
 800555c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	f7fb faf6 	bl	8000b58 <__aeabi_dcmpgt>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <VT_control_Y+0x378>
			//	GPIOE->ODR &= ~1 << 0; // go
			TIM3->CCR2 = s_PID_Y_vt;
 8005572:	4b2d      	ldr	r3, [pc, #180]	@ (8005628 <VT_control_Y+0x418>)
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	4c2d      	ldr	r4, [pc, #180]	@ (8005630 <VT_control_Y+0x420>)
 800557a:	4610      	mov	r0, r2
 800557c:	4619      	mov	r1, r3
 800557e:	f7fb fb33 	bl	8000be8 <__aeabi_d2uiz>
 8005582:	4603      	mov	r3, r0
 8005584:	63a3      	str	r3, [r4, #56]	@ 0x38
				vt_start_Y = 0;
			}

		}
	}
}
 8005586:	e045      	b.n	8005614 <VT_control_Y+0x404>
		else if (s_PID_Y_vt < 0)
 8005588:	4b27      	ldr	r3, [pc, #156]	@ (8005628 <VT_control_Y+0x418>)
 800558a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	f7fb fac1 	bl	8000b1c <__aeabi_dcmplt>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d016      	beq.n	80055ce <VT_control_Y+0x3be>
			s_PID_Y_vt = -s_PID_Y_vt;
 80055a0:	4b21      	ldr	r3, [pc, #132]	@ (8005628 <VT_control_Y+0x418>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	4614      	mov	r4, r2
 80055a8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80055ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005628 <VT_control_Y+0x418>)
 80055ae:	e9c3 4500 	strd	r4, r5, [r3]
			TIM3->CCR2 = -s_PID_Y_vt;
 80055b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005628 <VT_control_Y+0x418>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	4690      	mov	r8, r2
 80055ba:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80055be:	4c1c      	ldr	r4, [pc, #112]	@ (8005630 <VT_control_Y+0x420>)
 80055c0:	4640      	mov	r0, r8
 80055c2:	4649      	mov	r1, r9
 80055c4:	f7fb fb10 	bl	8000be8 <__aeabi_d2uiz>
 80055c8:	4603      	mov	r3, r0
 80055ca:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80055cc:	e022      	b.n	8005614 <VT_control_Y+0x404>
			s_PID_Y_vt = 0;
 80055ce:	4916      	ldr	r1, [pc, #88]	@ (8005628 <VT_control_Y+0x418>)
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9c1 2300 	strd	r2, r3, [r1]
			TIM3->CCR2 = s_PID_Y_vt;
 80055dc:	4b12      	ldr	r3, [pc, #72]	@ (8005628 <VT_control_Y+0x418>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	4c13      	ldr	r4, [pc, #76]	@ (8005630 <VT_control_Y+0x420>)
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	f7fb fafe 	bl	8000be8 <__aeabi_d2uiz>
 80055ec:	4603      	mov	r3, r0
 80055ee:	63a3      	str	r3, [r4, #56]	@ 0x38
			if (i_v_t_count >= orderN) {
 80055f0:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <VT_control_Y+0x424>)
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005638 <VT_control_Y+0x428>)
 80055fe:	edd3 7a00 	vldr	s15, [r3]
 8005602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560a:	da00      	bge.n	800560e <VT_control_Y+0x3fe>
}
 800560c:	e002      	b.n	8005614 <VT_control_Y+0x404>
				vt_start_Y = 0;
 800560e:	4b0b      	ldr	r3, [pc, #44]	@ (800563c <VT_control_Y+0x42c>)
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800561e:	bf00      	nop
 8005620:	00000000 	.word	0x00000000
 8005624:	c0c09a00 	.word	0xc0c09a00
 8005628:	20002cd8 	.word	0x20002cd8
 800562c:	200031e0 	.word	0x200031e0
 8005630:	40000400 	.word	0x40000400
 8005634:	200014c8 	.word	0x200014c8
 8005638:	20002c3c 	.word	0x20002c3c
 800563c:	200041b3 	.word	0x200041b3

08005640 <position_pid_x>:

//7: 속도만(v_t) : tim6 샘플링 0.001에서 0.01로 변경

//10 : 5번 개선   > 5번 보다 좋아짐  이거 사용
//11 : 10+전휴 test
void position_pid_x(void) {
 8005640:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005644:	af00      	add	r7, sp, #0
#elif SOURCE == 10
	//////////////////////////////////위치

	//TIM6->ARR = 1000 - 1;  //ARR  : 샘플링 주기 1ms에서

	errorgap_p_X = input_position_X - TIM2->CNT - err_X;
 8005646:	4bbc      	ldr	r3, [pc, #752]	@ (8005938 <position_pid_x+0x2f8>)
 8005648:	ed93 7a00 	vldr	s14, [r3]
 800564c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800565e:	4bb7      	ldr	r3, [pc, #732]	@ (800593c <position_pid_x+0x2fc>)
 8005660:	edd3 7a00 	vldr	s15, [r3]
 8005664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005668:	4bb5      	ldr	r3, [pc, #724]	@ (8005940 <position_pid_x+0x300>)
 800566a:	edc3 7a00 	vstr	s15, [r3]
	err_X = input_position_X - TIM2->CNT;
 800566e:	4bb2      	ldr	r3, [pc, #712]	@ (8005938 <position_pid_x+0x2f8>)
 8005670:	ed93 7a00 	vldr	s14, [r3]
 8005674:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005686:	4bad      	ldr	r3, [pc, #692]	@ (800593c <position_pid_x+0x2fc>)
 8005688:	edc3 7a00 	vstr	s15, [r3]
	err_sum_X += err_X * 0.001;
 800568c:	4bad      	ldr	r3, [pc, #692]	@ (8005944 <position_pid_x+0x304>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f7fa ff79 	bl	8000588 <__aeabi_f2d>
 8005696:	4680      	mov	r8, r0
 8005698:	4689      	mov	r9, r1
 800569a:	4ba8      	ldr	r3, [pc, #672]	@ (800593c <position_pid_x+0x2fc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fa ff72 	bl	8000588 <__aeabi_f2d>
 80056a4:	a39c      	add	r3, pc, #624	@ (adr r3, 8005918 <position_pid_x+0x2d8>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f7fa ffc5 	bl	8000638 <__aeabi_dmul>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4640      	mov	r0, r8
 80056b4:	4649      	mov	r1, r9
 80056b6:	f7fa fe09 	bl	80002cc <__adddf3>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4610      	mov	r0, r2
 80056c0:	4619      	mov	r1, r3
 80056c2:	f7fb fab1 	bl	8000c28 <__aeabi_d2f>
 80056c6:	4603      	mov	r3, r0
 80056c8:	4a9e      	ldr	r2, [pc, #632]	@ (8005944 <position_pid_x+0x304>)
 80056ca:	6013      	str	r3, [r2, #0]

	if (p_PID_X == 0) {
 80056cc:	4b9e      	ldr	r3, [pc, #632]	@ (8005948 <position_pid_x+0x308>)
 80056ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	f7fb fa15 	bl	8000b08 <__aeabi_dcmpeq>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <position_pid_x+0xac>
		err_sum_X = 0;
 80056e4:	4b97      	ldr	r3, [pc, #604]	@ (8005944 <position_pid_x+0x304>)
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
	}

	P_KP_X = err_X * p_kp_X;
 80056ec:	4b93      	ldr	r3, [pc, #588]	@ (800593c <position_pid_x+0x2fc>)
 80056ee:	ed93 7a00 	vldr	s14, [r3]
 80056f2:	4b96      	ldr	r3, [pc, #600]	@ (800594c <position_pid_x+0x30c>)
 80056f4:	edd3 7a00 	vldr	s15, [r3]
 80056f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fc:	4b94      	ldr	r3, [pc, #592]	@ (8005950 <position_pid_x+0x310>)
 80056fe:	edc3 7a00 	vstr	s15, [r3]
	P_KI_X = err_sum_X * p_ki_X;
 8005702:	4b90      	ldr	r3, [pc, #576]	@ (8005944 <position_pid_x+0x304>)
 8005704:	ed93 7a00 	vldr	s14, [r3]
 8005708:	4b92      	ldr	r3, [pc, #584]	@ (8005954 <position_pid_x+0x314>)
 800570a:	edd3 7a00 	vldr	s15, [r3]
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	4b91      	ldr	r3, [pc, #580]	@ (8005958 <position_pid_x+0x318>)
 8005714:	edc3 7a00 	vstr	s15, [r3]

	//	err_d_X = (err_X - previous_err_X) / 0.0001;   //1ms
	//	previous_err_X = err_X;

	P_KD_X = p_kd_X * errorgap_p_X / 0.001;
 8005718:	4b90      	ldr	r3, [pc, #576]	@ (800595c <position_pid_x+0x31c>)
 800571a:	ed93 7a00 	vldr	s14, [r3]
 800571e:	4b88      	ldr	r3, [pc, #544]	@ (8005940 <position_pid_x+0x300>)
 8005720:	edd3 7a00 	vldr	s15, [r3]
 8005724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005728:	ee17 0a90 	vmov	r0, s15
 800572c:	f7fa ff2c 	bl	8000588 <__aeabi_f2d>
 8005730:	a379      	add	r3, pc, #484	@ (adr r3, 8005918 <position_pid_x+0x2d8>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f7fb f8a9 	bl	800088c <__aeabi_ddiv>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4988      	ldr	r1, [pc, #544]	@ (8005960 <position_pid_x+0x320>)
 8005740:	e9c1 2300 	strd	r2, r3, [r1]

	p_PID_X = P_KP_X + P_KI_X + P_KD_X;
 8005744:	4b82      	ldr	r3, [pc, #520]	@ (8005950 <position_pid_x+0x310>)
 8005746:	ed93 7a00 	vldr	s14, [r3]
 800574a:	4b83      	ldr	r3, [pc, #524]	@ (8005958 <position_pid_x+0x318>)
 800574c:	edd3 7a00 	vldr	s15, [r3]
 8005750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005754:	ee17 0a90 	vmov	r0, s15
 8005758:	f7fa ff16 	bl	8000588 <__aeabi_f2d>
 800575c:	4b80      	ldr	r3, [pc, #512]	@ (8005960 <position_pid_x+0x320>)
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f7fa fdb3 	bl	80002cc <__adddf3>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4977      	ldr	r1, [pc, #476]	@ (8005948 <position_pid_x+0x308>)
 800576c:	e9c1 2300 	strd	r2, r3, [r1]

	if (p_PID_X >= 11000) {
 8005770:	4b75      	ldr	r3, [pc, #468]	@ (8005948 <position_pid_x+0x308>)
 8005772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005776:	a36a      	add	r3, pc, #424	@ (adr r3, 8005920 <position_pid_x+0x2e0>)
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f7fb f9e2 	bl	8000b44 <__aeabi_dcmpge>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <position_pid_x+0x154>
		p_PID_X = 11000;
 8005786:	4970      	ldr	r1, [pc, #448]	@ (8005948 <position_pid_x+0x308>)
 8005788:	a365      	add	r3, pc, #404	@ (adr r3, 8005920 <position_pid_x+0x2e0>)
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	e9c1 2300 	strd	r2, r3, [r1]
 8005792:	e010      	b.n	80057b6 <position_pid_x+0x176>
	} else if (p_PID_X <= -11000) {
 8005794:	4b6c      	ldr	r3, [pc, #432]	@ (8005948 <position_pid_x+0x308>)
 8005796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800579a:	a363      	add	r3, pc, #396	@ (adr r3, 8005928 <position_pid_x+0x2e8>)
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	f7fb f9c6 	bl	8000b30 <__aeabi_dcmple>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <position_pid_x+0x176>
		p_PID_X = -11000;
 80057aa:	4967      	ldr	r1, [pc, #412]	@ (8005948 <position_pid_x+0x308>)
 80057ac:	a35e      	add	r3, pc, #376	@ (adr r3, 8005928 <position_pid_x+0x2e8>)
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	e9c1 2300 	strd	r2, r3, [r1]

	//참고	  errorGap = target - current - realError;
	//		realError = target - current;	// 실시간 에러는 단순히 목표값 - 현재값을 의미합니다.
	//	    accError += realError;

	speed_sensor_X = (RPM_X * 512) / 60;
 80057b6:	4b6b      	ldr	r3, [pc, #428]	@ (8005964 <position_pid_x+0x324>)
 80057b8:	edd3 7a00 	vldr	s15, [r3]
 80057bc:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8005968 <position_pid_x+0x328>
 80057c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057c4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800596c <position_pid_x+0x32c>
 80057c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057cc:	4b68      	ldr	r3, [pc, #416]	@ (8005970 <position_pid_x+0x330>)
 80057ce:	edc3 7a00 	vstr	s15, [r3]
	//	speed_sensor_X = Omega_X*180/(3.141592);
	speed_input_X = p_PID_X;
 80057d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005948 <position_pid_x+0x308>)
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	f7fb fa24 	bl	8000c28 <__aeabi_d2f>
 80057e0:	4603      	mov	r3, r0
 80057e2:	4a64      	ldr	r2, [pc, #400]	@ (8005974 <position_pid_x+0x334>)
 80057e4:	6013      	str	r3, [r2, #0]
	errorgap_s_X = speed_input_X - speed_sensor_X - err_s_X;
 80057e6:	4b63      	ldr	r3, [pc, #396]	@ (8005974 <position_pid_x+0x334>)
 80057e8:	ed93 7a00 	vldr	s14, [r3]
 80057ec:	4b60      	ldr	r3, [pc, #384]	@ (8005970 <position_pid_x+0x330>)
 80057ee:	edd3 7a00 	vldr	s15, [r3]
 80057f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057f6:	4b60      	ldr	r3, [pc, #384]	@ (8005978 <position_pid_x+0x338>)
 80057f8:	edd3 7a00 	vldr	s15, [r3]
 80057fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005800:	4b5e      	ldr	r3, [pc, #376]	@ (800597c <position_pid_x+0x33c>)
 8005802:	edc3 7a00 	vstr	s15, [r3]
	err_s_X = speed_input_X - speed_sensor_X;
 8005806:	4b5b      	ldr	r3, [pc, #364]	@ (8005974 <position_pid_x+0x334>)
 8005808:	ed93 7a00 	vldr	s14, [r3]
 800580c:	4b58      	ldr	r3, [pc, #352]	@ (8005970 <position_pid_x+0x330>)
 800580e:	edd3 7a00 	vldr	s15, [r3]
 8005812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005816:	4b58      	ldr	r3, [pc, #352]	@ (8005978 <position_pid_x+0x338>)
 8005818:	edc3 7a00 	vstr	s15, [r3]
	err_sum_s_X += err_s_X * 0.001;
 800581c:	4b58      	ldr	r3, [pc, #352]	@ (8005980 <position_pid_x+0x340>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4618      	mov	r0, r3
 8005822:	f7fa feb1 	bl	8000588 <__aeabi_f2d>
 8005826:	4680      	mov	r8, r0
 8005828:	4689      	mov	r9, r1
 800582a:	4b53      	ldr	r3, [pc, #332]	@ (8005978 <position_pid_x+0x338>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7fa feaa 	bl	8000588 <__aeabi_f2d>
 8005834:	a338      	add	r3, pc, #224	@ (adr r3, 8005918 <position_pid_x+0x2d8>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f7fa fefd 	bl	8000638 <__aeabi_dmul>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4640      	mov	r0, r8
 8005844:	4649      	mov	r1, r9
 8005846:	f7fa fd41 	bl	80002cc <__adddf3>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4610      	mov	r0, r2
 8005850:	4619      	mov	r1, r3
 8005852:	f7fb f9e9 	bl	8000c28 <__aeabi_d2f>
 8005856:	4603      	mov	r3, r0
 8005858:	4a49      	ldr	r2, [pc, #292]	@ (8005980 <position_pid_x+0x340>)
 800585a:	6013      	str	r3, [r2, #0]

	if (s_PID_X == 0) {
 800585c:	4b49      	ldr	r3, [pc, #292]	@ (8005984 <position_pid_x+0x344>)
 800585e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	f7fb f94d 	bl	8000b08 <__aeabi_dcmpeq>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <position_pid_x+0x23c>
		err_sum_s_X = 0;
 8005874:	4b42      	ldr	r3, [pc, #264]	@ (8005980 <position_pid_x+0x340>)
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
	}

	                   //s_kp_X=1;
	S_KP_X = err_s_X * 1;
 800587c:	4b3e      	ldr	r3, [pc, #248]	@ (8005978 <position_pid_x+0x338>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a41      	ldr	r2, [pc, #260]	@ (8005988 <position_pid_x+0x348>)
 8005882:	6013      	str	r3, [r2, #0]
//	S_KP_X = err_s_X * s_kp_X;

	S_KI_X = err_sum_s_X * s_ki_X;
 8005884:	4b3e      	ldr	r3, [pc, #248]	@ (8005980 <position_pid_x+0x340>)
 8005886:	ed93 7a00 	vldr	s14, [r3]
 800588a:	4b40      	ldr	r3, [pc, #256]	@ (800598c <position_pid_x+0x34c>)
 800588c:	edd3 7a00 	vldr	s15, [r3]
 8005890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005894:	4b3e      	ldr	r3, [pc, #248]	@ (8005990 <position_pid_x+0x350>)
 8005896:	edc3 7a00 	vstr	s15, [r3]

	//	err_d = (err - previous_err) / 0.0001;   //1ms
	//	previous_err = err;

	S_KD_X = s_kd_X * errorgap_s_X / 0.001;
 800589a:	4b3e      	ldr	r3, [pc, #248]	@ (8005994 <position_pid_x+0x354>)
 800589c:	ed93 7a00 	vldr	s14, [r3]
 80058a0:	4b36      	ldr	r3, [pc, #216]	@ (800597c <position_pid_x+0x33c>)
 80058a2:	edd3 7a00 	vldr	s15, [r3]
 80058a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058aa:	ee17 0a90 	vmov	r0, s15
 80058ae:	f7fa fe6b 	bl	8000588 <__aeabi_f2d>
 80058b2:	a319      	add	r3, pc, #100	@ (adr r3, 8005918 <position_pid_x+0x2d8>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f7fa ffe8 	bl	800088c <__aeabi_ddiv>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4935      	ldr	r1, [pc, #212]	@ (8005998 <position_pid_x+0x358>)
 80058c2:	e9c1 2300 	strd	r2, r3, [r1]

	s_PID_X = S_KP_X + S_KI_X + S_KD_X;
 80058c6:	4b30      	ldr	r3, [pc, #192]	@ (8005988 <position_pid_x+0x348>)
 80058c8:	ed93 7a00 	vldr	s14, [r3]
 80058cc:	4b30      	ldr	r3, [pc, #192]	@ (8005990 <position_pid_x+0x350>)
 80058ce:	edd3 7a00 	vldr	s15, [r3]
 80058d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058d6:	ee17 0a90 	vmov	r0, s15
 80058da:	f7fa fe55 	bl	8000588 <__aeabi_f2d>
 80058de:	4b2e      	ldr	r3, [pc, #184]	@ (8005998 <position_pid_x+0x358>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f7fa fcf2 	bl	80002cc <__adddf3>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4925      	ldr	r1, [pc, #148]	@ (8005984 <position_pid_x+0x344>)
 80058ee:	e9c1 2300 	strd	r2, r3, [r1]

	if (s_PID_X >= 6000) {
 80058f2:	4b24      	ldr	r3, [pc, #144]	@ (8005984 <position_pid_x+0x344>)
 80058f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058f8:	a30d      	add	r3, pc, #52	@ (adr r3, 8005930 <position_pid_x+0x2f0>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f7fb f921 	bl	8000b44 <__aeabi_dcmpge>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d049      	beq.n	800599c <position_pid_x+0x35c>
		s_PID_X = 6000;
 8005908:	491e      	ldr	r1, [pc, #120]	@ (8005984 <position_pid_x+0x344>)
 800590a:	a309      	add	r3, pc, #36	@ (adr r3, 8005930 <position_pid_x+0x2f0>)
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	e9c1 2300 	strd	r2, r3, [r1]
 8005914:	e053      	b.n	80059be <position_pid_x+0x37e>
 8005916:	bf00      	nop
 8005918:	d2f1a9fc 	.word	0xd2f1a9fc
 800591c:	3f50624d 	.word	0x3f50624d
 8005920:	00000000 	.word	0x00000000
 8005924:	40c57c00 	.word	0x40c57c00
 8005928:	00000000 	.word	0x00000000
 800592c:	c0c57c00 	.word	0xc0c57c00
 8005930:	00000000 	.word	0x00000000
 8005934:	40b77000 	.word	0x40b77000
 8005938:	20001460 	.word	0x20001460
 800593c:	20001464 	.word	0x20001464
 8005940:	200014c0 	.word	0x200014c0
 8005944:	20001498 	.word	0x20001498
 8005948:	20001488 	.word	0x20001488
 800594c:	20000050 	.word	0x20000050
 8005950:	20001474 	.word	0x20001474
 8005954:	20001468 	.word	0x20001468
 8005958:	20001478 	.word	0x20001478
 800595c:	20000054 	.word	0x20000054
 8005960:	20001480 	.word	0x20001480
 8005964:	20002c64 	.word	0x20002c64
 8005968:	44000000 	.word	0x44000000
 800596c:	42700000 	.word	0x42700000
 8005970:	200014b8 	.word	0x200014b8
 8005974:	200014bc 	.word	0x200014bc
 8005978:	20001490 	.word	0x20001490
 800597c:	200014c4 	.word	0x200014c4
 8005980:	20001494 	.word	0x20001494
 8005984:	200014b0 	.word	0x200014b0
 8005988:	2000149c 	.word	0x2000149c
 800598c:	2000146c 	.word	0x2000146c
 8005990:	200014a0 	.word	0x200014a0
 8005994:	20001470 	.word	0x20001470
 8005998:	200014a8 	.word	0x200014a8
	} else if (s_PID_X <= -6000) {
 800599c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a90 <position_pid_x+0x450>)
 800599e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059a2:	a339      	add	r3, pc, #228	@ (adr r3, 8005a88 <position_pid_x+0x448>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f7fb f8c2 	bl	8000b30 <__aeabi_dcmple>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <position_pid_x+0x37e>
		s_PID_X = -6000;
 80059b2:	4937      	ldr	r1, [pc, #220]	@ (8005a90 <position_pid_x+0x450>)
 80059b4:	a334      	add	r3, pc, #208	@ (adr r3, 8005a88 <position_pid_x+0x448>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (s_PID_X > 0) {
 80059be:	4b34      	ldr	r3, [pc, #208]	@ (8005a90 <position_pid_x+0x450>)
 80059c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	f7fb f8c4 	bl	8000b58 <__aeabi_dcmpgt>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d010      	beq.n	80059f8 <position_pid_x+0x3b8>
		GPIOE->ODR &= ~1 << 0; // go
 80059d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a94 <position_pid_x+0x454>)
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	4a2e      	ldr	r2, [pc, #184]	@ (8005a94 <position_pid_x+0x454>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	6153      	str	r3, [r2, #20]
		TIM3->CCR1 = s_PID_X;
 80059e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005a90 <position_pid_x+0x450>)
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	4c2b      	ldr	r4, [pc, #172]	@ (8005a98 <position_pid_x+0x458>)
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	f7fb f8fb 	bl	8000be8 <__aeabi_d2uiz>
 80059f2:	4603      	mov	r3, r0
 80059f4:	6363      	str	r3, [r4, #52]	@ 0x34
				}



#endif
}
 80059f6:	e044      	b.n	8005a82 <position_pid_x+0x442>
	} else if (s_PID_X < 0) {
 80059f8:	4b25      	ldr	r3, [pc, #148]	@ (8005a90 <position_pid_x+0x450>)
 80059fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	f7fb f889 	bl	8000b1c <__aeabi_dcmplt>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d019      	beq.n	8005a44 <position_pid_x+0x404>
		GPIOE->ODR |= 1 << 0; // back
 8005a10:	4b20      	ldr	r3, [pc, #128]	@ (8005a94 <position_pid_x+0x454>)
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	4a1f      	ldr	r2, [pc, #124]	@ (8005a94 <position_pid_x+0x454>)
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	6153      	str	r3, [r2, #20]
		s_PID_X = -s_PID_X;
 8005a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a90 <position_pid_x+0x450>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	4614      	mov	r4, r2
 8005a24:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8005a28:	4b19      	ldr	r3, [pc, #100]	@ (8005a90 <position_pid_x+0x450>)
 8005a2a:	e9c3 4500 	strd	r4, r5, [r3]
		TIM3->CCR1 = s_PID_X;
 8005a2e:	4b18      	ldr	r3, [pc, #96]	@ (8005a90 <position_pid_x+0x450>)
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	4c18      	ldr	r4, [pc, #96]	@ (8005a98 <position_pid_x+0x458>)
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f7fb f8d5 	bl	8000be8 <__aeabi_d2uiz>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8005a42:	e01e      	b.n	8005a82 <position_pid_x+0x442>
		s_PID_X = 0;
 8005a44:	4912      	ldr	r1, [pc, #72]	@ (8005a90 <position_pid_x+0x450>)
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9c1 2300 	strd	r2, r3, [r1]
		TIM3->CCR1 = s_PID_X;
 8005a52:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <position_pid_x+0x450>)
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	4c0f      	ldr	r4, [pc, #60]	@ (8005a98 <position_pid_x+0x458>)
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	f7fb f8c3 	bl	8000be8 <__aeabi_d2uiz>
 8005a62:	4603      	mov	r3, r0
 8005a64:	6363      	str	r3, [r4, #52]	@ 0x34
		position_start = 0;
 8005a66:	4b0d      	ldr	r3, [pc, #52]	@ (8005a9c <position_pid_x+0x45c>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
		photo_sensor_flag_x=0;
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa0 <position_pid_x+0x460>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);  //stop
 8005a72:	2201      	movs	r2, #1
 8005a74:	2101      	movs	r1, #1
 8005a76:	480b      	ldr	r0, [pc, #44]	@ (8005aa4 <position_pid_x+0x464>)
 8005a78:	f004 f93e 	bl	8009cf8 <HAL_GPIO_WritePin>
		PID_X_finish = 1;
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa8 <position_pid_x+0x468>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	601a      	str	r2, [r3, #0]
}
 8005a82:	bf00      	nop
 8005a84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a88:	00000000 	.word	0x00000000
 8005a8c:	c0b77000 	.word	0xc0b77000
 8005a90:	200014b0 	.word	0x200014b0
 8005a94:	40021000 	.word	0x40021000
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	200041b0 	.word	0x200041b0
 8005aa0:	200031dc 	.word	0x200031dc
 8005aa4:	40021800 	.word	0x40021800
 8005aa8:	2000135c 	.word	0x2000135c
 8005aac:	00000000 	.word	0x00000000

08005ab0 <position_pid_y>:


#define SOURCE2 10
//7 :  vt
//10 : y축 위치 속도제어기
void position_pid_y(void) {
 8005ab0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ab4:	af00      	add	r7, sp, #0

#if SOURCE2 == 10


	errorgap_p_Y = input_position_Y - (TIM4->CNT )- err_Y;
 8005ab6:	4bbc      	ldr	r3, [pc, #752]	@ (8005da8 <position_pid_y+0x2f8>)
 8005ab8:	ed93 7a00 	vldr	s14, [r3]
 8005abc:	4bbb      	ldr	r3, [pc, #748]	@ (8005dac <position_pid_y+0x2fc>)
 8005abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005acc:	4bb8      	ldr	r3, [pc, #736]	@ (8005db0 <position_pid_y+0x300>)
 8005ace:	edd3 7a00 	vldr	s15, [r3]
 8005ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ad6:	4bb7      	ldr	r3, [pc, #732]	@ (8005db4 <position_pid_y+0x304>)
 8005ad8:	edc3 7a00 	vstr	s15, [r3]
	err_Y = input_position_Y - (TIM4->CNT );
 8005adc:	4bb2      	ldr	r3, [pc, #712]	@ (8005da8 <position_pid_y+0x2f8>)
 8005ade:	ed93 7a00 	vldr	s14, [r3]
 8005ae2:	4bb2      	ldr	r3, [pc, #712]	@ (8005dac <position_pid_y+0x2fc>)
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005af2:	4baf      	ldr	r3, [pc, #700]	@ (8005db0 <position_pid_y+0x300>)
 8005af4:	edc3 7a00 	vstr	s15, [r3]
	err_sum_Y += err_Y * 0.001;
 8005af8:	4baf      	ldr	r3, [pc, #700]	@ (8005db8 <position_pid_y+0x308>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fa fd43 	bl	8000588 <__aeabi_f2d>
 8005b02:	4680      	mov	r8, r0
 8005b04:	4689      	mov	r9, r1
 8005b06:	4baa      	ldr	r3, [pc, #680]	@ (8005db0 <position_pid_y+0x300>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fa fd3c 	bl	8000588 <__aeabi_f2d>
 8005b10:	a39d      	add	r3, pc, #628	@ (adr r3, 8005d88 <position_pid_y+0x2d8>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f7fa fd8f 	bl	8000638 <__aeabi_dmul>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4640      	mov	r0, r8
 8005b20:	4649      	mov	r1, r9
 8005b22:	f7fa fbd3 	bl	80002cc <__adddf3>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f7fb f87b 	bl	8000c28 <__aeabi_d2f>
 8005b32:	4603      	mov	r3, r0
 8005b34:	4aa0      	ldr	r2, [pc, #640]	@ (8005db8 <position_pid_y+0x308>)
 8005b36:	6013      	str	r3, [r2, #0]

	if (p_PID_Y == 0) {
 8005b38:	4ba0      	ldr	r3, [pc, #640]	@ (8005dbc <position_pid_y+0x30c>)
 8005b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	f7fa ffdf 	bl	8000b08 <__aeabi_dcmpeq>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <position_pid_y+0xa8>
		err_sum_Y = 0;
 8005b50:	4b99      	ldr	r3, [pc, #612]	@ (8005db8 <position_pid_y+0x308>)
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
	}

	P_KP_Y = err_Y * p_kp_Y;
 8005b58:	4b95      	ldr	r3, [pc, #596]	@ (8005db0 <position_pid_y+0x300>)
 8005b5a:	ed93 7a00 	vldr	s14, [r3]
 8005b5e:	4b98      	ldr	r3, [pc, #608]	@ (8005dc0 <position_pid_y+0x310>)
 8005b60:	edd3 7a00 	vldr	s15, [r3]
 8005b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b68:	4b96      	ldr	r3, [pc, #600]	@ (8005dc4 <position_pid_y+0x314>)
 8005b6a:	edc3 7a00 	vstr	s15, [r3]
	P_KI_Y = err_sum_Y * p_ki_Y;
 8005b6e:	4b92      	ldr	r3, [pc, #584]	@ (8005db8 <position_pid_y+0x308>)
 8005b70:	ed93 7a00 	vldr	s14, [r3]
 8005b74:	4b94      	ldr	r3, [pc, #592]	@ (8005dc8 <position_pid_y+0x318>)
 8005b76:	edd3 7a00 	vldr	s15, [r3]
 8005b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7e:	4b93      	ldr	r3, [pc, #588]	@ (8005dcc <position_pid_y+0x31c>)
 8005b80:	edc3 7a00 	vstr	s15, [r3]

	//	err_d_X = (err_X - previous_err_X) / 0.0001;   //1ms
	//	previous_err_X = err_X;

	P_KD_Y = p_kd_Y * errorgap_p_Y / 0.001;
 8005b84:	4b92      	ldr	r3, [pc, #584]	@ (8005dd0 <position_pid_y+0x320>)
 8005b86:	ed93 7a00 	vldr	s14, [r3]
 8005b8a:	4b8a      	ldr	r3, [pc, #552]	@ (8005db4 <position_pid_y+0x304>)
 8005b8c:	edd3 7a00 	vldr	s15, [r3]
 8005b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b94:	ee17 0a90 	vmov	r0, s15
 8005b98:	f7fa fcf6 	bl	8000588 <__aeabi_f2d>
 8005b9c:	a37a      	add	r3, pc, #488	@ (adr r3, 8005d88 <position_pid_y+0x2d8>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f7fa fe73 	bl	800088c <__aeabi_ddiv>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	498a      	ldr	r1, [pc, #552]	@ (8005dd4 <position_pid_y+0x324>)
 8005bac:	e9c1 2300 	strd	r2, r3, [r1]

	p_PID_Y = P_KP_Y + P_KI_Y + P_KD_Y;
 8005bb0:	4b84      	ldr	r3, [pc, #528]	@ (8005dc4 <position_pid_y+0x314>)
 8005bb2:	ed93 7a00 	vldr	s14, [r3]
 8005bb6:	4b85      	ldr	r3, [pc, #532]	@ (8005dcc <position_pid_y+0x31c>)
 8005bb8:	edd3 7a00 	vldr	s15, [r3]
 8005bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc0:	ee17 0a90 	vmov	r0, s15
 8005bc4:	f7fa fce0 	bl	8000588 <__aeabi_f2d>
 8005bc8:	4b82      	ldr	r3, [pc, #520]	@ (8005dd4 <position_pid_y+0x324>)
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f7fa fb7d 	bl	80002cc <__adddf3>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4979      	ldr	r1, [pc, #484]	@ (8005dbc <position_pid_y+0x30c>)
 8005bd8:	e9c1 2300 	strd	r2, r3, [r1]

	if (p_PID_Y >= 11000) {
 8005bdc:	4b77      	ldr	r3, [pc, #476]	@ (8005dbc <position_pid_y+0x30c>)
 8005bde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005be2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005d90 <position_pid_y+0x2e0>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa ffac 	bl	8000b44 <__aeabi_dcmpge>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d006      	beq.n	8005c00 <position_pid_y+0x150>
		p_PID_Y = 11000;
 8005bf2:	4972      	ldr	r1, [pc, #456]	@ (8005dbc <position_pid_y+0x30c>)
 8005bf4:	a366      	add	r3, pc, #408	@ (adr r3, 8005d90 <position_pid_y+0x2e0>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	e9c1 2300 	strd	r2, r3, [r1]
 8005bfe:	e010      	b.n	8005c22 <position_pid_y+0x172>
	} else if (p_PID_Y <= -11000) {
 8005c00:	4b6e      	ldr	r3, [pc, #440]	@ (8005dbc <position_pid_y+0x30c>)
 8005c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c06:	a364      	add	r3, pc, #400	@ (adr r3, 8005d98 <position_pid_y+0x2e8>)
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f7fa ff90 	bl	8000b30 <__aeabi_dcmple>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <position_pid_y+0x172>
		p_PID_Y = -11000;
 8005c16:	4969      	ldr	r1, [pc, #420]	@ (8005dbc <position_pid_y+0x30c>)
 8005c18:	a35f      	add	r3, pc, #380	@ (adr r3, 8005d98 <position_pid_y+0x2e8>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	e9c1 2300 	strd	r2, r3, [r1]

	//참고	  errorGap = target - current - realError;
	//		realError = target - current;	// 실시간 에러는 단순히 목표값 - 현재값을 의미합니다.
	//	    accError += realError;

	speed_sensor_Y = (RPM_Y * 512) / 60;
 8005c22:	4b6d      	ldr	r3, [pc, #436]	@ (8005dd8 <position_pid_y+0x328>)
 8005c24:	edd3 7a00 	vldr	s15, [r3]
 8005c28:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005ddc <position_pid_y+0x32c>
 8005c2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c30:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8005de0 <position_pid_y+0x330>
 8005c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c38:	4b6a      	ldr	r3, [pc, #424]	@ (8005de4 <position_pid_y+0x334>)
 8005c3a:	edc3 7a00 	vstr	s15, [r3]
	speed_input_Y = p_PID_Y;
 8005c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8005dbc <position_pid_y+0x30c>)
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	4610      	mov	r0, r2
 8005c46:	4619      	mov	r1, r3
 8005c48:	f7fa ffee 	bl	8000c28 <__aeabi_d2f>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	4a66      	ldr	r2, [pc, #408]	@ (8005de8 <position_pid_y+0x338>)
 8005c50:	6013      	str	r3, [r2, #0]
	errorgap_s_Y = speed_input_Y - speed_sensor_Y - err_s_Y;
 8005c52:	4b65      	ldr	r3, [pc, #404]	@ (8005de8 <position_pid_y+0x338>)
 8005c54:	ed93 7a00 	vldr	s14, [r3]
 8005c58:	4b62      	ldr	r3, [pc, #392]	@ (8005de4 <position_pid_y+0x334>)
 8005c5a:	edd3 7a00 	vldr	s15, [r3]
 8005c5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c62:	4b62      	ldr	r3, [pc, #392]	@ (8005dec <position_pid_y+0x33c>)
 8005c64:	edd3 7a00 	vldr	s15, [r3]
 8005c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c6c:	4b60      	ldr	r3, [pc, #384]	@ (8005df0 <position_pid_y+0x340>)
 8005c6e:	edc3 7a00 	vstr	s15, [r3]
	err_s_Y = speed_input_Y - speed_sensor_Y;
 8005c72:	4b5d      	ldr	r3, [pc, #372]	@ (8005de8 <position_pid_y+0x338>)
 8005c74:	ed93 7a00 	vldr	s14, [r3]
 8005c78:	4b5a      	ldr	r3, [pc, #360]	@ (8005de4 <position_pid_y+0x334>)
 8005c7a:	edd3 7a00 	vldr	s15, [r3]
 8005c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c82:	4b5a      	ldr	r3, [pc, #360]	@ (8005dec <position_pid_y+0x33c>)
 8005c84:	edc3 7a00 	vstr	s15, [r3]
	err_sum_s_Y += err_s_Y * 0.001;
 8005c88:	4b5a      	ldr	r3, [pc, #360]	@ (8005df4 <position_pid_y+0x344>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fa fc7b 	bl	8000588 <__aeabi_f2d>
 8005c92:	4680      	mov	r8, r0
 8005c94:	4689      	mov	r9, r1
 8005c96:	4b55      	ldr	r3, [pc, #340]	@ (8005dec <position_pid_y+0x33c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fa fc74 	bl	8000588 <__aeabi_f2d>
 8005ca0:	a339      	add	r3, pc, #228	@ (adr r3, 8005d88 <position_pid_y+0x2d8>)
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	f7fa fcc7 	bl	8000638 <__aeabi_dmul>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4640      	mov	r0, r8
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	f7fa fb0b 	bl	80002cc <__adddf3>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f7fa ffb3 	bl	8000c28 <__aeabi_d2f>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8005df4 <position_pid_y+0x344>)
 8005cc6:	6013      	str	r3, [r2, #0]

	if (s_PID_Y == 0) {
 8005cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8005df8 <position_pid_y+0x348>)
 8005cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	f7fa ff17 	bl	8000b08 <__aeabi_dcmpeq>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <position_pid_y+0x238>
		err_sum_s_Y = 0;
 8005ce0:	4b44      	ldr	r3, [pc, #272]	@ (8005df4 <position_pid_y+0x344>)
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
	}

	                 //s_kp_Y=1;
	//S_KP_Y = err_s_Y * s_kp_Y;
	S_KP_Y = err_s_Y * 1;
 8005ce8:	4b40      	ldr	r3, [pc, #256]	@ (8005dec <position_pid_y+0x33c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a43      	ldr	r2, [pc, #268]	@ (8005dfc <position_pid_y+0x34c>)
 8005cee:	6013      	str	r3, [r2, #0]

	S_KI_Y = err_sum_s_Y * s_ki_Y;
 8005cf0:	4b40      	ldr	r3, [pc, #256]	@ (8005df4 <position_pid_y+0x344>)
 8005cf2:	ed93 7a00 	vldr	s14, [r3]
 8005cf6:	4b42      	ldr	r3, [pc, #264]	@ (8005e00 <position_pid_y+0x350>)
 8005cf8:	edd3 7a00 	vldr	s15, [r3]
 8005cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d00:	4b40      	ldr	r3, [pc, #256]	@ (8005e04 <position_pid_y+0x354>)
 8005d02:	edc3 7a00 	vstr	s15, [r3]

	//	err_d = (err - previous_err) / 0.0001;   //1ms
	//	previous_err = err;

	S_KD_Y = s_kd_Y * errorgap_s_Y / 0.001;
 8005d06:	4b40      	ldr	r3, [pc, #256]	@ (8005e08 <position_pid_y+0x358>)
 8005d08:	ed93 7a00 	vldr	s14, [r3]
 8005d0c:	4b38      	ldr	r3, [pc, #224]	@ (8005df0 <position_pid_y+0x340>)
 8005d0e:	edd3 7a00 	vldr	s15, [r3]
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	ee17 0a90 	vmov	r0, s15
 8005d1a:	f7fa fc35 	bl	8000588 <__aeabi_f2d>
 8005d1e:	a31a      	add	r3, pc, #104	@ (adr r3, 8005d88 <position_pid_y+0x2d8>)
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f7fa fdb2 	bl	800088c <__aeabi_ddiv>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4937      	ldr	r1, [pc, #220]	@ (8005e0c <position_pid_y+0x35c>)
 8005d2e:	e9c1 2300 	strd	r2, r3, [r1]

	s_PID_Y = S_KP_Y + S_KI_Y + S_KD_Y;
 8005d32:	4b32      	ldr	r3, [pc, #200]	@ (8005dfc <position_pid_y+0x34c>)
 8005d34:	ed93 7a00 	vldr	s14, [r3]
 8005d38:	4b32      	ldr	r3, [pc, #200]	@ (8005e04 <position_pid_y+0x354>)
 8005d3a:	edd3 7a00 	vldr	s15, [r3]
 8005d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d42:	ee17 0a90 	vmov	r0, s15
 8005d46:	f7fa fc1f 	bl	8000588 <__aeabi_f2d>
 8005d4a:	4b30      	ldr	r3, [pc, #192]	@ (8005e0c <position_pid_y+0x35c>)
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f7fa fabc 	bl	80002cc <__adddf3>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4927      	ldr	r1, [pc, #156]	@ (8005df8 <position_pid_y+0x348>)
 8005d5a:	e9c1 2300 	strd	r2, r3, [r1]

	if (s_PID_Y >= 6000) {
 8005d5e:	4b26      	ldr	r3, [pc, #152]	@ (8005df8 <position_pid_y+0x348>)
 8005d60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d64:	a30e      	add	r3, pc, #56	@ (adr r3, 8005da0 <position_pid_y+0x2f0>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	f7fa feeb 	bl	8000b44 <__aeabi_dcmpge>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d04d      	beq.n	8005e10 <position_pid_y+0x360>
		s_PID_Y = 6000;
 8005d74:	4920      	ldr	r1, [pc, #128]	@ (8005df8 <position_pid_y+0x348>)
 8005d76:	a30a      	add	r3, pc, #40	@ (adr r3, 8005da0 <position_pid_y+0x2f0>)
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	e9c1 2300 	strd	r2, r3, [r1]
 8005d80:	e057      	b.n	8005e32 <position_pid_y+0x382>
 8005d82:	bf00      	nop
 8005d84:	f3af 8000 	nop.w
 8005d88:	d2f1a9fc 	.word	0xd2f1a9fc
 8005d8c:	3f50624d 	.word	0x3f50624d
 8005d90:	00000000 	.word	0x00000000
 8005d94:	40c57c00 	.word	0x40c57c00
 8005d98:	00000000 	.word	0x00000000
 8005d9c:	c0c57c00 	.word	0xc0c57c00
 8005da0:	00000000 	.word	0x00000000
 8005da4:	40b77000 	.word	0x40b77000
 8005da8:	200013f8 	.word	0x200013f8
 8005dac:	40000800 	.word	0x40000800
 8005db0:	200013fc 	.word	0x200013fc
 8005db4:	20001458 	.word	0x20001458
 8005db8:	20001430 	.word	0x20001430
 8005dbc:	20001420 	.word	0x20001420
 8005dc0:	20000048 	.word	0x20000048
 8005dc4:	2000140c 	.word	0x2000140c
 8005dc8:	20001400 	.word	0x20001400
 8005dcc:	20001410 	.word	0x20001410
 8005dd0:	2000004c 	.word	0x2000004c
 8005dd4:	20001418 	.word	0x20001418
 8005dd8:	20002c70 	.word	0x20002c70
 8005ddc:	44000000 	.word	0x44000000
 8005de0:	42700000 	.word	0x42700000
 8005de4:	20001450 	.word	0x20001450
 8005de8:	20001454 	.word	0x20001454
 8005dec:	20001428 	.word	0x20001428
 8005df0:	2000145c 	.word	0x2000145c
 8005df4:	2000142c 	.word	0x2000142c
 8005df8:	20001448 	.word	0x20001448
 8005dfc:	20001434 	.word	0x20001434
 8005e00:	20001404 	.word	0x20001404
 8005e04:	20001438 	.word	0x20001438
 8005e08:	20001408 	.word	0x20001408
 8005e0c:	20001440 	.word	0x20001440
	} else if (s_PID_Y <= -6000) {
 8005e10:	4b3f      	ldr	r3, [pc, #252]	@ (8005f10 <position_pid_y+0x460>)
 8005e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e16:	a33c      	add	r3, pc, #240	@ (adr r3, 8005f08 <position_pid_y+0x458>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f7fa fe88 	bl	8000b30 <__aeabi_dcmple>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <position_pid_y+0x382>
		s_PID_Y = -6000;
 8005e26:	493a      	ldr	r1, [pc, #232]	@ (8005f10 <position_pid_y+0x460>)
 8005e28:	a337      	add	r3, pc, #220	@ (adr r3, 8005f08 <position_pid_y+0x458>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (s_PID_Y > 0)
 8005e32:	4b37      	ldr	r3, [pc, #220]	@ (8005f10 <position_pid_y+0x460>)
 8005e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	f7fa fe8a 	bl	8000b58 <__aeabi_dcmpgt>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d012      	beq.n	8005e70 <position_pid_y+0x3c0>
	{
		GPIOB->ODR &= ~1 << 10;  // go
 8005e4a:	4b32      	ldr	r3, [pc, #200]	@ (8005f14 <position_pid_y+0x464>)
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	4a31      	ldr	r2, [pc, #196]	@ (8005f14 <position_pid_y+0x464>)
 8005e50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e54:	f023 0307 	bic.w	r3, r3, #7
 8005e58:	6153      	str	r3, [r2, #20]
		TIM3->CCR2 = s_PID_Y;
 8005e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f10 <position_pid_y+0x460>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	4c2d      	ldr	r4, [pc, #180]	@ (8005f18 <position_pid_y+0x468>)
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	f7fa febf 	bl	8000be8 <__aeabi_d2uiz>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	63a3      	str	r3, [r4, #56]	@ 0x38




#endif
}
 8005e6e:	e045      	b.n	8005efc <position_pid_y+0x44c>
	else if (s_PID_Y < 0)
 8005e70:	4b27      	ldr	r3, [pc, #156]	@ (8005f10 <position_pid_y+0x460>)
 8005e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	f7fa fe4d 	bl	8000b1c <__aeabi_dcmplt>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d019      	beq.n	8005ebc <position_pid_y+0x40c>
		GPIOB->ODR |= 1 << 10;  // back
 8005e88:	4b22      	ldr	r3, [pc, #136]	@ (8005f14 <position_pid_y+0x464>)
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	4a21      	ldr	r2, [pc, #132]	@ (8005f14 <position_pid_y+0x464>)
 8005e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e92:	6153      	str	r3, [r2, #20]
		s_PID_Y = -s_PID_Y;
 8005e94:	4b1e      	ldr	r3, [pc, #120]	@ (8005f10 <position_pid_y+0x460>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	4614      	mov	r4, r2
 8005e9c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8005ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8005f10 <position_pid_y+0x460>)
 8005ea2:	e9c3 4500 	strd	r4, r5, [r3]
		TIM3->CCR2 = s_PID_Y;
 8005ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <position_pid_y+0x460>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	4c1a      	ldr	r4, [pc, #104]	@ (8005f18 <position_pid_y+0x468>)
 8005eae:	4610      	mov	r0, r2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f7fa fe99 	bl	8000be8 <__aeabi_d2uiz>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8005eba:	e01f      	b.n	8005efc <position_pid_y+0x44c>
		s_PID_Y = 0;
 8005ebc:	4914      	ldr	r1, [pc, #80]	@ (8005f10 <position_pid_y+0x460>)
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	f04f 0300 	mov.w	r3, #0
 8005ec6:	e9c1 2300 	strd	r2, r3, [r1]
		TIM3->CCR2 = s_PID_Y;
 8005eca:	4b11      	ldr	r3, [pc, #68]	@ (8005f10 <position_pid_y+0x460>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	4c11      	ldr	r4, [pc, #68]	@ (8005f18 <position_pid_y+0x468>)
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	f7fa fe87 	bl	8000be8 <__aeabi_d2uiz>
 8005eda:	4603      	mov	r3, r0
 8005edc:	63a3      	str	r3, [r4, #56]	@ 0x38
		position_start_Y = 0;
 8005ede:	4b0f      	ldr	r3, [pc, #60]	@ (8005f1c <position_pid_y+0x46c>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]
		photo_sensor_flag_y=0;
 8005ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f20 <position_pid_y+0x470>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);  //stop
 8005eea:	2201      	movs	r2, #1
 8005eec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ef0:	4808      	ldr	r0, [pc, #32]	@ (8005f14 <position_pid_y+0x464>)
 8005ef2:	f003 ff01 	bl	8009cf8 <HAL_GPIO_WritePin>
		PID_Y_finish=1;
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f24 <position_pid_y+0x474>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
}
 8005efc:	bf00      	nop
 8005efe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f02:	bf00      	nop
 8005f04:	f3af 8000 	nop.w
 8005f08:	00000000 	.word	0x00000000
 8005f0c:	c0b77000 	.word	0xc0b77000
 8005f10:	20001448 	.word	0x20001448
 8005f14:	40020400 	.word	0x40020400
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	200041b1 	.word	0x200041b1
 8005f20:	200031e0 	.word	0x200031e0
 8005f24:	20001358 	.word	0x20001358

08005f28 <sort>:
int CDHeader = 0;
int pathLength = 0;



void sort(){
 8005f28:	b5b0      	push	{r4, r5, r7, lr}
 8005f2a:	b08c      	sub	sp, #48	@ 0x30
 8005f2c:	af00      	add	r7, sp, #0
    int i, j, least, n = CELL_DOMAIN_MAX;
 8005f2e:	2324      	movs	r3, #36	@ 0x24
 8005f30:	623b      	str	r3, [r7, #32]
    cell temp;

	for (i = 0; i < n - 1; i++) {
 8005f32:	2300      	movs	r3, #0
 8005f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f36:	e04c      	b.n	8005fd2 <sort+0xaa>

		least = i;
 8005f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24

		for (j = i + 1; j < n; j++) 	// 최소값 탐색
 8005f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3e:	3301      	adds	r3, #1
 8005f40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f42:	e017      	b.n	8005f74 <sort+0x4c>

			if (cellDomain[j].f < cellDomain[least].f) least = j;
 8005f44:	4a28      	ldr	r2, [pc, #160]	@ (8005fe8 <sort+0xc0>)
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	015b      	lsls	r3, r3, #5
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f52:	4a25      	ldr	r2, [pc, #148]	@ (8005fe8 <sort+0xc0>)
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	015b      	lsls	r3, r3, #5
 8005f58:	4413      	add	r3, r2
 8005f5a:	3310      	adds	r3, #16
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa fddc 	bl	8000b1c <__aeabi_dcmplt>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <sort+0x46>
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	627b      	str	r3, [r7, #36]	@ 0x24
		for (j = i + 1; j < n; j++) 	// 최소값 탐색
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	3301      	adds	r3, #1
 8005f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	dbe3      	blt.n	8005f44 <sort+0x1c>

		SWAP(cellDomain[i], cellDomain[least], temp);
 8005f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe8 <sort+0xc0>)
 8005f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f80:	015b      	lsls	r3, r3, #5
 8005f82:	4413      	add	r3, r2
 8005f84:	463c      	mov	r4, r7
 8005f86:	461d      	mov	r5, r3
 8005f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005f94:	4a14      	ldr	r2, [pc, #80]	@ (8005fe8 <sort+0xc0>)
 8005f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f98:	015b      	lsls	r3, r3, #5
 8005f9a:	18d1      	adds	r1, r2, r3
 8005f9c:	4a12      	ldr	r2, [pc, #72]	@ (8005fe8 <sort+0xc0>)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	015b      	lsls	r3, r3, #5
 8005fa2:	4413      	add	r3, r2
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	461d      	mov	r5, r3
 8005fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe8 <sort+0xc0>)
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	015b      	lsls	r3, r3, #5
 8005fba:	4413      	add	r3, r2
 8005fbc:	461d      	mov	r5, r3
 8005fbe:	463c      	mov	r4, r7
 8005fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005fc8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	for (i = 0; i < n - 1; i++) {
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	3301      	adds	r3, #1
 8005fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	dbad      	blt.n	8005f38 <sort+0x10>
	}
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	3730      	adds	r7, #48	@ 0x30
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000078 	.word	0x20000078

08005fec <clc_f>:

double clc_f(cell nowCell){
 8005fec:	b084      	sub	sp, #16
 8005fee:	b5b0      	push	{r4, r5, r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005ff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    double f, g, h;

    g = nowCell.g;
 8005ffc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006000:	e9c7 2304 	strd	r2, r3, [r7, #16]
    h = abs_cust(nowCell.x-endCell.x)+abs_cust(nowCell.y-endCell.y);
 8006004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006006:	4b22      	ldr	r3, [pc, #136]	@ (8006090 <clc_f+0xa4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	4618      	mov	r0, r3
 800600e:	f7fa faa9 	bl	8000564 <__aeabi_i2d>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	ec43 2b10 	vmov	d0, r2, r3
 800601a:	f000 f83d 	bl	8006098 <abs_cust>
 800601e:	ec55 4b10 	vmov	r4, r5, d0
 8006022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006024:	4b1a      	ldr	r3, [pc, #104]	@ (8006090 <clc_f+0xa4>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	4618      	mov	r0, r3
 800602c:	f7fa fa9a 	bl	8000564 <__aeabi_i2d>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	ec43 2b10 	vmov	d0, r2, r3
 8006038:	f000 f82e 	bl	8006098 <abs_cust>
 800603c:	ec53 2b10 	vmov	r2, r3, d0
 8006040:	4620      	mov	r0, r4
 8006042:	4629      	mov	r1, r5
 8006044:	f7fa f942 	bl	80002cc <__adddf3>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    f = g+h*H_MUL;
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	4b0f      	ldr	r3, [pc, #60]	@ (8006094 <clc_f+0xa8>)
 8006056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800605a:	f7fa faed 	bl	8000638 <__aeabi_dmul>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006066:	f7fa f931 	bl	80002cc <__adddf3>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	e9c7 2300 	strd	r2, r3, [r7]

    return f;
 8006072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006076:	ec43 2b17 	vmov	d7, r2, r3
}
 800607a:	eeb0 0a47 	vmov.f32	s0, s14
 800607e:	eef0 0a67 	vmov.f32	s1, s15
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800608a:	b004      	add	sp, #16
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	200031a0 	.word	0x200031a0
 8006094:	3ff80000 	.word	0x3ff80000

08006098 <abs_cust>:

double abs_cust(double x){
 8006098:	b5b0      	push	{r4, r5, r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	ed87 0b00 	vstr	d0, [r7]
    if(x < 0){
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ae:	f7fa fd35 	bl	8000b1c <__aeabi_dcmplt>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d004      	beq.n	80060c2 <abs_cust+0x2a>
        return -x;
 80060b8:	683c      	ldr	r4, [r7, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80060c0:	e001      	b.n	80060c6 <abs_cust+0x2e>
    }
    return x;
 80060c2:	e9d7 4500 	ldrd	r4, r5, [r7]
}
 80060c6:	ec45 4b17 	vmov	d7, r4, r5
 80060ca:	eeb0 0a47 	vmov.f32	s0, s14
 80060ce:	eef0 0a67 	vmov.f32	s1, s15
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bdb0      	pop	{r4, r5, r7, pc}

080060d8 <pushCell>:

void pushCell(int x, int y, cell parent){
 80060d8:	b082      	sub	sp, #8
 80060da:	b5b0      	push	{r4, r5, r7, lr}
 80060dc:	b088      	sub	sp, #32
 80060de:	af04      	add	r7, sp, #16
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
 80060e4:	f107 0120 	add.w	r1, r7, #32
 80060e8:	e881 000c 	stmia.w	r1, {r2, r3}
    cell* Cptr = &grid[x][y];
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	4413      	add	r3, r2
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	4413      	add	r3, r2
 80060fa:	015b      	lsls	r3, r3, #5
 80060fc:	4a23      	ldr	r2, [pc, #140]	@ (800618c <pushCell+0xb4>)
 80060fe:	4413      	add	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
    Cptr->g = parent.g+1;
 8006102:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	4b21      	ldr	r3, [pc, #132]	@ (8006190 <pushCell+0xb8>)
 800610c:	f7fa f8de 	bl	80002cc <__adddf3>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	68f9      	ldr	r1, [r7, #12]
 8006116:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Cptr->f = clc_f(*Cptr);
 800611a:	68fc      	ldr	r4, [r7, #12]
 800611c:	466d      	mov	r5, sp
 800611e:	f104 0310 	add.w	r3, r4, #16
 8006122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006124:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006128:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800612c:	f7ff ff5e 	bl	8005fec <clc_f>
 8006130:	eeb0 7a40 	vmov.f32	s14, s0
 8006134:	eef0 7a60 	vmov.f32	s15, s1
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	ed83 7b04 	vstr	d7, [r3, #16]
    Cptr->parentPtr = &grid[parent.x][parent.y];
 800613e:	6a3a      	ldr	r2, [r7, #32]
 8006140:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006142:	4613      	mov	r3, r2
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	4413      	add	r3, r2
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	440b      	add	r3, r1
 800614c:	015b      	lsls	r3, r3, #5
 800614e:	4a0f      	ldr	r2, [pc, #60]	@ (800618c <pushCell+0xb4>)
 8006150:	441a      	add	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	60da      	str	r2, [r3, #12]
    Cptr->state = IsPath;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2202      	movs	r2, #2
 800615a:	721a      	strb	r2, [r3, #8]
    cellDomain[CDHeader++] = *Cptr;
 800615c:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <pushCell+0xbc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	490c      	ldr	r1, [pc, #48]	@ (8006194 <pushCell+0xbc>)
 8006164:	600a      	str	r2, [r1, #0]
 8006166:	4a0c      	ldr	r2, [pc, #48]	@ (8006198 <pushCell+0xc0>)
 8006168:	015b      	lsls	r3, r3, #5
 800616a:	441a      	add	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4614      	mov	r4, r2
 8006170:	461d      	mov	r5, r3
 8006172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006176:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800617a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006188:	b002      	add	sp, #8
 800618a:	4770      	bx	lr
 800618c:	20002d00 	.word	0x20002d00
 8006190:	3ff00000 	.word	0x3ff00000
 8006194:	200031c0 	.word	0x200031c0
 8006198:	20000078 	.word	0x20000078

0800619c <push4>:

void push4(cell middleCell){
 800619c:	b084      	sub	sp, #16
 800619e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061a0:	b089      	sub	sp, #36	@ 0x24
 80061a2:	af06      	add	r7, sp, #24
 80061a4:	f107 0420 	add.w	r4, r7, #32
 80061a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int x = middleCell.x, y = middleCell.y;
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	607b      	str	r3, [r7, #4]
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	603b      	str	r3, [r7, #0]

    // printf("x: %d, y: %d\n", x, y);
    //LRDU
    if(x > 0 && grid[x-1][y].state ==IsEmpty){
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dd20      	ble.n	80061fc <push4+0x60>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	1e5a      	subs	r2, r3, #1
 80061be:	4949      	ldr	r1, [pc, #292]	@ (80062e4 <push4+0x148>)
 80061c0:	4613      	mov	r3, r2
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	4413      	add	r3, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	4413      	add	r3, r2
 80061cc:	015b      	lsls	r3, r3, #5
 80061ce:	440b      	add	r3, r1
 80061d0:	3308      	adds	r3, #8
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d111      	bne.n	80061fc <push4+0x60>
        pushCell(x-1, y, middleCell);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	1e5e      	subs	r6, r3, #1
 80061dc:	466d      	mov	r5, sp
 80061de:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80061e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80061ee:	f107 0320 	add.w	r3, r7, #32
 80061f2:	cb0c      	ldmia	r3, {r2, r3}
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	4630      	mov	r0, r6
 80061f8:	f7ff ff6e 	bl	80060d8 <pushCell>
    }
    if(x < COLUMN-1 && grid[x+1][y].state == IsEmpty){
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b04      	cmp	r3, #4
 8006200:	dc20      	bgt.n	8006244 <push4+0xa8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	4937      	ldr	r1, [pc, #220]	@ (80062e4 <push4+0x148>)
 8006208:	4613      	mov	r3, r2
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	4413      	add	r3, r2
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	4413      	add	r3, r2
 8006214:	015b      	lsls	r3, r3, #5
 8006216:	440b      	add	r3, r1
 8006218:	3308      	adds	r3, #8
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d111      	bne.n	8006244 <push4+0xa8>
        pushCell(x+1, y, middleCell);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	1c5e      	adds	r6, r3, #1
 8006224:	466d      	mov	r5, sp
 8006226:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800622a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800622c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800622e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006232:	e885 0003 	stmia.w	r5, {r0, r1}
 8006236:	f107 0320 	add.w	r3, r7, #32
 800623a:	cb0c      	ldmia	r3, {r2, r3}
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	4630      	mov	r0, r6
 8006240:	f7ff ff4a 	bl	80060d8 <pushCell>
    }
    if(y > 0 && grid[x][y-1].state == IsEmpty){
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	dd20      	ble.n	800628c <push4+0xf0>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	1e59      	subs	r1, r3, #1
 800624e:	4825      	ldr	r0, [pc, #148]	@ (80062e4 <push4+0x148>)
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	4413      	add	r3, r2
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	440b      	add	r3, r1
 800625c:	015b      	lsls	r3, r3, #5
 800625e:	4403      	add	r3, r0
 8006260:	3308      	adds	r3, #8
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d111      	bne.n	800628c <push4+0xf0>
        pushCell(x, y-1, middleCell);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	1e5e      	subs	r6, r3, #1
 800626c:	466d      	mov	r5, sp
 800626e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800627a:	e885 0003 	stmia.w	r5, {r0, r1}
 800627e:	f107 0320 	add.w	r3, r7, #32
 8006282:	cb0c      	ldmia	r3, {r2, r3}
 8006284:	4631      	mov	r1, r6
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff ff26 	bl	80060d8 <pushCell>
    }
    if(y < ROW-1 && grid[x][y+1].state == IsEmpty){
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b04      	cmp	r3, #4
 8006290:	dc20      	bgt.n	80062d4 <push4+0x138>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	4813      	ldr	r0, [pc, #76]	@ (80062e4 <push4+0x148>)
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	4413      	add	r3, r2
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	440b      	add	r3, r1
 80062a4:	015b      	lsls	r3, r3, #5
 80062a6:	4403      	add	r3, r0
 80062a8:	3308      	adds	r3, #8
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d111      	bne.n	80062d4 <push4+0x138>
        pushCell(x, y+1, middleCell);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	1c5e      	adds	r6, r3, #1
 80062b4:	466d      	mov	r5, sp
 80062b6:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80062ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80062c6:	f107 0320 	add.w	r3, r7, #32
 80062ca:	cb0c      	ldmia	r3, {r2, r3}
 80062cc:	4631      	mov	r1, r6
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff ff02 	bl	80060d8 <pushCell>
    }
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80062de:	b004      	add	sp, #16
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20002d00 	.word	0x20002d00

080062e8 <gridInit>:

void gridInit(int state){
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
    int i =0, j =0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	2300      	movs	r3, #0
 80062f6:	60bb      	str	r3, [r7, #8]

    for(i =0; i<ROW; i++){
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	e064      	b.n	80063c8 <gridInit+0xe0>
        for(j = 0; j<COLUMN; j++){
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
 8006302:	e05b      	b.n	80063bc <gridInit+0xd4>
            grid[i][j].x = i;
 8006304:	4935      	ldr	r1, [pc, #212]	@ (80063dc <gridInit+0xf4>)
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4613      	mov	r3, r2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	4413      	add	r3, r2
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	4413      	add	r3, r2
 8006314:	015b      	lsls	r3, r3, #5
 8006316:	440b      	add	r3, r1
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]
            grid[i][j].y = j;
 800631c:	492f      	ldr	r1, [pc, #188]	@ (80063dc <gridInit+0xf4>)
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4613      	mov	r3, r2
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	4413      	add	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	4413      	add	r3, r2
 800632c:	015b      	lsls	r3, r3, #5
 800632e:	440b      	add	r3, r1
 8006330:	3304      	adds	r3, #4
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	601a      	str	r2, [r3, #0]
            grid[i][j].state = state;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	b2d8      	uxtb	r0, r3
 800633a:	4928      	ldr	r1, [pc, #160]	@ (80063dc <gridInit+0xf4>)
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4613      	mov	r3, r2
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4413      	add	r3, r2
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	4413      	add	r3, r2
 800634a:	015b      	lsls	r3, r3, #5
 800634c:	440b      	add	r3, r1
 800634e:	3308      	adds	r3, #8
 8006350:	4602      	mov	r2, r0
 8006352:	701a      	strb	r2, [r3, #0]
            grid[i][j].parentPtr = NULL;
 8006354:	4921      	ldr	r1, [pc, #132]	@ (80063dc <gridInit+0xf4>)
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4613      	mov	r3, r2
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	4413      	add	r3, r2
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	4413      	add	r3, r2
 8006364:	015b      	lsls	r3, r3, #5
 8006366:	440b      	add	r3, r1
 8006368:	330c      	adds	r3, #12
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
            grid[i][j].f = 0;
 800636e:	491b      	ldr	r1, [pc, #108]	@ (80063dc <gridInit+0xf4>)
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4613      	mov	r3, r2
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4413      	add	r3, r2
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	4413      	add	r3, r2
 800637e:	015b      	lsls	r3, r3, #5
 8006380:	440b      	add	r3, r1
 8006382:	f103 0110 	add.w	r1, r3, #16
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	f04f 0300 	mov.w	r3, #0
 800638e:	e9c1 2300 	strd	r2, r3, [r1]
            grid[i][j].g = 0;
 8006392:	4912      	ldr	r1, [pc, #72]	@ (80063dc <gridInit+0xf4>)
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4613      	mov	r3, r2
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	4413      	add	r3, r2
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	4413      	add	r3, r2
 80063a2:	015b      	lsls	r3, r3, #5
 80063a4:	440b      	add	r3, r1
 80063a6:	f103 0118 	add.w	r1, r3, #24
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	e9c1 2300 	strd	r2, r3, [r1]
        for(j = 0; j<COLUMN; j++){
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	3301      	adds	r3, #1
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b05      	cmp	r3, #5
 80063c0:	dda0      	ble.n	8006304 <gridInit+0x1c>
    for(i =0; i<ROW; i++){
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b05      	cmp	r3, #5
 80063cc:	dd97      	ble.n	80062fe <gridInit+0x16>
        }
    }
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	20002d00 	.word	0x20002d00

080063e0 <setDpp>:

char setDpp(int scol, int srow, int ecol, int erow){
 80063e0:	b4b0      	push	{r4, r5, r7}
 80063e2:	b0a1      	sub	sp, #132	@ 0x84
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
     //   fprintf(stderr,"srow out of bound!\n");
    }
    if(erow >= COLUMN || erow < 0){
    //    fprintf(stderr,"erow out of bound!\n");
    }
    cell init =INIT_CELL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80063f2:	2300      	movs	r3, #0
 80063f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80063f6:	2300      	movs	r3, #0
 80063f8:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
 80063fc:	2300      	movs	r3, #0
 80063fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	4b4c      	ldr	r3, [pc, #304]	@ (8006538 <setDpp+0x158>)
 8006406:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800640a:	f04f 0200 	mov.w	r2, #0
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

    int CDHeader = 0, i=0;
 8006416:	2300      	movs	r3, #0
 8006418:	67bb      	str	r3, [r7, #120]	@ 0x78
 800641a:	2300      	movs	r3, #0
 800641c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int pathLength = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	677b      	str	r3, [r7, #116]	@ 0x74
    for(i =0; i<CELL_DOMAIN_MAX; i++){
 8006422:	2300      	movs	r3, #0
 8006424:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006426:	e00f      	b.n	8006448 <setDpp+0x68>
        cellDomain[i] = init;
 8006428:	4a44      	ldr	r2, [pc, #272]	@ (800653c <setDpp+0x15c>)
 800642a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800642c:	015b      	lsls	r3, r3, #5
 800642e:	4413      	add	r3, r2
 8006430:	461d      	mov	r5, r3
 8006432:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8006436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800643a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800643e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for(i =0; i<CELL_DOMAIN_MAX; i++){
 8006442:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006444:	3301      	adds	r3, #1
 8006446:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006448:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800644a:	2b23      	cmp	r3, #35	@ 0x23
 800644c:	ddec      	ble.n	8006428 <setDpp+0x48>
    }

    cell scell = {srow, scol, IsPath, NULL, 0, 0};
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	633b      	str	r3, [r7, #48]	@ 0x30
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	637b      	str	r3, [r7, #52]	@ 0x34
 8006456:	2302      	movs	r3, #2
 8006458:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800645c:	2300      	movs	r3, #0
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    cell ecell = {erow, ecol, IsEmpty, NULL, 0, 0};
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	2300      	movs	r3, #0
 8006482:	763b      	strb	r3, [r7, #24]
 8006484:	2300      	movs	r3, #0
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    startCell = scell;
 80064a0:	4b27      	ldr	r3, [pc, #156]	@ (8006540 <setDpp+0x160>)
 80064a2:	461d      	mov	r5, r3
 80064a4:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80064a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80064b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    endCell = ecell;
 80064b4:	4b23      	ldr	r3, [pc, #140]	@ (8006544 <setDpp+0x164>)
 80064b6:	461d      	mov	r5, r3
 80064b8:	f107 0410 	add.w	r4, r7, #16
 80064bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80064c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    grid[srow][scol] = startCell;
 80064c8:	491f      	ldr	r1, [pc, #124]	@ (8006548 <setDpp+0x168>)
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	4613      	mov	r3, r2
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	4413      	add	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	015b      	lsls	r3, r3, #5
 80064da:	440b      	add	r3, r1
 80064dc:	4a18      	ldr	r2, [pc, #96]	@ (8006540 <setDpp+0x160>)
 80064de:	461c      	mov	r4, r3
 80064e0:	4615      	mov	r5, r2
 80064e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80064ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    grid[erow][ecol] = endCell;
 80064ee:	4916      	ldr	r1, [pc, #88]	@ (8006548 <setDpp+0x168>)
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	4613      	mov	r3, r2
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	4413      	add	r3, r2
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	015b      	lsls	r3, r3, #5
 8006500:	440b      	add	r3, r1
 8006502:	4a10      	ldr	r2, [pc, #64]	@ (8006544 <setDpp+0x164>)
 8006504:	461c      	mov	r4, r3
 8006506:	4615      	mov	r5, r2
 8006508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800650a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800650c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(startCell.state == IsOccpyed ){
 8006514:	4b0a      	ldr	r3, [pc, #40]	@ (8006540 <setDpp+0x160>)
 8006516:	7a1b      	ldrb	r3, [r3, #8]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <setDpp+0x140>
        return IsOccpyed;
 800651c:	2301      	movs	r3, #1
 800651e:	e006      	b.n	800652e <setDpp+0x14e>
    }
    if(endCell.state == IsOccpyed ){
 8006520:	4b08      	ldr	r3, [pc, #32]	@ (8006544 <setDpp+0x164>)
 8006522:	7a1b      	ldrb	r3, [r3, #8]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <setDpp+0x14c>
        return IsOccpyed;
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <setDpp+0x14e>
    }
    return IsEmpty;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3784      	adds	r7, #132	@ 0x84
 8006532:	46bd      	mov	sp, r7
 8006534:	bcb0      	pop	{r4, r5, r7}
 8006536:	4770      	bx	lr
 8006538:	40944000 	.word	0x40944000
 800653c:	20000078 	.word	0x20000078
 8006540:	20003180 	.word	0x20003180
 8006544:	200031a0 	.word	0x200031a0
 8006548:	20002d00 	.word	0x20002d00

0800654c <lpp>:

cell lpp(){
 800654c:	b5b0      	push	{r4, r5, r7, lr}
 800654e:	b096      	sub	sp, #88	@ 0x58
 8006550:	af04      	add	r7, sp, #16
 8006552:	6078      	str	r0, [r7, #4]
    cell init = INIT_CELL;
 8006554:	2300      	movs	r3, #0
 8006556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006558:	2300      	movs	r3, #0
 800655a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800655c:	2300      	movs	r3, #0
 800655e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8006562:	2300      	movs	r3, #0
 8006564:	637b      	str	r3, [r7, #52]	@ 0x34
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	4b42      	ldr	r3, [pc, #264]	@ (8006674 <lpp+0x128>)
 800656c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	f04f 0300 	mov.w	r3, #0
 8006578:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    cell tmp = INIT_CELL;
 800657c:	2300      	movs	r3, #0
 800657e:	60bb      	str	r3, [r7, #8]
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	2300      	movs	r3, #0
 8006586:	743b      	strb	r3, [r7, #16]
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	4b38      	ldr	r3, [pc, #224]	@ (8006674 <lpp+0x128>)
 8006592:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    do
    {
        if(CDHeader == 0){
 80065a2:	4b35      	ldr	r3, [pc, #212]	@ (8006678 <lpp+0x12c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <lpp+0x76>
            push4(startCell);
 80065aa:	4c34      	ldr	r4, [pc, #208]	@ (800667c <lpp+0x130>)
 80065ac:	466d      	mov	r5, sp
 80065ae:	f104 0310 	add.w	r3, r4, #16
 80065b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80065b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80065bc:	f7ff fdee 	bl	800619c <push4>
 80065c0:	e00a      	b.n	80065d8 <lpp+0x8c>
        }else{
            push4(tmp);
 80065c2:	466c      	mov	r4, sp
 80065c4:	f107 0318 	add.w	r3, r7, #24
 80065c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80065ce:	f107 0308 	add.w	r3, r7, #8
 80065d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065d4:	f7ff fde2 	bl	800619c <push4>
        }
        sort();
 80065d8:	f7ff fca6 	bl	8005f28 <sort>
        tmp = cellDomain[0];
 80065dc:	4b28      	ldr	r3, [pc, #160]	@ (8006680 <lpp+0x134>)
 80065de:	f107 0408 	add.w	r4, r7, #8
 80065e2:	461d      	mov	r5, r3
 80065e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80065ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if(tmp.f == DOMAIN_NULL){
 80065f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006674 <lpp+0x128>)
 80065fa:	f7fa fa85 	bl	8000b08 <__aeabi_dcmpeq>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <lpp+0xce>
            return init;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	461d      	mov	r5, r3
 8006608:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800660c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800660e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006610:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006614:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006618:	e027      	b.n	800666a <lpp+0x11e>
            printf("fail to lpp\n");
        }
        printf("x: %d y: %d f: %f\n", tmp.x, tmp.y, tmp.f);
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006622:	e9cd 2300 	strd	r2, r3, [sp]
 8006626:	4602      	mov	r2, r0
 8006628:	4816      	ldr	r0, [pc, #88]	@ (8006684 <lpp+0x138>)
 800662a:	f008 fe8f 	bl	800f34c <iprintf>
        cellDomain[0] = init;
 800662e:	4b14      	ldr	r3, [pc, #80]	@ (8006680 <lpp+0x134>)
 8006630:	461d      	mov	r5, r3
 8006632:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800663a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800663e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    } while (tmp.x != endCell.x || tmp.y != endCell.y);
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	4b10      	ldr	r3, [pc, #64]	@ (8006688 <lpp+0x13c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d1aa      	bne.n	80065a2 <lpp+0x56>
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4b0e      	ldr	r3, [pc, #56]	@ (8006688 <lpp+0x13c>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	429a      	cmp	r2, r3
 8006654:	d1a5      	bne.n	80065a2 <lpp+0x56>
    return tmp;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	461d      	mov	r5, r3
 800665a:	f107 0408 	add.w	r4, r7, #8
 800665e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006662:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006666:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	3748      	adds	r7, #72	@ 0x48
 800666e:	46bd      	mov	sp, r7
 8006670:	bdb0      	pop	{r4, r5, r7, pc}
 8006672:	bf00      	nop
 8006674:	40944000 	.word	0x40944000
 8006678:	200031c0 	.word	0x200031c0
 800667c:	20003180 	.word	0x20003180
 8006680:	20000078 	.word	0x20000078
 8006684:	08014118 	.word	0x08014118
 8006688:	200031a0 	.word	0x200031a0

0800668c <readPath>:

void readPath(cell tagCell, cell path[CELL_DOMAIN_MAX]){
 800668c:	b084      	sub	sp, #16
 800668e:	b5b0      	push	{r4, r5, r7, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af02      	add	r7, sp, #8
 8006694:	f107 0420 	add.w	r4, r7, #32
 8006698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf("\n\nRead Path\n");
 800669c:	4828      	ldr	r0, [pc, #160]	@ (8006740 <readPath+0xb4>)
 800669e:	f008 febd 	bl	800f41c <puts>
    int pathIndex = 0, i=0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	2300      	movs	r3, #0
 80066a8:	607b      	str	r3, [r7, #4]
    path[pathIndex++] = tagCell;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	60fa      	str	r2, [r7, #12]
 80066b0:	015b      	lsls	r3, r3, #5
 80066b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066b4:	4413      	add	r3, r2
 80066b6:	461d      	mov	r5, r3
 80066b8:	f107 0420 	add.w	r4, r7, #32
 80066bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80066c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    printf("x: %d y: %d f: %f\n", path[0].x, path[0].y, path[0].f);
 80066c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ca:	6819      	ldr	r1, [r3, #0]
 80066cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ce:	6858      	ldr	r0, [r3, #4]
 80066d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80066d6:	e9cd 2300 	strd	r2, r3, [sp]
 80066da:	4602      	mov	r2, r0
 80066dc:	4819      	ldr	r0, [pc, #100]	@ (8006744 <readPath+0xb8>)
 80066de:	f008 fe35 	bl	800f34c <iprintf>
    cell* tmp = tagCell.parentPtr;
 80066e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e4:	60bb      	str	r3, [r7, #8]
    while(tmp != NULL){
 80066e6:	e01e      	b.n	8006726 <readPath+0x9a>
        printf("x: %d y: %d f: %f\n", tmp->x, tmp->y, tmp->f);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	6819      	ldr	r1, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6858      	ldr	r0, [r3, #4]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80066f6:	e9cd 2300 	strd	r2, r3, [sp]
 80066fa:	4602      	mov	r2, r0
 80066fc:	4811      	ldr	r0, [pc, #68]	@ (8006744 <readPath+0xb8>)
 80066fe:	f008 fe25 	bl	800f34c <iprintf>
        path[pathIndex++] = *tmp;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	60fa      	str	r2, [r7, #12]
 8006708:	015b      	lsls	r3, r3, #5
 800670a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800670c:	441a      	add	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4614      	mov	r4, r2
 8006712:	461d      	mov	r5, r3
 8006714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006718:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800671c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        tmp = tmp->parentPtr;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	60bb      	str	r3, [r7, #8]
    while(tmp != NULL){
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1dd      	bne.n	80066e8 <readPath+0x5c>
    }
    pathLength = pathIndex;
 800672c:	4a06      	ldr	r2, [pc, #24]	@ (8006748 <readPath+0xbc>)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6013      	str	r3, [r2, #0]
}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800673c:	b004      	add	sp, #16
 800673e:	4770      	bx	lr
 8006740:	0801412c 	.word	0x0801412c
 8006744:	08014118 	.word	0x08014118
 8006748:	200031c4 	.word	0x200031c4

0800674c <is_empty>:
{
  Q->rear = Q->front = -1;
}

int is_empty(Queue *Q)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  return Q->front == Q->rear;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8006760:	429a      	cmp	r2, r3
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
}
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <is_full>:

int is_full(Queue *Q)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  return Q->front == (Q->rear + 1) % SIZE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 1130 	ldr.w	r1, [r3, #304]	@ 0x130
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	4b0b      	ldr	r3, [pc, #44]	@ (80067bc <is_full+0x44>)
 8006790:	fb83 0302 	smull	r0, r3, r3, r2
 8006794:	1158      	asrs	r0, r3, #5
 8006796:	17d3      	asrs	r3, r2, #31
 8006798:	1ac3      	subs	r3, r0, r3
 800679a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800679e:	fb00 f303 	mul.w	r3, r0, r3
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	4299      	cmp	r1, r3
 80067a6:	bf0c      	ite	eq
 80067a8:	2301      	moveq	r3, #1
 80067aa:	2300      	movne	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	1b4e81b5 	.word	0x1b4e81b5

080067c0 <enqueue>:

void enqueue(Queue *Q, char e)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  if (is_full(Q))
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7ff ffd3 	bl	8006778 <is_full>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <enqueue+0x20>
    printf("Overflow\n");
 80067d8:	480f      	ldr	r0, [pc, #60]	@ (8006818 <enqueue+0x58>)
 80067da:	f008 fe1f 	bl	800f41c <puts>
  {
    Q->rear = (Q->rear + 1) % SIZE;

    Q->data[Q->rear] = e;
  }
}
 80067de:	e017      	b.n	8006810 <enqueue+0x50>
    Q->rear = (Q->rear + 1) % SIZE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	4b0c      	ldr	r3, [pc, #48]	@ (800681c <enqueue+0x5c>)
 80067ea:	fb83 1302 	smull	r1, r3, r3, r2
 80067ee:	1159      	asrs	r1, r3, #5
 80067f0:	17d3      	asrs	r3, r2, #31
 80067f2:	1acb      	subs	r3, r1, r3
 80067f4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
    Q->data[Q->rear] = e;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	78f9      	ldrb	r1, [r7, #3]
 800680e:	54d1      	strb	r1, [r2, r3]
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	08014138 	.word	0x08014138
 800681c:	1b4e81b5 	.word	0x1b4e81b5

08006820 <dequeue>:

char dequeue(Queue *Q)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  if (is_empty(Q))
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff ff8f 	bl	800674c <is_empty>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <dequeue+0x1e>
  {
    printf("Empty\n");
 8006834:	480f      	ldr	r0, [pc, #60]	@ (8006874 <dequeue+0x54>)
 8006836:	f008 fdf1 	bl	800f41c <puts>
    return 0;
 800683a:	2300      	movs	r3, #0
 800683c:	e016      	b.n	800686c <dequeue+0x4c>
  }
  else
  {
    Q->front = (Q->front + 1) % SIZE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <dequeue+0x58>)
 8006848:	fb83 1302 	smull	r1, r3, r3, r2
 800684c:	1159      	asrs	r1, r3, #5
 800684e:	17d3      	asrs	r3, r2, #31
 8006850:	1acb      	subs	r3, r1, r3
 8006852:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006856:	fb01 f303 	mul.w	r3, r1, r3
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
    return Q->data[Q->front];
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	5cd3      	ldrb	r3, [r2, r3]
  }
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	08014144 	.word	0x08014144
 8006878:	1b4e81b5 	.word	0x1b4e81b5

0800687c <photo_sensor_1>:
extern bool photo_X_go;
extern bool photo_X_back;
extern bool photo_Y_go;
extern bool photo_Y_back;

void photo_sensor_1(void) {
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0

	static int sensor_status = 0;
	static int edge_status = 0;

	sensor_status++;
 8006880:	4b67      	ldr	r3, [pc, #412]	@ (8006a20 <photo_sensor_1+0x1a4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a66      	ldr	r2, [pc, #408]	@ (8006a20 <photo_sensor_1+0x1a4>)
 8006888:	6013      	str	r3, [r2, #0]

	if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0)) {
 800688a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800688e:	4865      	ldr	r0, [pc, #404]	@ (8006a24 <photo_sensor_1+0x1a8>)
 8006890:	f003 fa1a 	bl	8009cc8 <HAL_GPIO_ReadPin>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d153      	bne.n	8006942 <photo_sensor_1+0xc6>
		edge_status = 0;
 800689a:	4b63      	ldr	r3, [pc, #396]	@ (8006a28 <photo_sensor_1+0x1ac>)
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
//		if (sensor_status == 2) {

			if (i_v_t_count > raisingN + staticN) {
 80068a0:	4b62      	ldr	r3, [pc, #392]	@ (8006a2c <photo_sensor_1+0x1b0>)
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	ee07 3a90 	vmov	s15, r3
 80068a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068ac:	4b60      	ldr	r3, [pc, #384]	@ (8006a30 <photo_sensor_1+0x1b4>)
 80068ae:	edd3 6a00 	vldr	s13, [r3]
 80068b2:	4b60      	ldr	r3, [pc, #384]	@ (8006a34 <photo_sensor_1+0x1b8>)
 80068b4:	edd3 7a00 	vldr	s15, [r3]
 80068b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c4:	dd49      	ble.n	800695a <photo_sensor_1+0xde>

		//		if (RPM_X > 0 && RPM_X_back != 1) {
					if (RPM_X > 0 && v_t_dir_back_X_flag ==0) {
 80068c6:	4b5c      	ldr	r3, [pc, #368]	@ (8006a38 <photo_sensor_1+0x1bc>)
 80068c8:	edd3 7a00 	vldr	s15, [r3]
 80068cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d4:	dd41      	ble.n	800695a <photo_sensor_1+0xde>
 80068d6:	4b59      	ldr	r3, [pc, #356]	@ (8006a3c <photo_sensor_1+0x1c0>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d13d      	bne.n	800695a <photo_sensor_1+0xde>
						if (sensor_status == 2) {
 80068de:	4b50      	ldr	r3, [pc, #320]	@ (8006a20 <photo_sensor_1+0x1a4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d139      	bne.n	800695a <photo_sensor_1+0xde>
					RPM_X_go = 1;
 80068e6:	4b56      	ldr	r3, [pc, #344]	@ (8006a40 <photo_sensor_1+0x1c4>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

					photo_sensor_flag_x = 1; //그래프 용도
 80068ec:	4b55      	ldr	r3, [pc, #340]	@ (8006a44 <photo_sensor_1+0x1c8>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	601a      	str	r2, [r3, #0]

					save_X_GO_IN = encoder_count_x;
 80068f2:	4b55      	ldr	r3, [pc, #340]	@ (8006a48 <photo_sensor_1+0x1cc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a55      	ldr	r2, [pc, #340]	@ (8006a4c <photo_sensor_1+0x1d0>)
 80068f8:	6013      	str	r3, [r2, #0]

					dc_motor_pid_X_with_photosensor1(save_X_GO_IN);
 80068fa:	4b54      	ldr	r3, [pc, #336]	@ (8006a4c <photo_sensor_1+0x1d0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe f8a0 	bl	8004a44 <dc_motor_pid_X_with_photosensor1>
				//	i_v_t_count = 0;

		//			if (v_t_dir_back_X_flag == 0) {
						Finish_flag.x_go = TRUE; // 전진
 8006904:	4b52      	ldr	r3, [pc, #328]	@ (8006a50 <photo_sensor_1+0x1d4>)
 8006906:	2201      	movs	r2, #1
 8006908:	701a      	strb	r2, [r3, #0]

						if (tim10_flag >= 20)  // paser 2초 딜레이용도
 800690a:	4b52      	ldr	r3, [pc, #328]	@ (8006a54 <photo_sensor_1+0x1d8>)
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	2b13      	cmp	r3, #19
 8006910:	d902      	bls.n	8006918 <photo_sensor_1+0x9c>
						{
							paser_flag = TRUE;
 8006912:	4b51      	ldr	r3, [pc, #324]	@ (8006a58 <photo_sensor_1+0x1dc>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
						}
						tim10_flag = 0;
 8006918:	4b4e      	ldr	r3, [pc, #312]	@ (8006a54 <photo_sensor_1+0x1d8>)
 800691a:	2200      	movs	r2, #0
 800691c:	801a      	strh	r2, [r3, #0]

						printf("x-go \n\r");
 800691e:	484f      	ldr	r0, [pc, #316]	@ (8006a5c <photo_sensor_1+0x1e0>)
 8006920:	f008 fd14 	bl	800f34c <iprintf>
					//			{
					//				Finish_flag.x_back = TRUE; // 후진
					//		paser_flag=1;
					//	printf("x-back \n\r");
					//			}
					TIM3->CCR2 = 0;
 8006924:	4b4e      	ldr	r3, [pc, #312]	@ (8006a60 <photo_sensor_1+0x1e4>)
 8006926:	2200      	movs	r2, #0
 8006928:	639a      	str	r2, [r3, #56]	@ 0x38

					x_go++;
 800692a:	4b4e      	ldr	r3, [pc, #312]	@ (8006a64 <photo_sensor_1+0x1e8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3301      	adds	r3, #1
 8006930:	4a4c      	ldr	r2, [pc, #304]	@ (8006a64 <photo_sensor_1+0x1e8>)
 8006932:	6013      	str	r3, [r2, #0]

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8006934:	2201      	movs	r2, #1
 8006936:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800693a:	483a      	ldr	r0, [pc, #232]	@ (8006a24 <photo_sensor_1+0x1a8>)
 800693c:	f003 f9dc 	bl	8009cf8 <HAL_GPIO_WritePin>
 8006940:	e00b      	b.n	800695a <photo_sensor_1+0xde>
			}

		}

	} else {
		sensor_status = 0;
 8006942:	4b37      	ldr	r3, [pc, #220]	@ (8006a20 <photo_sensor_1+0x1a4>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
		if (sensor_status <= 1) {
 8006948:	4b35      	ldr	r3, [pc, #212]	@ (8006a20 <photo_sensor_1+0x1a4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	dc04      	bgt.n	800695a <photo_sensor_1+0xde>
			edge_status++;
 8006950:	4b35      	ldr	r3, [pc, #212]	@ (8006a28 <photo_sensor_1+0x1ac>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a34      	ldr	r2, [pc, #208]	@ (8006a28 <photo_sensor_1+0x1ac>)
 8006958:	6013      	str	r3, [r2, #0]
		}
	}
//	if (edge_status == 2) {

		if (i_v_t_count > raisingN + staticN) {
 800695a:	4b34      	ldr	r3, [pc, #208]	@ (8006a2c <photo_sensor_1+0x1b0>)
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006966:	4b32      	ldr	r3, [pc, #200]	@ (8006a30 <photo_sensor_1+0x1b4>)
 8006968:	edd3 6a00 	vldr	s13, [r3]
 800696c:	4b31      	ldr	r3, [pc, #196]	@ (8006a34 <photo_sensor_1+0x1b8>)
 800696e:	edd3 7a00 	vldr	s15, [r3]
 8006972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697e:	dc00      	bgt.n	8006982 <photo_sensor_1+0x106>
			}
		}

	}

}
 8006980:	e04b      	b.n	8006a1a <photo_sensor_1+0x19e>
				if (RPM_X < 0 && v_t_dir_back_X_flag == 1) {
 8006982:	4b2d      	ldr	r3, [pc, #180]	@ (8006a38 <photo_sensor_1+0x1bc>)
 8006984:	edd3 7a00 	vldr	s15, [r3]
 8006988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800698c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006990:	d400      	bmi.n	8006994 <photo_sensor_1+0x118>
}
 8006992:	e042      	b.n	8006a1a <photo_sensor_1+0x19e>
				if (RPM_X < 0 && v_t_dir_back_X_flag == 1) {
 8006994:	4b29      	ldr	r3, [pc, #164]	@ (8006a3c <photo_sensor_1+0x1c0>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d13e      	bne.n	8006a1a <photo_sensor_1+0x19e>
					if (edge_status == 2) {
 800699c:	4b22      	ldr	r3, [pc, #136]	@ (8006a28 <photo_sensor_1+0x1ac>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d13a      	bne.n	8006a1a <photo_sensor_1+0x19e>
				RPM_X_back = 1;
 80069a4:	4b30      	ldr	r3, [pc, #192]	@ (8006a68 <photo_sensor_1+0x1ec>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
				GPIOB->ODR &= ~1 << 14;
 80069aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006a24 <photo_sensor_1+0x1a8>)
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006a24 <photo_sensor_1+0x1a8>)
 80069b0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80069b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069b8:	6153      	str	r3, [r2, #20]
				photo_sensor_flag_x = 1;
 80069ba:	4b22      	ldr	r3, [pc, #136]	@ (8006a44 <photo_sensor_1+0x1c8>)
 80069bc:	2201      	movs	r2, #1
 80069be:	601a      	str	r2, [r3, #0]
				save_X_BACK_IN = encoder_count_x;
 80069c0:	4b21      	ldr	r3, [pc, #132]	@ (8006a48 <photo_sensor_1+0x1cc>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a29      	ldr	r2, [pc, #164]	@ (8006a6c <photo_sensor_1+0x1f0>)
 80069c6:	6013      	str	r3, [r2, #0]
				GPIOB->ODR |= 1 << 0;
 80069c8:	4b16      	ldr	r3, [pc, #88]	@ (8006a24 <photo_sensor_1+0x1a8>)
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	4a15      	ldr	r2, [pc, #84]	@ (8006a24 <photo_sensor_1+0x1a8>)
 80069ce:	f043 0301 	orr.w	r3, r3, #1
 80069d2:	6153      	str	r3, [r2, #20]
				dc_motor_pid_X_with_photosensor1(save_X_BACK_IN);
 80069d4:	4b25      	ldr	r3, [pc, #148]	@ (8006a6c <photo_sensor_1+0x1f0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe f833 	bl	8004a44 <dc_motor_pid_X_with_photosensor1>
					Finish_flag.x_back = TRUE; // 후진
 80069de:	4b1c      	ldr	r3, [pc, #112]	@ (8006a50 <photo_sensor_1+0x1d4>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	705a      	strb	r2, [r3, #1]
					if (tim10_flag >= 20)  // paser 2초 딜레이용도
 80069e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a54 <photo_sensor_1+0x1d8>)
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	2b13      	cmp	r3, #19
 80069ea:	d902      	bls.n	80069f2 <photo_sensor_1+0x176>
						paser_flag = TRUE;
 80069ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006a58 <photo_sensor_1+0x1dc>)
 80069ee:	2201      	movs	r2, #1
 80069f0:	701a      	strb	r2, [r3, #0]
					tim10_flag = 0;
 80069f2:	4b18      	ldr	r3, [pc, #96]	@ (8006a54 <photo_sensor_1+0x1d8>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	801a      	strh	r2, [r3, #0]
				printf("x-back \n\r");
 80069f8:	481d      	ldr	r0, [pc, #116]	@ (8006a70 <photo_sensor_1+0x1f4>)
 80069fa:	f008 fca7 	bl	800f34c <iprintf>
				TIM3->CCR2 = 0;
 80069fe:	4b18      	ldr	r3, [pc, #96]	@ (8006a60 <photo_sensor_1+0x1e4>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	639a      	str	r2, [r3, #56]	@ 0x38
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8006a04:	2201      	movs	r2, #1
 8006a06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006a0a:	4806      	ldr	r0, [pc, #24]	@ (8006a24 <photo_sensor_1+0x1a8>)
 8006a0c:	f003 f974 	bl	8009cf8 <HAL_GPIO_WritePin>
				x_back++;
 8006a10:	4b18      	ldr	r3, [pc, #96]	@ (8006a74 <photo_sensor_1+0x1f8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3301      	adds	r3, #1
 8006a16:	4a17      	ldr	r2, [pc, #92]	@ (8006a74 <photo_sensor_1+0x1f8>)
 8006a18:	6013      	str	r3, [r2, #0]
}
 8006a1a:	bf00      	nop
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	200031e8 	.word	0x200031e8
 8006a24:	40020400 	.word	0x40020400
 8006a28:	200031ec 	.word	0x200031ec
 8006a2c:	200014c8 	.word	0x200014c8
 8006a30:	20002c40 	.word	0x20002c40
 8006a34:	20002c4c 	.word	0x20002c4c
 8006a38:	20002c64 	.word	0x20002c64
 8006a3c:	20002c58 	.word	0x20002c58
 8006a40:	20001348 	.word	0x20001348
 8006a44:	200031dc 	.word	0x200031dc
 8006a48:	20000000 	.word	0x20000000
 8006a4c:	200031c8 	.word	0x200031c8
 8006a50:	20000c60 	.word	0x20000c60
 8006a54:	2000003e 	.word	0x2000003e
 8006a58:	20001319 	.word	0x20001319
 8006a5c:	0801414c 	.word	0x0801414c
 8006a60:	40000400 	.word	0x40000400
 8006a64:	20001334 	.word	0x20001334
 8006a68:	2000134c 	.word	0x2000134c
 8006a6c:	200031cc 	.word	0x200031cc
 8006a70:	08014154 	.word	0x08014154
 8006a74:	20001338 	.word	0x20001338

08006a78 <photo_sensor_2>:
 //	printf("%d ,. %d  ,   %d\n\r",save_X,save_Y,sensor_status);
 }
 */
extern int DC_Y_go_sensor_flag;
extern int DC_Y_back_sensor_flag;
void photo_sensor_2(void) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0

	static int sensor_status = 0;
	static int edge_status = 0;
	extern uint32_t encoder_count_y;

	sensor_status++;
 8006a7c:	4b60      	ldr	r3, [pc, #384]	@ (8006c00 <photo_sensor_2+0x188>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3301      	adds	r3, #1
 8006a82:	4a5f      	ldr	r2, [pc, #380]	@ (8006c00 <photo_sensor_2+0x188>)
 8006a84:	6013      	str	r3, [r2, #0]

	if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0)) {
 8006a86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006a8a:	485e      	ldr	r0, [pc, #376]	@ (8006c04 <photo_sensor_2+0x18c>)
 8006a8c:	f003 f91c 	bl	8009cc8 <HAL_GPIO_ReadPin>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f040 80a5 	bne.w	8006be2 <photo_sensor_2+0x16a>
		edge_status = 0;
 8006a98:	4b5b      	ldr	r3, [pc, #364]	@ (8006c08 <photo_sensor_2+0x190>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]

		if (i_v_t_count > raisingN + staticN)      // 여기 순서 변경
 8006a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8006c0c <photo_sensor_2+0x194>)
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006aaa:	4b59      	ldr	r3, [pc, #356]	@ (8006c10 <photo_sensor_2+0x198>)
 8006aac:	edd3 6a00 	vldr	s13, [r3]
 8006ab0:	4b58      	ldr	r3, [pc, #352]	@ (8006c14 <photo_sensor_2+0x19c>)
 8006ab2:	edd3 7a00 	vldr	s15, [r3]
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac2:	dc00      	bgt.n	8006ac6 <photo_sensor_2+0x4e>
	 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
	 }
	 }
	 }*/
	//	printf("%d ,. %d  ,   %d\n\r",save_X,save_Y,sensor_status);
}
 8006ac4:	e099      	b.n	8006bfa <photo_sensor_2+0x182>
			if (sensor_status == 2 && RPM_Y != 0)               // 이상하긴 한데 동작은 됨
 8006ac6:	4b4e      	ldr	r3, [pc, #312]	@ (8006c00 <photo_sensor_2+0x188>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	f040 8095 	bne.w	8006bfa <photo_sensor_2+0x182>
 8006ad0:	4b51      	ldr	r3, [pc, #324]	@ (8006c18 <photo_sensor_2+0x1a0>)
 8006ad2:	edd3 7a00 	vldr	s15, [r3]
 8006ad6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ade:	f000 808c 	beq.w	8006bfa <photo_sensor_2+0x182>
				if (RPM_Y > 0 && v_t_dir_back_Y_flag == 0)  //전진일떄
 8006ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8006c18 <photo_sensor_2+0x1a0>)
 8006ae4:	edd3 7a00 	vldr	s15, [r3]
 8006ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af0:	dd33      	ble.n	8006b5a <photo_sensor_2+0xe2>
 8006af2:	4b4a      	ldr	r3, [pc, #296]	@ (8006c1c <photo_sensor_2+0x1a4>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d12f      	bne.n	8006b5a <photo_sensor_2+0xe2>
					printf("y-go \n\r");
 8006afa:	4849      	ldr	r0, [pc, #292]	@ (8006c20 <photo_sensor_2+0x1a8>)
 8006afc:	f008 fc26 	bl	800f34c <iprintf>
					Finish_flag.y_go = TRUE; // 전진
 8006b00:	4b48      	ldr	r3, [pc, #288]	@ (8006c24 <photo_sensor_2+0x1ac>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	709a      	strb	r2, [r3, #2]
					y_go++;
 8006b06:	4b48      	ldr	r3, [pc, #288]	@ (8006c28 <photo_sensor_2+0x1b0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	4a46      	ldr	r2, [pc, #280]	@ (8006c28 <photo_sensor_2+0x1b0>)
 8006b0e:	6013      	str	r3, [r2, #0]
					GPIOB->ODR &= ~1 << 14;
 8006b10:	4b3c      	ldr	r3, [pc, #240]	@ (8006c04 <photo_sensor_2+0x18c>)
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	4a3b      	ldr	r2, [pc, #236]	@ (8006c04 <photo_sensor_2+0x18c>)
 8006b16:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006b1a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b1e:	6153      	str	r3, [r2, #20]
									photo_sensor_flag_y = 1;
 8006b20:	4b42      	ldr	r3, [pc, #264]	@ (8006c2c <photo_sensor_2+0x1b4>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
									save_Y_GO_IN = encoder_count_y;
 8006b26:	4b42      	ldr	r3, [pc, #264]	@ (8006c30 <photo_sensor_2+0x1b8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a42      	ldr	r2, [pc, #264]	@ (8006c34 <photo_sensor_2+0x1bc>)
 8006b2c:	6013      	str	r3, [r2, #0]
									GPIOB->ODR |= 1 << 0;
 8006b2e:	4b35      	ldr	r3, [pc, #212]	@ (8006c04 <photo_sensor_2+0x18c>)
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	4a34      	ldr	r2, [pc, #208]	@ (8006c04 <photo_sensor_2+0x18c>)
 8006b34:	f043 0301 	orr.w	r3, r3, #1
 8006b38:	6153      	str	r3, [r2, #20]
									dc_motor_pid_Y_with_photosensor2(save_Y_GO_IN);
 8006b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c34 <photo_sensor_2+0x1bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fd ffc0 	bl	8004ac4 <dc_motor_pid_Y_with_photosensor2>
					if (tim10_flag >= 20)  // paser 2초 딜레이용도
 8006b44:	4b3c      	ldr	r3, [pc, #240]	@ (8006c38 <photo_sensor_2+0x1c0>)
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	2b13      	cmp	r3, #19
 8006b4a:	d902      	bls.n	8006b52 <photo_sensor_2+0xda>
						paser_flag = TRUE;
 8006b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c3c <photo_sensor_2+0x1c4>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]
					tim10_flag = 0;
 8006b52:	4b39      	ldr	r3, [pc, #228]	@ (8006c38 <photo_sensor_2+0x1c0>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	801a      	strh	r2, [r3, #0]
 8006b58:	e03a      	b.n	8006bd0 <photo_sensor_2+0x158>
				} else if (RPM_Y < 0 && v_t_dir_back_Y_flag == 1) {
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c18 <photo_sensor_2+0x1a0>)
 8006b5c:	edd3 7a00 	vldr	s15, [r3]
 8006b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b68:	d532      	bpl.n	8006bd0 <photo_sensor_2+0x158>
 8006b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8006c1c <photo_sensor_2+0x1a4>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d12e      	bne.n	8006bd0 <photo_sensor_2+0x158>
					printf("y-back \n\r");
 8006b72:	4833      	ldr	r0, [pc, #204]	@ (8006c40 <photo_sensor_2+0x1c8>)
 8006b74:	f008 fbea 	bl	800f34c <iprintf>
					Finish_flag.y_back = TRUE; // 후진
 8006b78:	4b2a      	ldr	r3, [pc, #168]	@ (8006c24 <photo_sensor_2+0x1ac>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	70da      	strb	r2, [r3, #3]
					y_back++;
 8006b7e:	4b31      	ldr	r3, [pc, #196]	@ (8006c44 <photo_sensor_2+0x1cc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3301      	adds	r3, #1
 8006b84:	4a2f      	ldr	r2, [pc, #188]	@ (8006c44 <photo_sensor_2+0x1cc>)
 8006b86:	6013      	str	r3, [r2, #0]
					GPIOB->ODR &= ~1 << 14;
 8006b88:	4b1e      	ldr	r3, [pc, #120]	@ (8006c04 <photo_sensor_2+0x18c>)
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c04 <photo_sensor_2+0x18c>)
 8006b8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006b92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b96:	6153      	str	r3, [r2, #20]
									photo_sensor_flag_y = 1;
 8006b98:	4b24      	ldr	r3, [pc, #144]	@ (8006c2c <photo_sensor_2+0x1b4>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]
									save_Y_BACK_IN = encoder_count_y;
 8006b9e:	4b24      	ldr	r3, [pc, #144]	@ (8006c30 <photo_sensor_2+0x1b8>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a29      	ldr	r2, [pc, #164]	@ (8006c48 <photo_sensor_2+0x1d0>)
 8006ba4:	6013      	str	r3, [r2, #0]
									GPIOB->ODR |= 1 << 0;
 8006ba6:	4b17      	ldr	r3, [pc, #92]	@ (8006c04 <photo_sensor_2+0x18c>)
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	4a16      	ldr	r2, [pc, #88]	@ (8006c04 <photo_sensor_2+0x18c>)
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	6153      	str	r3, [r2, #20]
									dc_motor_pid_Y_with_photosensor2(save_Y_BACK_IN);
 8006bb2:	4b25      	ldr	r3, [pc, #148]	@ (8006c48 <photo_sensor_2+0x1d0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fd ff84 	bl	8004ac4 <dc_motor_pid_Y_with_photosensor2>
					if (tim10_flag >= 20)  // paser 2초 딜레이용도
 8006bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8006c38 <photo_sensor_2+0x1c0>)
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	2b13      	cmp	r3, #19
 8006bc2:	d902      	bls.n	8006bca <photo_sensor_2+0x152>
						paser_flag = TRUE;
 8006bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8006c3c <photo_sensor_2+0x1c4>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	701a      	strb	r2, [r3, #0]
					tim10_flag = 0;
 8006bca:	4b1b      	ldr	r3, [pc, #108]	@ (8006c38 <photo_sensor_2+0x1c0>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	801a      	strh	r2, [r3, #0]
				TIM3->CCR1 = 0;
 8006bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c4c <photo_sensor_2+0x1d4>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	2101      	movs	r1, #1
 8006bda:	481d      	ldr	r0, [pc, #116]	@ (8006c50 <photo_sensor_2+0x1d8>)
 8006bdc:	f003 f88c 	bl	8009cf8 <HAL_GPIO_WritePin>
}
 8006be0:	e00b      	b.n	8006bfa <photo_sensor_2+0x182>
		sensor_status = 0;
 8006be2:	4b07      	ldr	r3, [pc, #28]	@ (8006c00 <photo_sensor_2+0x188>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
		if (sensor_status <= 1) {
 8006be8:	4b05      	ldr	r3, [pc, #20]	@ (8006c00 <photo_sensor_2+0x188>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	dc04      	bgt.n	8006bfa <photo_sensor_2+0x182>
			edge_status++;
 8006bf0:	4b05      	ldr	r3, [pc, #20]	@ (8006c08 <photo_sensor_2+0x190>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	4a04      	ldr	r2, [pc, #16]	@ (8006c08 <photo_sensor_2+0x190>)
 8006bf8:	6013      	str	r3, [r2, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200031f0 	.word	0x200031f0
 8006c04:	40020400 	.word	0x40020400
 8006c08:	200031f4 	.word	0x200031f4
 8006c0c:	200014c8 	.word	0x200014c8
 8006c10:	20002c40 	.word	0x20002c40
 8006c14:	20002c4c 	.word	0x20002c4c
 8006c18:	20002c70 	.word	0x20002c70
 8006c1c:	20002c59 	.word	0x20002c59
 8006c20:	08014160 	.word	0x08014160
 8006c24:	20000c60 	.word	0x20000c60
 8006c28:	2000133c 	.word	0x2000133c
 8006c2c:	200031e0 	.word	0x200031e0
 8006c30:	20000004 	.word	0x20000004
 8006c34:	200031d0 	.word	0x200031d0
 8006c38:	2000003e 	.word	0x2000003e
 8006c3c:	20001319 	.word	0x20001319
 8006c40:	08014168 	.word	0x08014168
 8006c44:	20001340 	.word	0x20001340
 8006c48:	200031d4 	.word	0x200031d4
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40021800 	.word	0x40021800

08006c54 <ball_limit_sw_min>:
extern int ball_min_test;

extern int ballscrew_up_run;
extern int ballscrew_down_run;

void ball_limit_sw_min(void) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0

	static int sensor_status = 0;
	static int edge_status = 0;
	extern uint32_t encoder_count_y;

	sensor_status++;
 8006c58:	4b26      	ldr	r3, [pc, #152]	@ (8006cf4 <ball_limit_sw_min+0xa0>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	4a25      	ldr	r2, [pc, #148]	@ (8006cf4 <ball_limit_sw_min+0xa0>)
 8006c60:	6013      	str	r3, [r2, #0]

	if ((HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2) == 0)) {
 8006c62:	2104      	movs	r1, #4
 8006c64:	4824      	ldr	r0, [pc, #144]	@ (8006cf8 <ball_limit_sw_min+0xa4>)
 8006c66:	f003 f82f 	bl	8009cc8 <HAL_GPIO_ReadPin>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d12c      	bne.n	8006cca <ball_limit_sw_min+0x76>
		edge_status = 0;
 8006c70:	4b22      	ldr	r3, [pc, #136]	@ (8006cfc <ball_limit_sw_min+0xa8>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
		//			&& (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) && (RPM_X == 0)
		//			&& (RPM_Y == 0) && (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_4) == 1)) {

		//아래방향일떄만
		//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);  //방향 아래
		if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 1) {
 8006c76:	2108      	movs	r1, #8
 8006c78:	4821      	ldr	r0, [pc, #132]	@ (8006d00 <ball_limit_sw_min+0xac>)
 8006c7a:	f003 f825 	bl	8009cc8 <HAL_GPIO_ReadPin>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d12e      	bne.n	8006ce2 <ball_limit_sw_min+0x8e>
			if (sensor_status == 2)                        //라이징
 8006c84:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf4 <ball_limit_sw_min+0xa0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d12a      	bne.n	8006ce2 <ball_limit_sw_min+0x8e>
					{

				HAL_TIM_OC_Stop_IT(&htim11, TIM_CHANNEL_1);  // 볼스크류 스텝모터 타이머 정지
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	481d      	ldr	r0, [pc, #116]	@ (8006d04 <ball_limit_sw_min+0xb0>)
 8006c90:	f004 ffcc 	bl	800bc2c <HAL_TIM_OC_Stop_IT>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);  //정지
 8006c94:	2201      	movs	r2, #1
 8006c96:	2104      	movs	r1, #4
 8006c98:	4819      	ldr	r0, [pc, #100]	@ (8006d00 <ball_limit_sw_min+0xac>)
 8006c9a:	f003 f82d 	bl	8009cf8 <HAL_GPIO_WritePin>
				Finish_flag.ball_low = TRUE;
 8006c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d08 <ball_limit_sw_min+0xb4>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	719a      	strb	r2, [r3, #6]

				if(tim10_flag >= 20)  // paser 2초 딜레이용도
 8006ca4:	4b19      	ldr	r3, [pc, #100]	@ (8006d0c <ball_limit_sw_min+0xb8>)
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	2b13      	cmp	r3, #19
 8006caa:	d902      	bls.n	8006cb2 <ball_limit_sw_min+0x5e>
				{
					paser_flag=TRUE;
 8006cac:	4b18      	ldr	r3, [pc, #96]	@ (8006d10 <ball_limit_sw_min+0xbc>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	701a      	strb	r2, [r3, #0]
				}
				tim10_flag=0;
 8006cb2:	4b16      	ldr	r3, [pc, #88]	@ (8006d0c <ball_limit_sw_min+0xb8>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	801a      	strh	r2, [r3, #0]

				//printf("ball_low \n\r");
				ball_min_test++;
 8006cb8:	4b16      	ldr	r3, [pc, #88]	@ (8006d14 <ball_limit_sw_min+0xc0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	4a15      	ldr	r2, [pc, #84]	@ (8006d14 <ball_limit_sw_min+0xc0>)
 8006cc0:	6013      	str	r3, [r2, #0]

				ballscrew_down_run = 0;
 8006cc2:	4b15      	ldr	r3, [pc, #84]	@ (8006d18 <ball_limit_sw_min+0xc4>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e00b      	b.n	8006ce2 <ball_limit_sw_min+0x8e>
			}
		}

	} else {
		sensor_status = 0;
 8006cca:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf4 <ball_limit_sw_min+0xa0>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
		if (sensor_status <= 1) {
 8006cd0:	4b08      	ldr	r3, [pc, #32]	@ (8006cf4 <ball_limit_sw_min+0xa0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	dc04      	bgt.n	8006ce2 <ball_limit_sw_min+0x8e>
			edge_status++;
 8006cd8:	4b08      	ldr	r3, [pc, #32]	@ (8006cfc <ball_limit_sw_min+0xa8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	4a07      	ldr	r2, [pc, #28]	@ (8006cfc <ball_limit_sw_min+0xa8>)
 8006ce0:	6013      	str	r3, [r2, #0]
		}
	}

	if (edge_status == 2) {
 8006ce2:	4b06      	ldr	r3, [pc, #24]	@ (8006cfc <ball_limit_sw_min+0xa8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d102      	bne.n	8006cf0 <ball_limit_sw_min+0x9c>
		Finish_flag.ball_low = FALSE;
 8006cea:	4b07      	ldr	r3, [pc, #28]	@ (8006d08 <ball_limit_sw_min+0xb4>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	719a      	strb	r2, [r3, #6]
	}
}
 8006cf0:	bf00      	nop
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	200031f8 	.word	0x200031f8
 8006cf8:	40021400 	.word	0x40021400
 8006cfc:	200031fc 	.word	0x200031fc
 8006d00:	40021800 	.word	0x40021800
 8006d04:	20000aa4 	.word	0x20000aa4
 8006d08:	20000c60 	.word	0x20000c60
 8006d0c:	2000003e 	.word	0x2000003e
 8006d10:	20001319 	.word	0x20001319
 8006d14:	20001330 	.word	0x20001330
 8006d18:	20001364 	.word	0x20001364

08006d1c <down_sw_max>:

extern int down_high_test;

int down_max_flag = 0;
void down_sw_max(void) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0

	static int sensor_status = 0;
	static int edge_status = 0;
	extern uint32_t encoder_count_y;

	sensor_status++;
 8006d20:	4b23      	ldr	r3, [pc, #140]	@ (8006db0 <down_sw_max+0x94>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	4a22      	ldr	r2, [pc, #136]	@ (8006db0 <down_sw_max+0x94>)
 8006d28:	6013      	str	r3, [r2, #0]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)) {
 8006d2a:	2108      	movs	r1, #8
 8006d2c:	4821      	ldr	r0, [pc, #132]	@ (8006db4 <down_sw_max+0x98>)
 8006d2e:	f002 ffcb 	bl	8009cc8 <HAL_GPIO_ReadPin>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d12d      	bne.n	8006d94 <down_sw_max+0x78>
		edge_status = 0;
 8006d38:	4b1f      	ldr	r3, [pc, #124]	@ (8006db8 <down_sw_max+0x9c>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
		//			&& (RPM_X ==0) && (RPM_Y ==0)
		//		)

		//	(RPM_X == 0) && (RPM_Y == 0)) {

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == 1) {  //위로 올라갈 떄
 8006d3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006d42:	481e      	ldr	r0, [pc, #120]	@ (8006dbc <down_sw_max+0xa0>)
 8006d44:	f002 ffc0 	bl	8009cc8 <HAL_GPIO_ReadPin>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d12e      	bne.n	8006dac <down_sw_max+0x90>

			if (sensor_status == 2)                        //라이징
 8006d4e:	4b18      	ldr	r3, [pc, #96]	@ (8006db0 <down_sw_max+0x94>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d12a      	bne.n	8006dac <down_sw_max+0x90>
					{
				HAL_TIM_OC_Stop_IT(&htim13, TIM_CHANNEL_1); // 볼스크류 스텝모터 타이머 정지
 8006d56:	2100      	movs	r1, #0
 8006d58:	4819      	ldr	r0, [pc, #100]	@ (8006dc0 <down_sw_max+0xa4>)
 8006d5a:	f004 ff67 	bl	800bc2c <HAL_TIM_OC_Stop_IT>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);  //정지
 8006d5e:	2201      	movs	r2, #1
 8006d60:	2104      	movs	r1, #4
 8006d62:	4818      	ldr	r0, [pc, #96]	@ (8006dc4 <down_sw_max+0xa8>)
 8006d64:	f002 ffc8 	bl	8009cf8 <HAL_GPIO_WritePin>
				Finish_flag.downpart_high = TRUE;
 8006d68:	4b17      	ldr	r3, [pc, #92]	@ (8006dc8 <down_sw_max+0xac>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	71da      	strb	r2, [r3, #7]

				if(tim10_flag >= 2)  // paser 2초 딜레이용도
 8006d6e:	4b17      	ldr	r3, [pc, #92]	@ (8006dcc <down_sw_max+0xb0>)
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d902      	bls.n	8006d7c <down_sw_max+0x60>
				{
					paser_flag=TRUE;
 8006d76:	4b16      	ldr	r3, [pc, #88]	@ (8006dd0 <down_sw_max+0xb4>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
				}
				tim10_flag=0;
 8006d7c:	4b13      	ldr	r3, [pc, #76]	@ (8006dcc <down_sw_max+0xb0>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	801a      	strh	r2, [r3, #0]

				down_high_test++;
 8006d82:	4b14      	ldr	r3, [pc, #80]	@ (8006dd4 <down_sw_max+0xb8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	4a12      	ldr	r2, [pc, #72]	@ (8006dd4 <down_sw_max+0xb8>)
 8006d8a:	6013      	str	r3, [r2, #0]

				down_max_flag = 1;
 8006d8c:	4b12      	ldr	r3, [pc, #72]	@ (8006dd8 <down_sw_max+0xbc>)
 8006d8e:	2201      	movs	r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e00b      	b.n	8006dac <down_sw_max+0x90>
				//	downpart_run=0;
			}
		}
		//}
	} else {
		sensor_status = 0;
 8006d94:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <down_sw_max+0x94>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
		if (sensor_status <= 1) {
 8006d9a:	4b05      	ldr	r3, [pc, #20]	@ (8006db0 <down_sw_max+0x94>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	dc04      	bgt.n	8006dac <down_sw_max+0x90>
			edge_status++;
 8006da2:	4b05      	ldr	r3, [pc, #20]	@ (8006db8 <down_sw_max+0x9c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3301      	adds	r3, #1
 8006da8:	4a03      	ldr	r2, [pc, #12]	@ (8006db8 <down_sw_max+0x9c>)
 8006daa:	6013      	str	r3, [r2, #0]
	}

	if (edge_status == 2) {
		//Finish_flag.downpart_high = FALSE;
	}
}
 8006dac:	bf00      	nop
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20003200 	.word	0x20003200
 8006db4:	40020000 	.word	0x40020000
 8006db8:	20003204 	.word	0x20003204
 8006dbc:	40021400 	.word	0x40021400
 8006dc0:	20000b34 	.word	0x20000b34
 8006dc4:	40021800 	.word	0x40021800
 8006dc8:	20000c60 	.word	0x20000c60
 8006dcc:	2000003e 	.word	0x2000003e
 8006dd0:	20001319 	.word	0x20001319
 8006dd4:	2000132c 	.word	0x2000132c
 8006dd8:	200031e4 	.word	0x200031e4

08006ddc <shaft_step_motor>:

int down_speed;

extern int pik;
void shaft_step_motor(uint16_t step1,uint16_t cycle_time1)  // (스텝,주기)  // 다운 파트 스텝모터
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	460a      	mov	r2, r1
 8006de6:	80fb      	strh	r3, [r7, #6]
 8006de8:	4613      	mov	r3, r2
 8006dea:	80bb      	strh	r3, [r7, #4]
	if(shaft_accel_flag==0)  //0: 등속
 8006dec:	4b15      	ldr	r3, [pc, #84]	@ (8006e44 <shaft_step_motor+0x68>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <shaft_step_motor+0x1e>
	{
		TIM13->ARR = cycle_time1;
 8006df4:	4a14      	ldr	r2, [pc, #80]	@ (8006e48 <shaft_step_motor+0x6c>)
 8006df6:	88bb      	ldrh	r3, [r7, #4]
 8006df8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	}

	if(step_pulse_count_tim13 >= step1*2)  //
 8006dfa:	88fb      	ldrh	r3, [r7, #6]
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	461a      	mov	r2, r3
 8006e00:	4b12      	ldr	r3, [pc, #72]	@ (8006e4c <shaft_step_motor+0x70>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d818      	bhi.n	8006e3a <shaft_step_motor+0x5e>
	{
		step_count_for_flag__=0;
 8006e08:	4b11      	ldr	r3, [pc, #68]	@ (8006e50 <shaft_step_motor+0x74>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim13,TIM_CHANNEL_1);  // 타이머 정지
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4810      	ldr	r0, [pc, #64]	@ (8006e54 <shaft_step_motor+0x78>)
 8006e12:	f004 ff0b 	bl	800bc2c <HAL_TIM_OC_Stop_IT>

	//	if( pik % 2 == 0)   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);   //짝수일떄 disadble


		step_count__=step_count__max;
 8006e16:	4b10      	ldr	r3, [pc, #64]	@ (8006e58 <shaft_step_motor+0x7c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a10      	ldr	r2, [pc, #64]	@ (8006e5c <shaft_step_motor+0x80>)
 8006e1c:	6013      	str	r3, [r2, #0]

		accel_flag=FALSE;
 8006e1e:	4b10      	ldr	r3, [pc, #64]	@ (8006e60 <shaft_step_motor+0x84>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14)==0)	{
 8006e24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006e28:	480e      	ldr	r0, [pc, #56]	@ (8006e64 <shaft_step_motor+0x88>)
 8006e2a:	f002 ff4d 	bl	8009cc8 <HAL_GPIO_ReadPin>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d102      	bne.n	8006e3a <shaft_step_motor+0x5e>
			Finish_flag.downpart_low =TRUE ;   //내려가면
 8006e34:	4b0c      	ldr	r3, [pc, #48]	@ (8006e68 <shaft_step_motor+0x8c>)
 8006e36:	2201      	movs	r2, #1
 8006e38:	721a      	strb	r2, [r3, #8]
		//	paser_flag=1;
		}
	}
}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20001369 	.word	0x20001369
 8006e48:	40001c00 	.word	0x40001c00
 8006e4c:	200041d0 	.word	0x200041d0
 8006e50:	20001368 	.word	0x20001368
 8006e54:	20000b34 	.word	0x20000b34
 8006e58:	20000504 	.word	0x20000504
 8006e5c:	20000500 	.word	0x20000500
 8006e60:	20000c54 	.word	0x20000c54
 8006e64:	40021400 	.word	0x40021400
 8006e68:	20000c60 	.word	0x20000c60

08006e6c <z_axis_step_motor>:

int ball_low;
extern uint16_t tim10_flag;

void z_axis_step_motor(uint16_t step2,uint16_t cycle_time2)  // (스텝,주기)      // 볼스크류 스텝모터
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	460a      	mov	r2, r1
 8006e76:	80fb      	strh	r3, [r7, #6]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	80bb      	strh	r3, [r7, #4]

	TIM11->ARR = cycle_time2;
 8006e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef8 <z_axis_step_motor+0x8c>)
 8006e7e:	88bb      	ldrh	r3, [r7, #4]
 8006e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

	if(step_pulse_count_tim11 >= step2*2)  //
 8006e82:	4b1e      	ldr	r3, [pc, #120]	@ (8006efc <z_axis_step_motor+0x90>)
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	db2e      	blt.n	8006eee <z_axis_step_motor+0x82>
	{

		HAL_TIM_OC_Stop_IT(&htim11,TIM_CHANNEL_1);  // 타이머 정지
 8006e90:	2100      	movs	r1, #0
 8006e92:	481b      	ldr	r0, [pc, #108]	@ (8006f00 <z_axis_step_motor+0x94>)
 8006e94:	f004 feca 	bl	800bc2c <HAL_TIM_OC_Stop_IT>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);  //정지
 8006e98:	2201      	movs	r2, #1
 8006e9a:	2104      	movs	r1, #4
 8006e9c:	4819      	ldr	r0, [pc, #100]	@ (8006f04 <z_axis_step_motor+0x98>)
 8006e9e:	f002 ff2b 	bl	8009cf8 <HAL_GPIO_WritePin>


		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3)==0)
 8006ea2:	2108      	movs	r1, #8
 8006ea4:	4817      	ldr	r0, [pc, #92]	@ (8006f04 <z_axis_step_motor+0x98>)
 8006ea6:	f002 ff0f 	bl	8009cc8 <HAL_GPIO_ReadPin>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d118      	bne.n	8006ee2 <z_axis_step_motor+0x76>
		{
			Finish_flag.ball_high = TRUE;     //올라가면
 8006eb0:	4b15      	ldr	r3, [pc, #84]	@ (8006f08 <z_axis_step_motor+0x9c>)
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	711a      	strb	r2, [r3, #4]

			if(tim10_flag >= 2)  // paser 2초 딜레이용도
 8006eb6:	4b15      	ldr	r3, [pc, #84]	@ (8006f0c <z_axis_step_motor+0xa0>)
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d902      	bls.n	8006ec4 <z_axis_step_motor+0x58>
			{
				paser_flag=TRUE;
 8006ebe:	4b14      	ldr	r3, [pc, #80]	@ (8006f10 <z_axis_step_motor+0xa4>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	701a      	strb	r2, [r3, #0]
			}
			tim10_flag=0;
 8006ec4:	4b11      	ldr	r3, [pc, #68]	@ (8006f0c <z_axis_step_motor+0xa0>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	801a      	strh	r2, [r3, #0]

			printf("ball_high \n\r");
 8006eca:	4812      	ldr	r0, [pc, #72]	@ (8006f14 <z_axis_step_motor+0xa8>)
 8006ecc:	f008 fa3e 	bl	800f34c <iprintf>

			ball_high++;
 8006ed0:	4b11      	ldr	r3, [pc, #68]	@ (8006f18 <z_axis_step_motor+0xac>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	4a10      	ldr	r2, [pc, #64]	@ (8006f18 <z_axis_step_motor+0xac>)
 8006ed8:	6013      	str	r3, [r2, #0]
			ballscrew_up_run=0;
 8006eda:	4b10      	ldr	r3, [pc, #64]	@ (8006f1c <z_axis_step_motor+0xb0>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
			//paser_flag=1;

			//ball_low++;
		}
	}
}
 8006ee0:	e005      	b.n	8006eee <z_axis_step_motor+0x82>
			Finish_flag.ball_low = TRUE;   //내려가면
 8006ee2:	4b09      	ldr	r3, [pc, #36]	@ (8006f08 <z_axis_step_motor+0x9c>)
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	719a      	strb	r2, [r3, #6]
			ballscrew_down_run=0;
 8006ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8006f20 <z_axis_step_motor+0xb4>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40014800 	.word	0x40014800
 8006efc:	200041d4 	.word	0x200041d4
 8006f00:	20000aa4 	.word	0x20000aa4
 8006f04:	40021800 	.word	0x40021800
 8006f08:	20000c60 	.word	0x20000c60
 8006f0c:	2000003e 	.word	0x2000003e
 8006f10:	20001319 	.word	0x20001319
 8006f14:	08014174 	.word	0x08014174
 8006f18:	20001344 	.word	0x20001344
 8006f1c:	20001360 	.word	0x20001360
 8006f20:	20001364 	.word	0x20001364

08006f24 <z_axis_UP>:



void z_axis_UP(uint16_t step2,uint16_t cycle_time2)  // (스텝,주기)  //UP = 정방향
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	460a      	mov	r2, r1
 8006f2e:	80fb      	strh	r3, [r7, #6]
 8006f30:	4613      	mov	r3, r2
 8006f32:	80bb      	strh	r3, [r7, #4]
	ballscrew_up_run=1;
 8006f34:	4b11      	ldr	r3, [pc, #68]	@ (8006f7c <z_axis_UP+0x58>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
	ballscrew_down_run=0;
 8006f3a:	4b11      	ldr	r3, [pc, #68]	@ (8006f80 <z_axis_UP+0x5c>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]

	Finish_flag.ball_low = FALSE;  //인터록
 8006f40:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <z_axis_UP+0x60>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	719a      	strb	r2, [r3, #6]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0);  //출발
 8006f46:	2200      	movs	r2, #0
 8006f48:	2104      	movs	r1, #4
 8006f4a:	480f      	ldr	r0, [pc, #60]	@ (8006f88 <z_axis_UP+0x64>)
 8006f4c:	f002 fed4 	bl	8009cf8 <HAL_GPIO_WritePin>

	ball_dir_flag=0;
 8006f50:	4b0e      	ldr	r3, [pc, #56]	@ (8006f8c <z_axis_UP+0x68>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]

	ball_screw_step=step2;
 8006f56:	4a0e      	ldr	r2, [pc, #56]	@ (8006f90 <z_axis_UP+0x6c>)
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 0);  //방향
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2108      	movs	r1, #8
 8006f60:	4809      	ldr	r0, [pc, #36]	@ (8006f88 <z_axis_UP+0x64>)
 8006f62:	f002 fec9 	bl	8009cf8 <HAL_GPIO_WritePin>

	step_pulse_count_tim11 = 0;  //펄스 기준값 =0
 8006f66:	4b0b      	ldr	r3, [pc, #44]	@ (8006f94 <z_axis_UP+0x70>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	801a      	strh	r2, [r3, #0]
	HAL_TIM_OC_Start_IT(&htim11, TIM_CHANNEL_1);
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	480a      	ldr	r0, [pc, #40]	@ (8006f98 <z_axis_UP+0x74>)
 8006f70:	f004 fd46 	bl	800ba00 <HAL_TIM_OC_Start_IT>

}
 8006f74:	bf00      	nop
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20001360 	.word	0x20001360
 8006f80:	20001364 	.word	0x20001364
 8006f84:	20000c60 	.word	0x20000c60
 8006f88:	40021800 	.word	0x40021800
 8006f8c:	20003208 	.word	0x20003208
 8006f90:	200004fc 	.word	0x200004fc
 8006f94:	200041d4 	.word	0x200041d4
 8006f98:	20000aa4 	.word	0x20000aa4

08006f9c <z_axis_DOWN>:

void z_axis_DOWN(uint16_t step2,uint16_t cycle_time2)  // (스텝,주기)  //DOWN = 역방향
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	460a      	mov	r2, r1
 8006fa6:	80fb      	strh	r3, [r7, #6]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	80bb      	strh	r3, [r7, #4]
	ballscrew_down_run=1;
 8006fac:	4b11      	ldr	r3, [pc, #68]	@ (8006ff4 <z_axis_DOWN+0x58>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
	ballscrew_up_run=0;
 8006fb2:	4b11      	ldr	r3, [pc, #68]	@ (8006ff8 <z_axis_DOWN+0x5c>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]

	Finish_flag.ball_high = FALSE;
 8006fb8:	4b10      	ldr	r3, [pc, #64]	@ (8006ffc <z_axis_DOWN+0x60>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0);  //출발
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2104      	movs	r1, #4
 8006fc2:	480f      	ldr	r0, [pc, #60]	@ (8007000 <z_axis_DOWN+0x64>)
 8006fc4:	f002 fe98 	bl	8009cf8 <HAL_GPIO_WritePin>

	ball_dir_flag=1;
 8006fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007004 <z_axis_DOWN+0x68>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	701a      	strb	r2, [r3, #0]

	ball_screw_step=step2;
 8006fce:	4a0e      	ldr	r2, [pc, #56]	@ (8007008 <z_axis_DOWN+0x6c>)
 8006fd0:	88fb      	ldrh	r3, [r7, #6]
 8006fd2:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);  //방향
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	2108      	movs	r1, #8
 8006fd8:	4809      	ldr	r0, [pc, #36]	@ (8007000 <z_axis_DOWN+0x64>)
 8006fda:	f002 fe8d 	bl	8009cf8 <HAL_GPIO_WritePin>

	step_pulse_count_tim11 = 0;
 8006fde:	4b0b      	ldr	r3, [pc, #44]	@ (800700c <z_axis_DOWN+0x70>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	801a      	strh	r2, [r3, #0]
	HAL_TIM_OC_Start_IT(&htim11, TIM_CHANNEL_1);
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	480a      	ldr	r0, [pc, #40]	@ (8007010 <z_axis_DOWN+0x74>)
 8006fe8:	f004 fd0a 	bl	800ba00 <HAL_TIM_OC_Start_IT>


}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20001364 	.word	0x20001364
 8006ff8:	20001360 	.word	0x20001360
 8006ffc:	20000c60 	.word	0x20000c60
 8007000:	40021800 	.word	0x40021800
 8007004:	20003208 	.word	0x20003208
 8007008:	200004fc 	.word	0x200004fc
 800700c:	200041d4 	.word	0x200041d4
 8007010:	20000aa4 	.word	0x20000aa4

08007014 <down_part_UP>:



void down_part_UP(uint16_t step1,uint16_t cycle_time1)  // (스텝,주기)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	460a      	mov	r2, r1
 800701e:	80fb      	strh	r3, [r7, #6]
 8007020:	4613      	mov	r3, r2
 8007022:	80bb      	strh	r3, [r7, #4]
	Finish_flag.downpart_low = FALSE;  //인터록
 8007024:	4b12      	ldr	r3, [pc, #72]	@ (8007070 <down_part_UP+0x5c>)
 8007026:	2200      	movs	r2, #0
 8007028:	721a      	strb	r2, [r3, #8]
	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);   //enable
 800702a:	2200      	movs	r2, #0
 800702c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007030:	4810      	ldr	r0, [pc, #64]	@ (8007074 <down_part_UP+0x60>)
 8007032:	f002 fe61 	bl	8009cf8 <HAL_GPIO_WritePin>

	down_speed = cycle_time1;
 8007036:	88bb      	ldrh	r3, [r7, #4]
 8007038:	4a0f      	ldr	r2, [pc, #60]	@ (8007078 <down_part_UP+0x64>)
 800703a:	6013      	str	r3, [r2, #0]

	shaft_accel_flag=0; //0:등속 ,1 가속
 800703c:	4b0f      	ldr	r3, [pc, #60]	@ (800707c <down_part_UP+0x68>)
 800703e:	2200      	movs	r2, #0
 8007040:	701a      	strb	r2, [r3, #0]
	downpart_dir_flag=0; // 0:위, 1: 아래
 8007042:	4b0f      	ldr	r3, [pc, #60]	@ (8007080 <down_part_UP+0x6c>)
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
	shaft_step = step1;
 8007048:	4a0e      	ldr	r2, [pc, #56]	@ (8007084 <down_part_UP+0x70>)
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	8013      	strh	r3, [r2, #0]

	step_pulse_count_tim13 = 0;  //펄스 기준값 =0
 800704e:	4b0e      	ldr	r3, [pc, #56]	@ (8007088 <down_part_UP+0x74>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);  //방향  //일단 업이라 가정
 8007054:	2201      	movs	r2, #1
 8007056:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800705a:	4806      	ldr	r0, [pc, #24]	@ (8007074 <down_part_UP+0x60>)
 800705c:	f002 fe4c 	bl	8009cf8 <HAL_GPIO_WritePin>

	HAL_TIM_OC_Start_IT(&htim13, TIM_CHANNEL_1);
 8007060:	2100      	movs	r1, #0
 8007062:	480a      	ldr	r0, [pc, #40]	@ (800708c <down_part_UP+0x78>)
 8007064:	f004 fccc 	bl	800ba00 <HAL_TIM_OC_Start_IT>

//	downpart_run=1;
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000c60 	.word	0x20000c60
 8007074:	40021400 	.word	0x40021400
 8007078:	200041ac 	.word	0x200041ac
 800707c:	20001369 	.word	0x20001369
 8007080:	20003209 	.word	0x20003209
 8007084:	200004f8 	.word	0x200004f8
 8007088:	200041d0 	.word	0x200041d0
 800708c:	20000b34 	.word	0x20000b34

08007090 <down_part_DOWN>:

void down_part_DOWN(uint16_t step1,uint16_t cycle_time1)  // (스텝,주기)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	460a      	mov	r2, r1
 800709a:	80fb      	strh	r3, [r7, #6]
 800709c:	4613      	mov	r3, r2
 800709e:	80bb      	strh	r3, [r7, #4]
	Finish_flag.downpart_high = FALSE;  //인터록
 80070a0:	4b12      	ldr	r3, [pc, #72]	@ (80070ec <down_part_DOWN+0x5c>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	71da      	strb	r2, [r3, #7]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);   //enable
 80070a6:	2200      	movs	r2, #0
 80070a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80070ac:	4810      	ldr	r0, [pc, #64]	@ (80070f0 <down_part_DOWN+0x60>)
 80070ae:	f002 fe23 	bl	8009cf8 <HAL_GPIO_WritePin>
	down_speed = cycle_time1;
 80070b2:	88bb      	ldrh	r3, [r7, #4]
 80070b4:	4a0f      	ldr	r2, [pc, #60]	@ (80070f4 <down_part_DOWN+0x64>)
 80070b6:	6013      	str	r3, [r2, #0]

	shaft_accel_flag=0; //0:등속 ,1 가속
 80070b8:	4b0f      	ldr	r3, [pc, #60]	@ (80070f8 <down_part_DOWN+0x68>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]
	downpart_dir_flag=1; // 0:위, 1: 아래
 80070be:	4b0f      	ldr	r3, [pc, #60]	@ (80070fc <down_part_DOWN+0x6c>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	701a      	strb	r2, [r3, #0]
	shaft_step = step1;
 80070c4:	4a0e      	ldr	r2, [pc, #56]	@ (8007100 <down_part_DOWN+0x70>)
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	8013      	strh	r3, [r2, #0]

	step_pulse_count_tim13 = 0;
 80070ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007104 <down_part_DOWN+0x74>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);  //방향
 80070d0:	2200      	movs	r2, #0
 80070d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80070d6:	4806      	ldr	r0, [pc, #24]	@ (80070f0 <down_part_DOWN+0x60>)
 80070d8:	f002 fe0e 	bl	8009cf8 <HAL_GPIO_WritePin>

	HAL_TIM_OC_Start_IT(&htim13, TIM_CHANNEL_1);
 80070dc:	2100      	movs	r1, #0
 80070de:	480a      	ldr	r0, [pc, #40]	@ (8007108 <down_part_DOWN+0x78>)
 80070e0:	f004 fc8e 	bl	800ba00 <HAL_TIM_OC_Start_IT>
	//downpart_run=1;
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000c60 	.word	0x20000c60
 80070f0:	40021400 	.word	0x40021400
 80070f4:	200041ac 	.word	0x200041ac
 80070f8:	20001369 	.word	0x20001369
 80070fc:	20003209 	.word	0x20003209
 8007100:	200004f8 	.word	0x200004f8
 8007104:	200041d0 	.word	0x200041d0
 8007108:	20000b34 	.word	0x20000b34

0800710c <down_part_UP_accel>:

//다운스텝은 6000쯤


void down_part_UP_accel(uint16_t step1)  // (스텝,주기)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	80fb      	strh	r3, [r7, #6]
	Finish_flag.downpart_low = FALSE;  //인터록
 8007116:	4b1e      	ldr	r3, [pc, #120]	@ (8007190 <down_part_UP_accel+0x84>)
 8007118:	2200      	movs	r2, #0
 800711a:	721a      	strb	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);   //enable
 800711c:	2200      	movs	r2, #0
 800711e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007122:	481c      	ldr	r0, [pc, #112]	@ (8007194 <down_part_UP_accel+0x88>)
 8007124:	f002 fde8 	bl	8009cf8 <HAL_GPIO_WritePin>
	shaft_accel_flag=1; //0:등속 ,1 가속
 8007128:	4b1b      	ldr	r3, [pc, #108]	@ (8007198 <down_part_UP_accel+0x8c>)
 800712a:	2201      	movs	r2, #1
 800712c:	701a      	strb	r2, [r3, #0]

	for(step_count__=step_count__min ; step_count__<step_count__max; step_count__++) //1초당 100카운트
 800712e:	4b1b      	ldr	r3, [pc, #108]	@ (800719c <down_part_UP_accel+0x90>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1b      	ldr	r2, [pc, #108]	@ (80071a0 <down_part_UP_accel+0x94>)
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	e00b      	b.n	8007150 <down_part_UP_accel+0x44>
	{
		count_arr[step_count__]=step_count__;
 8007138:	4b19      	ldr	r3, [pc, #100]	@ (80071a0 <down_part_UP_accel+0x94>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a18      	ldr	r2, [pc, #96]	@ (80071a0 <down_part_UP_accel+0x94>)
 800713e:	6812      	ldr	r2, [r2, #0]
 8007140:	4918      	ldr	r1, [pc, #96]	@ (80071a4 <down_part_UP_accel+0x98>)
 8007142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(step_count__=step_count__min ; step_count__<step_count__max; step_count__++) //1초당 100카운트
 8007146:	4b16      	ldr	r3, [pc, #88]	@ (80071a0 <down_part_UP_accel+0x94>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3301      	adds	r3, #1
 800714c:	4a14      	ldr	r2, [pc, #80]	@ (80071a0 <down_part_UP_accel+0x94>)
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	4b13      	ldr	r3, [pc, #76]	@ (80071a0 <down_part_UP_accel+0x94>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	4b14      	ldr	r3, [pc, #80]	@ (80071a8 <down_part_UP_accel+0x9c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	429a      	cmp	r2, r3
 800715a:	dbed      	blt.n	8007138 <down_part_UP_accel+0x2c>
	}
	step_count_for_flag__++;
 800715c:	4b13      	ldr	r3, [pc, #76]	@ (80071ac <down_part_UP_accel+0xa0>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	3301      	adds	r3, #1
 8007162:	b2da      	uxtb	r2, r3
 8007164:	4b11      	ldr	r3, [pc, #68]	@ (80071ac <down_part_UP_accel+0xa0>)
 8007166:	701a      	strb	r2, [r3, #0]
	//step_count_for_flag__++;
	shaft_step = step1;
 8007168:	4a11      	ldr	r2, [pc, #68]	@ (80071b0 <down_part_UP_accel+0xa4>)
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);  //방향
 800716e:	2201      	movs	r2, #1
 8007170:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007174:	4807      	ldr	r0, [pc, #28]	@ (8007194 <down_part_UP_accel+0x88>)
 8007176:	f002 fdbf 	bl	8009cf8 <HAL_GPIO_WritePin>
	step_pulse_count_tim13 = 0;  //펄스 기준값 =0
 800717a:	4b0e      	ldr	r3, [pc, #56]	@ (80071b4 <down_part_UP_accel+0xa8>)
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]
	HAL_TIM_OC_Start_IT(&htim13, TIM_CHANNEL_1);
 8007180:	2100      	movs	r1, #0
 8007182:	480d      	ldr	r0, [pc, #52]	@ (80071b8 <down_part_UP_accel+0xac>)
 8007184:	f004 fc3c 	bl	800ba00 <HAL_TIM_OC_Start_IT>
//	downpart_run=1;
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000c60 	.word	0x20000c60
 8007194:	40021400 	.word	0x40021400
 8007198:	20001369 	.word	0x20001369
 800719c:	20000508 	.word	0x20000508
 80071a0:	20000500 	.word	0x20000500
 80071a4:	2000320c 	.word	0x2000320c
 80071a8:	20000504 	.word	0x20000504
 80071ac:	20001368 	.word	0x20001368
 80071b0:	200004f8 	.word	0x200004f8
 80071b4:	200041d0 	.word	0x200041d0
 80071b8:	20000b34 	.word	0x20000b34

080071bc <down_part_DOWN_accel>:

void down_part_DOWN_accel(uint16_t step1)  // (스텝,주기)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	80fb      	strh	r3, [r7, #6]
	Finish_flag.downpart_high = FALSE;  //인터록
 80071c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007240 <down_part_DOWN_accel+0x84>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	71da      	strb	r2, [r3, #7]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);   //enable
 80071cc:	2200      	movs	r2, #0
 80071ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80071d2:	481c      	ldr	r0, [pc, #112]	@ (8007244 <down_part_DOWN_accel+0x88>)
 80071d4:	f002 fd90 	bl	8009cf8 <HAL_GPIO_WritePin>
	shaft_accel_flag=1; //0:등속 ,1 가속
 80071d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007248 <down_part_DOWN_accel+0x8c>)
 80071da:	2201      	movs	r2, #1
 80071dc:	701a      	strb	r2, [r3, #0]
//	step_count_for_flag__=1;
	for(step_count__=step_count__min ; step_count__<step_count__max; step_count__++) //1초당 100카운트
 80071de:	4b1b      	ldr	r3, [pc, #108]	@ (800724c <down_part_DOWN_accel+0x90>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007250 <down_part_DOWN_accel+0x94>)
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	e00b      	b.n	8007200 <down_part_DOWN_accel+0x44>
	{
		count_arr[step_count__]=step_count__;
 80071e8:	4b19      	ldr	r3, [pc, #100]	@ (8007250 <down_part_DOWN_accel+0x94>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a18      	ldr	r2, [pc, #96]	@ (8007250 <down_part_DOWN_accel+0x94>)
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	4918      	ldr	r1, [pc, #96]	@ (8007254 <down_part_DOWN_accel+0x98>)
 80071f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(step_count__=step_count__min ; step_count__<step_count__max; step_count__++) //1초당 100카운트
 80071f6:	4b16      	ldr	r3, [pc, #88]	@ (8007250 <down_part_DOWN_accel+0x94>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3301      	adds	r3, #1
 80071fc:	4a14      	ldr	r2, [pc, #80]	@ (8007250 <down_part_DOWN_accel+0x94>)
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	4b13      	ldr	r3, [pc, #76]	@ (8007250 <down_part_DOWN_accel+0x94>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b14      	ldr	r3, [pc, #80]	@ (8007258 <down_part_DOWN_accel+0x9c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	dbed      	blt.n	80071e8 <down_part_DOWN_accel+0x2c>
	}
	step_count_for_flag__++;
 800720c:	4b13      	ldr	r3, [pc, #76]	@ (800725c <down_part_DOWN_accel+0xa0>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	b2da      	uxtb	r2, r3
 8007214:	4b11      	ldr	r3, [pc, #68]	@ (800725c <down_part_DOWN_accel+0xa0>)
 8007216:	701a      	strb	r2, [r3, #0]
	//step_count_for_flag__++;
	//step_count_for_flag__=1;
	//step_count_for_flag__=2;


	shaft_step = step1;
 8007218:	4a11      	ldr	r2, [pc, #68]	@ (8007260 <down_part_DOWN_accel+0xa4>)
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);  //방향
 800721e:	2200      	movs	r2, #0
 8007220:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007224:	4807      	ldr	r0, [pc, #28]	@ (8007244 <down_part_DOWN_accel+0x88>)
 8007226:	f002 fd67 	bl	8009cf8 <HAL_GPIO_WritePin>
	step_pulse_count_tim13 = 0;  //펄스 기준값 =0
 800722a:	4b0e      	ldr	r3, [pc, #56]	@ (8007264 <down_part_DOWN_accel+0xa8>)
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]
	HAL_TIM_OC_Start_IT(&htim13, TIM_CHANNEL_1);
 8007230:	2100      	movs	r1, #0
 8007232:	480d      	ldr	r0, [pc, #52]	@ (8007268 <down_part_DOWN_accel+0xac>)
 8007234:	f004 fbe4 	bl	800ba00 <HAL_TIM_OC_Start_IT>
//	downpart_run=1;
}
 8007238:	bf00      	nop
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20000c60 	.word	0x20000c60
 8007244:	40021400 	.word	0x40021400
 8007248:	20001369 	.word	0x20001369
 800724c:	20000508 	.word	0x20000508
 8007250:	20000500 	.word	0x20000500
 8007254:	2000320c 	.word	0x2000320c
 8007258:	20000504 	.word	0x20000504
 800725c:	20001368 	.word	0x20001368
 8007260:	200004f8 	.word	0x200004f8
 8007264:	200041d0 	.word	0x200041d0
 8007268:	20000b34 	.word	0x20000b34

0800726c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007272:	2300      	movs	r3, #0
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	4b10      	ldr	r3, [pc, #64]	@ (80072b8 <HAL_MspInit+0x4c>)
 8007278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800727a:	4a0f      	ldr	r2, [pc, #60]	@ (80072b8 <HAL_MspInit+0x4c>)
 800727c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007280:	6453      	str	r3, [r2, #68]	@ 0x44
 8007282:	4b0d      	ldr	r3, [pc, #52]	@ (80072b8 <HAL_MspInit+0x4c>)
 8007284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800728a:	607b      	str	r3, [r7, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800728e:	2300      	movs	r3, #0
 8007290:	603b      	str	r3, [r7, #0]
 8007292:	4b09      	ldr	r3, [pc, #36]	@ (80072b8 <HAL_MspInit+0x4c>)
 8007294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007296:	4a08      	ldr	r2, [pc, #32]	@ (80072b8 <HAL_MspInit+0x4c>)
 8007298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800729c:	6413      	str	r3, [r2, #64]	@ 0x40
 800729e:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <HAL_MspInit+0x4c>)
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40023800 	.word	0x40023800

080072bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	@ 0x28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072c4:	f107 0314 	add.w	r3, r7, #20
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	605a      	str	r2, [r3, #4]
 80072ce:	609a      	str	r2, [r3, #8]
 80072d0:	60da      	str	r2, [r3, #12]
 80072d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a33      	ldr	r2, [pc, #204]	@ (80073a8 <HAL_ADC_MspInit+0xec>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d160      	bne.n	80073a0 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80072de:	2300      	movs	r3, #0
 80072e0:	613b      	str	r3, [r7, #16]
 80072e2:	4b32      	ldr	r3, [pc, #200]	@ (80073ac <HAL_ADC_MspInit+0xf0>)
 80072e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e6:	4a31      	ldr	r2, [pc, #196]	@ (80073ac <HAL_ADC_MspInit+0xf0>)
 80072e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80072ee:	4b2f      	ldr	r3, [pc, #188]	@ (80073ac <HAL_ADC_MspInit+0xf0>)
 80072f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	4b2b      	ldr	r3, [pc, #172]	@ (80073ac <HAL_ADC_MspInit+0xf0>)
 8007300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007302:	4a2a      	ldr	r2, [pc, #168]	@ (80073ac <HAL_ADC_MspInit+0xf0>)
 8007304:	f043 0304 	orr.w	r3, r3, #4
 8007308:	6313      	str	r3, [r2, #48]	@ 0x30
 800730a:	4b28      	ldr	r3, [pc, #160]	@ (80073ac <HAL_ADC_MspInit+0xf0>)
 800730c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007316:	2308      	movs	r3, #8
 8007318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800731a:	2303      	movs	r3, #3
 800731c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007322:	f107 0314 	add.w	r3, r7, #20
 8007326:	4619      	mov	r1, r3
 8007328:	4821      	ldr	r0, [pc, #132]	@ (80073b0 <HAL_ADC_MspInit+0xf4>)
 800732a:	f002 fb21 	bl	8009970 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 800732e:	4b21      	ldr	r3, [pc, #132]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 8007330:	4a21      	ldr	r2, [pc, #132]	@ (80073b8 <HAL_ADC_MspInit+0xfc>)
 8007332:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8007334:	4b1f      	ldr	r3, [pc, #124]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 8007336:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800733a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800733c:	4b1d      	ldr	r3, [pc, #116]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 800733e:	2200      	movs	r2, #0
 8007340:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8007342:	4b1c      	ldr	r3, [pc, #112]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 8007344:	2200      	movs	r2, #0
 8007346:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8007348:	4b1a      	ldr	r3, [pc, #104]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 800734a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800734e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007350:	4b18      	ldr	r3, [pc, #96]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 8007352:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007356:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007358:	4b16      	ldr	r3, [pc, #88]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 800735a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800735e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8007360:	4b14      	ldr	r3, [pc, #80]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 8007362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007366:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8007368:	4b12      	ldr	r3, [pc, #72]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 800736a:	2200      	movs	r2, #0
 800736c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800736e:	4b11      	ldr	r3, [pc, #68]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 8007370:	2200      	movs	r2, #0
 8007372:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8007374:	480f      	ldr	r0, [pc, #60]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 8007376:	f001 fef9 	bl	800916c <HAL_DMA_Init>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8007380:	f7fc fec6 	bl	8004110 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a0b      	ldr	r2, [pc, #44]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 8007388:	639a      	str	r2, [r3, #56]	@ 0x38
 800738a:	4a0a      	ldr	r2, [pc, #40]	@ (80073b4 <HAL_ADC_MspInit+0xf8>)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 14, 0);
 8007390:	2200      	movs	r2, #0
 8007392:	210e      	movs	r1, #14
 8007394:	2012      	movs	r0, #18
 8007396:	f001 feb2 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800739a:	2012      	movs	r0, #18
 800739c:	f001 fecb 	bl	8009136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80073a0:	bf00      	nop
 80073a2:	3728      	adds	r7, #40	@ 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40012200 	.word	0x40012200
 80073ac:	40023800 	.word	0x40023800
 80073b0:	40020800 	.word	0x40020800
 80073b4:	20000768 	.word	0x20000768
 80073b8:	40026428 	.word	0x40026428

080073bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	@ 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a19      	ldr	r2, [pc, #100]	@ (8007440 <HAL_I2C_MspInit+0x84>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d12b      	bne.n	8007436 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	4b18      	ldr	r3, [pc, #96]	@ (8007444 <HAL_I2C_MspInit+0x88>)
 80073e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e6:	4a17      	ldr	r2, [pc, #92]	@ (8007444 <HAL_I2C_MspInit+0x88>)
 80073e8:	f043 0320 	orr.w	r3, r3, #32
 80073ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80073ee:	4b15      	ldr	r3, [pc, #84]	@ (8007444 <HAL_I2C_MspInit+0x88>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80073fa:	2303      	movs	r3, #3
 80073fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073fe:	2312      	movs	r3, #18
 8007400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007406:	2303      	movs	r3, #3
 8007408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800740a:	2304      	movs	r3, #4
 800740c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800740e:	f107 0314 	add.w	r3, r7, #20
 8007412:	4619      	mov	r1, r3
 8007414:	480c      	ldr	r0, [pc, #48]	@ (8007448 <HAL_I2C_MspInit+0x8c>)
 8007416:	f002 faab 	bl	8009970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	4b09      	ldr	r3, [pc, #36]	@ (8007444 <HAL_I2C_MspInit+0x88>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	4a08      	ldr	r2, [pc, #32]	@ (8007444 <HAL_I2C_MspInit+0x88>)
 8007424:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007428:	6413      	str	r3, [r2, #64]	@ 0x40
 800742a:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <HAL_I2C_MspInit+0x88>)
 800742c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007436:	bf00      	nop
 8007438:	3728      	adds	r7, #40	@ 0x28
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	40005800 	.word	0x40005800
 8007444:	40023800 	.word	0x40023800
 8007448:	40021400 	.word	0x40021400

0800744c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08c      	sub	sp, #48	@ 0x30
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007454:	f107 031c 	add.w	r3, r7, #28
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	605a      	str	r2, [r3, #4]
 800745e:	609a      	str	r2, [r3, #8]
 8007460:	60da      	str	r2, [r3, #12]
 8007462:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800746c:	d14b      	bne.n	8007506 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	4b40      	ldr	r3, [pc, #256]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	4a3f      	ldr	r2, [pc, #252]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 8007478:	f043 0301 	orr.w	r3, r3, #1
 800747c:	6413      	str	r3, [r2, #64]	@ 0x40
 800747e:	4b3d      	ldr	r3, [pc, #244]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	4b39      	ldr	r3, [pc, #228]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007492:	4a38      	ldr	r2, [pc, #224]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 8007494:	f043 0301 	orr.w	r3, r3, #1
 8007498:	6313      	str	r3, [r2, #48]	@ 0x30
 800749a:	4b36      	ldr	r3, [pc, #216]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	4b32      	ldr	r3, [pc, #200]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 80074ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ae:	4a31      	ldr	r2, [pc, #196]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80074b6:	4b2f      	ldr	r3, [pc, #188]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80074c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074c8:	2302      	movs	r3, #2
 80074ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074d0:	2303      	movs	r3, #3
 80074d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80074d4:	2301      	movs	r3, #1
 80074d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074d8:	f107 031c 	add.w	r3, r7, #28
 80074dc:	4619      	mov	r1, r3
 80074de:	4826      	ldr	r0, [pc, #152]	@ (8007578 <HAL_TIM_Encoder_MspInit+0x12c>)
 80074e0:	f002 fa46 	bl	8009970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80074e4:	2308      	movs	r3, #8
 80074e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e8:	2302      	movs	r3, #2
 80074ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ec:	2300      	movs	r3, #0
 80074ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f0:	2303      	movs	r3, #3
 80074f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80074f4:	2301      	movs	r3, #1
 80074f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074f8:	f107 031c 	add.w	r3, r7, #28
 80074fc:	4619      	mov	r1, r3
 80074fe:	481f      	ldr	r0, [pc, #124]	@ (800757c <HAL_TIM_Encoder_MspInit+0x130>)
 8007500:	f002 fa36 	bl	8009970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007504:	e031      	b.n	800756a <HAL_TIM_Encoder_MspInit+0x11e>
  else if(htim_encoder->Instance==TIM4)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a1d      	ldr	r2, [pc, #116]	@ (8007580 <HAL_TIM_Encoder_MspInit+0x134>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d12c      	bne.n	800756a <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	4b17      	ldr	r3, [pc, #92]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 8007516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007518:	4a16      	ldr	r2, [pc, #88]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 800751a:	f043 0304 	orr.w	r3, r3, #4
 800751e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007520:	4b14      	ldr	r3, [pc, #80]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 8007522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800752c:	2300      	movs	r3, #0
 800752e:	60bb      	str	r3, [r7, #8]
 8007530:	4b10      	ldr	r3, [pc, #64]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 8007532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007534:	4a0f      	ldr	r2, [pc, #60]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 8007536:	f043 0308 	orr.w	r3, r3, #8
 800753a:	6313      	str	r3, [r2, #48]	@ 0x30
 800753c:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <HAL_TIM_Encoder_MspInit+0x128>)
 800753e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007548:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800754c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754e:	2302      	movs	r3, #2
 8007550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007552:	2300      	movs	r3, #0
 8007554:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007556:	2303      	movs	r3, #3
 8007558:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800755a:	2302      	movs	r3, #2
 800755c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800755e:	f107 031c 	add.w	r3, r7, #28
 8007562:	4619      	mov	r1, r3
 8007564:	4807      	ldr	r0, [pc, #28]	@ (8007584 <HAL_TIM_Encoder_MspInit+0x138>)
 8007566:	f002 fa03 	bl	8009970 <HAL_GPIO_Init>
}
 800756a:	bf00      	nop
 800756c:	3730      	adds	r7, #48	@ 0x30
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40023800 	.word	0x40023800
 8007578:	40020000 	.word	0x40020000
 800757c:	40020400 	.word	0x40020400
 8007580:	40000800 	.word	0x40000800
 8007584:	40020c00 	.word	0x40020c00

08007588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08e      	sub	sp, #56	@ 0x38
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a9e      	ldr	r2, [pc, #632]	@ (8007810 <HAL_TIM_Base_MspInit+0x288>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800759a:	2300      	movs	r3, #0
 800759c:	637b      	str	r3, [r7, #52]	@ 0x34
 800759e:	4b9d      	ldr	r3, [pc, #628]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a2:	4a9c      	ldr	r2, [pc, #624]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80075a4:	f043 0302 	orr.w	r3, r3, #2
 80075a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80075aa:	4b9a      	ldr	r3, [pc, #616]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80075b6:	e126      	b.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
  else if(htim_base->Instance==TIM5)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a96      	ldr	r2, [pc, #600]	@ (8007818 <HAL_TIM_Base_MspInit+0x290>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d116      	bne.n	80075f0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80075c2:	2300      	movs	r3, #0
 80075c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80075c6:	4b93      	ldr	r3, [pc, #588]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80075c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ca:	4a92      	ldr	r2, [pc, #584]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80075cc:	f043 0308 	orr.w	r3, r3, #8
 80075d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80075d2:	4b90      	ldr	r3, [pc, #576]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	633b      	str	r3, [r7, #48]	@ 0x30
 80075dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80075de:	2200      	movs	r2, #0
 80075e0:	2100      	movs	r1, #0
 80075e2:	2032      	movs	r0, #50	@ 0x32
 80075e4:	f001 fd8b 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80075e8:	2032      	movs	r0, #50	@ 0x32
 80075ea:	f001 fda4 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 80075ee:	e10a      	b.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
  else if(htim_base->Instance==TIM6)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a89      	ldr	r2, [pc, #548]	@ (800781c <HAL_TIM_Base_MspInit+0x294>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d116      	bne.n	8007628 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80075fa:	2300      	movs	r3, #0
 80075fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075fe:	4b85      	ldr	r3, [pc, #532]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007602:	4a84      	ldr	r2, [pc, #528]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007604:	f043 0310 	orr.w	r3, r3, #16
 8007608:	6413      	str	r3, [r2, #64]	@ 0x40
 800760a:	4b82      	ldr	r3, [pc, #520]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007616:	2200      	movs	r2, #0
 8007618:	2100      	movs	r1, #0
 800761a:	2036      	movs	r0, #54	@ 0x36
 800761c:	f001 fd6f 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007620:	2036      	movs	r0, #54	@ 0x36
 8007622:	f001 fd88 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 8007626:	e0ee      	b.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
  else if(htim_base->Instance==TIM7)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a7c      	ldr	r2, [pc, #496]	@ (8007820 <HAL_TIM_Base_MspInit+0x298>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d116      	bne.n	8007660 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007632:	2300      	movs	r3, #0
 8007634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007636:	4b77      	ldr	r3, [pc, #476]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763a:	4a76      	ldr	r2, [pc, #472]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 800763c:	f043 0320 	orr.w	r3, r3, #32
 8007640:	6413      	str	r3, [r2, #64]	@ 0x40
 8007642:	4b74      	ldr	r3, [pc, #464]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800764c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800764e:	2200      	movs	r2, #0
 8007650:	2100      	movs	r1, #0
 8007652:	2037      	movs	r0, #55	@ 0x37
 8007654:	f001 fd53 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007658:	2037      	movs	r0, #55	@ 0x37
 800765a:	f001 fd6c 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 800765e:	e0d2      	b.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
  else if(htim_base->Instance==TIM8)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a6f      	ldr	r2, [pc, #444]	@ (8007824 <HAL_TIM_Base_MspInit+0x29c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d126      	bne.n	80076b8 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24
 800766e:	4b69      	ldr	r3, [pc, #420]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007672:	4a68      	ldr	r2, [pc, #416]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007674:	f043 0302 	orr.w	r3, r3, #2
 8007678:	6453      	str	r3, [r2, #68]	@ 0x44
 800767a:	4b66      	ldr	r3, [pc, #408]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 800767c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8007686:	2200      	movs	r2, #0
 8007688:	2100      	movs	r1, #0
 800768a:	202b      	movs	r0, #43	@ 0x2b
 800768c:	f001 fd37 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8007690:	202b      	movs	r0, #43	@ 0x2b
 8007692:	f001 fd50 	bl	8009136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007696:	2200      	movs	r2, #0
 8007698:	2100      	movs	r1, #0
 800769a:	202c      	movs	r0, #44	@ 0x2c
 800769c:	f001 fd2f 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80076a0:	202c      	movs	r0, #44	@ 0x2c
 80076a2:	f001 fd48 	bl	8009136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80076a6:	2200      	movs	r2, #0
 80076a8:	2100      	movs	r1, #0
 80076aa:	202d      	movs	r0, #45	@ 0x2d
 80076ac:	f001 fd27 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80076b0:	202d      	movs	r0, #45	@ 0x2d
 80076b2:	f001 fd40 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 80076b6:	e0a6      	b.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
  else if(htim_base->Instance==TIM9)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a5a      	ldr	r2, [pc, #360]	@ (8007828 <HAL_TIM_Base_MspInit+0x2a0>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d116      	bne.n	80076f0 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	623b      	str	r3, [r7, #32]
 80076c6:	4b53      	ldr	r3, [pc, #332]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80076c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ca:	4a52      	ldr	r2, [pc, #328]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80076cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80076d2:	4b50      	ldr	r3, [pc, #320]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80076d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076da:	623b      	str	r3, [r7, #32]
 80076dc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	2018      	movs	r0, #24
 80076e4:	f001 fd0b 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80076e8:	2018      	movs	r0, #24
 80076ea:	f001 fd24 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 80076ee:	e08a      	b.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
  else if(htim_base->Instance==TIM10)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a4d      	ldr	r2, [pc, #308]	@ (800782c <HAL_TIM_Base_MspInit+0x2a4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d116      	bne.n	8007728 <HAL_TIM_Base_MspInit+0x1a0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80076fa:	2300      	movs	r3, #0
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	4b45      	ldr	r3, [pc, #276]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007702:	4a44      	ldr	r2, [pc, #272]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007708:	6453      	str	r3, [r2, #68]	@ 0x44
 800770a:	4b42      	ldr	r3, [pc, #264]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 800770c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800770e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	2019      	movs	r0, #25
 800771c:	f001 fcef 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007720:	2019      	movs	r0, #25
 8007722:	f001 fd08 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 8007726:	e06e      	b.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
  else if(htim_base->Instance==TIM11)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a40      	ldr	r2, [pc, #256]	@ (8007830 <HAL_TIM_Base_MspInit+0x2a8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d116      	bne.n	8007760 <HAL_TIM_Base_MspInit+0x1d8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007732:	2300      	movs	r3, #0
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	4b37      	ldr	r3, [pc, #220]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800773a:	4a36      	ldr	r2, [pc, #216]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 800773c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007740:	6453      	str	r3, [r2, #68]	@ 0x44
 8007742:	4b34      	ldr	r3, [pc, #208]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007746:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800774e:	2200      	movs	r2, #0
 8007750:	2100      	movs	r1, #0
 8007752:	201a      	movs	r0, #26
 8007754:	f001 fcd3 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007758:	201a      	movs	r0, #26
 800775a:	f001 fcec 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 800775e:	e052      	b.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
  else if(htim_base->Instance==TIM12)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a33      	ldr	r2, [pc, #204]	@ (8007834 <HAL_TIM_Base_MspInit+0x2ac>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d116      	bne.n	8007798 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800776a:	2300      	movs	r3, #0
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	4b29      	ldr	r3, [pc, #164]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007772:	4a28      	ldr	r2, [pc, #160]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 8007774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007778:	6413      	str	r3, [r2, #64]	@ 0x40
 800777a:	4b26      	ldr	r3, [pc, #152]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8007786:	2200      	movs	r2, #0
 8007788:	2100      	movs	r1, #0
 800778a:	202b      	movs	r0, #43	@ 0x2b
 800778c:	f001 fcb7 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8007790:	202b      	movs	r0, #43	@ 0x2b
 8007792:	f001 fcd0 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 8007796:	e036      	b.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
  else if(htim_base->Instance==TIM13)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a26      	ldr	r2, [pc, #152]	@ (8007838 <HAL_TIM_Base_MspInit+0x2b0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d116      	bne.n	80077d0 <HAL_TIM_Base_MspInit+0x248>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80077a2:	2300      	movs	r3, #0
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80077a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80077ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80077b2:	4b18      	ldr	r3, [pc, #96]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80077be:	2200      	movs	r2, #0
 80077c0:	2100      	movs	r1, #0
 80077c2:	202c      	movs	r0, #44	@ 0x2c
 80077c4:	f001 fc9b 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80077c8:	202c      	movs	r0, #44	@ 0x2c
 80077ca:	f001 fcb4 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 80077ce:	e01a      	b.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
  else if(htim_base->Instance==TIM14)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a19      	ldr	r2, [pc, #100]	@ (800783c <HAL_TIM_Base_MspInit+0x2b4>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d115      	bne.n	8007806 <HAL_TIM_Base_MspInit+0x27e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80077e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80077e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80077ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007814 <HAL_TIM_Base_MspInit+0x28c>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80077f6:	2200      	movs	r2, #0
 80077f8:	2100      	movs	r1, #0
 80077fa:	202d      	movs	r0, #45	@ 0x2d
 80077fc:	f001 fc7f 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8007800:	202d      	movs	r0, #45	@ 0x2d
 8007802:	f001 fc98 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 8007806:	bf00      	nop
 8007808:	3738      	adds	r7, #56	@ 0x38
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40000400 	.word	0x40000400
 8007814:	40023800 	.word	0x40023800
 8007818:	40000c00 	.word	0x40000c00
 800781c:	40001000 	.word	0x40001000
 8007820:	40001400 	.word	0x40001400
 8007824:	40010400 	.word	0x40010400
 8007828:	40014000 	.word	0x40014000
 800782c:	40014400 	.word	0x40014400
 8007830:	40014800 	.word	0x40014800
 8007834:	40001800 	.word	0x40001800
 8007838:	40001c00 	.word	0x40001c00
 800783c:	40002000 	.word	0x40002000

08007840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08c      	sub	sp, #48	@ 0x30
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007848:	f107 031c 	add.w	r3, r7, #28
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	605a      	str	r2, [r3, #4]
 8007852:	609a      	str	r2, [r3, #8]
 8007854:	60da      	str	r2, [r3, #12]
 8007856:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a45      	ldr	r2, [pc, #276]	@ (8007974 <HAL_TIM_MspPostInit+0x134>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d13c      	bne.n	80078dc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007862:	2300      	movs	r3, #0
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	4b44      	ldr	r3, [pc, #272]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786a:	4a43      	ldr	r2, [pc, #268]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 800786c:	f043 0301 	orr.w	r3, r3, #1
 8007870:	6313      	str	r3, [r2, #48]	@ 0x30
 8007872:	4b41      	ldr	r3, [pc, #260]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 8007874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	61bb      	str	r3, [r7, #24]
 800787c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	4b3d      	ldr	r3, [pc, #244]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007886:	4a3c      	ldr	r2, [pc, #240]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 8007888:	f043 0302 	orr.w	r3, r3, #2
 800788c:	6313      	str	r3, [r2, #48]	@ 0x30
 800788e:	4b3a      	ldr	r3, [pc, #232]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800789a:	2340      	movs	r3, #64	@ 0x40
 800789c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800789e:	2302      	movs	r3, #2
 80078a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078a6:	2303      	movs	r3, #3
 80078a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80078aa:	2302      	movs	r3, #2
 80078ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078ae:	f107 031c 	add.w	r3, r7, #28
 80078b2:	4619      	mov	r1, r3
 80078b4:	4831      	ldr	r0, [pc, #196]	@ (800797c <HAL_TIM_MspPostInit+0x13c>)
 80078b6:	f002 f85b 	bl	8009970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80078ba:	2322      	movs	r3, #34	@ 0x22
 80078bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078be:	2302      	movs	r3, #2
 80078c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078c6:	2303      	movs	r3, #3
 80078c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80078ca:	2302      	movs	r3, #2
 80078cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078ce:	f107 031c 	add.w	r3, r7, #28
 80078d2:	4619      	mov	r1, r3
 80078d4:	482a      	ldr	r0, [pc, #168]	@ (8007980 <HAL_TIM_MspPostInit+0x140>)
 80078d6:	f002 f84b 	bl	8009970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80078da:	e047      	b.n	800796c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM11)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a28      	ldr	r2, [pc, #160]	@ (8007984 <HAL_TIM_MspPostInit+0x144>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d11e      	bne.n	8007924 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80078e6:	2300      	movs	r3, #0
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	4b23      	ldr	r3, [pc, #140]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 80078ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ee:	4a22      	ldr	r2, [pc, #136]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 80078f0:	f043 0320 	orr.w	r3, r3, #32
 80078f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80078f6:	4b20      	ldr	r3, [pc, #128]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 80078f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	613b      	str	r3, [r7, #16]
 8007900:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007902:	2380      	movs	r3, #128	@ 0x80
 8007904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007906:	2302      	movs	r3, #2
 8007908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790a:	2300      	movs	r3, #0
 800790c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800790e:	2303      	movs	r3, #3
 8007910:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007912:	2303      	movs	r3, #3
 8007914:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007916:	f107 031c 	add.w	r3, r7, #28
 800791a:	4619      	mov	r1, r3
 800791c:	481a      	ldr	r0, [pc, #104]	@ (8007988 <HAL_TIM_MspPostInit+0x148>)
 800791e:	f002 f827 	bl	8009970 <HAL_GPIO_Init>
}
 8007922:	e023      	b.n	800796c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM13)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a18      	ldr	r2, [pc, #96]	@ (800798c <HAL_TIM_MspPostInit+0x14c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d11e      	bne.n	800796c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	4b11      	ldr	r3, [pc, #68]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007936:	4a10      	ldr	r2, [pc, #64]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 8007938:	f043 0320 	orr.w	r3, r3, #32
 800793c:	6313      	str	r3, [r2, #48]	@ 0x30
 800793e:	4b0e      	ldr	r3, [pc, #56]	@ (8007978 <HAL_TIM_MspPostInit+0x138>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800794a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800794e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007950:	2302      	movs	r3, #2
 8007952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007954:	2300      	movs	r3, #0
 8007956:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007958:	2303      	movs	r3, #3
 800795a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800795c:	2309      	movs	r3, #9
 800795e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007960:	f107 031c 	add.w	r3, r7, #28
 8007964:	4619      	mov	r1, r3
 8007966:	4808      	ldr	r0, [pc, #32]	@ (8007988 <HAL_TIM_MspPostInit+0x148>)
 8007968:	f002 f802 	bl	8009970 <HAL_GPIO_Init>
}
 800796c:	bf00      	nop
 800796e:	3730      	adds	r7, #48	@ 0x30
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40000400 	.word	0x40000400
 8007978:	40023800 	.word	0x40023800
 800797c:	40020000 	.word	0x40020000
 8007980:	40020400 	.word	0x40020400
 8007984:	40014800 	.word	0x40014800
 8007988:	40021400 	.word	0x40021400
 800798c:	40001c00 	.word	0x40001c00

08007990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08c      	sub	sp, #48	@ 0x30
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007998:	f107 031c 	add.w	r3, r7, #28
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	605a      	str	r2, [r3, #4]
 80079a2:	609a      	str	r2, [r3, #8]
 80079a4:	60da      	str	r2, [r3, #12]
 80079a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a3b      	ldr	r2, [pc, #236]	@ (8007a9c <HAL_UART_MspInit+0x10c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d135      	bne.n	8007a1e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80079b2:	2300      	movs	r3, #0
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	4b3a      	ldr	r3, [pc, #232]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ba:	4a39      	ldr	r2, [pc, #228]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 80079bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80079c2:	4b37      	ldr	r3, [pc, #220]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 80079c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079ca:	61bb      	str	r3, [r7, #24]
 80079cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]
 80079d2:	4b33      	ldr	r3, [pc, #204]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 80079d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d6:	4a32      	ldr	r2, [pc, #200]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 80079d8:	f043 0304 	orr.w	r3, r3, #4
 80079dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80079de:	4b30      	ldr	r3, [pc, #192]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 80079e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80079ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80079ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f0:	2302      	movs	r3, #2
 80079f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f4:	2300      	movs	r3, #0
 80079f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079f8:	2303      	movs	r3, #3
 80079fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80079fc:	2308      	movs	r3, #8
 80079fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a00:	f107 031c 	add.w	r3, r7, #28
 8007a04:	4619      	mov	r1, r3
 8007a06:	4827      	ldr	r0, [pc, #156]	@ (8007aa4 <HAL_UART_MspInit+0x114>)
 8007a08:	f001 ffb2 	bl	8009970 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 15, 0);
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	210f      	movs	r1, #15
 8007a10:	2034      	movs	r0, #52	@ 0x34
 8007a12:	f001 fb74 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007a16:	2034      	movs	r0, #52	@ 0x34
 8007a18:	f001 fb8d 	bl	8009136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007a1c:	e039      	b.n	8007a92 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a21      	ldr	r2, [pc, #132]	@ (8007aa8 <HAL_UART_MspInit+0x118>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d134      	bne.n	8007a92 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]
 8007a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a30:	4a1b      	ldr	r2, [pc, #108]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 8007a32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a38:	4b19      	ldr	r3, [pc, #100]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	4b15      	ldr	r3, [pc, #84]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4c:	4a14      	ldr	r2, [pc, #80]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 8007a4e:	f043 0308 	orr.w	r3, r3, #8
 8007a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a54:	4b12      	ldr	r3, [pc, #72]	@ (8007aa0 <HAL_UART_MspInit+0x110>)
 8007a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007a60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a66:	2302      	movs	r3, #2
 8007a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007a72:	2307      	movs	r3, #7
 8007a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a76:	f107 031c 	add.w	r3, r7, #28
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	480b      	ldr	r0, [pc, #44]	@ (8007aac <HAL_UART_MspInit+0x11c>)
 8007a7e:	f001 ff77 	bl	8009970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8007a82:	2200      	movs	r2, #0
 8007a84:	210f      	movs	r1, #15
 8007a86:	2027      	movs	r0, #39	@ 0x27
 8007a88:	f001 fb39 	bl	80090fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007a8c:	2027      	movs	r0, #39	@ 0x27
 8007a8e:	f001 fb52 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 8007a92:	bf00      	nop
 8007a94:	3730      	adds	r7, #48	@ 0x30
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	40004c00 	.word	0x40004c00
 8007aa0:	40023800 	.word	0x40023800
 8007aa4:	40020800 	.word	0x40020800
 8007aa8:	40004800 	.word	0x40004800
 8007aac:	40020c00 	.word	0x40020c00

08007ab0 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim13;
extern TIM_HandleTypeDef htim14;
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart3;
/* USER CODE BEGIN EV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a07      	ldr	r2, [pc, #28]	@ (8007adc <HAL_UART_RxCpltCallback+0x2c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_RxCpltCallback+0x16>

		UART3_RX_PC_to_STM32(); // UART3: STM32 <-> PC
 8007ac2:	f7fb feef 	bl	80038a4 <UART3_RX_PC_to_STM32>
	}

	if (huart->Instance == UART4) {
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a05      	ldr	r2, [pc, #20]	@ (8007ae0 <HAL_UART_RxCpltCallback+0x30>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d101      	bne.n	8007ad4 <HAL_UART_RxCpltCallback+0x24>

		UART4_RX_ESP_to_STM32();  // UART4: esp <-> stm32
 8007ad0:	f7fc f994 	bl	8003dfc <UART4_RX_ESP_to_STM32>
	}
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	40004800 	.word	0x40004800
 8007ae0:	40004c00 	.word	0x40004c00
 8007ae4:	00000000 	.word	0x00000000

08007ae8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]

	if (hadc->Instance == hadc3.Instance)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	4b30      	ldr	r3, [pc, #192]	@ (8007bb8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d146      	bne.n	8007b8a <HAL_ADC_ConvCpltCallback+0xa2>

	{

		//GPIOB->ODR ^= 1 << 0;  //ok

		ADC3_IN14 = ADC3_value[2];
 8007afc:	4b2f      	ldr	r3, [pc, #188]	@ (8007bbc <HAL_ADC_ConvCpltCallback+0xd4>)
 8007afe:	889a      	ldrh	r2, [r3, #4]
 8007b00:	4b2f      	ldr	r3, [pc, #188]	@ (8007bc0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8007b02:	801a      	strh	r2, [r3, #0]

		battery_V = 16.059 * ADC3_IN14 / 67.8 * 27.667 + 2.2;
 8007b04:	4b2e      	ldr	r3, [pc, #184]	@ (8007bc0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7f8 fd2b 	bl	8000564 <__aeabi_i2d>
 8007b0e:	a322      	add	r3, pc, #136	@ (adr r3, 8007b98 <HAL_ADC_ConvCpltCallback+0xb0>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f7f8 fd90 	bl	8000638 <__aeabi_dmul>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4619      	mov	r1, r3
 8007b20:	a31f      	add	r3, pc, #124	@ (adr r3, 8007ba0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 feb1 	bl	800088c <__aeabi_ddiv>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4619      	mov	r1, r3
 8007b32:	a31d      	add	r3, pc, #116	@ (adr r3, 8007ba8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	f7f8 fd7e 	bl	8000638 <__aeabi_dmul>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4610      	mov	r0, r2
 8007b42:	4619      	mov	r1, r3
 8007b44:	a31a      	add	r3, pc, #104	@ (adr r3, 8007bb0 <HAL_ADC_ConvCpltCallback+0xc8>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f7f8 fbbf 	bl	80002cc <__adddf3>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4610      	mov	r0, r2
 8007b54:	4619      	mov	r1, r3
 8007b56:	f7f9 f867 	bl	8000c28 <__aeabi_d2f>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	4a19      	ldr	r2, [pc, #100]	@ (8007bc4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8007b5e:	6013      	str	r3, [r2, #0]

		battery_V_sum = battery_V + battery_V_sum;
 8007b60:	4b18      	ldr	r3, [pc, #96]	@ (8007bc4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8007b62:	ed93 7a00 	vldr	s14, [r3]
 8007b66:	4b18      	ldr	r3, [pc, #96]	@ (8007bc8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8007b68:	edd3 7a00 	vldr	s15, [r3]
 8007b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b70:	4b15      	ldr	r3, [pc, #84]	@ (8007bc8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8007b72:	edc3 7a00 	vstr	s15, [r3]

		k++;
 8007b76:	4b15      	ldr	r3, [pc, #84]	@ (8007bcc <HAL_ADC_ConvCpltCallback+0xe4>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	4b13      	ldr	r3, [pc, #76]	@ (8007bcc <HAL_ADC_ConvCpltCallback+0xe4>)
 8007b80:	701a      	strb	r2, [r3, #0]

			k = 0;
			battery_V_sum = 0;
		}

		ADC3_IN12 = ADC3_value[0];
 8007b82:	4b0e      	ldr	r3, [pc, #56]	@ (8007bbc <HAL_ADC_ConvCpltCallback+0xd4>)
 8007b84:	881a      	ldrh	r2, [r3, #0]
 8007b86:	4b12      	ldr	r3, [pc, #72]	@ (8007bd0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8007b88:	801a      	strh	r2, [r3, #0]
		 */

		//printf("%5d %5d %5d \n\r",ADC3_value[0],ADC3_value[1],ADC3_value[2]);
	}

}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	f3af 8000 	nop.w
 8007b98:	9fbe76c9 	.word	0x9fbe76c9
 8007b9c:	40300f1a 	.word	0x40300f1a
 8007ba0:	33333333 	.word	0x33333333
 8007ba4:	4050f333 	.word	0x4050f333
 8007ba8:	83126e98 	.word	0x83126e98
 8007bac:	403baac0 	.word	0x403baac0
 8007bb0:	9999999a 	.word	0x9999999a
 8007bb4:	40019999 	.word	0x40019999
 8007bb8:	20000720 	.word	0x20000720
 8007bbc:	20000718 	.word	0x20000718
 8007bc0:	200041c2 	.word	0x200041c2
 8007bc4:	200041b8 	.word	0x200041b8
 8007bc8:	200041bc 	.word	0x200041bc
 8007bcc:	200041b4 	.word	0x200041b4
 8007bd0:	200041c0 	.word	0x200041c0

08007bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8007bd8:	bf00      	nop
 8007bda:	e7fd      	b.n	8007bd8 <NMI_Handler+0x4>

08007bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <HardFault_Handler+0x4>

08007be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007be4:	b480      	push	{r7}
 8007be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007be8:	bf00      	nop
 8007bea:	e7fd      	b.n	8007be8 <MemManage_Handler+0x4>

08007bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007bf0:	bf00      	nop
 8007bf2:	e7fd      	b.n	8007bf0 <BusFault_Handler+0x4>

08007bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007bf8:	bf00      	nop
 8007bfa:	e7fd      	b.n	8007bf8 <UsageFault_Handler+0x4>

08007bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c00:	bf00      	nop
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c0e:	bf00      	nop
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c1c:	bf00      	nop
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c2a:	f000 fc0d 	bl	8008448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c2e:	bf00      	nop
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BALL_MID_Pin);
 8007c36:	2002      	movs	r0, #2
 8007c38:	f002 f878 	bl	8009d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007c3c:	bf00      	nop
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_LIMIT_SW_Pin);
 8007c44:	2008      	movs	r0, #8
 8007c46:	f002 f871 	bl	8009d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007c4a:	bf00      	nop
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8007c54:	4802      	ldr	r0, [pc, #8]	@ (8007c60 <ADC_IRQHandler+0x10>)
 8007c56:	f000 fc7e 	bl	8008556 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007c5a:	bf00      	nop
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000720 	.word	0x20000720

08007c64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8007c68:	2040      	movs	r0, #64	@ 0x40
 8007c6a:	f002 f85f 	bl	8009d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007c6e:	bf00      	nop
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8007c78:	4802      	ldr	r0, [pc, #8]	@ (8007c84 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8007c7a:	f004 fbf2 	bl	800c462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8007c7e:	bf00      	nop
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000a14 	.word	0x20000a14

08007c88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8007c8c:	4802      	ldr	r0, [pc, #8]	@ (8007c98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007c8e:	f004 fbe8 	bl	800c462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007c92:	bf00      	nop
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20000a5c 	.word	0x20000a5c

08007c9c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8007ca0:	4802      	ldr	r0, [pc, #8]	@ (8007cac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8007ca2:	f004 fbde 	bl	800c462 <HAL_TIM_IRQHandler>
	//	tim11_flag = 1;
	//step_pulse_count_tim11++;
//	GPIOB->ODR ^= 1 << 0;
//	z_axis_step_motor(ball_screw_step, ball_screw_pulse_cycle); //(?��?��,주기) ?��?��:400?�� ?��바�??
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8007ca6:	bf00      	nop
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000aa4 	.word	0x20000aa4

08007cb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007cb4:	4802      	ldr	r0, [pc, #8]	@ (8007cc0 <USART3_IRQHandler+0x10>)
 8007cb6:	f005 fbc7 	bl	800d448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007cba:	bf00      	nop
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000c0c 	.word	0x20000c0c

08007cc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8007cc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007ccc:	f002 f82e 	bl	8009d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007cd0:	bf00      	nop
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007cd8:	4803      	ldr	r0, [pc, #12]	@ (8007ce8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8007cda:	f004 fbc2 	bl	800c462 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8007cde:	4803      	ldr	r0, [pc, #12]	@ (8007cec <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8007ce0:	f004 fbbf 	bl	800c462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8007ce4:	bf00      	nop
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	200009cc 	.word	0x200009cc
 8007cec:	20000aec 	.word	0x20000aec

08007cf0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007cf4:	4803      	ldr	r0, [pc, #12]	@ (8007d04 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007cf6:	f004 fbb4 	bl	800c462 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007cfa:	4803      	ldr	r0, [pc, #12]	@ (8007d08 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007cfc:	f004 fbb1 	bl	800c462 <HAL_TIM_IRQHandler>
	 shaft_step_motor(shaft_step, shaft_pulse_cycle); //(?��?��,주기) ?��?��:400?�� ?��바�??

	 }
	 */
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007d00:	bf00      	nop
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	200009cc 	.word	0x200009cc
 8007d08:	20000b34 	.word	0x20000b34

08007d0c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007d10:	4803      	ldr	r0, [pc, #12]	@ (8007d20 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8007d12:	f004 fba6 	bl	800c462 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8007d16:	4803      	ldr	r0, [pc, #12]	@ (8007d24 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8007d18:	f004 fba3 	bl	800c462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8007d1c:	bf00      	nop
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	200009cc 	.word	0x200009cc
 8007d24:	20000b7c 	.word	0x20000b7c

08007d28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007d2c:	481c      	ldr	r0, [pc, #112]	@ (8007da0 <TIM5_IRQHandler+0x78>)
 8007d2e:	f004 fb98 	bl	800c462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
	tim5_flag = 1;
 8007d32:	4b1c      	ldr	r3, [pc, #112]	@ (8007da4 <TIM5_IRQHandler+0x7c>)
 8007d34:	2201      	movs	r2, #1
 8007d36:	701a      	strb	r2, [r3, #0]

	/*      V T       */
	if (vt_start == 1) {
 8007d38:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <TIM5_IRQHandler+0x80>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d10a      	bne.n	8007d56 <TIM5_IRQHandler+0x2e>
		vt_start_Y = 0;
 8007d40:	4b1a      	ldr	r3, [pc, #104]	@ (8007dac <TIM5_IRQHandler+0x84>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
		VT_control_X();
 8007d46:	f7fd f84b 	bl	8004de0 <VT_control_X>

		GPIOB->ODR ^= 1 << 14;  //LD3
 8007d4a:	4b19      	ldr	r3, [pc, #100]	@ (8007db0 <TIM5_IRQHandler+0x88>)
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	4a18      	ldr	r2, [pc, #96]	@ (8007db0 <TIM5_IRQHandler+0x88>)
 8007d50:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8007d54:	6153      	str	r3, [r2, #20]
	}
	if (vt_start_Y == 1) {
 8007d56:	4b15      	ldr	r3, [pc, #84]	@ (8007dac <TIM5_IRQHandler+0x84>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d10a      	bne.n	8007d74 <TIM5_IRQHandler+0x4c>
		vt_start = 0;
 8007d5e:	4b12      	ldr	r3, [pc, #72]	@ (8007da8 <TIM5_IRQHandler+0x80>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	701a      	strb	r2, [r3, #0]
		VT_control_Y();
 8007d64:	f7fd fa54 	bl	8005210 <VT_control_Y>

		GPIOB->ODR ^= 1 << 14;  //LD3
 8007d68:	4b11      	ldr	r3, [pc, #68]	@ (8007db0 <TIM5_IRQHandler+0x88>)
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	4a10      	ldr	r2, [pc, #64]	@ (8007db0 <TIM5_IRQHandler+0x88>)
 8007d6e:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8007d72:	6153      	str	r3, [r2, #20]
	}

	linear_time_count_GO(go_time); //1�? ?���?
 8007d74:	4b0f      	ldr	r3, [pc, #60]	@ (8007db4 <TIM5_IRQHandler+0x8c>)
 8007d76:	edd3 7a00 	vldr	s15, [r3]
 8007d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d7e:	f7f9 f99d 	bl	80010bc <linear_time_count_GO>
	linear_time_count_BACK(back_time);  //1.1�? ?���? 백래?�� 고려
 8007d82:	4b0d      	ldr	r3, [pc, #52]	@ (8007db8 <TIM5_IRQHandler+0x90>)
 8007d84:	edd3 7a00 	vldr	s15, [r3]
 8007d88:	eeb0 0a67 	vmov.f32	s0, s15
 8007d8c:	f7f9 f9ee 	bl	800116c <linear_time_count_BACK>

	if(accel_flag==TRUE)
 8007d90:	4b0a      	ldr	r3, [pc, #40]	@ (8007dbc <TIM5_IRQHandler+0x94>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <TIM5_IRQHandler+0x74>
	{

				downpart_accel_step();
 8007d98:	f006 faac 	bl	800e2f4 <downpart_accel_step>
	}



  /* USER CODE END TIM5_IRQn 1 */
}
 8007d9c:	bf00      	nop
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	200008f4 	.word	0x200008f4
 8007da4:	200041c6 	.word	0x200041c6
 8007da8:	200041b2 	.word	0x200041b2
 8007dac:	200041b3 	.word	0x200041b3
 8007db0:	40020400 	.word	0x40020400
 8007db4:	20000020 	.word	0x20000020
 8007db8:	20000024 	.word	0x20000024
 8007dbc:	20000c54 	.word	0x20000c54

08007dc0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007dc4:	4802      	ldr	r0, [pc, #8]	@ (8007dd0 <UART4_IRQHandler+0x10>)
 8007dc6:	f005 fb3f 	bl	800d448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007dca:	bf00      	nop
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000bc4 	.word	0x20000bc4

08007dd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007dd8:	4814      	ldr	r0, [pc, #80]	@ (8007e2c <TIM6_DAC_IRQHandler+0x58>)
 8007dda:	f004 fb42 	bl	800c462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	tim6_flag = 1;
 8007dde:	4b14      	ldr	r3, [pc, #80]	@ (8007e30 <TIM6_DAC_IRQHandler+0x5c>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	701a      	strb	r2, [r3, #0]

	encoder_count_x = TIM2->CNT;  //32bit timer
 8007de4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dea:	4a12      	ldr	r2, [pc, #72]	@ (8007e34 <TIM6_DAC_IRQHandler+0x60>)
 8007dec:	6013      	str	r3, [r2, #0]
	encoder_count_y = TIM4->CNT;
 8007dee:	4b12      	ldr	r3, [pc, #72]	@ (8007e38 <TIM6_DAC_IRQHandler+0x64>)
 8007df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	4b11      	ldr	r3, [pc, #68]	@ (8007e3c <TIM6_DAC_IRQHandler+0x68>)
 8007df6:	801a      	strh	r2, [r3, #0]

	/*      PID      */
	if (position_start == 1) {
 8007df8:	4b11      	ldr	r3, [pc, #68]	@ (8007e40 <TIM6_DAC_IRQHandler+0x6c>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d107      	bne.n	8007e10 <TIM6_DAC_IRQHandler+0x3c>

		position_pid_x();
 8007e00:	f7fd fc1e 	bl	8005640 <position_pid_x>

		GPIOB->ODR ^= 1 << 14;  //LD3
 8007e04:	4b0f      	ldr	r3, [pc, #60]	@ (8007e44 <TIM6_DAC_IRQHandler+0x70>)
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	4a0e      	ldr	r2, [pc, #56]	@ (8007e44 <TIM6_DAC_IRQHandler+0x70>)
 8007e0a:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8007e0e:	6153      	str	r3, [r2, #20]
	}

	if (position_start_Y == 1) {
 8007e10:	4b0d      	ldr	r3, [pc, #52]	@ (8007e48 <TIM6_DAC_IRQHandler+0x74>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d107      	bne.n	8007e28 <TIM6_DAC_IRQHandler+0x54>
		position_pid_y();
 8007e18:	f7fd fe4a 	bl	8005ab0 <position_pid_y>

		GPIOB->ODR ^= 1 << 14;  //LD3
 8007e1c:	4b09      	ldr	r3, [pc, #36]	@ (8007e44 <TIM6_DAC_IRQHandler+0x70>)
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	4a08      	ldr	r2, [pc, #32]	@ (8007e44 <TIM6_DAC_IRQHandler+0x70>)
 8007e22:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8007e26:	6153      	str	r3, [r2, #20]
	 distance_sensor();  //거리 ?��?��
	 tim6_flag = 0;
	 }
	 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007e28:	bf00      	nop
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	2000093c 	.word	0x2000093c
 8007e30:	200041c7 	.word	0x200041c7
 8007e34:	20000000 	.word	0x20000000
 8007e38:	40000800 	.word	0x40000800
 8007e3c:	20000004 	.word	0x20000004
 8007e40:	200041b0 	.word	0x200041b0
 8007e44:	40020400 	.word	0x40020400
 8007e48:	200041b1 	.word	0x200041b1

08007e4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007e50:	4802      	ldr	r0, [pc, #8]	@ (8007e5c <TIM7_IRQHandler+0x10>)
 8007e52:	f004 fb06 	bl	800c462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007e56:	bf00      	nop
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000984 	.word	0x20000984

08007e60 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8007e64:	4802      	ldr	r0, [pc, #8]	@ (8007e70 <DMA2_Stream1_IRQHandler+0x10>)
 8007e66:	f001 fb19 	bl	800949c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007e6a:	bf00      	nop
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000768 	.word	0x20000768

08007e74 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef8 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d117      	bne.n	8007eb6 <HAL_TIM_OC_DelayElapsedCallback+0x42>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	7f1b      	ldrb	r3, [r3, #28]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d113      	bne.n	8007eb6 <HAL_TIM_OC_DelayElapsedCallback+0x42>

			GPIOB->ODR ^= 1 << 0;
 8007e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007efc <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	4a1a      	ldr	r2, [pc, #104]	@ (8007efc <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8007e94:	f083 0301 	eor.w	r3, r3, #1
 8007e98:	6153      	str	r3, [r2, #20]

			step_pulse_count_tim11++;
 8007e9a:	4b19      	ldr	r3, [pc, #100]	@ (8007f00 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	4b17      	ldr	r3, [pc, #92]	@ (8007f00 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8007ea4:	801a      	strh	r2, [r3, #0]
			z_axis_step_motor(ball_screw_step, ball_screw_pulse_cycle); //(?��?��,주기) ?��?��:400?�� ?��바�??
 8007ea6:	4b17      	ldr	r3, [pc, #92]	@ (8007f04 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	4a17      	ldr	r2, [pc, #92]	@ (8007f08 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8007eac:	8812      	ldrh	r2, [r2, #0]
 8007eae:	4611      	mov	r1, r2
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe ffdb 	bl	8006e6c <z_axis_step_motor>
			//printf("%d , ,\n\r",step_pulse_count_tim11);
		}
	}

	if (htim->Instance == TIM13) {
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a14      	ldr	r2, [pc, #80]	@ (8007f0c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d116      	bne.n	8007eee <HAL_TIM_OC_DelayElapsedCallback+0x7a>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	7f1b      	ldrb	r3, [r3, #28]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d112      	bne.n	8007eee <HAL_TIM_OC_DelayElapsedCallback+0x7a>

			tim13_flag++;
 8007ec8:	4b11      	ldr	r3, [pc, #68]	@ (8007f10 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8007f10 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8007ed2:	701a      	strb	r2, [r3, #0]

			step_pulse_count_tim13++;
 8007ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f14 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	4a0e      	ldr	r2, [pc, #56]	@ (8007f14 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8007edc:	6013      	str	r3, [r2, #0]
			shaft_step_motor(shaft_step, shaft_pulse_cycle); //(?��?��,주기) ?��?��:400?�� ?��바�??
 8007ede:	4b0e      	ldr	r3, [pc, #56]	@ (8007f18 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8007f1c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8007ee4:	8812      	ldrh	r2, [r2, #0]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fe ff77 	bl	8006ddc <shaft_step_motor>
		}

	}
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	40014800 	.word	0x40014800
 8007efc:	40020400 	.word	0x40020400
 8007f00:	200041d4 	.word	0x200041d4
 8007f04:	200004fc 	.word	0x200004fc
 8007f08:	200004fe 	.word	0x200004fe
 8007f0c:	40001c00 	.word	0x40001c00
 8007f10:	200041c9 	.word	0x200041c9
 8007f14:	200041d0 	.word	0x200041d0
 8007f18:	200004f8 	.word	0x200004f8
 8007f1c:	200004fa 	.word	0x200004fa

08007f20 <HAL_TIM_PeriodElapsedCallback>:
extern uint16_t tim9_flag;
extern uint16_t tim10_flag;
extern bool tim12_flag;
extern int ballscrew_up_run;
extern int ballscrew_down_run;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM9) { //0.1�?,  paser ?��?��?��?��?��
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a62      	ldr	r2, [pc, #392]	@ (80080b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d105      	bne.n	8007f3e <HAL_TIM_PeriodElapsedCallback+0x1e>
			tim9_flag++;
 8007f32:	4b62      	ldr	r3, [pc, #392]	@ (80080bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	3301      	adds	r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	4b60      	ldr	r3, [pc, #384]	@ (80080bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f3c:	801a      	strh	r2, [r3, #0]

		}
	if (htim->Instance == TIM10) { //0.1�?,  paser ?��?��?��?��?��
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a5f      	ldr	r2, [pc, #380]	@ (80080c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d105      	bne.n	8007f54 <HAL_TIM_PeriodElapsedCallback+0x34>
			tim10_flag++;
 8007f48:	4b5e      	ldr	r3, [pc, #376]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	4b5c      	ldr	r3, [pc, #368]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8007f52:	801a      	strh	r2, [r3, #0]

		}
	if (htim->Instance == TIM12) { //0.1�?,  paser ?��?��?��?��?��
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a5b      	ldr	r2, [pc, #364]	@ (80080c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d102      	bne.n	8007f64 <HAL_TIM_PeriodElapsedCallback+0x44>
				tim12_flag = TRUE;
 8007f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80080cc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8007f60:	2201      	movs	r2, #1
 8007f62:	701a      	strb	r2, [r3, #0]

		}

	if (htim->Instance == TIM14) {  //tim14 : 0.01�? 마다 rpm 측정
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a59      	ldr	r2, [pc, #356]	@ (80080d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d110      	bne.n	8007f90 <HAL_TIM_PeriodElapsedCallback+0x70>

		tim14_flag++;
 8007f6e:	4b59      	ldr	r3, [pc, #356]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	3301      	adds	r3, #1
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	4b57      	ldr	r3, [pc, #348]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8007f78:	701a      	strb	r2, [r3, #0]

		dc_motor_RPM();
 8007f7a:	f7fc fde5 	bl	8004b48 <dc_motor_RPM>

		if (tim14_flag >= 10) { //0.1�? 마다 ESP�? ?��?��?�� ?��?��
 8007f7e:	4b55      	ldr	r3, [pc, #340]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b09      	cmp	r3, #9
 8007f84:	d904      	bls.n	8007f90 <HAL_TIM_PeriodElapsedCallback+0x70>

			STM32_to_ESP();
 8007f86:	f7fb fc03 	bl	8003790 <STM32_to_ESP>
			tim14_flag = 0;
 8007f8a:	4b52      	ldr	r3, [pc, #328]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
		}

	}
	if (htim->Instance == TIM7) //?��?�� ?��?�� 측정 0.0001 =0.1ms
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a50      	ldr	r2, [pc, #320]	@ (80080d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	f040 8089 	bne.w	80080ae <HAL_TIM_PeriodElapsedCallback+0x18e>
	{
		//if(RPM_Y )
			photo_sensor_1();
 8007f9c:	f7fe fc6e 	bl	800687c <photo_sensor_1>

			photo_sensor_2();
 8007fa0:	f7fe fd6a 	bl	8006a78 <photo_sensor_2>
//		{
//			TIM3->CCR1=0;
//			TIM3->CCR2=0;
//		}

		if(ballscrew_up_run ==1 || ballscrew_down_run==1)
 8007fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80080dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d003      	beq.n	8007fb4 <HAL_TIM_PeriodElapsedCallback+0x94>
 8007fac:	4b4c      	ldr	r3, [pc, #304]	@ (80080e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d115      	bne.n	8007fe0 <HAL_TIM_PeriodElapsedCallback+0xc0>
		{
			pickup_run=0;
 8007fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80080e4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
			dropoff_run=0;
 8007fba:	4b4b      	ldr	r3, [pc, #300]	@ (80080e8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
			HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8007fc0:	213c      	movs	r1, #60	@ 0x3c
 8007fc2:	484a      	ldr	r0, [pc, #296]	@ (80080ec <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007fc4:	f004 f9b6 	bl	800c334 <HAL_TIM_Encoder_Stop>
			HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8007fc8:	213c      	movs	r1, #60	@ 0x3c
 8007fca:	4849      	ldr	r0, [pc, #292]	@ (80080f0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8007fcc:	f004 f9b2 	bl	800c334 <HAL_TIM_Encoder_Stop>

			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4848      	ldr	r0, [pc, #288]	@ (80080f4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8007fd4:	f004 f80a 	bl	800bfec <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8007fd8:	2104      	movs	r1, #4
 8007fda:	4846      	ldr	r0, [pc, #280]	@ (80080f4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8007fdc:	f004 f806 	bl	800bfec <HAL_TIM_PWM_Stop>
		}


		if ( (RPM_X == 0) && (RPM_Y == 0))  //모터 ?���??�� ?��?���?
 8007fe0:	4b45      	ldr	r3, [pc, #276]	@ (80080f8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8007fe2:	edd3 7a00 	vldr	s15, [r3]
 8007fe6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fee:	d118      	bne.n	8008022 <HAL_TIM_PeriodElapsedCallback+0x102>
 8007ff0:	4b42      	ldr	r3, [pc, #264]	@ (80080fc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8007ff2:	edd3 7a00 	vldr	s15, [r3]
 8007ff6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ffe:	d110      	bne.n	8008022 <HAL_TIM_PeriodElapsedCallback+0x102>
		{
			if(pickup_run == 0 && dropoff_run ==0 && ballscrew_down_run ==1)  //?��?��, ?��?�� ?��?�� ?��?�� ?��  볼스?���? ?��?���? ?��?��
 8008000:	4b38      	ldr	r3, [pc, #224]	@ (80080e4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d109      	bne.n	800801c <HAL_TIM_PeriodElapsedCallback+0xfc>
 8008008:	4b37      	ldr	r3, [pc, #220]	@ (80080e8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <HAL_TIM_PeriodElapsedCallback+0xfc>
 8008010:	4b33      	ldr	r3, [pc, #204]	@ (80080e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d101      	bne.n	800801c <HAL_TIM_PeriodElapsedCallback+0xfc>
			{
				ball_limit_sw_min();
 8008018:	f7fe fe1c 	bl	8006c54 <ball_limit_sw_min>
			}

			down_sw_max();
 800801c:	f7fe fe7e 	bl	8006d1c <down_sw_max>
 8008020:	e011      	b.n	8008046 <HAL_TIM_PeriodElapsedCallback+0x126>


		}
		else  //모터 ?��?���?�? FALSE
		{
			Finish_flag.downpart_high = FALSE;
 8008022:	4b37      	ldr	r3, [pc, #220]	@ (8008100 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8008024:	2200      	movs	r2, #0
 8008026:	71da      	strb	r2, [r3, #7]
			Finish_flag.downpart_low = FALSE;
 8008028:	4b35      	ldr	r3, [pc, #212]	@ (8008100 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800802a:	2200      	movs	r2, #0
 800802c:	721a      	strb	r2, [r3, #8]
			Finish_flag.ball_high = FALSE;
 800802e:	4b34      	ldr	r3, [pc, #208]	@ (8008100 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8008030:	2200      	movs	r2, #0
 8008032:	711a      	strb	r2, [r3, #4]
			Finish_flag.ball_low = FALSE;
 8008034:	4b32      	ldr	r3, [pc, #200]	@ (8008100 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8008036:	2200      	movs	r2, #0
 8008038:	719a      	strb	r2, [r3, #6]
			Finish_flag.linear_back = FALSE;
 800803a:	4b31      	ldr	r3, [pc, #196]	@ (8008100 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800803c:	2200      	movs	r2, #0
 800803e:	729a      	strb	r2, [r3, #10]
			Finish_flag.linear_go = FALSE;
 8008040:	4b2f      	ldr	r3, [pc, #188]	@ (8008100 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8008042:	2200      	movs	r2, #0
 8008044:	725a      	strb	r2, [r3, #9]
		//1�? if ?��?��
	//	if(box_floor==1)  	downpart_distance_step_dintance(downpart_step_1_floor_test, 0);  //?��중에 거리�? �??���?
	//	else if(box_floor==2)  downpart_distance_step_dintance(downpart_step_2_floor_test, 0);
	//	else if(box_floor==3)  downpart_distance_step_dintance(downpart_step_3_floor_test, 0);

		tim7_flag++;
 8008046:	4b2f      	ldr	r3, [pc, #188]	@ (8008104 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	3301      	adds	r3, #1
 800804c:	b29a      	uxth	r2, r3
 800804e:	4b2d      	ldr	r3, [pc, #180]	@ (8008104 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8008050:	801a      	strh	r2, [r3, #0]

		if (step_count_for_flag__ >= 1)  // ?��?��?��?�� �??�� �?�?
 8008052:	4b2d      	ldr	r3, [pc, #180]	@ (8008108 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d020      	beq.n	800809c <HAL_TIM_PeriodElapsedCallback+0x17c>
				{

			if (tim7_flag >= 100 && step_count__ >= step_count__min)  //0.1�? 마다
 800805a:	4b2a      	ldr	r3, [pc, #168]	@ (8008104 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	2b63      	cmp	r3, #99	@ 0x63
 8008060:	d91c      	bls.n	800809c <HAL_TIM_PeriodElapsedCallback+0x17c>
 8008062:	4b2a      	ldr	r3, [pc, #168]	@ (800810c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	4b2a      	ldr	r3, [pc, #168]	@ (8008110 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	db16      	blt.n	800809c <HAL_TIM_PeriodElapsedCallback+0x17c>
				{
				count_test = count_arr[step_count__--];
 800806e:	4b27      	ldr	r3, [pc, #156]	@ (800810c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	1e5a      	subs	r2, r3, #1
 8008074:	4925      	ldr	r1, [pc, #148]	@ (800810c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8008076:	600a      	str	r2, [r1, #0]
 8008078:	4a26      	ldr	r2, [pc, #152]	@ (8008114 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800807a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800807e:	4a26      	ldr	r2, [pc, #152]	@ (8008118 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8008080:	6013      	str	r3, [r2, #0]
				TIM13->ARR = count_arr[step_count__--];
 8008082:	4b22      	ldr	r3, [pc, #136]	@ (800810c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	1e5a      	subs	r2, r3, #1
 8008088:	4920      	ldr	r1, [pc, #128]	@ (800810c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800808a:	600a      	str	r2, [r1, #0]
 800808c:	4a21      	ldr	r2, [pc, #132]	@ (8008114 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800808e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008092:	4b22      	ldr	r3, [pc, #136]	@ (800811c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8008094:	62da      	str	r2, [r3, #44]	@ 0x2c
				tim7_flag = 0;
 8008096:	4b1b      	ldr	r3, [pc, #108]	@ (8008104 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8008098:	2200      	movs	r2, #0
 800809a:	801a      	strh	r2, [r3, #0]
			}
			//step_count_for_flag=0;
		}
		if (step_count__ <= step_count__min) {
 800809c:	4b1b      	ldr	r3, [pc, #108]	@ (800810c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008110 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	dc02      	bgt.n	80080ae <HAL_TIM_PeriodElapsedCallback+0x18e>
			step_count_for_flag__ = 0;
 80080a8:	4b17      	ldr	r3, [pc, #92]	@ (8008108 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	701a      	strb	r2, [r3, #0]
//		{
//			tim4_encoder_overflow -= 0x10000; // ?��?�� 16비트 감소 (?��버플로우 발생 ?��)
//		}
	}

}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	40014000 	.word	0x40014000
 80080bc:	20001378 	.word	0x20001378
 80080c0:	40014400 	.word	0x40014400
 80080c4:	2000003e 	.word	0x2000003e
 80080c8:	40001800 	.word	0x40001800
 80080cc:	2000137a 	.word	0x2000137a
 80080d0:	40002000 	.word	0x40002000
 80080d4:	200041c8 	.word	0x200041c8
 80080d8:	40001400 	.word	0x40001400
 80080dc:	20001360 	.word	0x20001360
 80080e0:	20001364 	.word	0x20001364
 80080e4:	20000c70 	.word	0x20000c70
 80080e8:	20000c74 	.word	0x20000c74
 80080ec:	2000081c 	.word	0x2000081c
 80080f0:	200008ac 	.word	0x200008ac
 80080f4:	20000864 	.word	0x20000864
 80080f8:	20002c64 	.word	0x20002c64
 80080fc:	20002c70 	.word	0x20002c70
 8008100:	20000c60 	.word	0x20000c60
 8008104:	200041c4 	.word	0x200041c4
 8008108:	20001368 	.word	0x20001368
 800810c:	20000500 	.word	0x20000500
 8008110:	20000508 	.word	0x20000508
 8008114:	2000320c 	.word	0x2000320c
 8008118:	200041d8 	.word	0x200041d8
 800811c:	40001c00 	.word	0x40001c00

08008120 <HAL_GPIO_EXTI_Callback>:

int pc6_sw_test=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	80fb      	strh	r3, [r7, #6]

	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);  //x stop
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);  //y stop
	//HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, 1); //리니?�� ?���?
	if ((HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == 1)
 800812a:	2101      	movs	r1, #1
 800812c:	4816      	ldr	r0, [pc, #88]	@ (8008188 <HAL_GPIO_EXTI_Callback+0x68>)
 800812e:	f001 fdcb 	bl	8009cc8 <HAL_GPIO_ReadPin>
 8008132:	4603      	mov	r3, r0
 8008134:	2b01      	cmp	r3, #1
 8008136:	d11b      	bne.n	8008170 <HAL_GPIO_EXTI_Callback+0x50>
			&& (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) && (RPM_X == 0)
 8008138:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800813c:	4813      	ldr	r0, [pc, #76]	@ (800818c <HAL_GPIO_EXTI_Callback+0x6c>)
 800813e:	f001 fdc3 	bl	8009cc8 <HAL_GPIO_ReadPin>
 8008142:	4603      	mov	r3, r0
 8008144:	2b01      	cmp	r3, #1
 8008146:	d113      	bne.n	8008170 <HAL_GPIO_EXTI_Callback+0x50>
 8008148:	4b11      	ldr	r3, [pc, #68]	@ (8008190 <HAL_GPIO_EXTI_Callback+0x70>)
 800814a:	edd3 7a00 	vldr	s15, [r3]
 800814e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008156:	d10b      	bne.n	8008170 <HAL_GPIO_EXTI_Callback+0x50>
			&& (RPM_Y == 0) && (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_4) == 1)) {
 8008158:	4b0e      	ldr	r3, [pc, #56]	@ (8008194 <HAL_GPIO_EXTI_Callback+0x74>)
 800815a:	edd3 7a00 	vldr	s15, [r3]
 800815e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008166:	d103      	bne.n	8008170 <HAL_GPIO_EXTI_Callback+0x50>
 8008168:	2110      	movs	r1, #16
 800816a:	480b      	ldr	r0, [pc, #44]	@ (8008198 <HAL_GPIO_EXTI_Callback+0x78>)
 800816c:	f001 fdac 	bl	8009cc8 <HAL_GPIO_ReadPin>
//			}
//		}
	}


			if (GPIO_Pin == GPIO_PIN_6)  // dawn part
 8008170:	88fb      	ldrh	r3, [r7, #6]
 8008172:	2b40      	cmp	r3, #64	@ 0x40
 8008174:	d104      	bne.n	8008180 <HAL_GPIO_EXTI_Callback+0x60>
			{
				pc6_sw_test++;
 8008176:	4b09      	ldr	r3, [pc, #36]	@ (800819c <HAL_GPIO_EXTI_Callback+0x7c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3301      	adds	r3, #1
 800817c:	4a07      	ldr	r2, [pc, #28]	@ (800819c <HAL_GPIO_EXTI_Callback+0x7c>)
 800817e:	6013      	str	r3, [r2, #0]
			}

}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	40021800 	.word	0x40021800
 800818c:	40020400 	.word	0x40020400
 8008190:	20002c64 	.word	0x20002c64
 8008194:	20002c70 	.word	0x20002c70
 8008198:	40021400 	.word	0x40021400
 800819c:	200041dc 	.word	0x200041dc

080081a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
  return 1;
 80081a4:	2301      	movs	r3, #1
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <_kill>:

int _kill(int pid, int sig)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80081ba:	f007 fb35 	bl	800f828 <__errno>
 80081be:	4603      	mov	r3, r0
 80081c0:	2216      	movs	r2, #22
 80081c2:	601a      	str	r2, [r3, #0]
  return -1;
 80081c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <_exit>:

void _exit (int status)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80081d8:	f04f 31ff 	mov.w	r1, #4294967295
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff ffe7 	bl	80081b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80081e2:	bf00      	nop
 80081e4:	e7fd      	b.n	80081e2 <_exit+0x12>

080081e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b086      	sub	sp, #24
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	60f8      	str	r0, [r7, #12]
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081f2:	2300      	movs	r3, #0
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e00a      	b.n	800820e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80081f8:	f3af 8000 	nop.w
 80081fc:	4601      	mov	r1, r0
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	60ba      	str	r2, [r7, #8]
 8008204:	b2ca      	uxtb	r2, r1
 8008206:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	3301      	adds	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	429a      	cmp	r2, r3
 8008214:	dbf0      	blt.n	80081f8 <_read+0x12>
  }

  return len;
 8008216:	687b      	ldr	r3, [r7, #4]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]
 8008230:	e009      	b.n	8008246 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	60ba      	str	r2, [r7, #8]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f7fb fa7e 	bl	800373c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	3301      	adds	r3, #1
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	dbf1      	blt.n	8008232 <_write+0x12>
  }
  return len;
 800824e:	687b      	ldr	r3, [r7, #4]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <_close>:

int _close(int file)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008280:	605a      	str	r2, [r3, #4]
  return 0;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <_isatty>:

int _isatty(int file)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008298:	2301      	movs	r3, #1
}
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80082c8:	4a14      	ldr	r2, [pc, #80]	@ (800831c <_sbrk+0x5c>)
 80082ca:	4b15      	ldr	r3, [pc, #84]	@ (8008320 <_sbrk+0x60>)
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80082d4:	4b13      	ldr	r3, [pc, #76]	@ (8008324 <_sbrk+0x64>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d102      	bne.n	80082e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80082dc:	4b11      	ldr	r3, [pc, #68]	@ (8008324 <_sbrk+0x64>)
 80082de:	4a12      	ldr	r2, [pc, #72]	@ (8008328 <_sbrk+0x68>)
 80082e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80082e2:	4b10      	ldr	r3, [pc, #64]	@ (8008324 <_sbrk+0x64>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4413      	add	r3, r2
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d207      	bcs.n	8008300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80082f0:	f007 fa9a 	bl	800f828 <__errno>
 80082f4:	4603      	mov	r3, r0
 80082f6:	220c      	movs	r2, #12
 80082f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80082fa:	f04f 33ff 	mov.w	r3, #4294967295
 80082fe:	e009      	b.n	8008314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008300:	4b08      	ldr	r3, [pc, #32]	@ (8008324 <_sbrk+0x64>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008306:	4b07      	ldr	r3, [pc, #28]	@ (8008324 <_sbrk+0x64>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	4a05      	ldr	r2, [pc, #20]	@ (8008324 <_sbrk+0x64>)
 8008310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008312:	68fb      	ldr	r3, [r7, #12]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20030000 	.word	0x20030000
 8008320:	00000400 	.word	0x00000400
 8008324:	200041e0 	.word	0x200041e0
 8008328:	20004488 	.word	0x20004488

0800832c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008330:	4b06      	ldr	r3, [pc, #24]	@ (800834c <SystemInit+0x20>)
 8008332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008336:	4a05      	ldr	r2, [pc, #20]	@ (800834c <SystemInit+0x20>)
 8008338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800833c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008340:	bf00      	nop
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	e000ed00 	.word	0xe000ed00

08008350 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack       /* set stack pointer */
 8008350:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008388 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008354:	f7ff ffea 	bl	800832c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008358:	480c      	ldr	r0, [pc, #48]	@ (800838c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800835a:	490d      	ldr	r1, [pc, #52]	@ (8008390 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800835c:	4a0d      	ldr	r2, [pc, #52]	@ (8008394 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800835e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008360:	e002      	b.n	8008368 <LoopCopyDataInit>

08008362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008366:	3304      	adds	r3, #4

08008368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800836a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800836c:	d3f9      	bcc.n	8008362 <CopyDataInit>
  


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800836e:	4a0a      	ldr	r2, [pc, #40]	@ (8008398 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008370:	4c0a      	ldr	r4, [pc, #40]	@ (800839c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008374:	e001      	b.n	800837a <LoopFillZerobss>

08008376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008378:	3204      	adds	r2, #4

0800837a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800837a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800837c:	d3fb      	bcc.n	8008376 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800837e:	f007 fa59 	bl	800f834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008382:	f7f9 fde1 	bl	8001f48 <main>
  bx  lr    
 8008386:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack       /* set stack pointer */
 8008388:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800838c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008390:	200006f8 	.word	0x200006f8
  ldr r2, =_sidata
 8008394:	08014658 	.word	0x08014658
  ldr r2, =_sbss
 8008398:	200006f8 	.word	0x200006f8
  ldr r4, =_ebss
 800839c:	20004484 	.word	0x20004484

080083a0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80083a0:	e7fe      	b.n	80083a0 <CAN1_RX0_IRQHandler>
	...

080083a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80083a8:	4b0e      	ldr	r3, [pc, #56]	@ (80083e4 <HAL_Init+0x40>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a0d      	ldr	r2, [pc, #52]	@ (80083e4 <HAL_Init+0x40>)
 80083ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80083b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80083b4:	4b0b      	ldr	r3, [pc, #44]	@ (80083e4 <HAL_Init+0x40>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a0a      	ldr	r2, [pc, #40]	@ (80083e4 <HAL_Init+0x40>)
 80083ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80083be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80083c0:	4b08      	ldr	r3, [pc, #32]	@ (80083e4 <HAL_Init+0x40>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a07      	ldr	r2, [pc, #28]	@ (80083e4 <HAL_Init+0x40>)
 80083c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083cc:	2003      	movs	r0, #3
 80083ce:	f000 fe8b 	bl	80090e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80083d2:	2000      	movs	r0, #0
 80083d4:	f000 f808 	bl	80083e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80083d8:	f7fe ff48 	bl	800726c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	40023c00 	.word	0x40023c00

080083e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80083f0:	4b12      	ldr	r3, [pc, #72]	@ (800843c <HAL_InitTick+0x54>)
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	4b12      	ldr	r3, [pc, #72]	@ (8008440 <HAL_InitTick+0x58>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	4619      	mov	r1, r3
 80083fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80083fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008402:	fbb2 f3f3 	udiv	r3, r2, r3
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fea3 	bl	8009152 <HAL_SYSTICK_Config>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e00e      	b.n	8008434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b0f      	cmp	r3, #15
 800841a:	d80a      	bhi.n	8008432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800841c:	2200      	movs	r2, #0
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	f000 fe6b 	bl	80090fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008428:	4a06      	ldr	r2, [pc, #24]	@ (8008444 <HAL_InitTick+0x5c>)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	e000      	b.n	8008434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	2000050c 	.word	0x2000050c
 8008440:	20000514 	.word	0x20000514
 8008444:	20000510 	.word	0x20000510

08008448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800844c:	4b06      	ldr	r3, [pc, #24]	@ (8008468 <HAL_IncTick+0x20>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	4b06      	ldr	r3, [pc, #24]	@ (800846c <HAL_IncTick+0x24>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4413      	add	r3, r2
 8008458:	4a04      	ldr	r2, [pc, #16]	@ (800846c <HAL_IncTick+0x24>)
 800845a:	6013      	str	r3, [r2, #0]
}
 800845c:	bf00      	nop
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	20000514 	.word	0x20000514
 800846c:	200041e4 	.word	0x200041e4

08008470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  return uwTick;
 8008474:	4b03      	ldr	r3, [pc, #12]	@ (8008484 <HAL_GetTick+0x14>)
 8008476:	681b      	ldr	r3, [r3, #0]
}
 8008478:	4618      	mov	r0, r3
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	200041e4 	.word	0x200041e4

08008488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008490:	f7ff ffee 	bl	8008470 <HAL_GetTick>
 8008494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d005      	beq.n	80084ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80084a2:	4b0a      	ldr	r3, [pc, #40]	@ (80084cc <HAL_Delay+0x44>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80084ae:	bf00      	nop
 80084b0:	f7ff ffde 	bl	8008470 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d8f7      	bhi.n	80084b0 <HAL_Delay+0x28>
  {
  }
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	20000514 	.word	0x20000514

080084d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e033      	b.n	800854e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d109      	bne.n	8008502 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7fe fee4 	bl	80072bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	d118      	bne.n	8008540 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008512:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008516:	f023 0302 	bic.w	r3, r3, #2
 800851a:	f043 0202 	orr.w	r2, r3, #2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fb88 	bl	8008c38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	f043 0201 	orr.w	r2, r3, #1
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	641a      	str	r2, [r3, #64]	@ 0x40
 800853e:	e001      	b.n	8008544 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b086      	sub	sp, #24
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	617b      	str	r3, [r7, #20]
 8008562:	2300      	movs	r3, #0
 8008564:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	f003 0320 	and.w	r3, r3, #32
 8008584:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d049      	beq.n	8008620 <HAL_ADC_IRQHandler+0xca>
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d046      	beq.n	8008620 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008596:	f003 0310 	and.w	r3, r3, #16
 800859a:	2b00      	cmp	r3, #0
 800859c:	d105      	bne.n	80085aa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d12b      	bne.n	8008610 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d127      	bne.n	8008610 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d006      	beq.n	80085dc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d119      	bne.n	8008610 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0220 	bic.w	r2, r2, #32
 80085ea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d105      	bne.n	8008610 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008608:	f043 0201 	orr.w	r2, r3, #1
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff fa69 	bl	8007ae8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f06f 0212 	mvn.w	r2, #18
 800861e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f003 0304 	and.w	r3, r3, #4
 8008626:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800862e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d057      	beq.n	80086e6 <HAL_ADC_IRQHandler+0x190>
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d054      	beq.n	80086e6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b00      	cmp	r3, #0
 8008646:	d105      	bne.n	8008654 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d139      	bne.n	80086d6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008668:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800866c:	2b00      	cmp	r3, #0
 800866e:	d006      	beq.n	800867e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800867a:	2b00      	cmp	r3, #0
 800867c:	d12b      	bne.n	80086d6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008688:	2b00      	cmp	r3, #0
 800868a:	d124      	bne.n	80086d6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008696:	2b00      	cmp	r3, #0
 8008698:	d11d      	bne.n	80086d6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d119      	bne.n	80086d6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086b0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d105      	bne.n	80086d6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ce:	f043 0201 	orr.w	r2, r3, #1
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fc2c 	bl	8008f34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 020c 	mvn.w	r2, #12
 80086e4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d017      	beq.n	800872c <HAL_ADC_IRQHandler+0x1d6>
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d014      	beq.n	800872c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b01      	cmp	r3, #1
 800870e:	d10d      	bne.n	800872c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008714:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f945 	bl	80089ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f06f 0201 	mvn.w	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800873a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d015      	beq.n	800876e <HAL_ADC_IRQHandler+0x218>
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d012      	beq.n	800876e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800874c:	f043 0202 	orr.w	r2, r3, #2
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f06f 0220 	mvn.w	r2, #32
 800875c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f92e 	bl	80089c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f06f 0220 	mvn.w	r2, #32
 800876c:	601a      	str	r2, [r3, #0]
  }
}
 800876e:	bf00      	nop
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800878e:	2b01      	cmp	r3, #1
 8008790:	d101      	bne.n	8008796 <HAL_ADC_Start_DMA+0x1e>
 8008792:	2302      	movs	r3, #2
 8008794:	e0e9      	b.n	800896a <HAL_ADC_Start_DMA+0x1f2>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d018      	beq.n	80087de <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0201 	orr.w	r2, r2, #1
 80087ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80087bc:	4b6d      	ldr	r3, [pc, #436]	@ (8008974 <HAL_ADC_Start_DMA+0x1fc>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a6d      	ldr	r2, [pc, #436]	@ (8008978 <HAL_ADC_Start_DMA+0x200>)
 80087c2:	fba2 2303 	umull	r2, r3, r2, r3
 80087c6:	0c9a      	lsrs	r2, r3, #18
 80087c8:	4613      	mov	r3, r2
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	4413      	add	r3, r2
 80087ce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80087d0:	e002      	b.n	80087d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1f9      	bne.n	80087d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ec:	d107      	bne.n	80087fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087fc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b01      	cmp	r3, #1
 800880a:	f040 80a1 	bne.w	8008950 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008812:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008816:	f023 0301 	bic.w	r3, r3, #1
 800881a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800882c:	2b00      	cmp	r3, #0
 800882e:	d007      	beq.n	8008840 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008834:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008838:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008844:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800884c:	d106      	bne.n	800885c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008852:	f023 0206 	bic.w	r2, r3, #6
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	645a      	str	r2, [r3, #68]	@ 0x44
 800885a:	e002      	b.n	8008862 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800886a:	4b44      	ldr	r3, [pc, #272]	@ (800897c <HAL_ADC_Start_DMA+0x204>)
 800886c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008872:	4a43      	ldr	r2, [pc, #268]	@ (8008980 <HAL_ADC_Start_DMA+0x208>)
 8008874:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887a:	4a42      	ldr	r2, [pc, #264]	@ (8008984 <HAL_ADC_Start_DMA+0x20c>)
 800887c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008882:	4a41      	ldr	r2, [pc, #260]	@ (8008988 <HAL_ADC_Start_DMA+0x210>)
 8008884:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800888e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800889e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689a      	ldr	r2, [r3, #8]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088ae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	334c      	adds	r3, #76	@ 0x4c
 80088ba:	4619      	mov	r1, r3
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f000 fd02 	bl	80092c8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f003 031f 	and.w	r3, r3, #31
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d12a      	bne.n	8008926 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a2d      	ldr	r2, [pc, #180]	@ (800898c <HAL_ADC_Start_DMA+0x214>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d015      	beq.n	8008906 <HAL_ADC_Start_DMA+0x18e>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a2c      	ldr	r2, [pc, #176]	@ (8008990 <HAL_ADC_Start_DMA+0x218>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d105      	bne.n	80088f0 <HAL_ADC_Start_DMA+0x178>
 80088e4:	4b25      	ldr	r3, [pc, #148]	@ (800897c <HAL_ADC_Start_DMA+0x204>)
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f003 031f 	and.w	r3, r3, #31
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a27      	ldr	r2, [pc, #156]	@ (8008994 <HAL_ADC_Start_DMA+0x21c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d136      	bne.n	8008968 <HAL_ADC_Start_DMA+0x1f0>
 80088fa:	4b20      	ldr	r3, [pc, #128]	@ (800897c <HAL_ADC_Start_DMA+0x204>)
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f003 0310 	and.w	r3, r3, #16
 8008902:	2b00      	cmp	r3, #0
 8008904:	d130      	bne.n	8008968 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d129      	bne.n	8008968 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008922:	609a      	str	r2, [r3, #8]
 8008924:	e020      	b.n	8008968 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a18      	ldr	r2, [pc, #96]	@ (800898c <HAL_ADC_Start_DMA+0x214>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d11b      	bne.n	8008968 <HAL_ADC_Start_DMA+0x1f0>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d114      	bne.n	8008968 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800894c:	609a      	str	r2, [r3, #8]
 800894e:	e00b      	b.n	8008968 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008954:	f043 0210 	orr.w	r2, r3, #16
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008960:	f043 0201 	orr.w	r2, r3, #1
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	2000050c 	.word	0x2000050c
 8008978:	431bde83 	.word	0x431bde83
 800897c:	40012300 	.word	0x40012300
 8008980:	08008e31 	.word	0x08008e31
 8008984:	08008eeb 	.word	0x08008eeb
 8008988:	08008f07 	.word	0x08008f07
 800898c:	40012000 	.word	0x40012000
 8008990:	40012100 	.word	0x40012100
 8008994:	40012200 	.word	0x40012200

08008998 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d101      	bne.n	80089f0 <HAL_ADC_ConfigChannel+0x1c>
 80089ec:	2302      	movs	r3, #2
 80089ee:	e113      	b.n	8008c18 <HAL_ADC_ConfigChannel+0x244>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b09      	cmp	r3, #9
 80089fe:	d925      	bls.n	8008a4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68d9      	ldr	r1, [r3, #12]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	4613      	mov	r3, r2
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	4413      	add	r3, r2
 8008a14:	3b1e      	subs	r3, #30
 8008a16:	2207      	movs	r2, #7
 8008a18:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1c:	43da      	mvns	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	400a      	ands	r2, r1
 8008a24:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68d9      	ldr	r1, [r3, #12]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	4618      	mov	r0, r3
 8008a38:	4603      	mov	r3, r0
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	4403      	add	r3, r0
 8008a3e:	3b1e      	subs	r3, #30
 8008a40:	409a      	lsls	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	e022      	b.n	8008a92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6919      	ldr	r1, [r3, #16]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	4413      	add	r3, r2
 8008a60:	2207      	movs	r2, #7
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	43da      	mvns	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	400a      	ands	r2, r1
 8008a6e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6919      	ldr	r1, [r3, #16]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	689a      	ldr	r2, [r3, #8]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	4618      	mov	r0, r3
 8008a82:	4603      	mov	r3, r0
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	4403      	add	r3, r0
 8008a88:	409a      	lsls	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b06      	cmp	r3, #6
 8008a98:	d824      	bhi.n	8008ae4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	3b05      	subs	r3, #5
 8008aac:	221f      	movs	r2, #31
 8008aae:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab2:	43da      	mvns	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	400a      	ands	r2, r1
 8008aba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	4618      	mov	r0, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685a      	ldr	r2, [r3, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	3b05      	subs	r3, #5
 8008ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ae2:	e04c      	b.n	8008b7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b0c      	cmp	r3, #12
 8008aea:	d824      	bhi.n	8008b36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	3b23      	subs	r3, #35	@ 0x23
 8008afe:	221f      	movs	r2, #31
 8008b00:	fa02 f303 	lsl.w	r3, r2, r3
 8008b04:	43da      	mvns	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	400a      	ands	r2, r1
 8008b0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	3b23      	subs	r3, #35	@ 0x23
 8008b28:	fa00 f203 	lsl.w	r2, r0, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b34:	e023      	b.n	8008b7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	3b41      	subs	r3, #65	@ 0x41
 8008b48:	221f      	movs	r2, #31
 8008b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4e:	43da      	mvns	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	400a      	ands	r2, r1
 8008b56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	4618      	mov	r0, r3
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	3b41      	subs	r3, #65	@ 0x41
 8008b72:	fa00 f203 	lsl.w	r2, r0, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008b7e:	4b29      	ldr	r3, [pc, #164]	@ (8008c24 <HAL_ADC_ConfigChannel+0x250>)
 8008b80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a28      	ldr	r2, [pc, #160]	@ (8008c28 <HAL_ADC_ConfigChannel+0x254>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d10f      	bne.n	8008bac <HAL_ADC_ConfigChannel+0x1d8>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b12      	cmp	r3, #18
 8008b92:	d10b      	bne.n	8008bac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c28 <HAL_ADC_ConfigChannel+0x254>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d12b      	bne.n	8008c0e <HAL_ADC_ConfigChannel+0x23a>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a1c      	ldr	r2, [pc, #112]	@ (8008c2c <HAL_ADC_ConfigChannel+0x258>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d003      	beq.n	8008bc8 <HAL_ADC_ConfigChannel+0x1f4>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b11      	cmp	r3, #17
 8008bc6:	d122      	bne.n	8008c0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a11      	ldr	r2, [pc, #68]	@ (8008c2c <HAL_ADC_ConfigChannel+0x258>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d111      	bne.n	8008c0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008bea:	4b11      	ldr	r3, [pc, #68]	@ (8008c30 <HAL_ADC_ConfigChannel+0x25c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a11      	ldr	r2, [pc, #68]	@ (8008c34 <HAL_ADC_ConfigChannel+0x260>)
 8008bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf4:	0c9a      	lsrs	r2, r3, #18
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008c00:	e002      	b.n	8008c08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1f9      	bne.n	8008c02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	40012300 	.word	0x40012300
 8008c28:	40012000 	.word	0x40012000
 8008c2c:	10000012 	.word	0x10000012
 8008c30:	2000050c 	.word	0x2000050c
 8008c34:	431bde83 	.word	0x431bde83

08008c38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008c40:	4b79      	ldr	r3, [pc, #484]	@ (8008e28 <ADC_Init+0x1f0>)
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	431a      	orrs	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6859      	ldr	r1, [r3, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	021a      	lsls	r2, r3, #8
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6859      	ldr	r1, [r3, #4]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6899      	ldr	r1, [r3, #8]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cca:	4a58      	ldr	r2, [pc, #352]	@ (8008e2c <ADC_Init+0x1f4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d022      	beq.n	8008d16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008cde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6899      	ldr	r1, [r3, #8]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689a      	ldr	r2, [r3, #8]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6899      	ldr	r1, [r3, #8]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	609a      	str	r2, [r3, #8]
 8008d14:	e00f      	b.n	8008d36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689a      	ldr	r2, [r3, #8]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008d34:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f022 0202 	bic.w	r2, r2, #2
 8008d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6899      	ldr	r1, [r3, #8]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	7e1b      	ldrb	r3, [r3, #24]
 8008d50:	005a      	lsls	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01b      	beq.n	8008d9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d72:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008d82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6859      	ldr	r1, [r3, #4]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	035a      	lsls	r2, r3, #13
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	605a      	str	r2, [r3, #4]
 8008d9a:	e007      	b.n	8008dac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008daa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	051a      	lsls	r2, r3, #20
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689a      	ldr	r2, [r3, #8]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6899      	ldr	r1, [r3, #8]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008dee:	025a      	lsls	r2, r3, #9
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6899      	ldr	r1, [r3, #8]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	029a      	lsls	r2, r3, #10
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	609a      	str	r2, [r3, #8]
}
 8008e1c:	bf00      	nop
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	40012300 	.word	0x40012300
 8008e2c:	0f000001 	.word	0x0f000001

08008e30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d13c      	bne.n	8008ec4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d12b      	bne.n	8008ebc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d127      	bne.n	8008ebc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d006      	beq.n	8008e88 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d119      	bne.n	8008ebc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0220 	bic.w	r2, r2, #32
 8008e96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d105      	bne.n	8008ebc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb4:	f043 0201 	orr.w	r2, r3, #1
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7fe fe13 	bl	8007ae8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008ec2:	e00e      	b.n	8008ee2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec8:	f003 0310 	and.w	r3, r3, #16
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f7ff fd75 	bl	80089c0 <HAL_ADC_ErrorCallback>
}
 8008ed6:	e004      	b.n	8008ee2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	4798      	blx	r3
}
 8008ee2:	bf00      	nop
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff fd4d 	bl	8008998 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008efe:	bf00      	nop
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f12:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2240      	movs	r2, #64	@ 0x40
 8008f18:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1e:	f043 0204 	orr.w	r2, r3, #4
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f7ff fd4a 	bl	80089c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008f2c:	bf00      	nop
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f003 0307 	and.w	r3, r3, #7
 8008f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f58:	4b0c      	ldr	r3, [pc, #48]	@ (8008f8c <__NVIC_SetPriorityGrouping+0x44>)
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f64:	4013      	ands	r3, r2
 8008f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f7a:	4a04      	ldr	r2, [pc, #16]	@ (8008f8c <__NVIC_SetPriorityGrouping+0x44>)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	60d3      	str	r3, [r2, #12]
}
 8008f80:	bf00      	nop
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	e000ed00 	.word	0xe000ed00

08008f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f90:	b480      	push	{r7}
 8008f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f94:	4b04      	ldr	r3, [pc, #16]	@ (8008fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	0a1b      	lsrs	r3, r3, #8
 8008f9a:	f003 0307 	and.w	r3, r3, #7
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	e000ed00 	.word	0xe000ed00

08008fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	db0b      	blt.n	8008fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fbe:	79fb      	ldrb	r3, [r7, #7]
 8008fc0:	f003 021f 	and.w	r2, r3, #31
 8008fc4:	4907      	ldr	r1, [pc, #28]	@ (8008fe4 <__NVIC_EnableIRQ+0x38>)
 8008fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	2001      	movs	r0, #1
 8008fce:	fa00 f202 	lsl.w	r2, r0, r2
 8008fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	e000e100 	.word	0xe000e100

08008fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	db0a      	blt.n	8009012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	490c      	ldr	r1, [pc, #48]	@ (8009034 <__NVIC_SetPriority+0x4c>)
 8009002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009006:	0112      	lsls	r2, r2, #4
 8009008:	b2d2      	uxtb	r2, r2
 800900a:	440b      	add	r3, r1
 800900c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009010:	e00a      	b.n	8009028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	4908      	ldr	r1, [pc, #32]	@ (8009038 <__NVIC_SetPriority+0x50>)
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	3b04      	subs	r3, #4
 8009020:	0112      	lsls	r2, r2, #4
 8009022:	b2d2      	uxtb	r2, r2
 8009024:	440b      	add	r3, r1
 8009026:	761a      	strb	r2, [r3, #24]
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	e000e100 	.word	0xe000e100
 8009038:	e000ed00 	.word	0xe000ed00

0800903c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800903c:	b480      	push	{r7}
 800903e:	b089      	sub	sp, #36	@ 0x24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f003 0307 	and.w	r3, r3, #7
 800904e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	f1c3 0307 	rsb	r3, r3, #7
 8009056:	2b04      	cmp	r3, #4
 8009058:	bf28      	it	cs
 800905a:	2304      	movcs	r3, #4
 800905c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	3304      	adds	r3, #4
 8009062:	2b06      	cmp	r3, #6
 8009064:	d902      	bls.n	800906c <NVIC_EncodePriority+0x30>
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	3b03      	subs	r3, #3
 800906a:	e000      	b.n	800906e <NVIC_EncodePriority+0x32>
 800906c:	2300      	movs	r3, #0
 800906e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009070:	f04f 32ff 	mov.w	r2, #4294967295
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	43da      	mvns	r2, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	401a      	ands	r2, r3
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009084:	f04f 31ff 	mov.w	r1, #4294967295
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	fa01 f303 	lsl.w	r3, r1, r3
 800908e:	43d9      	mvns	r1, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009094:	4313      	orrs	r3, r2
         );
}
 8009096:	4618      	mov	r0, r3
 8009098:	3724      	adds	r7, #36	@ 0x24
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090b4:	d301      	bcc.n	80090ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090b6:	2301      	movs	r3, #1
 80090b8:	e00f      	b.n	80090da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090ba:	4a0a      	ldr	r2, [pc, #40]	@ (80090e4 <SysTick_Config+0x40>)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3b01      	subs	r3, #1
 80090c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090c2:	210f      	movs	r1, #15
 80090c4:	f04f 30ff 	mov.w	r0, #4294967295
 80090c8:	f7ff ff8e 	bl	8008fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090cc:	4b05      	ldr	r3, [pc, #20]	@ (80090e4 <SysTick_Config+0x40>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090d2:	4b04      	ldr	r3, [pc, #16]	@ (80090e4 <SysTick_Config+0x40>)
 80090d4:	2207      	movs	r2, #7
 80090d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	e000e010 	.word	0xe000e010

080090e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff ff29 	bl	8008f48 <__NVIC_SetPriorityGrouping>
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090fe:	b580      	push	{r7, lr}
 8009100:	b086      	sub	sp, #24
 8009102:	af00      	add	r7, sp, #0
 8009104:	4603      	mov	r3, r0
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
 800910a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009110:	f7ff ff3e 	bl	8008f90 <__NVIC_GetPriorityGrouping>
 8009114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	68b9      	ldr	r1, [r7, #8]
 800911a:	6978      	ldr	r0, [r7, #20]
 800911c:	f7ff ff8e 	bl	800903c <NVIC_EncodePriority>
 8009120:	4602      	mov	r2, r0
 8009122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff ff5d 	bl	8008fe8 <__NVIC_SetPriority>
}
 800912e:	bf00      	nop
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	4603      	mov	r3, r0
 800913e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff ff31 	bl	8008fac <__NVIC_EnableIRQ>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff ffa2 	bl	80090a4 <SysTick_Config>
 8009160:	4603      	mov	r3, r0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009178:	f7ff f97a 	bl	8008470 <HAL_GetTick>
 800917c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e099      	b.n	80092bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0201 	bic.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091a8:	e00f      	b.n	80091ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80091aa:	f7ff f961 	bl	8008470 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	2b05      	cmp	r3, #5
 80091b6:	d908      	bls.n	80091ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2203      	movs	r2, #3
 80091c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e078      	b.n	80092bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e8      	bne.n	80091aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	4b38      	ldr	r3, [pc, #224]	@ (80092c4 <HAL_DMA_Init+0x158>)
 80091e4:	4013      	ands	r3, r2
 80091e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009202:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800920e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	4313      	orrs	r3, r2
 800921a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009220:	2b04      	cmp	r3, #4
 8009222:	d107      	bne.n	8009234 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922c:	4313      	orrs	r3, r2
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	4313      	orrs	r3, r2
 8009232:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	f023 0307 	bic.w	r3, r3, #7
 800924a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	4313      	orrs	r3, r2
 8009254:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925a:	2b04      	cmp	r3, #4
 800925c:	d117      	bne.n	800928e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	4313      	orrs	r3, r2
 8009266:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00e      	beq.n	800928e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fb01 	bl	8009878 <DMA_CheckFifoParam>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d008      	beq.n	800928e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2240      	movs	r2, #64	@ 0x40
 8009280:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800928a:	2301      	movs	r3, #1
 800928c:	e016      	b.n	80092bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fab8 	bl	800980c <DMA_CalcBaseAndBitshift>
 800929c:	4603      	mov	r3, r0
 800929e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092a4:	223f      	movs	r2, #63	@ 0x3f
 80092a6:	409a      	lsls	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	f010803f 	.word	0xf010803f

080092c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <HAL_DMA_Start_IT+0x26>
 80092ea:	2302      	movs	r3, #2
 80092ec:	e040      	b.n	8009370 <HAL_DMA_Start_IT+0xa8>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d12f      	bne.n	8009362 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2202      	movs	r2, #2
 8009306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	68b9      	ldr	r1, [r7, #8]
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fa4a 	bl	80097b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009320:	223f      	movs	r2, #63	@ 0x3f
 8009322:	409a      	lsls	r2, r3
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f042 0216 	orr.w	r2, r2, #22
 8009336:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	d007      	beq.n	8009350 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0208 	orr.w	r2, r2, #8
 800934e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f042 0201 	orr.w	r2, r2, #1
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	e005      	b.n	800936e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800936a:	2302      	movs	r3, #2
 800936c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800936e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009384:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009386:	f7ff f873 	bl	8008470 <HAL_GetTick>
 800938a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b02      	cmp	r3, #2
 8009396:	d008      	beq.n	80093aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2280      	movs	r2, #128	@ 0x80
 800939c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e052      	b.n	8009450 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 0216 	bic.w	r2, r2, #22
 80093b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	695a      	ldr	r2, [r3, #20]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d103      	bne.n	80093da <HAL_DMA_Abort+0x62>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d007      	beq.n	80093ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0208 	bic.w	r2, r2, #8
 80093e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 0201 	bic.w	r2, r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80093fa:	e013      	b.n	8009424 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80093fc:	f7ff f838 	bl	8008470 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	2b05      	cmp	r3, #5
 8009408:	d90c      	bls.n	8009424 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2203      	movs	r2, #3
 8009414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e015      	b.n	8009450 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e4      	bne.n	80093fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009436:	223f      	movs	r2, #63	@ 0x3f
 8009438:	409a      	lsls	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b02      	cmp	r3, #2
 800946a:	d004      	beq.n	8009476 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2280      	movs	r2, #128	@ 0x80
 8009470:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e00c      	b.n	8009490 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2205      	movs	r2, #5
 800947a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0201 	bic.w	r2, r2, #1
 800948c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80094a8:	4b8e      	ldr	r3, [pc, #568]	@ (80096e4 <HAL_DMA_IRQHandler+0x248>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a8e      	ldr	r2, [pc, #568]	@ (80096e8 <HAL_DMA_IRQHandler+0x24c>)
 80094ae:	fba2 2303 	umull	r2, r3, r2, r3
 80094b2:	0a9b      	lsrs	r3, r3, #10
 80094b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094c6:	2208      	movs	r2, #8
 80094c8:	409a      	lsls	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	4013      	ands	r3, r2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d01a      	beq.n	8009508 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d013      	beq.n	8009508 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f022 0204 	bic.w	r2, r2, #4
 80094ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094f4:	2208      	movs	r2, #8
 80094f6:	409a      	lsls	r2, r3
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009500:	f043 0201 	orr.w	r2, r3, #1
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800950c:	2201      	movs	r2, #1
 800950e:	409a      	lsls	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4013      	ands	r3, r2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d012      	beq.n	800953e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00b      	beq.n	800953e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800952a:	2201      	movs	r2, #1
 800952c:	409a      	lsls	r2, r3
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009536:	f043 0202 	orr.w	r2, r3, #2
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009542:	2204      	movs	r2, #4
 8009544:	409a      	lsls	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4013      	ands	r3, r2
 800954a:	2b00      	cmp	r3, #0
 800954c:	d012      	beq.n	8009574 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0302 	and.w	r3, r3, #2
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00b      	beq.n	8009574 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009560:	2204      	movs	r2, #4
 8009562:	409a      	lsls	r2, r3
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956c:	f043 0204 	orr.w	r2, r3, #4
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009578:	2210      	movs	r2, #16
 800957a:	409a      	lsls	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4013      	ands	r3, r2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d043      	beq.n	800960c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0308 	and.w	r3, r3, #8
 800958e:	2b00      	cmp	r3, #0
 8009590:	d03c      	beq.n	800960c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009596:	2210      	movs	r2, #16
 8009598:	409a      	lsls	r2, r3
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d018      	beq.n	80095de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d108      	bne.n	80095cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d024      	beq.n	800960c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	4798      	blx	r3
 80095ca:	e01f      	b.n	800960c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01b      	beq.n	800960c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	4798      	blx	r3
 80095dc:	e016      	b.n	800960c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d107      	bne.n	80095fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0208 	bic.w	r2, r2, #8
 80095fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009600:	2b00      	cmp	r3, #0
 8009602:	d003      	beq.n	800960c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009610:	2220      	movs	r2, #32
 8009612:	409a      	lsls	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4013      	ands	r3, r2
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 808f 	beq.w	800973c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0310 	and.w	r3, r3, #16
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 8087 	beq.w	800973c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009632:	2220      	movs	r2, #32
 8009634:	409a      	lsls	r2, r3
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b05      	cmp	r3, #5
 8009644:	d136      	bne.n	80096b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0216 	bic.w	r2, r2, #22
 8009654:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	695a      	ldr	r2, [r3, #20]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009664:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966a:	2b00      	cmp	r3, #0
 800966c:	d103      	bne.n	8009676 <HAL_DMA_IRQHandler+0x1da>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009672:	2b00      	cmp	r3, #0
 8009674:	d007      	beq.n	8009686 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 0208 	bic.w	r2, r2, #8
 8009684:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800968a:	223f      	movs	r2, #63	@ 0x3f
 800968c:	409a      	lsls	r2, r3
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d07e      	beq.n	80097a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	4798      	blx	r3
        }
        return;
 80096b2:	e079      	b.n	80097a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d01d      	beq.n	80096fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10d      	bne.n	80096ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d031      	beq.n	800973c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	4798      	blx	r3
 80096e0:	e02c      	b.n	800973c <HAL_DMA_IRQHandler+0x2a0>
 80096e2:	bf00      	nop
 80096e4:	2000050c 	.word	0x2000050c
 80096e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d023      	beq.n	800973c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	4798      	blx	r3
 80096fc:	e01e      	b.n	800973c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10f      	bne.n	800972c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 0210 	bic.w	r2, r2, #16
 800971a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009740:	2b00      	cmp	r3, #0
 8009742:	d032      	beq.n	80097aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d022      	beq.n	8009796 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2205      	movs	r2, #5
 8009754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0201 	bic.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	3301      	adds	r3, #1
 800976c:	60bb      	str	r3, [r7, #8]
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	429a      	cmp	r2, r3
 8009772:	d307      	bcc.n	8009784 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1f2      	bne.n	8009768 <HAL_DMA_IRQHandler+0x2cc>
 8009782:	e000      	b.n	8009786 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009784:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800979a:	2b00      	cmp	r3, #0
 800979c:	d005      	beq.n	80097aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
 80097a6:	e000      	b.n	80097aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80097a8:	bf00      	nop
    }
  }
}
 80097aa:	3718      	adds	r7, #24
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80097cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	2b40      	cmp	r3, #64	@ 0x40
 80097dc:	d108      	bne.n	80097f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80097ee:	e007      	b.n	8009800 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	60da      	str	r2, [r3, #12]
}
 8009800:	bf00      	nop
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	3b10      	subs	r3, #16
 800981c:	4a14      	ldr	r2, [pc, #80]	@ (8009870 <DMA_CalcBaseAndBitshift+0x64>)
 800981e:	fba2 2303 	umull	r2, r3, r2, r3
 8009822:	091b      	lsrs	r3, r3, #4
 8009824:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009826:	4a13      	ldr	r2, [pc, #76]	@ (8009874 <DMA_CalcBaseAndBitshift+0x68>)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2b03      	cmp	r3, #3
 8009838:	d909      	bls.n	800984e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009842:	f023 0303 	bic.w	r3, r3, #3
 8009846:	1d1a      	adds	r2, r3, #4
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	659a      	str	r2, [r3, #88]	@ 0x58
 800984c:	e007      	b.n	800985e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009856:	f023 0303 	bic.w	r3, r3, #3
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	aaaaaaab 	.word	0xaaaaaaab
 8009874:	080141b0 	.word	0x080141b0

08009878 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009888:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d11f      	bne.n	80098d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2b03      	cmp	r3, #3
 8009896:	d856      	bhi.n	8009946 <DMA_CheckFifoParam+0xce>
 8009898:	a201      	add	r2, pc, #4	@ (adr r2, 80098a0 <DMA_CheckFifoParam+0x28>)
 800989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989e:	bf00      	nop
 80098a0:	080098b1 	.word	0x080098b1
 80098a4:	080098c3 	.word	0x080098c3
 80098a8:	080098b1 	.word	0x080098b1
 80098ac:	08009947 	.word	0x08009947
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d046      	beq.n	800994a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098c0:	e043      	b.n	800994a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80098ca:	d140      	bne.n	800994e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098d0:	e03d      	b.n	800994e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098da:	d121      	bne.n	8009920 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d837      	bhi.n	8009952 <DMA_CheckFifoParam+0xda>
 80098e2:	a201      	add	r2, pc, #4	@ (adr r2, 80098e8 <DMA_CheckFifoParam+0x70>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	080098f9 	.word	0x080098f9
 80098ec:	080098ff 	.word	0x080098ff
 80098f0:	080098f9 	.word	0x080098f9
 80098f4:	08009911 	.word	0x08009911
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
      break;
 80098fc:	e030      	b.n	8009960 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009902:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d025      	beq.n	8009956 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800990e:	e022      	b.n	8009956 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009914:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009918:	d11f      	bne.n	800995a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800991e:	e01c      	b.n	800995a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2b02      	cmp	r3, #2
 8009924:	d903      	bls.n	800992e <DMA_CheckFifoParam+0xb6>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b03      	cmp	r3, #3
 800992a:	d003      	beq.n	8009934 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800992c:	e018      	b.n	8009960 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	73fb      	strb	r3, [r7, #15]
      break;
 8009932:	e015      	b.n	8009960 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00e      	beq.n	800995e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	73fb      	strb	r3, [r7, #15]
      break;
 8009944:	e00b      	b.n	800995e <DMA_CheckFifoParam+0xe6>
      break;
 8009946:	bf00      	nop
 8009948:	e00a      	b.n	8009960 <DMA_CheckFifoParam+0xe8>
      break;
 800994a:	bf00      	nop
 800994c:	e008      	b.n	8009960 <DMA_CheckFifoParam+0xe8>
      break;
 800994e:	bf00      	nop
 8009950:	e006      	b.n	8009960 <DMA_CheckFifoParam+0xe8>
      break;
 8009952:	bf00      	nop
 8009954:	e004      	b.n	8009960 <DMA_CheckFifoParam+0xe8>
      break;
 8009956:	bf00      	nop
 8009958:	e002      	b.n	8009960 <DMA_CheckFifoParam+0xe8>
      break;   
 800995a:	bf00      	nop
 800995c:	e000      	b.n	8009960 <DMA_CheckFifoParam+0xe8>
      break;
 800995e:	bf00      	nop
    }
  } 
  
  return status; 
 8009960:	7bfb      	ldrb	r3, [r7, #15]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop

08009970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009970:	b480      	push	{r7}
 8009972:	b089      	sub	sp, #36	@ 0x24
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800997a:	2300      	movs	r3, #0
 800997c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800997e:	2300      	movs	r3, #0
 8009980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009982:	2300      	movs	r3, #0
 8009984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009986:	2300      	movs	r3, #0
 8009988:	61fb      	str	r3, [r7, #28]
 800998a:	e177      	b.n	8009c7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800998c:	2201      	movs	r2, #1
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	fa02 f303 	lsl.w	r3, r2, r3
 8009994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4013      	ands	r3, r2
 800999e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	f040 8166 	bne.w	8009c76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f003 0303 	and.w	r3, r3, #3
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d005      	beq.n	80099c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d130      	bne.n	8009a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	005b      	lsls	r3, r3, #1
 80099cc:	2203      	movs	r2, #3
 80099ce:	fa02 f303 	lsl.w	r3, r2, r3
 80099d2:	43db      	mvns	r3, r3
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	4013      	ands	r3, r2
 80099d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	68da      	ldr	r2, [r3, #12]
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	fa02 f303 	lsl.w	r3, r2, r3
 80099e6:	69ba      	ldr	r2, [r7, #24]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80099f8:	2201      	movs	r2, #1
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009a00:	43db      	mvns	r3, r3
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	4013      	ands	r3, r2
 8009a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	091b      	lsrs	r3, r3, #4
 8009a0e:	f003 0201 	and.w	r2, r3, #1
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	fa02 f303 	lsl.w	r3, r2, r3
 8009a18:	69ba      	ldr	r2, [r7, #24]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	69ba      	ldr	r2, [r7, #24]
 8009a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f003 0303 	and.w	r3, r3, #3
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d017      	beq.n	8009a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	005b      	lsls	r3, r3, #1
 8009a3a:	2203      	movs	r2, #3
 8009a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a40:	43db      	mvns	r3, r3
 8009a42:	69ba      	ldr	r2, [r7, #24]
 8009a44:	4013      	ands	r3, r2
 8009a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	fa02 f303 	lsl.w	r3, r2, r3
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	69ba      	ldr	r2, [r7, #24]
 8009a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f003 0303 	and.w	r3, r3, #3
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d123      	bne.n	8009ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	08da      	lsrs	r2, r3, #3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3208      	adds	r2, #8
 8009a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	220f      	movs	r2, #15
 8009a84:	fa02 f303 	lsl.w	r3, r2, r3
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	69ba      	ldr	r2, [r7, #24]
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	691a      	ldr	r2, [r3, #16]
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	08da      	lsrs	r2, r3, #3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3208      	adds	r2, #8
 8009aae:	69b9      	ldr	r1, [r7, #24]
 8009ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	2203      	movs	r2, #3
 8009ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac4:	43db      	mvns	r3, r3
 8009ac6:	69ba      	ldr	r2, [r7, #24]
 8009ac8:	4013      	ands	r3, r2
 8009aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f003 0203 	and.w	r2, r3, #3
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	69ba      	ldr	r2, [r7, #24]
 8009ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80c0 	beq.w	8009c76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
 8009afa:	4b66      	ldr	r3, [pc, #408]	@ (8009c94 <HAL_GPIO_Init+0x324>)
 8009afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009afe:	4a65      	ldr	r2, [pc, #404]	@ (8009c94 <HAL_GPIO_Init+0x324>)
 8009b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b06:	4b63      	ldr	r3, [pc, #396]	@ (8009c94 <HAL_GPIO_Init+0x324>)
 8009b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b12:	4a61      	ldr	r2, [pc, #388]	@ (8009c98 <HAL_GPIO_Init+0x328>)
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	089b      	lsrs	r3, r3, #2
 8009b18:	3302      	adds	r3, #2
 8009b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	220f      	movs	r2, #15
 8009b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2e:	43db      	mvns	r3, r3
 8009b30:	69ba      	ldr	r2, [r7, #24]
 8009b32:	4013      	ands	r3, r2
 8009b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a58      	ldr	r2, [pc, #352]	@ (8009c9c <HAL_GPIO_Init+0x32c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d037      	beq.n	8009bae <HAL_GPIO_Init+0x23e>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a57      	ldr	r2, [pc, #348]	@ (8009ca0 <HAL_GPIO_Init+0x330>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d031      	beq.n	8009baa <HAL_GPIO_Init+0x23a>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a56      	ldr	r2, [pc, #344]	@ (8009ca4 <HAL_GPIO_Init+0x334>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d02b      	beq.n	8009ba6 <HAL_GPIO_Init+0x236>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a55      	ldr	r2, [pc, #340]	@ (8009ca8 <HAL_GPIO_Init+0x338>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d025      	beq.n	8009ba2 <HAL_GPIO_Init+0x232>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a54      	ldr	r2, [pc, #336]	@ (8009cac <HAL_GPIO_Init+0x33c>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d01f      	beq.n	8009b9e <HAL_GPIO_Init+0x22e>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a53      	ldr	r2, [pc, #332]	@ (8009cb0 <HAL_GPIO_Init+0x340>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d019      	beq.n	8009b9a <HAL_GPIO_Init+0x22a>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a52      	ldr	r2, [pc, #328]	@ (8009cb4 <HAL_GPIO_Init+0x344>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d013      	beq.n	8009b96 <HAL_GPIO_Init+0x226>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a51      	ldr	r2, [pc, #324]	@ (8009cb8 <HAL_GPIO_Init+0x348>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00d      	beq.n	8009b92 <HAL_GPIO_Init+0x222>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a50      	ldr	r2, [pc, #320]	@ (8009cbc <HAL_GPIO_Init+0x34c>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d007      	beq.n	8009b8e <HAL_GPIO_Init+0x21e>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a4f      	ldr	r2, [pc, #316]	@ (8009cc0 <HAL_GPIO_Init+0x350>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d101      	bne.n	8009b8a <HAL_GPIO_Init+0x21a>
 8009b86:	2309      	movs	r3, #9
 8009b88:	e012      	b.n	8009bb0 <HAL_GPIO_Init+0x240>
 8009b8a:	230a      	movs	r3, #10
 8009b8c:	e010      	b.n	8009bb0 <HAL_GPIO_Init+0x240>
 8009b8e:	2308      	movs	r3, #8
 8009b90:	e00e      	b.n	8009bb0 <HAL_GPIO_Init+0x240>
 8009b92:	2307      	movs	r3, #7
 8009b94:	e00c      	b.n	8009bb0 <HAL_GPIO_Init+0x240>
 8009b96:	2306      	movs	r3, #6
 8009b98:	e00a      	b.n	8009bb0 <HAL_GPIO_Init+0x240>
 8009b9a:	2305      	movs	r3, #5
 8009b9c:	e008      	b.n	8009bb0 <HAL_GPIO_Init+0x240>
 8009b9e:	2304      	movs	r3, #4
 8009ba0:	e006      	b.n	8009bb0 <HAL_GPIO_Init+0x240>
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e004      	b.n	8009bb0 <HAL_GPIO_Init+0x240>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e002      	b.n	8009bb0 <HAL_GPIO_Init+0x240>
 8009baa:	2301      	movs	r3, #1
 8009bac:	e000      	b.n	8009bb0 <HAL_GPIO_Init+0x240>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	69fa      	ldr	r2, [r7, #28]
 8009bb2:	f002 0203 	and.w	r2, r2, #3
 8009bb6:	0092      	lsls	r2, r2, #2
 8009bb8:	4093      	lsls	r3, r2
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009bc0:	4935      	ldr	r1, [pc, #212]	@ (8009c98 <HAL_GPIO_Init+0x328>)
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	089b      	lsrs	r3, r3, #2
 8009bc6:	3302      	adds	r3, #2
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009bce:	4b3d      	ldr	r3, [pc, #244]	@ (8009cc4 <HAL_GPIO_Init+0x354>)
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	43db      	mvns	r3, r3
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	4013      	ands	r3, r2
 8009bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009bea:	69ba      	ldr	r2, [r7, #24]
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009bf2:	4a34      	ldr	r2, [pc, #208]	@ (8009cc4 <HAL_GPIO_Init+0x354>)
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009bf8:	4b32      	ldr	r3, [pc, #200]	@ (8009cc4 <HAL_GPIO_Init+0x354>)
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	43db      	mvns	r3, r3
 8009c02:	69ba      	ldr	r2, [r7, #24]
 8009c04:	4013      	ands	r3, r2
 8009c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d003      	beq.n	8009c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009c1c:	4a29      	ldr	r2, [pc, #164]	@ (8009cc4 <HAL_GPIO_Init+0x354>)
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009c22:	4b28      	ldr	r3, [pc, #160]	@ (8009cc4 <HAL_GPIO_Init+0x354>)
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	43db      	mvns	r3, r3
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009c46:	4a1f      	ldr	r2, [pc, #124]	@ (8009cc4 <HAL_GPIO_Init+0x354>)
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8009cc4 <HAL_GPIO_Init+0x354>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	43db      	mvns	r3, r3
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	4013      	ands	r3, r2
 8009c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009c70:	4a14      	ldr	r2, [pc, #80]	@ (8009cc4 <HAL_GPIO_Init+0x354>)
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	61fb      	str	r3, [r7, #28]
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	2b0f      	cmp	r3, #15
 8009c80:	f67f ae84 	bls.w	800998c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop
 8009c88:	3724      	adds	r7, #36	@ 0x24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	40023800 	.word	0x40023800
 8009c98:	40013800 	.word	0x40013800
 8009c9c:	40020000 	.word	0x40020000
 8009ca0:	40020400 	.word	0x40020400
 8009ca4:	40020800 	.word	0x40020800
 8009ca8:	40020c00 	.word	0x40020c00
 8009cac:	40021000 	.word	0x40021000
 8009cb0:	40021400 	.word	0x40021400
 8009cb4:	40021800 	.word	0x40021800
 8009cb8:	40021c00 	.word	0x40021c00
 8009cbc:	40022000 	.word	0x40022000
 8009cc0:	40022400 	.word	0x40022400
 8009cc4:	40013c00 	.word	0x40013c00

08009cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	691a      	ldr	r2, [r3, #16]
 8009cd8:	887b      	ldrh	r3, [r7, #2]
 8009cda:	4013      	ands	r3, r2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	73fb      	strb	r3, [r7, #15]
 8009ce4:	e001      	b.n	8009cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	807b      	strh	r3, [r7, #2]
 8009d04:	4613      	mov	r3, r2
 8009d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009d08:	787b      	ldrb	r3, [r7, #1]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d0e:	887a      	ldrh	r2, [r7, #2]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009d14:	e003      	b.n	8009d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009d16:	887b      	ldrh	r3, [r7, #2]
 8009d18:	041a      	lsls	r2, r3, #16
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	619a      	str	r2, [r3, #24]
}
 8009d1e:	bf00      	nop
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
	...

08009d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009d36:	4b08      	ldr	r3, [pc, #32]	@ (8009d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009d38:	695a      	ldr	r2, [r3, #20]
 8009d3a:	88fb      	ldrh	r3, [r7, #6]
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d006      	beq.n	8009d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009d42:	4a05      	ldr	r2, [pc, #20]	@ (8009d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009d44:	88fb      	ldrh	r3, [r7, #6]
 8009d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009d48:	88fb      	ldrh	r3, [r7, #6]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe f9e8 	bl	8008120 <HAL_GPIO_EXTI_Callback>
  }
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	40013c00 	.word	0x40013c00

08009d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e12b      	b.n	8009fc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d106      	bne.n	8009d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7fd fb1a 	bl	80073bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2224      	movs	r2, #36	@ 0x24
 8009d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f022 0201 	bic.w	r2, r2, #1
 8009d9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009dae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009dbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009dc0:	f001 fcdc 	bl	800b77c <HAL_RCC_GetPCLK1Freq>
 8009dc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	4a81      	ldr	r2, [pc, #516]	@ (8009fd0 <HAL_I2C_Init+0x274>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d807      	bhi.n	8009de0 <HAL_I2C_Init+0x84>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4a80      	ldr	r2, [pc, #512]	@ (8009fd4 <HAL_I2C_Init+0x278>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	bf94      	ite	ls
 8009dd8:	2301      	movls	r3, #1
 8009dda:	2300      	movhi	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	e006      	b.n	8009dee <HAL_I2C_Init+0x92>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4a7d      	ldr	r2, [pc, #500]	@ (8009fd8 <HAL_I2C_Init+0x27c>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	bf94      	ite	ls
 8009de8:	2301      	movls	r3, #1
 8009dea:	2300      	movhi	r3, #0
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e0e7      	b.n	8009fc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4a78      	ldr	r2, [pc, #480]	@ (8009fdc <HAL_I2C_Init+0x280>)
 8009dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8009dfe:	0c9b      	lsrs	r3, r3, #18
 8009e00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6a1b      	ldr	r3, [r3, #32]
 8009e1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	4a6a      	ldr	r2, [pc, #424]	@ (8009fd0 <HAL_I2C_Init+0x274>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d802      	bhi.n	8009e30 <HAL_I2C_Init+0xd4>
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	e009      	b.n	8009e44 <HAL_I2C_Init+0xe8>
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009e36:	fb02 f303 	mul.w	r3, r2, r3
 8009e3a:	4a69      	ldr	r2, [pc, #420]	@ (8009fe0 <HAL_I2C_Init+0x284>)
 8009e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e40:	099b      	lsrs	r3, r3, #6
 8009e42:	3301      	adds	r3, #1
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6812      	ldr	r2, [r2, #0]
 8009e48:	430b      	orrs	r3, r1
 8009e4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009e56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	495c      	ldr	r1, [pc, #368]	@ (8009fd0 <HAL_I2C_Init+0x274>)
 8009e60:	428b      	cmp	r3, r1
 8009e62:	d819      	bhi.n	8009e98 <HAL_I2C_Init+0x13c>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	1e59      	subs	r1, r3, #1
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	005b      	lsls	r3, r3, #1
 8009e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e72:	1c59      	adds	r1, r3, #1
 8009e74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009e78:	400b      	ands	r3, r1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00a      	beq.n	8009e94 <HAL_I2C_Init+0x138>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	1e59      	subs	r1, r3, #1
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e92:	e051      	b.n	8009f38 <HAL_I2C_Init+0x1dc>
 8009e94:	2304      	movs	r3, #4
 8009e96:	e04f      	b.n	8009f38 <HAL_I2C_Init+0x1dc>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d111      	bne.n	8009ec4 <HAL_I2C_Init+0x168>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	1e58      	subs	r0, r3, #1
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6859      	ldr	r1, [r3, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	440b      	add	r3, r1
 8009eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bf0c      	ite	eq
 8009ebc:	2301      	moveq	r3, #1
 8009ebe:	2300      	movne	r3, #0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	e012      	b.n	8009eea <HAL_I2C_Init+0x18e>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	1e58      	subs	r0, r3, #1
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6859      	ldr	r1, [r3, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	0099      	lsls	r1, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eda:	3301      	adds	r3, #1
 8009edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	bf0c      	ite	eq
 8009ee4:	2301      	moveq	r3, #1
 8009ee6:	2300      	movne	r3, #0
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <HAL_I2C_Init+0x196>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e022      	b.n	8009f38 <HAL_I2C_Init+0x1dc>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10e      	bne.n	8009f18 <HAL_I2C_Init+0x1bc>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	1e58      	subs	r0, r3, #1
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6859      	ldr	r1, [r3, #4]
 8009f02:	460b      	mov	r3, r1
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	440b      	add	r3, r1
 8009f08:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f16:	e00f      	b.n	8009f38 <HAL_I2C_Init+0x1dc>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	1e58      	subs	r0, r3, #1
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6859      	ldr	r1, [r3, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	0099      	lsls	r1, r3, #2
 8009f28:	440b      	add	r3, r1
 8009f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f2e:	3301      	adds	r3, #1
 8009f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	6809      	ldr	r1, [r1, #0]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	69da      	ldr	r2, [r3, #28]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009f66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6911      	ldr	r1, [r2, #16]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	68d2      	ldr	r2, [r2, #12]
 8009f72:	4311      	orrs	r1, r2
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6812      	ldr	r2, [r2, #0]
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	695a      	ldr	r2, [r3, #20]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 0201 	orr.w	r2, r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	000186a0 	.word	0x000186a0
 8009fd4:	001e847f 	.word	0x001e847f
 8009fd8:	003d08ff 	.word	0x003d08ff
 8009fdc:	431bde83 	.word	0x431bde83
 8009fe0:	10624dd3 	.word	0x10624dd3

08009fe4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	4608      	mov	r0, r1
 8009fee:	4611      	mov	r1, r2
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	817b      	strh	r3, [r7, #10]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	813b      	strh	r3, [r7, #8]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ffe:	f7fe fa37 	bl	8008470 <HAL_GetTick>
 800a002:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	f040 80d9 	bne.w	800a1c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	2319      	movs	r3, #25
 800a018:	2201      	movs	r2, #1
 800a01a:	496d      	ldr	r1, [pc, #436]	@ (800a1d0 <HAL_I2C_Mem_Write+0x1ec>)
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fc8b 	bl	800a938 <I2C_WaitOnFlagUntilTimeout>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a028:	2302      	movs	r3, #2
 800a02a:	e0cc      	b.n	800a1c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <HAL_I2C_Mem_Write+0x56>
 800a036:	2302      	movs	r3, #2
 800a038:	e0c5      	b.n	800a1c6 <HAL_I2C_Mem_Write+0x1e2>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d007      	beq.n	800a060 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0201 	orr.w	r2, r2, #1
 800a05e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a06e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2221      	movs	r2, #33	@ 0x21
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2240      	movs	r2, #64	@ 0x40
 800a07c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6a3a      	ldr	r2, [r7, #32]
 800a08a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a096:	b29a      	uxth	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4a4d      	ldr	r2, [pc, #308]	@ (800a1d4 <HAL_I2C_Mem_Write+0x1f0>)
 800a0a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0a2:	88f8      	ldrh	r0, [r7, #6]
 800a0a4:	893a      	ldrh	r2, [r7, #8]
 800a0a6:	8979      	ldrh	r1, [r7, #10]
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 fac2 	bl	800a63c <I2C_RequestMemoryWrite>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d052      	beq.n	800a164 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e081      	b.n	800a1c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 fd50 	bl	800ab6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00d      	beq.n	800a0ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d6:	2b04      	cmp	r3, #4
 800a0d8:	d107      	bne.n	800a0ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e06b      	b.n	800a1c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f2:	781a      	ldrb	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a108:	3b01      	subs	r3, #1
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a114:	b29b      	uxth	r3, r3
 800a116:	3b01      	subs	r3, #1
 800a118:	b29a      	uxth	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d11b      	bne.n	800a164 <HAL_I2C_Mem_Write+0x180>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a130:	2b00      	cmp	r3, #0
 800a132:	d017      	beq.n	800a164 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a138:	781a      	ldrb	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a14e:	3b01      	subs	r3, #1
 800a150:	b29a      	uxth	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	3b01      	subs	r3, #1
 800a15e:	b29a      	uxth	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1aa      	bne.n	800a0c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f000 fd43 	bl	800abfc <I2C_WaitOnBTFFlagUntilTimeout>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00d      	beq.n	800a198 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a180:	2b04      	cmp	r3, #4
 800a182:	d107      	bne.n	800a194 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a192:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e016      	b.n	800a1c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	e000      	b.n	800a1c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a1c4:	2302      	movs	r3, #2
  }
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	00100002 	.word	0x00100002
 800a1d4:	ffff0000 	.word	0xffff0000

0800a1d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08c      	sub	sp, #48	@ 0x30
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	817b      	strh	r3, [r7, #10]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	813b      	strh	r3, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1f2:	f7fe f93d 	bl	8008470 <HAL_GetTick>
 800a1f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b20      	cmp	r3, #32
 800a202:	f040 8214 	bne.w	800a62e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	2319      	movs	r3, #25
 800a20c:	2201      	movs	r2, #1
 800a20e:	497b      	ldr	r1, [pc, #492]	@ (800a3fc <HAL_I2C_Mem_Read+0x224>)
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 fb91 	bl	800a938 <I2C_WaitOnFlagUntilTimeout>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a21c:	2302      	movs	r3, #2
 800a21e:	e207      	b.n	800a630 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a226:	2b01      	cmp	r3, #1
 800a228:	d101      	bne.n	800a22e <HAL_I2C_Mem_Read+0x56>
 800a22a:	2302      	movs	r3, #2
 800a22c:	e200      	b.n	800a630 <HAL_I2C_Mem_Read+0x458>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b01      	cmp	r3, #1
 800a242:	d007      	beq.n	800a254 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f042 0201 	orr.w	r2, r2, #1
 800a252:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a262:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2222      	movs	r2, #34	@ 0x22
 800a268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2240      	movs	r2, #64	@ 0x40
 800a270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a27e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4a5b      	ldr	r2, [pc, #364]	@ (800a400 <HAL_I2C_Mem_Read+0x228>)
 800a294:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a296:	88f8      	ldrh	r0, [r7, #6]
 800a298:	893a      	ldrh	r2, [r7, #8]
 800a29a:	8979      	ldrh	r1, [r7, #10]
 800a29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29e:	9301      	str	r3, [sp, #4]
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 fa5e 	bl	800a768 <I2C_RequestMemoryRead>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e1bc      	b.n	800a630 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d113      	bne.n	800a2e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2be:	2300      	movs	r3, #0
 800a2c0:	623b      	str	r3, [r7, #32]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	623b      	str	r3, [r7, #32]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	623b      	str	r3, [r7, #32]
 800a2d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	e190      	b.n	800a608 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d11b      	bne.n	800a326 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2fe:	2300      	movs	r3, #0
 800a300:	61fb      	str	r3, [r7, #28]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	61fb      	str	r3, [r7, #28]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	61fb      	str	r3, [r7, #28]
 800a312:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	e170      	b.n	800a608 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d11b      	bne.n	800a366 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a33c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a34c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a34e:	2300      	movs	r3, #0
 800a350:	61bb      	str	r3, [r7, #24]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	61bb      	str	r3, [r7, #24]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	61bb      	str	r3, [r7, #24]
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	e150      	b.n	800a608 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a366:	2300      	movs	r3, #0
 800a368:	617b      	str	r3, [r7, #20]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a37c:	e144      	b.n	800a608 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a382:	2b03      	cmp	r3, #3
 800a384:	f200 80f1 	bhi.w	800a56a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d123      	bne.n	800a3d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a392:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f000 fc79 	bl	800ac8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e145      	b.n	800a630 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	691a      	ldr	r2, [r3, #16]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ae:	b2d2      	uxtb	r2, r2
 800a3b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a3d6:	e117      	b.n	800a608 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d14e      	bne.n	800a47e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	4906      	ldr	r1, [pc, #24]	@ (800a404 <HAL_I2C_Mem_Read+0x22c>)
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 faa4 	bl	800a938 <I2C_WaitOnFlagUntilTimeout>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d008      	beq.n	800a408 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e11a      	b.n	800a630 <HAL_I2C_Mem_Read+0x458>
 800a3fa:	bf00      	nop
 800a3fc:	00100002 	.word	0x00100002
 800a400:	ffff0000 	.word	0xffff0000
 800a404:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	691a      	ldr	r2, [r3, #16]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a422:	b2d2      	uxtb	r2, r2
 800a424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a434:	3b01      	subs	r3, #1
 800a436:	b29a      	uxth	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a440:	b29b      	uxth	r3, r3
 800a442:	3b01      	subs	r3, #1
 800a444:	b29a      	uxth	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	691a      	ldr	r2, [r3, #16]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a454:	b2d2      	uxtb	r2, r2
 800a456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a466:	3b01      	subs	r3, #1
 800a468:	b29a      	uxth	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a472:	b29b      	uxth	r3, r3
 800a474:	3b01      	subs	r3, #1
 800a476:	b29a      	uxth	r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a47c:	e0c4      	b.n	800a608 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a484:	2200      	movs	r2, #0
 800a486:	496c      	ldr	r1, [pc, #432]	@ (800a638 <HAL_I2C_Mem_Read+0x460>)
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 fa55 	bl	800a938 <I2C_WaitOnFlagUntilTimeout>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e0cb      	b.n	800a630 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	691a      	ldr	r2, [r3, #16]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b2:	b2d2      	uxtb	r2, r2
 800a4b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	4955      	ldr	r1, [pc, #340]	@ (800a638 <HAL_I2C_Mem_Read+0x460>)
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 fa27 	bl	800a938 <I2C_WaitOnFlagUntilTimeout>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e09d      	b.n	800a630 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	691a      	ldr	r2, [r3, #16]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a50e:	b2d2      	uxtb	r2, r2
 800a510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a520:	3b01      	subs	r3, #1
 800a522:	b29a      	uxth	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	3b01      	subs	r3, #1
 800a530:	b29a      	uxth	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	691a      	ldr	r2, [r3, #16]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a540:	b2d2      	uxtb	r2, r2
 800a542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a552:	3b01      	subs	r3, #1
 800a554:	b29a      	uxth	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a55e:	b29b      	uxth	r3, r3
 800a560:	3b01      	subs	r3, #1
 800a562:	b29a      	uxth	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a568:	e04e      	b.n	800a608 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a56a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a56c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 fb8c 	bl	800ac8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e058      	b.n	800a630 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	691a      	ldr	r2, [r3, #16]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a588:	b2d2      	uxtb	r2, r2
 800a58a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a59a:	3b01      	subs	r3, #1
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	f003 0304 	and.w	r3, r3, #4
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	d124      	bne.n	800a608 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d107      	bne.n	800a5d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	691a      	ldr	r2, [r3, #16]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e0:	b2d2      	uxtb	r2, r2
 800a5e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e8:	1c5a      	adds	r2, r3, #1
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	3b01      	subs	r3, #1
 800a602:	b29a      	uxth	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f47f aeb6 	bne.w	800a37e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2220      	movs	r2, #32
 800a616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	e000      	b.n	800a630 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a62e:	2302      	movs	r3, #2
  }
}
 800a630:	4618      	mov	r0, r3
 800a632:	3728      	adds	r7, #40	@ 0x28
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	00010004 	.word	0x00010004

0800a63c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af02      	add	r7, sp, #8
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	4608      	mov	r0, r1
 800a646:	4611      	mov	r1, r2
 800a648:	461a      	mov	r2, r3
 800a64a:	4603      	mov	r3, r0
 800a64c:	817b      	strh	r3, [r7, #10]
 800a64e:	460b      	mov	r3, r1
 800a650:	813b      	strh	r3, [r7, #8]
 800a652:	4613      	mov	r3, r2
 800a654:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a664:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f000 f960 	bl	800a938 <I2C_WaitOnFlagUntilTimeout>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00d      	beq.n	800a69a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a68c:	d103      	bne.n	800a696 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a694:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a696:	2303      	movs	r3, #3
 800a698:	e05f      	b.n	800a75a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a69a:	897b      	ldrh	r3, [r7, #10]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	461a      	mov	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a6a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ac:	6a3a      	ldr	r2, [r7, #32]
 800a6ae:	492d      	ldr	r1, [pc, #180]	@ (800a764 <I2C_RequestMemoryWrite+0x128>)
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f9bb 	bl	800aa2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e04c      	b.n	800a75a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	617b      	str	r3, [r7, #20]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	617b      	str	r3, [r7, #20]
 800a6d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6d8:	6a39      	ldr	r1, [r7, #32]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 fa46 	bl	800ab6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00d      	beq.n	800a702 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ea:	2b04      	cmp	r3, #4
 800a6ec:	d107      	bne.n	800a6fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e02b      	b.n	800a75a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a702:	88fb      	ldrh	r3, [r7, #6]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d105      	bne.n	800a714 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a708:	893b      	ldrh	r3, [r7, #8]
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	611a      	str	r2, [r3, #16]
 800a712:	e021      	b.n	800a758 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a714:	893b      	ldrh	r3, [r7, #8]
 800a716:	0a1b      	lsrs	r3, r3, #8
 800a718:	b29b      	uxth	r3, r3
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a724:	6a39      	ldr	r1, [r7, #32]
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 fa20 	bl	800ab6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00d      	beq.n	800a74e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a736:	2b04      	cmp	r3, #4
 800a738:	d107      	bne.n	800a74a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a748:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e005      	b.n	800a75a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a74e:	893b      	ldrh	r3, [r7, #8]
 800a750:	b2da      	uxtb	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3718      	adds	r7, #24
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	00010002 	.word	0x00010002

0800a768 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af02      	add	r7, sp, #8
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	4608      	mov	r0, r1
 800a772:	4611      	mov	r1, r2
 800a774:	461a      	mov	r2, r3
 800a776:	4603      	mov	r3, r0
 800a778:	817b      	strh	r3, [r7, #10]
 800a77a:	460b      	mov	r3, r1
 800a77c:	813b      	strh	r3, [r7, #8]
 800a77e:	4613      	mov	r3, r2
 800a780:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a790:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 f8c2 	bl	800a938 <I2C_WaitOnFlagUntilTimeout>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00d      	beq.n	800a7d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7c8:	d103      	bne.n	800a7d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e0aa      	b.n	800a92c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a7d6:	897b      	ldrh	r3, [r7, #10]
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	461a      	mov	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a7e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e8:	6a3a      	ldr	r2, [r7, #32]
 800a7ea:	4952      	ldr	r1, [pc, #328]	@ (800a934 <I2C_RequestMemoryRead+0x1cc>)
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f000 f91d 	bl	800aa2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e097      	b.n	800a92c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	617b      	str	r3, [r7, #20]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	617b      	str	r3, [r7, #20]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	617b      	str	r3, [r7, #20]
 800a810:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a814:	6a39      	ldr	r1, [r7, #32]
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 f9a8 	bl	800ab6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00d      	beq.n	800a83e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a826:	2b04      	cmp	r3, #4
 800a828:	d107      	bne.n	800a83a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a838:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e076      	b.n	800a92c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a83e:	88fb      	ldrh	r3, [r7, #6]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d105      	bne.n	800a850 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a844:	893b      	ldrh	r3, [r7, #8]
 800a846:	b2da      	uxtb	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	611a      	str	r2, [r3, #16]
 800a84e:	e021      	b.n	800a894 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a850:	893b      	ldrh	r3, [r7, #8]
 800a852:	0a1b      	lsrs	r3, r3, #8
 800a854:	b29b      	uxth	r3, r3
 800a856:	b2da      	uxtb	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a860:	6a39      	ldr	r1, [r7, #32]
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f000 f982 	bl	800ab6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00d      	beq.n	800a88a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a872:	2b04      	cmp	r3, #4
 800a874:	d107      	bne.n	800a886 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a884:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e050      	b.n	800a92c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a88a:	893b      	ldrh	r3, [r7, #8]
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a896:	6a39      	ldr	r1, [r7, #32]
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 f967 	bl	800ab6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00d      	beq.n	800a8c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	d107      	bne.n	800a8bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e035      	b.n	800a92c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 f82b 	bl	800a938 <I2C_WaitOnFlagUntilTimeout>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00d      	beq.n	800a904 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8f6:	d103      	bne.n	800a900 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e013      	b.n	800a92c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a904:	897b      	ldrh	r3, [r7, #10]
 800a906:	b2db      	uxtb	r3, r3
 800a908:	f043 0301 	orr.w	r3, r3, #1
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a916:	6a3a      	ldr	r2, [r7, #32]
 800a918:	4906      	ldr	r1, [pc, #24]	@ (800a934 <I2C_RequestMemoryRead+0x1cc>)
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f886 	bl	800aa2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e000      	b.n	800a92c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	00010002 	.word	0x00010002

0800a938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	4613      	mov	r3, r2
 800a946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a948:	e048      	b.n	800a9dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a950:	d044      	beq.n	800a9dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a952:	f7fd fd8d 	bl	8008470 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d302      	bcc.n	800a968 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d139      	bne.n	800a9dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	0c1b      	lsrs	r3, r3, #16
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d10d      	bne.n	800a98e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	695b      	ldr	r3, [r3, #20]
 800a978:	43da      	mvns	r2, r3
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	4013      	ands	r3, r2
 800a97e:	b29b      	uxth	r3, r3
 800a980:	2b00      	cmp	r3, #0
 800a982:	bf0c      	ite	eq
 800a984:	2301      	moveq	r3, #1
 800a986:	2300      	movne	r3, #0
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	461a      	mov	r2, r3
 800a98c:	e00c      	b.n	800a9a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	43da      	mvns	r2, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	4013      	ands	r3, r2
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bf0c      	ite	eq
 800a9a0:	2301      	moveq	r3, #1
 800a9a2:	2300      	movne	r3, #0
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d116      	bne.n	800a9dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c8:	f043 0220 	orr.w	r2, r3, #32
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e023      	b.n	800aa24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	0c1b      	lsrs	r3, r3, #16
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d10d      	bne.n	800aa02 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	43da      	mvns	r2, r3
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	bf0c      	ite	eq
 800a9f8:	2301      	moveq	r3, #1
 800a9fa:	2300      	movne	r3, #0
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	461a      	mov	r2, r3
 800aa00:	e00c      	b.n	800aa1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	43da      	mvns	r2, r3
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	bf0c      	ite	eq
 800aa14:	2301      	moveq	r3, #1
 800aa16:	2300      	movne	r3, #0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d093      	beq.n	800a94a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa3a:	e071      	b.n	800ab20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa4a:	d123      	bne.n	800aa94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aa64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2220      	movs	r2, #32
 800aa70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa80:	f043 0204 	orr.w	r2, r3, #4
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e067      	b.n	800ab64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9a:	d041      	beq.n	800ab20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa9c:	f7fd fce8 	bl	8008470 <HAL_GetTick>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d302      	bcc.n	800aab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d136      	bne.n	800ab20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	0c1b      	lsrs	r3, r3, #16
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d10c      	bne.n	800aad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	43da      	mvns	r2, r3
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4013      	ands	r3, r2
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	bf14      	ite	ne
 800aace:	2301      	movne	r3, #1
 800aad0:	2300      	moveq	r3, #0
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	e00b      	b.n	800aaee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	43da      	mvns	r2, r3
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	4013      	ands	r3, r2
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	bf14      	ite	ne
 800aae8:	2301      	movne	r3, #1
 800aaea:	2300      	moveq	r3, #0
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d016      	beq.n	800ab20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab0c:	f043 0220 	orr.w	r2, r3, #32
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e021      	b.n	800ab64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	0c1b      	lsrs	r3, r3, #16
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d10c      	bne.n	800ab44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	695b      	ldr	r3, [r3, #20]
 800ab30:	43da      	mvns	r2, r3
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	4013      	ands	r3, r2
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	bf14      	ite	ne
 800ab3c:	2301      	movne	r3, #1
 800ab3e:	2300      	moveq	r3, #0
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	e00b      	b.n	800ab5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	43da      	mvns	r2, r3
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	bf14      	ite	ne
 800ab56:	2301      	movne	r3, #1
 800ab58:	2300      	moveq	r3, #0
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f47f af6d 	bne.w	800aa3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab78:	e034      	b.n	800abe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f000 f8e3 	bl	800ad46 <I2C_IsAcknowledgeFailed>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e034      	b.n	800abf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab90:	d028      	beq.n	800abe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab92:	f7fd fc6d 	bl	8008470 <HAL_GetTick>
 800ab96:	4602      	mov	r2, r0
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d302      	bcc.n	800aba8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d11d      	bne.n	800abe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abb2:	2b80      	cmp	r3, #128	@ 0x80
 800abb4:	d016      	beq.n	800abe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2220      	movs	r2, #32
 800abc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd0:	f043 0220 	orr.w	r2, r3, #32
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e007      	b.n	800abf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abee:	2b80      	cmp	r3, #128	@ 0x80
 800abf0:	d1c3      	bne.n	800ab7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac08:	e034      	b.n	800ac74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 f89b 	bl	800ad46 <I2C_IsAcknowledgeFailed>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e034      	b.n	800ac84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac20:	d028      	beq.n	800ac74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac22:	f7fd fc25 	bl	8008470 <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d302      	bcc.n	800ac38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d11d      	bne.n	800ac74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	f003 0304 	and.w	r3, r3, #4
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d016      	beq.n	800ac74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac60:	f043 0220 	orr.w	r2, r3, #32
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	e007      	b.n	800ac84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d1c3      	bne.n	800ac0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac98:	e049      	b.n	800ad2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	f003 0310 	and.w	r3, r3, #16
 800aca4:	2b10      	cmp	r3, #16
 800aca6:	d119      	bne.n	800acdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f06f 0210 	mvn.w	r2, #16
 800acb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2220      	movs	r2, #32
 800acbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e030      	b.n	800ad3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acdc:	f7fd fbc8 	bl	8008470 <HAL_GetTick>
 800ace0:	4602      	mov	r2, r0
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d302      	bcc.n	800acf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d11d      	bne.n	800ad2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acfc:	2b40      	cmp	r3, #64	@ 0x40
 800acfe:	d016      	beq.n	800ad2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2220      	movs	r2, #32
 800ad0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1a:	f043 0220 	orr.w	r2, r3, #32
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e007      	b.n	800ad3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad38:	2b40      	cmp	r3, #64	@ 0x40
 800ad3a:	d1ae      	bne.n	800ac9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad5c:	d11b      	bne.n	800ad96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ad66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2220      	movs	r2, #32
 800ad72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad82:	f043 0204 	orr.w	r2, r3, #4
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b20      	cmp	r3, #32
 800adb8:	d129      	bne.n	800ae0e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2224      	movs	r2, #36	@ 0x24
 800adbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f022 0201 	bic.w	r2, r2, #1
 800add0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f022 0210 	bic.w	r2, r2, #16
 800ade0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	430a      	orrs	r2, r1
 800adf0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f042 0201 	orr.w	r2, r2, #1
 800ae00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2220      	movs	r2, #32
 800ae06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e000      	b.n	800ae10 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800ae0e:	2302      	movs	r3, #2
  }
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800ae26:	2300      	movs	r3, #0
 800ae28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b20      	cmp	r3, #32
 800ae34:	d12a      	bne.n	800ae8c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2224      	movs	r2, #36	@ 0x24
 800ae3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f022 0201 	bic.w	r2, r2, #1
 800ae4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae54:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800ae56:	89fb      	ldrh	r3, [r7, #14]
 800ae58:	f023 030f 	bic.w	r3, r3, #15
 800ae5c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	89fb      	ldrh	r3, [r7, #14]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	89fa      	ldrh	r2, [r7, #14]
 800ae6e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f042 0201 	orr.w	r2, r2, #1
 800ae7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2220      	movs	r2, #32
 800ae84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e000      	b.n	800ae8e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800ae8c:	2302      	movs	r3, #2
  }
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
	...

0800ae9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e267      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d075      	beq.n	800afa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aeba:	4b88      	ldr	r3, [pc, #544]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f003 030c 	and.w	r3, r3, #12
 800aec2:	2b04      	cmp	r3, #4
 800aec4:	d00c      	beq.n	800aee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aec6:	4b85      	ldr	r3, [pc, #532]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aece:	2b08      	cmp	r3, #8
 800aed0:	d112      	bne.n	800aef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aed2:	4b82      	ldr	r3, [pc, #520]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aeda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aede:	d10b      	bne.n	800aef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aee0:	4b7e      	ldr	r3, [pc, #504]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d05b      	beq.n	800afa4 <HAL_RCC_OscConfig+0x108>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d157      	bne.n	800afa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e242      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af00:	d106      	bne.n	800af10 <HAL_RCC_OscConfig+0x74>
 800af02:	4b76      	ldr	r3, [pc, #472]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a75      	ldr	r2, [pc, #468]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af0c:	6013      	str	r3, [r2, #0]
 800af0e:	e01d      	b.n	800af4c <HAL_RCC_OscConfig+0xb0>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800af18:	d10c      	bne.n	800af34 <HAL_RCC_OscConfig+0x98>
 800af1a:	4b70      	ldr	r3, [pc, #448]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a6f      	ldr	r2, [pc, #444]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800af24:	6013      	str	r3, [r2, #0]
 800af26:	4b6d      	ldr	r3, [pc, #436]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a6c      	ldr	r2, [pc, #432]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af30:	6013      	str	r3, [r2, #0]
 800af32:	e00b      	b.n	800af4c <HAL_RCC_OscConfig+0xb0>
 800af34:	4b69      	ldr	r3, [pc, #420]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a68      	ldr	r2, [pc, #416]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	4b66      	ldr	r3, [pc, #408]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a65      	ldr	r2, [pc, #404]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d013      	beq.n	800af7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af54:	f7fd fa8c 	bl	8008470 <HAL_GetTick>
 800af58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af5a:	e008      	b.n	800af6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af5c:	f7fd fa88 	bl	8008470 <HAL_GetTick>
 800af60:	4602      	mov	r2, r0
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	2b64      	cmp	r3, #100	@ 0x64
 800af68:	d901      	bls.n	800af6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e207      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af6e:	4b5b      	ldr	r3, [pc, #364]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0f0      	beq.n	800af5c <HAL_RCC_OscConfig+0xc0>
 800af7a:	e014      	b.n	800afa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af7c:	f7fd fa78 	bl	8008470 <HAL_GetTick>
 800af80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af82:	e008      	b.n	800af96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af84:	f7fd fa74 	bl	8008470 <HAL_GetTick>
 800af88:	4602      	mov	r2, r0
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	2b64      	cmp	r3, #100	@ 0x64
 800af90:	d901      	bls.n	800af96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af92:	2303      	movs	r3, #3
 800af94:	e1f3      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af96:	4b51      	ldr	r3, [pc, #324]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1f0      	bne.n	800af84 <HAL_RCC_OscConfig+0xe8>
 800afa2:	e000      	b.n	800afa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f003 0302 	and.w	r3, r3, #2
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d063      	beq.n	800b07a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800afb2:	4b4a      	ldr	r3, [pc, #296]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f003 030c 	and.w	r3, r3, #12
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00b      	beq.n	800afd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800afbe:	4b47      	ldr	r3, [pc, #284]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800afc6:	2b08      	cmp	r3, #8
 800afc8:	d11c      	bne.n	800b004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800afca:	4b44      	ldr	r3, [pc, #272]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d116      	bne.n	800b004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800afd6:	4b41      	ldr	r3, [pc, #260]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0302 	and.w	r3, r3, #2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d005      	beq.n	800afee <HAL_RCC_OscConfig+0x152>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d001      	beq.n	800afee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e1c7      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afee:	4b3b      	ldr	r3, [pc, #236]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	00db      	lsls	r3, r3, #3
 800affc:	4937      	ldr	r1, [pc, #220]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800affe:	4313      	orrs	r3, r2
 800b000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b002:	e03a      	b.n	800b07a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d020      	beq.n	800b04e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b00c:	4b34      	ldr	r3, [pc, #208]	@ (800b0e0 <HAL_RCC_OscConfig+0x244>)
 800b00e:	2201      	movs	r2, #1
 800b010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b012:	f7fd fa2d 	bl	8008470 <HAL_GetTick>
 800b016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b018:	e008      	b.n	800b02c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b01a:	f7fd fa29 	bl	8008470 <HAL_GetTick>
 800b01e:	4602      	mov	r2, r0
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	2b02      	cmp	r3, #2
 800b026:	d901      	bls.n	800b02c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	e1a8      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b02c:	4b2b      	ldr	r3, [pc, #172]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 0302 	and.w	r3, r3, #2
 800b034:	2b00      	cmp	r3, #0
 800b036:	d0f0      	beq.n	800b01a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b038:	4b28      	ldr	r3, [pc, #160]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	00db      	lsls	r3, r3, #3
 800b046:	4925      	ldr	r1, [pc, #148]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800b048:	4313      	orrs	r3, r2
 800b04a:	600b      	str	r3, [r1, #0]
 800b04c:	e015      	b.n	800b07a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b04e:	4b24      	ldr	r3, [pc, #144]	@ (800b0e0 <HAL_RCC_OscConfig+0x244>)
 800b050:	2200      	movs	r2, #0
 800b052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b054:	f7fd fa0c 	bl	8008470 <HAL_GetTick>
 800b058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b05a:	e008      	b.n	800b06e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b05c:	f7fd fa08 	bl	8008470 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	2b02      	cmp	r3, #2
 800b068:	d901      	bls.n	800b06e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e187      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b06e:	4b1b      	ldr	r3, [pc, #108]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 0302 	and.w	r3, r3, #2
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1f0      	bne.n	800b05c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 0308 	and.w	r3, r3, #8
 800b082:	2b00      	cmp	r3, #0
 800b084:	d036      	beq.n	800b0f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d016      	beq.n	800b0bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b08e:	4b15      	ldr	r3, [pc, #84]	@ (800b0e4 <HAL_RCC_OscConfig+0x248>)
 800b090:	2201      	movs	r2, #1
 800b092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b094:	f7fd f9ec 	bl	8008470 <HAL_GetTick>
 800b098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b09a:	e008      	b.n	800b0ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b09c:	f7fd f9e8 	bl	8008470 <HAL_GetTick>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d901      	bls.n	800b0ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	e167      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b0dc <HAL_RCC_OscConfig+0x240>)
 800b0b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0b2:	f003 0302 	and.w	r3, r3, #2
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d0f0      	beq.n	800b09c <HAL_RCC_OscConfig+0x200>
 800b0ba:	e01b      	b.n	800b0f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0bc:	4b09      	ldr	r3, [pc, #36]	@ (800b0e4 <HAL_RCC_OscConfig+0x248>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0c2:	f7fd f9d5 	bl	8008470 <HAL_GetTick>
 800b0c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0c8:	e00e      	b.n	800b0e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0ca:	f7fd f9d1 	bl	8008470 <HAL_GetTick>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d907      	bls.n	800b0e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	e150      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
 800b0dc:	40023800 	.word	0x40023800
 800b0e0:	42470000 	.word	0x42470000
 800b0e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0e8:	4b88      	ldr	r3, [pc, #544]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b0ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0ec:	f003 0302 	and.w	r3, r3, #2
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1ea      	bne.n	800b0ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f000 8097 	beq.w	800b230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b102:	2300      	movs	r3, #0
 800b104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b106:	4b81      	ldr	r3, [pc, #516]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b10a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10f      	bne.n	800b132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b112:	2300      	movs	r3, #0
 800b114:	60bb      	str	r3, [r7, #8]
 800b116:	4b7d      	ldr	r3, [pc, #500]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b11a:	4a7c      	ldr	r2, [pc, #496]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b11c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b120:	6413      	str	r3, [r2, #64]	@ 0x40
 800b122:	4b7a      	ldr	r3, [pc, #488]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b12a:	60bb      	str	r3, [r7, #8]
 800b12c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b12e:	2301      	movs	r3, #1
 800b130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b132:	4b77      	ldr	r3, [pc, #476]	@ (800b310 <HAL_RCC_OscConfig+0x474>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d118      	bne.n	800b170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b13e:	4b74      	ldr	r3, [pc, #464]	@ (800b310 <HAL_RCC_OscConfig+0x474>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a73      	ldr	r2, [pc, #460]	@ (800b310 <HAL_RCC_OscConfig+0x474>)
 800b144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b14a:	f7fd f991 	bl	8008470 <HAL_GetTick>
 800b14e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b150:	e008      	b.n	800b164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b152:	f7fd f98d 	bl	8008470 <HAL_GetTick>
 800b156:	4602      	mov	r2, r0
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d901      	bls.n	800b164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e10c      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b164:	4b6a      	ldr	r3, [pc, #424]	@ (800b310 <HAL_RCC_OscConfig+0x474>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d0f0      	beq.n	800b152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d106      	bne.n	800b186 <HAL_RCC_OscConfig+0x2ea>
 800b178:	4b64      	ldr	r3, [pc, #400]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b17a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b17c:	4a63      	ldr	r2, [pc, #396]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b17e:	f043 0301 	orr.w	r3, r3, #1
 800b182:	6713      	str	r3, [r2, #112]	@ 0x70
 800b184:	e01c      	b.n	800b1c0 <HAL_RCC_OscConfig+0x324>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	2b05      	cmp	r3, #5
 800b18c:	d10c      	bne.n	800b1a8 <HAL_RCC_OscConfig+0x30c>
 800b18e:	4b5f      	ldr	r3, [pc, #380]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b192:	4a5e      	ldr	r2, [pc, #376]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b194:	f043 0304 	orr.w	r3, r3, #4
 800b198:	6713      	str	r3, [r2, #112]	@ 0x70
 800b19a:	4b5c      	ldr	r3, [pc, #368]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b19c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b19e:	4a5b      	ldr	r2, [pc, #364]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b1a0:	f043 0301 	orr.w	r3, r3, #1
 800b1a4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b1a6:	e00b      	b.n	800b1c0 <HAL_RCC_OscConfig+0x324>
 800b1a8:	4b58      	ldr	r3, [pc, #352]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b1aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1ac:	4a57      	ldr	r2, [pc, #348]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b1ae:	f023 0301 	bic.w	r3, r3, #1
 800b1b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b1b4:	4b55      	ldr	r3, [pc, #340]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b1b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1b8:	4a54      	ldr	r2, [pc, #336]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b1ba:	f023 0304 	bic.w	r3, r3, #4
 800b1be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d015      	beq.n	800b1f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1c8:	f7fd f952 	bl	8008470 <HAL_GetTick>
 800b1cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1ce:	e00a      	b.n	800b1e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1d0:	f7fd f94e 	bl	8008470 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d901      	bls.n	800b1e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e0cb      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1e6:	4b49      	ldr	r3, [pc, #292]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b1e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1ea:	f003 0302 	and.w	r3, r3, #2
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0ee      	beq.n	800b1d0 <HAL_RCC_OscConfig+0x334>
 800b1f2:	e014      	b.n	800b21e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1f4:	f7fd f93c 	bl	8008470 <HAL_GetTick>
 800b1f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1fa:	e00a      	b.n	800b212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1fc:	f7fd f938 	bl	8008470 <HAL_GetTick>
 800b200:	4602      	mov	r2, r0
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d901      	bls.n	800b212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b20e:	2303      	movs	r3, #3
 800b210:	e0b5      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b212:	4b3e      	ldr	r3, [pc, #248]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b216:	f003 0302 	and.w	r3, r3, #2
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1ee      	bne.n	800b1fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d105      	bne.n	800b230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b224:	4b39      	ldr	r3, [pc, #228]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b228:	4a38      	ldr	r2, [pc, #224]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b22a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b22e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 80a1 	beq.w	800b37c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b23a:	4b34      	ldr	r3, [pc, #208]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	f003 030c 	and.w	r3, r3, #12
 800b242:	2b08      	cmp	r3, #8
 800b244:	d05c      	beq.n	800b300 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	699b      	ldr	r3, [r3, #24]
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d141      	bne.n	800b2d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b24e:	4b31      	ldr	r3, [pc, #196]	@ (800b314 <HAL_RCC_OscConfig+0x478>)
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b254:	f7fd f90c 	bl	8008470 <HAL_GetTick>
 800b258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b25a:	e008      	b.n	800b26e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b25c:	f7fd f908 	bl	8008470 <HAL_GetTick>
 800b260:	4602      	mov	r2, r0
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	2b02      	cmp	r3, #2
 800b268:	d901      	bls.n	800b26e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b26a:	2303      	movs	r3, #3
 800b26c:	e087      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b26e:	4b27      	ldr	r3, [pc, #156]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1f0      	bne.n	800b25c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	69da      	ldr	r2, [r3, #28]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b288:	019b      	lsls	r3, r3, #6
 800b28a:	431a      	orrs	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b290:	085b      	lsrs	r3, r3, #1
 800b292:	3b01      	subs	r3, #1
 800b294:	041b      	lsls	r3, r3, #16
 800b296:	431a      	orrs	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29c:	061b      	lsls	r3, r3, #24
 800b29e:	491b      	ldr	r1, [pc, #108]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b2a4:	4b1b      	ldr	r3, [pc, #108]	@ (800b314 <HAL_RCC_OscConfig+0x478>)
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2aa:	f7fd f8e1 	bl	8008470 <HAL_GetTick>
 800b2ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2b0:	e008      	b.n	800b2c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2b2:	f7fd f8dd 	bl	8008470 <HAL_GetTick>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d901      	bls.n	800b2c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e05c      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2c4:	4b11      	ldr	r3, [pc, #68]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d0f0      	beq.n	800b2b2 <HAL_RCC_OscConfig+0x416>
 800b2d0:	e054      	b.n	800b37c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2d2:	4b10      	ldr	r3, [pc, #64]	@ (800b314 <HAL_RCC_OscConfig+0x478>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2d8:	f7fd f8ca 	bl	8008470 <HAL_GetTick>
 800b2dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2de:	e008      	b.n	800b2f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2e0:	f7fd f8c6 	bl	8008470 <HAL_GetTick>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d901      	bls.n	800b2f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e045      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2f2:	4b06      	ldr	r3, [pc, #24]	@ (800b30c <HAL_RCC_OscConfig+0x470>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1f0      	bne.n	800b2e0 <HAL_RCC_OscConfig+0x444>
 800b2fe:	e03d      	b.n	800b37c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d107      	bne.n	800b318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	e038      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
 800b30c:	40023800 	.word	0x40023800
 800b310:	40007000 	.word	0x40007000
 800b314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b318:	4b1b      	ldr	r3, [pc, #108]	@ (800b388 <HAL_RCC_OscConfig+0x4ec>)
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d028      	beq.n	800b378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b330:	429a      	cmp	r2, r3
 800b332:	d121      	bne.n	800b378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b33e:	429a      	cmp	r2, r3
 800b340:	d11a      	bne.n	800b378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b348:	4013      	ands	r3, r2
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b34e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b350:	4293      	cmp	r3, r2
 800b352:	d111      	bne.n	800b378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b35e:	085b      	lsrs	r3, r3, #1
 800b360:	3b01      	subs	r3, #1
 800b362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b364:	429a      	cmp	r2, r3
 800b366:	d107      	bne.n	800b378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b374:	429a      	cmp	r2, r3
 800b376:	d001      	beq.n	800b37c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	e000      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	40023800 	.word	0x40023800

0800b38c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d101      	bne.n	800b3a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e0cc      	b.n	800b53a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b3a0:	4b68      	ldr	r3, [pc, #416]	@ (800b544 <HAL_RCC_ClockConfig+0x1b8>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 030f 	and.w	r3, r3, #15
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d90c      	bls.n	800b3c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ae:	4b65      	ldr	r3, [pc, #404]	@ (800b544 <HAL_RCC_ClockConfig+0x1b8>)
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	b2d2      	uxtb	r2, r2
 800b3b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3b6:	4b63      	ldr	r3, [pc, #396]	@ (800b544 <HAL_RCC_ClockConfig+0x1b8>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 030f 	and.w	r3, r3, #15
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d001      	beq.n	800b3c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e0b8      	b.n	800b53a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 0302 	and.w	r3, r3, #2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d020      	beq.n	800b416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 0304 	and.w	r3, r3, #4
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d005      	beq.n	800b3ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3e0:	4b59      	ldr	r3, [pc, #356]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	4a58      	ldr	r2, [pc, #352]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b3e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b3ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 0308 	and.w	r3, r3, #8
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d005      	beq.n	800b404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b3f8:	4b53      	ldr	r3, [pc, #332]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	4a52      	ldr	r2, [pc, #328]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b3fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b404:	4b50      	ldr	r3, [pc, #320]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	494d      	ldr	r1, [pc, #308]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b412:	4313      	orrs	r3, r2
 800b414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d044      	beq.n	800b4ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d107      	bne.n	800b43a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b42a:	4b47      	ldr	r3, [pc, #284]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b432:	2b00      	cmp	r3, #0
 800b434:	d119      	bne.n	800b46a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e07f      	b.n	800b53a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d003      	beq.n	800b44a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b446:	2b03      	cmp	r3, #3
 800b448:	d107      	bne.n	800b45a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b44a:	4b3f      	ldr	r3, [pc, #252]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b452:	2b00      	cmp	r3, #0
 800b454:	d109      	bne.n	800b46a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e06f      	b.n	800b53a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b45a:	4b3b      	ldr	r3, [pc, #236]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 0302 	and.w	r3, r3, #2
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e067      	b.n	800b53a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b46a:	4b37      	ldr	r3, [pc, #220]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f023 0203 	bic.w	r2, r3, #3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	4934      	ldr	r1, [pc, #208]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b478:	4313      	orrs	r3, r2
 800b47a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b47c:	f7fc fff8 	bl	8008470 <HAL_GetTick>
 800b480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b482:	e00a      	b.n	800b49a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b484:	f7fc fff4 	bl	8008470 <HAL_GetTick>
 800b488:	4602      	mov	r2, r0
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	1ad3      	subs	r3, r2, r3
 800b48e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b492:	4293      	cmp	r3, r2
 800b494:	d901      	bls.n	800b49a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b496:	2303      	movs	r3, #3
 800b498:	e04f      	b.n	800b53a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b49a:	4b2b      	ldr	r3, [pc, #172]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f003 020c 	and.w	r2, r3, #12
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d1eb      	bne.n	800b484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b4ac:	4b25      	ldr	r3, [pc, #148]	@ (800b544 <HAL_RCC_ClockConfig+0x1b8>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 030f 	and.w	r3, r3, #15
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d20c      	bcs.n	800b4d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4ba:	4b22      	ldr	r3, [pc, #136]	@ (800b544 <HAL_RCC_ClockConfig+0x1b8>)
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	b2d2      	uxtb	r2, r2
 800b4c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4c2:	4b20      	ldr	r3, [pc, #128]	@ (800b544 <HAL_RCC_ClockConfig+0x1b8>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f003 030f 	and.w	r3, r3, #15
 800b4ca:	683a      	ldr	r2, [r7, #0]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d001      	beq.n	800b4d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e032      	b.n	800b53a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 0304 	and.w	r3, r3, #4
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d008      	beq.n	800b4f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b4e0:	4b19      	ldr	r3, [pc, #100]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	4916      	ldr	r1, [pc, #88]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0308 	and.w	r3, r3, #8
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d009      	beq.n	800b512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b4fe:	4b12      	ldr	r3, [pc, #72]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	490e      	ldr	r1, [pc, #56]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b50e:	4313      	orrs	r3, r2
 800b510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b512:	f000 f821 	bl	800b558 <HAL_RCC_GetSysClockFreq>
 800b516:	4602      	mov	r2, r0
 800b518:	4b0b      	ldr	r3, [pc, #44]	@ (800b548 <HAL_RCC_ClockConfig+0x1bc>)
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	091b      	lsrs	r3, r3, #4
 800b51e:	f003 030f 	and.w	r3, r3, #15
 800b522:	490a      	ldr	r1, [pc, #40]	@ (800b54c <HAL_RCC_ClockConfig+0x1c0>)
 800b524:	5ccb      	ldrb	r3, [r1, r3]
 800b526:	fa22 f303 	lsr.w	r3, r2, r3
 800b52a:	4a09      	ldr	r2, [pc, #36]	@ (800b550 <HAL_RCC_ClockConfig+0x1c4>)
 800b52c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b52e:	4b09      	ldr	r3, [pc, #36]	@ (800b554 <HAL_RCC_ClockConfig+0x1c8>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4618      	mov	r0, r3
 800b534:	f7fc ff58 	bl	80083e8 <HAL_InitTick>

  return HAL_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	40023c00 	.word	0x40023c00
 800b548:	40023800 	.word	0x40023800
 800b54c:	08014198 	.word	0x08014198
 800b550:	2000050c 	.word	0x2000050c
 800b554:	20000510 	.word	0x20000510

0800b558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b55c:	b094      	sub	sp, #80	@ 0x50
 800b55e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b560:	2300      	movs	r3, #0
 800b562:	647b      	str	r3, [r7, #68]	@ 0x44
 800b564:	2300      	movs	r3, #0
 800b566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b568:	2300      	movs	r3, #0
 800b56a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b56c:	2300      	movs	r3, #0
 800b56e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b570:	4b79      	ldr	r3, [pc, #484]	@ (800b758 <HAL_RCC_GetSysClockFreq+0x200>)
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	f003 030c 	and.w	r3, r3, #12
 800b578:	2b08      	cmp	r3, #8
 800b57a:	d00d      	beq.n	800b598 <HAL_RCC_GetSysClockFreq+0x40>
 800b57c:	2b08      	cmp	r3, #8
 800b57e:	f200 80e1 	bhi.w	800b744 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b582:	2b00      	cmp	r3, #0
 800b584:	d002      	beq.n	800b58c <HAL_RCC_GetSysClockFreq+0x34>
 800b586:	2b04      	cmp	r3, #4
 800b588:	d003      	beq.n	800b592 <HAL_RCC_GetSysClockFreq+0x3a>
 800b58a:	e0db      	b.n	800b744 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b58c:	4b73      	ldr	r3, [pc, #460]	@ (800b75c <HAL_RCC_GetSysClockFreq+0x204>)
 800b58e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800b590:	e0db      	b.n	800b74a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b592:	4b73      	ldr	r3, [pc, #460]	@ (800b760 <HAL_RCC_GetSysClockFreq+0x208>)
 800b594:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b596:	e0d8      	b.n	800b74a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b598:	4b6f      	ldr	r3, [pc, #444]	@ (800b758 <HAL_RCC_GetSysClockFreq+0x200>)
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b5a2:	4b6d      	ldr	r3, [pc, #436]	@ (800b758 <HAL_RCC_GetSysClockFreq+0x200>)
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d063      	beq.n	800b676 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5ae:	4b6a      	ldr	r3, [pc, #424]	@ (800b758 <HAL_RCC_GetSysClockFreq+0x200>)
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	099b      	lsrs	r3, r3, #6
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b5b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b5ca:	4622      	mov	r2, r4
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	f04f 0000 	mov.w	r0, #0
 800b5d2:	f04f 0100 	mov.w	r1, #0
 800b5d6:	0159      	lsls	r1, r3, #5
 800b5d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b5dc:	0150      	lsls	r0, r2, #5
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	1a51      	subs	r1, r2, r1
 800b5e6:	6139      	str	r1, [r7, #16]
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	eb63 0301 	sbc.w	r3, r3, r1
 800b5ee:	617b      	str	r3, [r7, #20]
 800b5f0:	f04f 0200 	mov.w	r2, #0
 800b5f4:	f04f 0300 	mov.w	r3, #0
 800b5f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b5fc:	4659      	mov	r1, fp
 800b5fe:	018b      	lsls	r3, r1, #6
 800b600:	4651      	mov	r1, sl
 800b602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b606:	4651      	mov	r1, sl
 800b608:	018a      	lsls	r2, r1, #6
 800b60a:	4651      	mov	r1, sl
 800b60c:	ebb2 0801 	subs.w	r8, r2, r1
 800b610:	4659      	mov	r1, fp
 800b612:	eb63 0901 	sbc.w	r9, r3, r1
 800b616:	f04f 0200 	mov.w	r2, #0
 800b61a:	f04f 0300 	mov.w	r3, #0
 800b61e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b62a:	4690      	mov	r8, r2
 800b62c:	4699      	mov	r9, r3
 800b62e:	4623      	mov	r3, r4
 800b630:	eb18 0303 	adds.w	r3, r8, r3
 800b634:	60bb      	str	r3, [r7, #8]
 800b636:	462b      	mov	r3, r5
 800b638:	eb49 0303 	adc.w	r3, r9, r3
 800b63c:	60fb      	str	r3, [r7, #12]
 800b63e:	f04f 0200 	mov.w	r2, #0
 800b642:	f04f 0300 	mov.w	r3, #0
 800b646:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b64a:	4629      	mov	r1, r5
 800b64c:	024b      	lsls	r3, r1, #9
 800b64e:	4621      	mov	r1, r4
 800b650:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b654:	4621      	mov	r1, r4
 800b656:	024a      	lsls	r2, r1, #9
 800b658:	4610      	mov	r0, r2
 800b65a:	4619      	mov	r1, r3
 800b65c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b65e:	2200      	movs	r2, #0
 800b660:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b668:	f7f5 fb2e 	bl	8000cc8 <__aeabi_uldivmod>
 800b66c:	4602      	mov	r2, r0
 800b66e:	460b      	mov	r3, r1
 800b670:	4613      	mov	r3, r2
 800b672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b674:	e058      	b.n	800b728 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b676:	4b38      	ldr	r3, [pc, #224]	@ (800b758 <HAL_RCC_GetSysClockFreq+0x200>)
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	099b      	lsrs	r3, r3, #6
 800b67c:	2200      	movs	r2, #0
 800b67e:	4618      	mov	r0, r3
 800b680:	4611      	mov	r1, r2
 800b682:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b686:	623b      	str	r3, [r7, #32]
 800b688:	2300      	movs	r3, #0
 800b68a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b68c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b690:	4642      	mov	r2, r8
 800b692:	464b      	mov	r3, r9
 800b694:	f04f 0000 	mov.w	r0, #0
 800b698:	f04f 0100 	mov.w	r1, #0
 800b69c:	0159      	lsls	r1, r3, #5
 800b69e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b6a2:	0150      	lsls	r0, r2, #5
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	4641      	mov	r1, r8
 800b6aa:	ebb2 0a01 	subs.w	sl, r2, r1
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	eb63 0b01 	sbc.w	fp, r3, r1
 800b6b4:	f04f 0200 	mov.w	r2, #0
 800b6b8:	f04f 0300 	mov.w	r3, #0
 800b6bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b6c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b6c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b6c8:	ebb2 040a 	subs.w	r4, r2, sl
 800b6cc:	eb63 050b 	sbc.w	r5, r3, fp
 800b6d0:	f04f 0200 	mov.w	r2, #0
 800b6d4:	f04f 0300 	mov.w	r3, #0
 800b6d8:	00eb      	lsls	r3, r5, #3
 800b6da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b6de:	00e2      	lsls	r2, r4, #3
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	461d      	mov	r5, r3
 800b6e4:	4643      	mov	r3, r8
 800b6e6:	18e3      	adds	r3, r4, r3
 800b6e8:	603b      	str	r3, [r7, #0]
 800b6ea:	464b      	mov	r3, r9
 800b6ec:	eb45 0303 	adc.w	r3, r5, r3
 800b6f0:	607b      	str	r3, [r7, #4]
 800b6f2:	f04f 0200 	mov.w	r2, #0
 800b6f6:	f04f 0300 	mov.w	r3, #0
 800b6fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b6fe:	4629      	mov	r1, r5
 800b700:	028b      	lsls	r3, r1, #10
 800b702:	4621      	mov	r1, r4
 800b704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b708:	4621      	mov	r1, r4
 800b70a:	028a      	lsls	r2, r1, #10
 800b70c:	4610      	mov	r0, r2
 800b70e:	4619      	mov	r1, r3
 800b710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b712:	2200      	movs	r2, #0
 800b714:	61bb      	str	r3, [r7, #24]
 800b716:	61fa      	str	r2, [r7, #28]
 800b718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b71c:	f7f5 fad4 	bl	8000cc8 <__aeabi_uldivmod>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4613      	mov	r3, r2
 800b726:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b728:	4b0b      	ldr	r3, [pc, #44]	@ (800b758 <HAL_RCC_GetSysClockFreq+0x200>)
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	0c1b      	lsrs	r3, r3, #16
 800b72e:	f003 0303 	and.w	r3, r3, #3
 800b732:	3301      	adds	r3, #1
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800b738:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b73a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b740:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b742:	e002      	b.n	800b74a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b744:	4b05      	ldr	r3, [pc, #20]	@ (800b75c <HAL_RCC_GetSysClockFreq+0x204>)
 800b746:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b74a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3750      	adds	r7, #80	@ 0x50
 800b750:	46bd      	mov	sp, r7
 800b752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b756:	bf00      	nop
 800b758:	40023800 	.word	0x40023800
 800b75c:	00f42400 	.word	0x00f42400
 800b760:	007a1200 	.word	0x007a1200

0800b764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b764:	b480      	push	{r7}
 800b766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b768:	4b03      	ldr	r3, [pc, #12]	@ (800b778 <HAL_RCC_GetHCLKFreq+0x14>)
 800b76a:	681b      	ldr	r3, [r3, #0]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	2000050c 	.word	0x2000050c

0800b77c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b780:	f7ff fff0 	bl	800b764 <HAL_RCC_GetHCLKFreq>
 800b784:	4602      	mov	r2, r0
 800b786:	4b05      	ldr	r3, [pc, #20]	@ (800b79c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	0a9b      	lsrs	r3, r3, #10
 800b78c:	f003 0307 	and.w	r3, r3, #7
 800b790:	4903      	ldr	r1, [pc, #12]	@ (800b7a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b792:	5ccb      	ldrb	r3, [r1, r3]
 800b794:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b798:	4618      	mov	r0, r3
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	40023800 	.word	0x40023800
 800b7a0:	080141a8 	.word	0x080141a8

0800b7a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b7a8:	f7ff ffdc 	bl	800b764 <HAL_RCC_GetHCLKFreq>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	4b05      	ldr	r3, [pc, #20]	@ (800b7c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	0b5b      	lsrs	r3, r3, #13
 800b7b4:	f003 0307 	and.w	r3, r3, #7
 800b7b8:	4903      	ldr	r1, [pc, #12]	@ (800b7c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7ba:	5ccb      	ldrb	r3, [r1, r3]
 800b7bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	40023800 	.word	0x40023800
 800b7c8:	080141a8 	.word	0x080141a8

0800b7cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e041      	b.n	800b862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d106      	bne.n	800b7f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7fb fec8 	bl	8007588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	3304      	adds	r3, #4
 800b808:	4619      	mov	r1, r3
 800b80a:	4610      	mov	r0, r2
 800b80c:	f001 f91e 	bl	800ca4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
	...

0800b86c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d001      	beq.n	800b884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e04e      	b.n	800b922 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2202      	movs	r2, #2
 800b888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68da      	ldr	r2, [r3, #12]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f042 0201 	orr.w	r2, r2, #1
 800b89a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a23      	ldr	r2, [pc, #140]	@ (800b930 <HAL_TIM_Base_Start_IT+0xc4>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d022      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8ae:	d01d      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a1f      	ldr	r2, [pc, #124]	@ (800b934 <HAL_TIM_Base_Start_IT+0xc8>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d018      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a1e      	ldr	r2, [pc, #120]	@ (800b938 <HAL_TIM_Base_Start_IT+0xcc>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d013      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b93c <HAL_TIM_Base_Start_IT+0xd0>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d00e      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a1b      	ldr	r2, [pc, #108]	@ (800b940 <HAL_TIM_Base_Start_IT+0xd4>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d009      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a19      	ldr	r2, [pc, #100]	@ (800b944 <HAL_TIM_Base_Start_IT+0xd8>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d004      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a18      	ldr	r2, [pc, #96]	@ (800b948 <HAL_TIM_Base_Start_IT+0xdc>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d111      	bne.n	800b910 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	f003 0307 	and.w	r3, r3, #7
 800b8f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b06      	cmp	r3, #6
 800b8fc:	d010      	beq.n	800b920 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f042 0201 	orr.w	r2, r2, #1
 800b90c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b90e:	e007      	b.n	800b920 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f042 0201 	orr.w	r2, r2, #1
 800b91e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	40010000 	.word	0x40010000
 800b934:	40000400 	.word	0x40000400
 800b938:	40000800 	.word	0x40000800
 800b93c:	40000c00 	.word	0x40000c00
 800b940:	40010400 	.word	0x40010400
 800b944:	40014000 	.word	0x40014000
 800b948:	40001800 	.word	0x40001800

0800b94c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e041      	b.n	800b9e2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	d106      	bne.n	800b978 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f839 	bl	800b9ea <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2202      	movs	r2, #2
 800b97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3304      	adds	r3, #4
 800b988:	4619      	mov	r1, r3
 800b98a:	4610      	mov	r0, r2
 800b98c:	f001 f85e 	bl	800ca4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b9f2:	bf00      	nop
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
	...

0800ba00 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d109      	bne.n	800ba28 <HAL_TIM_OC_Start_IT+0x28>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	bf14      	ite	ne
 800ba20:	2301      	movne	r3, #1
 800ba22:	2300      	moveq	r3, #0
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	e022      	b.n	800ba6e <HAL_TIM_OC_Start_IT+0x6e>
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	2b04      	cmp	r3, #4
 800ba2c:	d109      	bne.n	800ba42 <HAL_TIM_OC_Start_IT+0x42>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	bf14      	ite	ne
 800ba3a:	2301      	movne	r3, #1
 800ba3c:	2300      	moveq	r3, #0
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	e015      	b.n	800ba6e <HAL_TIM_OC_Start_IT+0x6e>
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b08      	cmp	r3, #8
 800ba46:	d109      	bne.n	800ba5c <HAL_TIM_OC_Start_IT+0x5c>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	bf14      	ite	ne
 800ba54:	2301      	movne	r3, #1
 800ba56:	2300      	moveq	r3, #0
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	e008      	b.n	800ba6e <HAL_TIM_OC_Start_IT+0x6e>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	bf14      	ite	ne
 800ba68:	2301      	movne	r3, #1
 800ba6a:	2300      	moveq	r3, #0
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e0c7      	b.n	800bc06 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d104      	bne.n	800ba86 <HAL_TIM_OC_Start_IT+0x86>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2202      	movs	r2, #2
 800ba80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba84:	e013      	b.n	800baae <HAL_TIM_OC_Start_IT+0xae>
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	d104      	bne.n	800ba96 <HAL_TIM_OC_Start_IT+0x96>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2202      	movs	r2, #2
 800ba90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba94:	e00b      	b.n	800baae <HAL_TIM_OC_Start_IT+0xae>
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	2b08      	cmp	r3, #8
 800ba9a:	d104      	bne.n	800baa6 <HAL_TIM_OC_Start_IT+0xa6>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2202      	movs	r2, #2
 800baa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800baa4:	e003      	b.n	800baae <HAL_TIM_OC_Start_IT+0xae>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2202      	movs	r2, #2
 800baaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	2b0c      	cmp	r3, #12
 800bab2:	d841      	bhi.n	800bb38 <HAL_TIM_OC_Start_IT+0x138>
 800bab4:	a201      	add	r2, pc, #4	@ (adr r2, 800babc <HAL_TIM_OC_Start_IT+0xbc>)
 800bab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baba:	bf00      	nop
 800babc:	0800baf1 	.word	0x0800baf1
 800bac0:	0800bb39 	.word	0x0800bb39
 800bac4:	0800bb39 	.word	0x0800bb39
 800bac8:	0800bb39 	.word	0x0800bb39
 800bacc:	0800bb03 	.word	0x0800bb03
 800bad0:	0800bb39 	.word	0x0800bb39
 800bad4:	0800bb39 	.word	0x0800bb39
 800bad8:	0800bb39 	.word	0x0800bb39
 800badc:	0800bb15 	.word	0x0800bb15
 800bae0:	0800bb39 	.word	0x0800bb39
 800bae4:	0800bb39 	.word	0x0800bb39
 800bae8:	0800bb39 	.word	0x0800bb39
 800baec:	0800bb27 	.word	0x0800bb27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68da      	ldr	r2, [r3, #12]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f042 0202 	orr.w	r2, r2, #2
 800bafe:	60da      	str	r2, [r3, #12]
      break;
 800bb00:	e01d      	b.n	800bb3e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68da      	ldr	r2, [r3, #12]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f042 0204 	orr.w	r2, r2, #4
 800bb10:	60da      	str	r2, [r3, #12]
      break;
 800bb12:	e014      	b.n	800bb3e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68da      	ldr	r2, [r3, #12]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f042 0208 	orr.w	r2, r2, #8
 800bb22:	60da      	str	r2, [r3, #12]
      break;
 800bb24:	e00b      	b.n	800bb3e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68da      	ldr	r2, [r3, #12]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f042 0210 	orr.w	r2, r2, #16
 800bb34:	60da      	str	r2, [r3, #12]
      break;
 800bb36:	e002      	b.n	800bb3e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb3c:	bf00      	nop
  }

  if (status == HAL_OK)
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d15f      	bne.n	800bc04 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f001 fa73 	bl	800d038 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a2e      	ldr	r2, [pc, #184]	@ (800bc10 <HAL_TIM_OC_Start_IT+0x210>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d004      	beq.n	800bb66 <HAL_TIM_OC_Start_IT+0x166>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a2c      	ldr	r2, [pc, #176]	@ (800bc14 <HAL_TIM_OC_Start_IT+0x214>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d101      	bne.n	800bb6a <HAL_TIM_OC_Start_IT+0x16a>
 800bb66:	2301      	movs	r3, #1
 800bb68:	e000      	b.n	800bb6c <HAL_TIM_OC_Start_IT+0x16c>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d007      	beq.n	800bb80 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a22      	ldr	r2, [pc, #136]	@ (800bc10 <HAL_TIM_OC_Start_IT+0x210>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d022      	beq.n	800bbd0 <HAL_TIM_OC_Start_IT+0x1d0>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb92:	d01d      	beq.n	800bbd0 <HAL_TIM_OC_Start_IT+0x1d0>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a1f      	ldr	r2, [pc, #124]	@ (800bc18 <HAL_TIM_OC_Start_IT+0x218>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d018      	beq.n	800bbd0 <HAL_TIM_OC_Start_IT+0x1d0>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a1e      	ldr	r2, [pc, #120]	@ (800bc1c <HAL_TIM_OC_Start_IT+0x21c>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d013      	beq.n	800bbd0 <HAL_TIM_OC_Start_IT+0x1d0>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a1c      	ldr	r2, [pc, #112]	@ (800bc20 <HAL_TIM_OC_Start_IT+0x220>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d00e      	beq.n	800bbd0 <HAL_TIM_OC_Start_IT+0x1d0>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a17      	ldr	r2, [pc, #92]	@ (800bc14 <HAL_TIM_OC_Start_IT+0x214>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d009      	beq.n	800bbd0 <HAL_TIM_OC_Start_IT+0x1d0>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a18      	ldr	r2, [pc, #96]	@ (800bc24 <HAL_TIM_OC_Start_IT+0x224>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d004      	beq.n	800bbd0 <HAL_TIM_OC_Start_IT+0x1d0>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a17      	ldr	r2, [pc, #92]	@ (800bc28 <HAL_TIM_OC_Start_IT+0x228>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d111      	bne.n	800bbf4 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	f003 0307 	and.w	r3, r3, #7
 800bbda:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2b06      	cmp	r3, #6
 800bbe0:	d010      	beq.n	800bc04 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f042 0201 	orr.w	r2, r2, #1
 800bbf0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbf2:	e007      	b.n	800bc04 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f042 0201 	orr.w	r2, r2, #1
 800bc02:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	40010000 	.word	0x40010000
 800bc14:	40010400 	.word	0x40010400
 800bc18:	40000400 	.word	0x40000400
 800bc1c:	40000800 	.word	0x40000800
 800bc20:	40000c00 	.word	0x40000c00
 800bc24:	40014000 	.word	0x40014000
 800bc28:	40001800 	.word	0x40001800

0800bc2c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	2b0c      	cmp	r3, #12
 800bc3e:	d841      	bhi.n	800bcc4 <HAL_TIM_OC_Stop_IT+0x98>
 800bc40:	a201      	add	r2, pc, #4	@ (adr r2, 800bc48 <HAL_TIM_OC_Stop_IT+0x1c>)
 800bc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc46:	bf00      	nop
 800bc48:	0800bc7d 	.word	0x0800bc7d
 800bc4c:	0800bcc5 	.word	0x0800bcc5
 800bc50:	0800bcc5 	.word	0x0800bcc5
 800bc54:	0800bcc5 	.word	0x0800bcc5
 800bc58:	0800bc8f 	.word	0x0800bc8f
 800bc5c:	0800bcc5 	.word	0x0800bcc5
 800bc60:	0800bcc5 	.word	0x0800bcc5
 800bc64:	0800bcc5 	.word	0x0800bcc5
 800bc68:	0800bca1 	.word	0x0800bca1
 800bc6c:	0800bcc5 	.word	0x0800bcc5
 800bc70:	0800bcc5 	.word	0x0800bcc5
 800bc74:	0800bcc5 	.word	0x0800bcc5
 800bc78:	0800bcb3 	.word	0x0800bcb3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68da      	ldr	r2, [r3, #12]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f022 0202 	bic.w	r2, r2, #2
 800bc8a:	60da      	str	r2, [r3, #12]
      break;
 800bc8c:	e01d      	b.n	800bcca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68da      	ldr	r2, [r3, #12]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f022 0204 	bic.w	r2, r2, #4
 800bc9c:	60da      	str	r2, [r3, #12]
      break;
 800bc9e:	e014      	b.n	800bcca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68da      	ldr	r2, [r3, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f022 0208 	bic.w	r2, r2, #8
 800bcae:	60da      	str	r2, [r3, #12]
      break;
 800bcb0:	e00b      	b.n	800bcca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68da      	ldr	r2, [r3, #12]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f022 0210 	bic.w	r2, r2, #16
 800bcc0:	60da      	str	r2, [r3, #12]
      break;
 800bcc2:	e002      	b.n	800bcca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	73fb      	strb	r3, [r7, #15]
      break;
 800bcc8:	bf00      	nop
  }

  if (status == HAL_OK)
 800bcca:	7bfb      	ldrb	r3, [r7, #15]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d161      	bne.n	800bd94 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f001 f9ad 	bl	800d038 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a2f      	ldr	r2, [pc, #188]	@ (800bda0 <HAL_TIM_OC_Stop_IT+0x174>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d004      	beq.n	800bcf2 <HAL_TIM_OC_Stop_IT+0xc6>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a2d      	ldr	r2, [pc, #180]	@ (800bda4 <HAL_TIM_OC_Stop_IT+0x178>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d101      	bne.n	800bcf6 <HAL_TIM_OC_Stop_IT+0xca>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e000      	b.n	800bcf8 <HAL_TIM_OC_Stop_IT+0xcc>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d017      	beq.n	800bd2c <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	6a1a      	ldr	r2, [r3, #32]
 800bd02:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bd06:	4013      	ands	r3, r2
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d10f      	bne.n	800bd2c <HAL_TIM_OC_Stop_IT+0x100>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	6a1a      	ldr	r2, [r3, #32]
 800bd12:	f240 4344 	movw	r3, #1092	@ 0x444
 800bd16:	4013      	ands	r3, r2
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d107      	bne.n	800bd2c <HAL_TIM_OC_Stop_IT+0x100>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bd2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6a1a      	ldr	r2, [r3, #32]
 800bd32:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bd36:	4013      	ands	r3, r2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10f      	bne.n	800bd5c <HAL_TIM_OC_Stop_IT+0x130>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6a1a      	ldr	r2, [r3, #32]
 800bd42:	f240 4344 	movw	r3, #1092	@ 0x444
 800bd46:	4013      	ands	r3, r2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d107      	bne.n	800bd5c <HAL_TIM_OC_Stop_IT+0x130>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f022 0201 	bic.w	r2, r2, #1
 800bd5a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d104      	bne.n	800bd6c <HAL_TIM_OC_Stop_IT+0x140>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd6a:	e013      	b.n	800bd94 <HAL_TIM_OC_Stop_IT+0x168>
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d104      	bne.n	800bd7c <HAL_TIM_OC_Stop_IT+0x150>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd7a:	e00b      	b.n	800bd94 <HAL_TIM_OC_Stop_IT+0x168>
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2b08      	cmp	r3, #8
 800bd80:	d104      	bne.n	800bd8c <HAL_TIM_OC_Stop_IT+0x160>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd8a:	e003      	b.n	800bd94 <HAL_TIM_OC_Stop_IT+0x168>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	40010000 	.word	0x40010000
 800bda4:	40010400 	.word	0x40010400

0800bda8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e041      	b.n	800be3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d106      	bne.n	800bdd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 f839 	bl	800be46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2202      	movs	r2, #2
 800bdd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	3304      	adds	r3, #4
 800bde4:	4619      	mov	r1, r3
 800bde6:	4610      	mov	r0, r2
 800bde8:	f000 fe30 	bl	800ca4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2201      	movs	r2, #1
 800be28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be46:	b480      	push	{r7}
 800be48:	b083      	sub	sp, #12
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be4e:	bf00      	nop
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
	...

0800be5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d109      	bne.n	800be80 <HAL_TIM_PWM_Start+0x24>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b01      	cmp	r3, #1
 800be76:	bf14      	ite	ne
 800be78:	2301      	movne	r3, #1
 800be7a:	2300      	moveq	r3, #0
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	e022      	b.n	800bec6 <HAL_TIM_PWM_Start+0x6a>
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b04      	cmp	r3, #4
 800be84:	d109      	bne.n	800be9a <HAL_TIM_PWM_Start+0x3e>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b01      	cmp	r3, #1
 800be90:	bf14      	ite	ne
 800be92:	2301      	movne	r3, #1
 800be94:	2300      	moveq	r3, #0
 800be96:	b2db      	uxtb	r3, r3
 800be98:	e015      	b.n	800bec6 <HAL_TIM_PWM_Start+0x6a>
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b08      	cmp	r3, #8
 800be9e:	d109      	bne.n	800beb4 <HAL_TIM_PWM_Start+0x58>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	bf14      	ite	ne
 800beac:	2301      	movne	r3, #1
 800beae:	2300      	moveq	r3, #0
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	e008      	b.n	800bec6 <HAL_TIM_PWM_Start+0x6a>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	bf14      	ite	ne
 800bec0:	2301      	movne	r3, #1
 800bec2:	2300      	moveq	r3, #0
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e07c      	b.n	800bfc8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d104      	bne.n	800bede <HAL_TIM_PWM_Start+0x82>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2202      	movs	r2, #2
 800bed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bedc:	e013      	b.n	800bf06 <HAL_TIM_PWM_Start+0xaa>
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d104      	bne.n	800beee <HAL_TIM_PWM_Start+0x92>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2202      	movs	r2, #2
 800bee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800beec:	e00b      	b.n	800bf06 <HAL_TIM_PWM_Start+0xaa>
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2b08      	cmp	r3, #8
 800bef2:	d104      	bne.n	800befe <HAL_TIM_PWM_Start+0xa2>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2202      	movs	r2, #2
 800bef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800befc:	e003      	b.n	800bf06 <HAL_TIM_PWM_Start+0xaa>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2202      	movs	r2, #2
 800bf02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f001 f892 	bl	800d038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a2d      	ldr	r2, [pc, #180]	@ (800bfd0 <HAL_TIM_PWM_Start+0x174>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d004      	beq.n	800bf28 <HAL_TIM_PWM_Start+0xcc>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a2c      	ldr	r2, [pc, #176]	@ (800bfd4 <HAL_TIM_PWM_Start+0x178>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d101      	bne.n	800bf2c <HAL_TIM_PWM_Start+0xd0>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e000      	b.n	800bf2e <HAL_TIM_PWM_Start+0xd2>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d007      	beq.n	800bf42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bf40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a22      	ldr	r2, [pc, #136]	@ (800bfd0 <HAL_TIM_PWM_Start+0x174>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d022      	beq.n	800bf92 <HAL_TIM_PWM_Start+0x136>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf54:	d01d      	beq.n	800bf92 <HAL_TIM_PWM_Start+0x136>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a1f      	ldr	r2, [pc, #124]	@ (800bfd8 <HAL_TIM_PWM_Start+0x17c>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d018      	beq.n	800bf92 <HAL_TIM_PWM_Start+0x136>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a1d      	ldr	r2, [pc, #116]	@ (800bfdc <HAL_TIM_PWM_Start+0x180>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d013      	beq.n	800bf92 <HAL_TIM_PWM_Start+0x136>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a1c      	ldr	r2, [pc, #112]	@ (800bfe0 <HAL_TIM_PWM_Start+0x184>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d00e      	beq.n	800bf92 <HAL_TIM_PWM_Start+0x136>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a16      	ldr	r2, [pc, #88]	@ (800bfd4 <HAL_TIM_PWM_Start+0x178>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d009      	beq.n	800bf92 <HAL_TIM_PWM_Start+0x136>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a18      	ldr	r2, [pc, #96]	@ (800bfe4 <HAL_TIM_PWM_Start+0x188>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d004      	beq.n	800bf92 <HAL_TIM_PWM_Start+0x136>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a16      	ldr	r2, [pc, #88]	@ (800bfe8 <HAL_TIM_PWM_Start+0x18c>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d111      	bne.n	800bfb6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	f003 0307 	and.w	r3, r3, #7
 800bf9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2b06      	cmp	r3, #6
 800bfa2:	d010      	beq.n	800bfc6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f042 0201 	orr.w	r2, r2, #1
 800bfb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfb4:	e007      	b.n	800bfc6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f042 0201 	orr.w	r2, r2, #1
 800bfc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	40010000 	.word	0x40010000
 800bfd4:	40010400 	.word	0x40010400
 800bfd8:	40000400 	.word	0x40000400
 800bfdc:	40000800 	.word	0x40000800
 800bfe0:	40000c00 	.word	0x40000c00
 800bfe4:	40014000 	.word	0x40014000
 800bfe8:	40001800 	.word	0x40001800

0800bfec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2200      	movs	r2, #0
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	4618      	mov	r0, r3
 800c000:	f001 f81a 	bl	800d038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a2e      	ldr	r2, [pc, #184]	@ (800c0c4 <HAL_TIM_PWM_Stop+0xd8>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d004      	beq.n	800c018 <HAL_TIM_PWM_Stop+0x2c>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a2d      	ldr	r2, [pc, #180]	@ (800c0c8 <HAL_TIM_PWM_Stop+0xdc>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d101      	bne.n	800c01c <HAL_TIM_PWM_Stop+0x30>
 800c018:	2301      	movs	r3, #1
 800c01a:	e000      	b.n	800c01e <HAL_TIM_PWM_Stop+0x32>
 800c01c:	2300      	movs	r3, #0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d017      	beq.n	800c052 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6a1a      	ldr	r2, [r3, #32]
 800c028:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c02c:	4013      	ands	r3, r2
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10f      	bne.n	800c052 <HAL_TIM_PWM_Stop+0x66>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	6a1a      	ldr	r2, [r3, #32]
 800c038:	f240 4344 	movw	r3, #1092	@ 0x444
 800c03c:	4013      	ands	r3, r2
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d107      	bne.n	800c052 <HAL_TIM_PWM_Stop+0x66>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c050:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	6a1a      	ldr	r2, [r3, #32]
 800c058:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c05c:	4013      	ands	r3, r2
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10f      	bne.n	800c082 <HAL_TIM_PWM_Stop+0x96>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	6a1a      	ldr	r2, [r3, #32]
 800c068:	f240 4344 	movw	r3, #1092	@ 0x444
 800c06c:	4013      	ands	r3, r2
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d107      	bne.n	800c082 <HAL_TIM_PWM_Stop+0x96>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f022 0201 	bic.w	r2, r2, #1
 800c080:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d104      	bne.n	800c092 <HAL_TIM_PWM_Stop+0xa6>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c090:	e013      	b.n	800c0ba <HAL_TIM_PWM_Stop+0xce>
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2b04      	cmp	r3, #4
 800c096:	d104      	bne.n	800c0a2 <HAL_TIM_PWM_Stop+0xb6>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0a0:	e00b      	b.n	800c0ba <HAL_TIM_PWM_Stop+0xce>
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	2b08      	cmp	r3, #8
 800c0a6:	d104      	bne.n	800c0b2 <HAL_TIM_PWM_Stop+0xc6>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0b0:	e003      	b.n	800c0ba <HAL_TIM_PWM_Stop+0xce>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	40010000 	.word	0x40010000
 800c0c8:	40010400 	.word	0x40010400

0800c0cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b086      	sub	sp, #24
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d101      	bne.n	800c0e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e097      	b.n	800c210 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d106      	bne.n	800c0fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7fb f9a9 	bl	800744c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2202      	movs	r2, #2
 800c0fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	6812      	ldr	r2, [r2, #0]
 800c10c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c110:	f023 0307 	bic.w	r3, r3, #7
 800c114:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	3304      	adds	r3, #4
 800c11e:	4619      	mov	r1, r3
 800c120:	4610      	mov	r0, r2
 800c122:	f000 fc93 	bl	800ca4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	6a1b      	ldr	r3, [r3, #32]
 800c13c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	4313      	orrs	r3, r2
 800c146:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c14e:	f023 0303 	bic.w	r3, r3, #3
 800c152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	689a      	ldr	r2, [r3, #8]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	021b      	lsls	r3, r3, #8
 800c15e:	4313      	orrs	r3, r2
 800c160:	693a      	ldr	r2, [r7, #16]
 800c162:	4313      	orrs	r3, r2
 800c164:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c16c:	f023 030c 	bic.w	r3, r3, #12
 800c170:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c178:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c17c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	69db      	ldr	r3, [r3, #28]
 800c186:	021b      	lsls	r3, r3, #8
 800c188:	4313      	orrs	r3, r2
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	4313      	orrs	r3, r2
 800c18e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	011a      	lsls	r2, r3, #4
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	031b      	lsls	r3, r3, #12
 800c19c:	4313      	orrs	r3, r2
 800c19e:	693a      	ldr	r2, [r7, #16]
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c1aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c1b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	695b      	ldr	r3, [r3, #20]
 800c1bc:	011b      	lsls	r3, r3, #4
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	693a      	ldr	r2, [r7, #16]
 800c1d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3718      	adds	r7, #24
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c228:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c230:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c238:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c240:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d110      	bne.n	800c26a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c248:	7bfb      	ldrb	r3, [r7, #15]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d102      	bne.n	800c254 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c24e:	7b7b      	ldrb	r3, [r7, #13]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d001      	beq.n	800c258 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e069      	b.n	800c32c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2202      	movs	r2, #2
 800c264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c268:	e031      	b.n	800c2ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2b04      	cmp	r3, #4
 800c26e:	d110      	bne.n	800c292 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c270:	7bbb      	ldrb	r3, [r7, #14]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d102      	bne.n	800c27c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c276:	7b3b      	ldrb	r3, [r7, #12]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d001      	beq.n	800c280 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e055      	b.n	800c32c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2202      	movs	r2, #2
 800c284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2202      	movs	r2, #2
 800c28c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c290:	e01d      	b.n	800c2ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c292:	7bfb      	ldrb	r3, [r7, #15]
 800c294:	2b01      	cmp	r3, #1
 800c296:	d108      	bne.n	800c2aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c298:	7bbb      	ldrb	r3, [r7, #14]
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d105      	bne.n	800c2aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c29e:	7b7b      	ldrb	r3, [r7, #13]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d102      	bne.n	800c2aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c2a4:	7b3b      	ldrb	r3, [r7, #12]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d001      	beq.n	800c2ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e03e      	b.n	800c32c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2202      	movs	r2, #2
 800c2ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2202      	movs	r2, #2
 800c2ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d003      	beq.n	800c2dc <HAL_TIM_Encoder_Start+0xc4>
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	2b04      	cmp	r3, #4
 800c2d8:	d008      	beq.n	800c2ec <HAL_TIM_Encoder_Start+0xd4>
 800c2da:	e00f      	b.n	800c2fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 fea7 	bl	800d038 <TIM_CCxChannelCmd>
      break;
 800c2ea:	e016      	b.n	800c31a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	2104      	movs	r1, #4
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f000 fe9f 	bl	800d038 <TIM_CCxChannelCmd>
      break;
 800c2fa:	e00e      	b.n	800c31a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2201      	movs	r2, #1
 800c302:	2100      	movs	r1, #0
 800c304:	4618      	mov	r0, r3
 800c306:	f000 fe97 	bl	800d038 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2201      	movs	r2, #1
 800c310:	2104      	movs	r1, #4
 800c312:	4618      	mov	r0, r3
 800c314:	f000 fe90 	bl	800d038 <TIM_CCxChannelCmd>
      break;
 800c318:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f042 0201 	orr.w	r2, r2, #1
 800c328:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d003      	beq.n	800c34c <HAL_TIM_Encoder_Stop+0x18>
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b04      	cmp	r3, #4
 800c348:	d008      	beq.n	800c35c <HAL_TIM_Encoder_Stop+0x28>
 800c34a:	e00f      	b.n	800c36c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2200      	movs	r2, #0
 800c352:	2100      	movs	r1, #0
 800c354:	4618      	mov	r0, r3
 800c356:	f000 fe6f 	bl	800d038 <TIM_CCxChannelCmd>
      break;
 800c35a:	e016      	b.n	800c38a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2200      	movs	r2, #0
 800c362:	2104      	movs	r1, #4
 800c364:	4618      	mov	r0, r3
 800c366:	f000 fe67 	bl	800d038 <TIM_CCxChannelCmd>
      break;
 800c36a:	e00e      	b.n	800c38a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2200      	movs	r2, #0
 800c372:	2100      	movs	r1, #0
 800c374:	4618      	mov	r0, r3
 800c376:	f000 fe5f 	bl	800d038 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2200      	movs	r2, #0
 800c380:	2104      	movs	r1, #4
 800c382:	4618      	mov	r0, r3
 800c384:	f000 fe58 	bl	800d038 <TIM_CCxChannelCmd>
      break;
 800c388:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6a1a      	ldr	r2, [r3, #32]
 800c390:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c394:	4013      	ands	r3, r2
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10f      	bne.n	800c3ba <HAL_TIM_Encoder_Stop+0x86>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	6a1a      	ldr	r2, [r3, #32]
 800c3a0:	f240 4344 	movw	r3, #1092	@ 0x444
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d107      	bne.n	800c3ba <HAL_TIM_Encoder_Stop+0x86>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f022 0201 	bic.w	r2, r2, #1
 800c3b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <HAL_TIM_Encoder_Stop+0x92>
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	2b04      	cmp	r3, #4
 800c3c4:	d138      	bne.n	800c438 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d104      	bne.n	800c3d6 <HAL_TIM_Encoder_Stop+0xa2>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3d4:	e013      	b.n	800c3fe <HAL_TIM_Encoder_Stop+0xca>
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	2b04      	cmp	r3, #4
 800c3da:	d104      	bne.n	800c3e6 <HAL_TIM_Encoder_Stop+0xb2>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3e4:	e00b      	b.n	800c3fe <HAL_TIM_Encoder_Stop+0xca>
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b08      	cmp	r3, #8
 800c3ea:	d104      	bne.n	800c3f6 <HAL_TIM_Encoder_Stop+0xc2>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3f4:	e003      	b.n	800c3fe <HAL_TIM_Encoder_Stop+0xca>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d104      	bne.n	800c40e <HAL_TIM_Encoder_Stop+0xda>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c40c:	e024      	b.n	800c458 <HAL_TIM_Encoder_Stop+0x124>
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b04      	cmp	r3, #4
 800c412:	d104      	bne.n	800c41e <HAL_TIM_Encoder_Stop+0xea>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c41c:	e01c      	b.n	800c458 <HAL_TIM_Encoder_Stop+0x124>
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b08      	cmp	r3, #8
 800c422:	d104      	bne.n	800c42e <HAL_TIM_Encoder_Stop+0xfa>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c42c:	e014      	b.n	800c458 <HAL_TIM_Encoder_Stop+0x124>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c436:	e00f      	b.n	800c458 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	f003 0302 	and.w	r3, r3, #2
 800c480:	2b00      	cmp	r3, #0
 800c482:	d020      	beq.n	800c4c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f003 0302 	and.w	r3, r3, #2
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d01b      	beq.n	800c4c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f06f 0202 	mvn.w	r2, #2
 800c496:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	699b      	ldr	r3, [r3, #24]
 800c4a4:	f003 0303 	and.w	r3, r3, #3
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d003      	beq.n	800c4b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 faae 	bl	800ca0e <HAL_TIM_IC_CaptureCallback>
 800c4b2:	e005      	b.n	800c4c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7fb fcdd 	bl	8007e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fab1 	bl	800ca22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	f003 0304 	and.w	r3, r3, #4
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d020      	beq.n	800c512 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f003 0304 	and.w	r3, r3, #4
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d01b      	beq.n	800c512 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f06f 0204 	mvn.w	r2, #4
 800c4e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d003      	beq.n	800c500 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fa88 	bl	800ca0e <HAL_TIM_IC_CaptureCallback>
 800c4fe:	e005      	b.n	800c50c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7fb fcb7 	bl	8007e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa8b 	bl	800ca22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	f003 0308 	and.w	r3, r3, #8
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d020      	beq.n	800c55e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f003 0308 	and.w	r3, r3, #8
 800c522:	2b00      	cmp	r3, #0
 800c524:	d01b      	beq.n	800c55e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f06f 0208 	mvn.w	r2, #8
 800c52e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2204      	movs	r2, #4
 800c534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	69db      	ldr	r3, [r3, #28]
 800c53c:	f003 0303 	and.w	r3, r3, #3
 800c540:	2b00      	cmp	r3, #0
 800c542:	d003      	beq.n	800c54c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fa62 	bl	800ca0e <HAL_TIM_IC_CaptureCallback>
 800c54a:	e005      	b.n	800c558 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7fb fc91 	bl	8007e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fa65 	bl	800ca22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	f003 0310 	and.w	r3, r3, #16
 800c564:	2b00      	cmp	r3, #0
 800c566:	d020      	beq.n	800c5aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f003 0310 	and.w	r3, r3, #16
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d01b      	beq.n	800c5aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f06f 0210 	mvn.w	r2, #16
 800c57a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2208      	movs	r2, #8
 800c580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	69db      	ldr	r3, [r3, #28]
 800c588:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fa3c 	bl	800ca0e <HAL_TIM_IC_CaptureCallback>
 800c596:	e005      	b.n	800c5a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f7fb fc6b 	bl	8007e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fa3f 	bl	800ca22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	f003 0301 	and.w	r3, r3, #1
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00c      	beq.n	800c5ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d007      	beq.n	800c5ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f06f 0201 	mvn.w	r2, #1
 800c5c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7fb fca9 	bl	8007f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00c      	beq.n	800c5f2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d007      	beq.n	800c5f2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c5ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fe21 	bl	800d234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00c      	beq.n	800c616 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c602:	2b00      	cmp	r3, #0
 800c604:	d007      	beq.n	800c616 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fa10 	bl	800ca36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	f003 0320 	and.w	r3, r3, #32
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00c      	beq.n	800c63a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f003 0320 	and.w	r3, r3, #32
 800c626:	2b00      	cmp	r3, #0
 800c628:	d007      	beq.n	800c63a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f06f 0220 	mvn.w	r2, #32
 800c632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fdf3 	bl	800d220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c63a:	bf00      	nop
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
	...

0800c644 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b086      	sub	sp, #24
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d101      	bne.n	800c662 <HAL_TIM_OC_ConfigChannel+0x1e>
 800c65e:	2302      	movs	r3, #2
 800c660:	e048      	b.n	800c6f4 <HAL_TIM_OC_ConfigChannel+0xb0>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b0c      	cmp	r3, #12
 800c66e:	d839      	bhi.n	800c6e4 <HAL_TIM_OC_ConfigChannel+0xa0>
 800c670:	a201      	add	r2, pc, #4	@ (adr r2, 800c678 <HAL_TIM_OC_ConfigChannel+0x34>)
 800c672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c676:	bf00      	nop
 800c678:	0800c6ad 	.word	0x0800c6ad
 800c67c:	0800c6e5 	.word	0x0800c6e5
 800c680:	0800c6e5 	.word	0x0800c6e5
 800c684:	0800c6e5 	.word	0x0800c6e5
 800c688:	0800c6bb 	.word	0x0800c6bb
 800c68c:	0800c6e5 	.word	0x0800c6e5
 800c690:	0800c6e5 	.word	0x0800c6e5
 800c694:	0800c6e5 	.word	0x0800c6e5
 800c698:	0800c6c9 	.word	0x0800c6c9
 800c69c:	0800c6e5 	.word	0x0800c6e5
 800c6a0:	0800c6e5 	.word	0x0800c6e5
 800c6a4:	0800c6e5 	.word	0x0800c6e5
 800c6a8:	0800c6d7 	.word	0x0800c6d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 fa76 	bl	800cba4 <TIM_OC1_SetConfig>
      break;
 800c6b8:	e017      	b.n	800c6ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68b9      	ldr	r1, [r7, #8]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 fadf 	bl	800cc84 <TIM_OC2_SetConfig>
      break;
 800c6c6:	e010      	b.n	800c6ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68b9      	ldr	r1, [r7, #8]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 fb4e 	bl	800cd70 <TIM_OC3_SetConfig>
      break;
 800c6d4:	e009      	b.n	800c6ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68b9      	ldr	r1, [r7, #8]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 fbbb 	bl	800ce58 <TIM_OC4_SetConfig>
      break;
 800c6e2:	e002      	b.n	800c6ea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c6e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b086      	sub	sp, #24
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c712:	2b01      	cmp	r3, #1
 800c714:	d101      	bne.n	800c71a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c716:	2302      	movs	r3, #2
 800c718:	e0ae      	b.n	800c878 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b0c      	cmp	r3, #12
 800c726:	f200 809f 	bhi.w	800c868 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c72a:	a201      	add	r2, pc, #4	@ (adr r2, 800c730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c730:	0800c765 	.word	0x0800c765
 800c734:	0800c869 	.word	0x0800c869
 800c738:	0800c869 	.word	0x0800c869
 800c73c:	0800c869 	.word	0x0800c869
 800c740:	0800c7a5 	.word	0x0800c7a5
 800c744:	0800c869 	.word	0x0800c869
 800c748:	0800c869 	.word	0x0800c869
 800c74c:	0800c869 	.word	0x0800c869
 800c750:	0800c7e7 	.word	0x0800c7e7
 800c754:	0800c869 	.word	0x0800c869
 800c758:	0800c869 	.word	0x0800c869
 800c75c:	0800c869 	.word	0x0800c869
 800c760:	0800c827 	.word	0x0800c827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	68b9      	ldr	r1, [r7, #8]
 800c76a:	4618      	mov	r0, r3
 800c76c:	f000 fa1a 	bl	800cba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	699a      	ldr	r2, [r3, #24]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f042 0208 	orr.w	r2, r2, #8
 800c77e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	699a      	ldr	r2, [r3, #24]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f022 0204 	bic.w	r2, r2, #4
 800c78e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	6999      	ldr	r1, [r3, #24]
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	691a      	ldr	r2, [r3, #16]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	430a      	orrs	r2, r1
 800c7a0:	619a      	str	r2, [r3, #24]
      break;
 800c7a2:	e064      	b.n	800c86e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68b9      	ldr	r1, [r7, #8]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 fa6a 	bl	800cc84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	699a      	ldr	r2, [r3, #24]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c7be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	699a      	ldr	r2, [r3, #24]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c7ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	6999      	ldr	r1, [r3, #24]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	021a      	lsls	r2, r3, #8
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	430a      	orrs	r2, r1
 800c7e2:	619a      	str	r2, [r3, #24]
      break;
 800c7e4:	e043      	b.n	800c86e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68b9      	ldr	r1, [r7, #8]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 fabf 	bl	800cd70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	69da      	ldr	r2, [r3, #28]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f042 0208 	orr.w	r2, r2, #8
 800c800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	69da      	ldr	r2, [r3, #28]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f022 0204 	bic.w	r2, r2, #4
 800c810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	69d9      	ldr	r1, [r3, #28]
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	691a      	ldr	r2, [r3, #16]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	430a      	orrs	r2, r1
 800c822:	61da      	str	r2, [r3, #28]
      break;
 800c824:	e023      	b.n	800c86e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 fb13 	bl	800ce58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69da      	ldr	r2, [r3, #28]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	69da      	ldr	r2, [r3, #28]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	69d9      	ldr	r1, [r3, #28]
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	021a      	lsls	r2, r3, #8
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	430a      	orrs	r2, r1
 800c864:	61da      	str	r2, [r3, #28]
      break;
 800c866:	e002      	b.n	800c86e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	75fb      	strb	r3, [r7, #23]
      break;
 800c86c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c876:	7dfb      	ldrb	r3, [r7, #23]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3718      	adds	r7, #24
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c88a:	2300      	movs	r3, #0
 800c88c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c894:	2b01      	cmp	r3, #1
 800c896:	d101      	bne.n	800c89c <HAL_TIM_ConfigClockSource+0x1c>
 800c898:	2302      	movs	r3, #2
 800c89a:	e0b4      	b.n	800ca06 <HAL_TIM_ConfigClockSource+0x186>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c8ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c8c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8d4:	d03e      	beq.n	800c954 <HAL_TIM_ConfigClockSource+0xd4>
 800c8d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8da:	f200 8087 	bhi.w	800c9ec <HAL_TIM_ConfigClockSource+0x16c>
 800c8de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8e2:	f000 8086 	beq.w	800c9f2 <HAL_TIM_ConfigClockSource+0x172>
 800c8e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8ea:	d87f      	bhi.n	800c9ec <HAL_TIM_ConfigClockSource+0x16c>
 800c8ec:	2b70      	cmp	r3, #112	@ 0x70
 800c8ee:	d01a      	beq.n	800c926 <HAL_TIM_ConfigClockSource+0xa6>
 800c8f0:	2b70      	cmp	r3, #112	@ 0x70
 800c8f2:	d87b      	bhi.n	800c9ec <HAL_TIM_ConfigClockSource+0x16c>
 800c8f4:	2b60      	cmp	r3, #96	@ 0x60
 800c8f6:	d050      	beq.n	800c99a <HAL_TIM_ConfigClockSource+0x11a>
 800c8f8:	2b60      	cmp	r3, #96	@ 0x60
 800c8fa:	d877      	bhi.n	800c9ec <HAL_TIM_ConfigClockSource+0x16c>
 800c8fc:	2b50      	cmp	r3, #80	@ 0x50
 800c8fe:	d03c      	beq.n	800c97a <HAL_TIM_ConfigClockSource+0xfa>
 800c900:	2b50      	cmp	r3, #80	@ 0x50
 800c902:	d873      	bhi.n	800c9ec <HAL_TIM_ConfigClockSource+0x16c>
 800c904:	2b40      	cmp	r3, #64	@ 0x40
 800c906:	d058      	beq.n	800c9ba <HAL_TIM_ConfigClockSource+0x13a>
 800c908:	2b40      	cmp	r3, #64	@ 0x40
 800c90a:	d86f      	bhi.n	800c9ec <HAL_TIM_ConfigClockSource+0x16c>
 800c90c:	2b30      	cmp	r3, #48	@ 0x30
 800c90e:	d064      	beq.n	800c9da <HAL_TIM_ConfigClockSource+0x15a>
 800c910:	2b30      	cmp	r3, #48	@ 0x30
 800c912:	d86b      	bhi.n	800c9ec <HAL_TIM_ConfigClockSource+0x16c>
 800c914:	2b20      	cmp	r3, #32
 800c916:	d060      	beq.n	800c9da <HAL_TIM_ConfigClockSource+0x15a>
 800c918:	2b20      	cmp	r3, #32
 800c91a:	d867      	bhi.n	800c9ec <HAL_TIM_ConfigClockSource+0x16c>
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d05c      	beq.n	800c9da <HAL_TIM_ConfigClockSource+0x15a>
 800c920:	2b10      	cmp	r3, #16
 800c922:	d05a      	beq.n	800c9da <HAL_TIM_ConfigClockSource+0x15a>
 800c924:	e062      	b.n	800c9ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c936:	f000 fb5f 	bl	800cff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	609a      	str	r2, [r3, #8]
      break;
 800c952:	e04f      	b.n	800c9f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c964:	f000 fb48 	bl	800cff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	689a      	ldr	r2, [r3, #8]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c976:	609a      	str	r2, [r3, #8]
      break;
 800c978:	e03c      	b.n	800c9f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c986:	461a      	mov	r2, r3
 800c988:	f000 fabc 	bl	800cf04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2150      	movs	r1, #80	@ 0x50
 800c992:	4618      	mov	r0, r3
 800c994:	f000 fb15 	bl	800cfc2 <TIM_ITRx_SetConfig>
      break;
 800c998:	e02c      	b.n	800c9f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	f000 fadb 	bl	800cf62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2160      	movs	r1, #96	@ 0x60
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 fb05 	bl	800cfc2 <TIM_ITRx_SetConfig>
      break;
 800c9b8:	e01c      	b.n	800c9f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	f000 fa9c 	bl	800cf04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2140      	movs	r1, #64	@ 0x40
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 faf5 	bl	800cfc2 <TIM_ITRx_SetConfig>
      break;
 800c9d8:	e00c      	b.n	800c9f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	f000 faec 	bl	800cfc2 <TIM_ITRx_SetConfig>
      break;
 800c9ea:	e003      	b.n	800c9f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c9f0:	e000      	b.n	800c9f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c9f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b083      	sub	sp, #12
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca16:	bf00      	nop
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca2a:	bf00      	nop
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca36:	b480      	push	{r7}
 800ca38:	b083      	sub	sp, #12
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca3e:	bf00      	nop
 800ca40:	370c      	adds	r7, #12
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
	...

0800ca4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a46      	ldr	r2, [pc, #280]	@ (800cb78 <TIM_Base_SetConfig+0x12c>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d013      	beq.n	800ca8c <TIM_Base_SetConfig+0x40>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca6a:	d00f      	beq.n	800ca8c <TIM_Base_SetConfig+0x40>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a43      	ldr	r2, [pc, #268]	@ (800cb7c <TIM_Base_SetConfig+0x130>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d00b      	beq.n	800ca8c <TIM_Base_SetConfig+0x40>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a42      	ldr	r2, [pc, #264]	@ (800cb80 <TIM_Base_SetConfig+0x134>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d007      	beq.n	800ca8c <TIM_Base_SetConfig+0x40>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4a41      	ldr	r2, [pc, #260]	@ (800cb84 <TIM_Base_SetConfig+0x138>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d003      	beq.n	800ca8c <TIM_Base_SetConfig+0x40>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a40      	ldr	r2, [pc, #256]	@ (800cb88 <TIM_Base_SetConfig+0x13c>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d108      	bne.n	800ca9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a35      	ldr	r2, [pc, #212]	@ (800cb78 <TIM_Base_SetConfig+0x12c>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d02b      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caac:	d027      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a32      	ldr	r2, [pc, #200]	@ (800cb7c <TIM_Base_SetConfig+0x130>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d023      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a31      	ldr	r2, [pc, #196]	@ (800cb80 <TIM_Base_SetConfig+0x134>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d01f      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a30      	ldr	r2, [pc, #192]	@ (800cb84 <TIM_Base_SetConfig+0x138>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d01b      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a2f      	ldr	r2, [pc, #188]	@ (800cb88 <TIM_Base_SetConfig+0x13c>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d017      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a2e      	ldr	r2, [pc, #184]	@ (800cb8c <TIM_Base_SetConfig+0x140>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d013      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a2d      	ldr	r2, [pc, #180]	@ (800cb90 <TIM_Base_SetConfig+0x144>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d00f      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a2c      	ldr	r2, [pc, #176]	@ (800cb94 <TIM_Base_SetConfig+0x148>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d00b      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a2b      	ldr	r2, [pc, #172]	@ (800cb98 <TIM_Base_SetConfig+0x14c>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d007      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a2a      	ldr	r2, [pc, #168]	@ (800cb9c <TIM_Base_SetConfig+0x150>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d003      	beq.n	800cafe <TIM_Base_SetConfig+0xb2>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4a29      	ldr	r2, [pc, #164]	@ (800cba0 <TIM_Base_SetConfig+0x154>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d108      	bne.n	800cb10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	695b      	ldr	r3, [r3, #20]
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a10      	ldr	r2, [pc, #64]	@ (800cb78 <TIM_Base_SetConfig+0x12c>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d003      	beq.n	800cb44 <TIM_Base_SetConfig+0xf8>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a12      	ldr	r2, [pc, #72]	@ (800cb88 <TIM_Base_SetConfig+0x13c>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d103      	bne.n	800cb4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	691a      	ldr	r2, [r3, #16]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	691b      	ldr	r3, [r3, #16]
 800cb56:	f003 0301 	and.w	r3, r3, #1
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d105      	bne.n	800cb6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	f023 0201 	bic.w	r2, r3, #1
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	611a      	str	r2, [r3, #16]
  }
}
 800cb6a:	bf00      	nop
 800cb6c:	3714      	adds	r7, #20
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	40010000 	.word	0x40010000
 800cb7c:	40000400 	.word	0x40000400
 800cb80:	40000800 	.word	0x40000800
 800cb84:	40000c00 	.word	0x40000c00
 800cb88:	40010400 	.word	0x40010400
 800cb8c:	40014000 	.word	0x40014000
 800cb90:	40014400 	.word	0x40014400
 800cb94:	40014800 	.word	0x40014800
 800cb98:	40001800 	.word	0x40001800
 800cb9c:	40001c00 	.word	0x40001c00
 800cba0:	40002000 	.word	0x40002000

0800cba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b087      	sub	sp, #28
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a1b      	ldr	r3, [r3, #32]
 800cbb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a1b      	ldr	r3, [r3, #32]
 800cbb8:	f023 0201 	bic.w	r2, r3, #1
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f023 0303 	bic.w	r3, r3, #3
 800cbda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	f023 0302 	bic.w	r3, r3, #2
 800cbec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a20      	ldr	r2, [pc, #128]	@ (800cc7c <TIM_OC1_SetConfig+0xd8>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d003      	beq.n	800cc08 <TIM_OC1_SetConfig+0x64>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a1f      	ldr	r2, [pc, #124]	@ (800cc80 <TIM_OC1_SetConfig+0xdc>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d10c      	bne.n	800cc22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	f023 0308 	bic.w	r3, r3, #8
 800cc0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f023 0304 	bic.w	r3, r3, #4
 800cc20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a15      	ldr	r2, [pc, #84]	@ (800cc7c <TIM_OC1_SetConfig+0xd8>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d003      	beq.n	800cc32 <TIM_OC1_SetConfig+0x8e>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a14      	ldr	r2, [pc, #80]	@ (800cc80 <TIM_OC1_SetConfig+0xdc>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d111      	bne.n	800cc56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cc40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	699b      	ldr	r3, [r3, #24]
 800cc50:	693a      	ldr	r2, [r7, #16]
 800cc52:	4313      	orrs	r3, r2
 800cc54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	693a      	ldr	r2, [r7, #16]
 800cc5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	685a      	ldr	r2, [r3, #4]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	697a      	ldr	r2, [r7, #20]
 800cc6e:	621a      	str	r2, [r3, #32]
}
 800cc70:	bf00      	nop
 800cc72:	371c      	adds	r7, #28
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	40010000 	.word	0x40010000
 800cc80:	40010400 	.word	0x40010400

0800cc84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b087      	sub	sp, #28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a1b      	ldr	r3, [r3, #32]
 800cc92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	f023 0210 	bic.w	r2, r3, #16
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ccba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	021b      	lsls	r3, r3, #8
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f023 0320 	bic.w	r3, r3, #32
 800ccce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	011b      	lsls	r3, r3, #4
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a22      	ldr	r2, [pc, #136]	@ (800cd68 <TIM_OC2_SetConfig+0xe4>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d003      	beq.n	800ccec <TIM_OC2_SetConfig+0x68>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a21      	ldr	r2, [pc, #132]	@ (800cd6c <TIM_OC2_SetConfig+0xe8>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d10d      	bne.n	800cd08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ccf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	011b      	lsls	r3, r3, #4
 800ccfa:	697a      	ldr	r2, [r7, #20]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a17      	ldr	r2, [pc, #92]	@ (800cd68 <TIM_OC2_SetConfig+0xe4>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d003      	beq.n	800cd18 <TIM_OC2_SetConfig+0x94>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a16      	ldr	r2, [pc, #88]	@ (800cd6c <TIM_OC2_SetConfig+0xe8>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d113      	bne.n	800cd40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	695b      	ldr	r3, [r3, #20]
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	693a      	ldr	r2, [r7, #16]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	699b      	ldr	r3, [r3, #24]
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	693a      	ldr	r2, [r7, #16]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	693a      	ldr	r2, [r7, #16]
 800cd44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	685a      	ldr	r2, [r3, #4]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	621a      	str	r2, [r3, #32]
}
 800cd5a:	bf00      	nop
 800cd5c:	371c      	adds	r7, #28
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	40010000 	.word	0x40010000
 800cd6c:	40010400 	.word	0x40010400

0800cd70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b087      	sub	sp, #28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a1b      	ldr	r3, [r3, #32]
 800cd84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	69db      	ldr	r3, [r3, #28]
 800cd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f023 0303 	bic.w	r3, r3, #3
 800cda6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cdb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	021b      	lsls	r3, r3, #8
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4a21      	ldr	r2, [pc, #132]	@ (800ce50 <TIM_OC3_SetConfig+0xe0>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d003      	beq.n	800cdd6 <TIM_OC3_SetConfig+0x66>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4a20      	ldr	r2, [pc, #128]	@ (800ce54 <TIM_OC3_SetConfig+0xe4>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d10d      	bne.n	800cdf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	021b      	lsls	r3, r3, #8
 800cde4:	697a      	ldr	r2, [r7, #20]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cdf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a16      	ldr	r2, [pc, #88]	@ (800ce50 <TIM_OC3_SetConfig+0xe0>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d003      	beq.n	800ce02 <TIM_OC3_SetConfig+0x92>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a15      	ldr	r2, [pc, #84]	@ (800ce54 <TIM_OC3_SetConfig+0xe4>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d113      	bne.n	800ce2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	011b      	lsls	r3, r3, #4
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	699b      	ldr	r3, [r3, #24]
 800ce22:	011b      	lsls	r3, r3, #4
 800ce24:	693a      	ldr	r2, [r7, #16]
 800ce26:	4313      	orrs	r3, r2
 800ce28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	697a      	ldr	r2, [r7, #20]
 800ce42:	621a      	str	r2, [r3, #32]
}
 800ce44:	bf00      	nop
 800ce46:	371c      	adds	r7, #28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	40010000 	.word	0x40010000
 800ce54:	40010400 	.word	0x40010400

0800ce58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a1b      	ldr	r3, [r3, #32]
 800ce6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	69db      	ldr	r3, [r3, #28]
 800ce7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	021b      	lsls	r3, r3, #8
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	031b      	lsls	r3, r3, #12
 800ceaa:	693a      	ldr	r2, [r7, #16]
 800ceac:	4313      	orrs	r3, r2
 800ceae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4a12      	ldr	r2, [pc, #72]	@ (800cefc <TIM_OC4_SetConfig+0xa4>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d003      	beq.n	800cec0 <TIM_OC4_SetConfig+0x68>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a11      	ldr	r2, [pc, #68]	@ (800cf00 <TIM_OC4_SetConfig+0xa8>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d109      	bne.n	800ced4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	695b      	ldr	r3, [r3, #20]
 800cecc:	019b      	lsls	r3, r3, #6
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	4313      	orrs	r3, r2
 800ced2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	685a      	ldr	r2, [r3, #4]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	693a      	ldr	r2, [r7, #16]
 800ceec:	621a      	str	r2, [r3, #32]
}
 800ceee:	bf00      	nop
 800cef0:	371c      	adds	r7, #28
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	40010000 	.word	0x40010000
 800cf00:	40010400 	.word	0x40010400

0800cf04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b087      	sub	sp, #28
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6a1b      	ldr	r3, [r3, #32]
 800cf14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	f023 0201 	bic.w	r2, r3, #1
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	699b      	ldr	r3, [r3, #24]
 800cf26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cf2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	011b      	lsls	r3, r3, #4
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f023 030a 	bic.w	r3, r3, #10
 800cf40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	693a      	ldr	r2, [r7, #16]
 800cf4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	697a      	ldr	r2, [r7, #20]
 800cf54:	621a      	str	r2, [r3, #32]
}
 800cf56:	bf00      	nop
 800cf58:	371c      	adds	r7, #28
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf62:	b480      	push	{r7}
 800cf64:	b087      	sub	sp, #28
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6a1b      	ldr	r3, [r3, #32]
 800cf78:	f023 0210 	bic.w	r2, r3, #16
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cf8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	031b      	lsls	r3, r3, #12
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cf9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	011b      	lsls	r3, r3, #4
 800cfa4:	697a      	ldr	r2, [r7, #20]
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	693a      	ldr	r2, [r7, #16]
 800cfae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	621a      	str	r2, [r3, #32]
}
 800cfb6:	bf00      	nop
 800cfb8:	371c      	adds	r7, #28
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b085      	sub	sp, #20
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	f043 0307 	orr.w	r3, r3, #7
 800cfe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	609a      	str	r2, [r3, #8]
}
 800cfec:	bf00      	nop
 800cfee:	3714      	adds	r7, #20
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b087      	sub	sp, #28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	021a      	lsls	r2, r3, #8
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	431a      	orrs	r2, r3
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	4313      	orrs	r3, r2
 800d020:	697a      	ldr	r2, [r7, #20]
 800d022:	4313      	orrs	r3, r2
 800d024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	697a      	ldr	r2, [r7, #20]
 800d02a:	609a      	str	r2, [r3, #8]
}
 800d02c:	bf00      	nop
 800d02e:	371c      	adds	r7, #28
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d038:	b480      	push	{r7}
 800d03a:	b087      	sub	sp, #28
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	f003 031f 	and.w	r3, r3, #31
 800d04a:	2201      	movs	r2, #1
 800d04c:	fa02 f303 	lsl.w	r3, r2, r3
 800d050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6a1a      	ldr	r2, [r3, #32]
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	43db      	mvns	r3, r3
 800d05a:	401a      	ands	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6a1a      	ldr	r2, [r3, #32]
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	f003 031f 	and.w	r3, r3, #31
 800d06a:	6879      	ldr	r1, [r7, #4]
 800d06c:	fa01 f303 	lsl.w	r3, r1, r3
 800d070:	431a      	orrs	r2, r3
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	621a      	str	r2, [r3, #32]
}
 800d076:	bf00      	nop
 800d078:	371c      	adds	r7, #28
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
	...

0800d084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d094:	2b01      	cmp	r3, #1
 800d096:	d101      	bne.n	800d09c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d098:	2302      	movs	r3, #2
 800d09a:	e05a      	b.n	800d152 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a21      	ldr	r2, [pc, #132]	@ (800d160 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d022      	beq.n	800d126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0e8:	d01d      	beq.n	800d126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4a1d      	ldr	r2, [pc, #116]	@ (800d164 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d018      	beq.n	800d126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a1b      	ldr	r2, [pc, #108]	@ (800d168 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d013      	beq.n	800d126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4a1a      	ldr	r2, [pc, #104]	@ (800d16c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d00e      	beq.n	800d126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a18      	ldr	r2, [pc, #96]	@ (800d170 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d009      	beq.n	800d126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4a17      	ldr	r2, [pc, #92]	@ (800d174 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d004      	beq.n	800d126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a15      	ldr	r2, [pc, #84]	@ (800d178 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d10c      	bne.n	800d140 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d12c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	4313      	orrs	r3, r2
 800d136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3714      	adds	r7, #20
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop
 800d160:	40010000 	.word	0x40010000
 800d164:	40000400 	.word	0x40000400
 800d168:	40000800 	.word	0x40000800
 800d16c:	40000c00 	.word	0x40000c00
 800d170:	40010400 	.word	0x40010400
 800d174:	40014000 	.word	0x40014000
 800d178:	40001800 	.word	0x40001800

0800d17c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d186:	2300      	movs	r3, #0
 800d188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d190:	2b01      	cmp	r3, #1
 800d192:	d101      	bne.n	800d198 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d194:	2302      	movs	r3, #2
 800d196:	e03d      	b.n	800d214 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	69db      	ldr	r3, [r3, #28]
 800d1fe:	4313      	orrs	r3, r2
 800d200:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	68fa      	ldr	r2, [r7, #12]
 800d208:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d101      	bne.n	800d25a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	e042      	b.n	800d2e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d260:	b2db      	uxtb	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d106      	bne.n	800d274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7fa fb8e 	bl	8007990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2224      	movs	r2, #36	@ 0x24
 800d278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68da      	ldr	r2, [r3, #12]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d28a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 fdbd 	bl	800de0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	691a      	ldr	r2, [r3, #16]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d2a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	695a      	ldr	r2, [r3, #20]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d2b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	68da      	ldr	r2, [r3, #12]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d2c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2220      	movs	r2, #32
 800d2cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2220      	movs	r2, #32
 800d2d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08a      	sub	sp, #40	@ 0x28
 800d2ec:	af02      	add	r7, sp, #8
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	603b      	str	r3, [r7, #0]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b20      	cmp	r3, #32
 800d306:	d175      	bne.n	800d3f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d002      	beq.n	800d314 <HAL_UART_Transmit+0x2c>
 800d30e:	88fb      	ldrh	r3, [r7, #6]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d101      	bne.n	800d318 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d314:	2301      	movs	r3, #1
 800d316:	e06e      	b.n	800d3f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2200      	movs	r2, #0
 800d31c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2221      	movs	r2, #33	@ 0x21
 800d322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d326:	f7fb f8a3 	bl	8008470 <HAL_GetTick>
 800d32a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	88fa      	ldrh	r2, [r7, #6]
 800d330:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	88fa      	ldrh	r2, [r7, #6]
 800d336:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d340:	d108      	bne.n	800d354 <HAL_UART_Transmit+0x6c>
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d104      	bne.n	800d354 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d34a:	2300      	movs	r3, #0
 800d34c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	61bb      	str	r3, [r7, #24]
 800d352:	e003      	b.n	800d35c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d358:	2300      	movs	r3, #0
 800d35a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d35c:	e02e      	b.n	800d3bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	2200      	movs	r2, #0
 800d366:	2180      	movs	r1, #128	@ 0x80
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f000 fb1f 	bl	800d9ac <UART_WaitOnFlagUntilTimeout>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d005      	beq.n	800d380 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2220      	movs	r2, #32
 800d378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800d37c:	2303      	movs	r3, #3
 800d37e:	e03a      	b.n	800d3f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10b      	bne.n	800d39e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	881b      	ldrh	r3, [r3, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	3302      	adds	r3, #2
 800d39a:	61bb      	str	r3, [r7, #24]
 800d39c:	e007      	b.n	800d3ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	781a      	ldrb	r2, [r3, #0]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d1cb      	bne.n	800d35e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	2140      	movs	r1, #64	@ 0x40
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f000 faeb 	bl	800d9ac <UART_WaitOnFlagUntilTimeout>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d005      	beq.n	800d3e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2220      	movs	r2, #32
 800d3e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e006      	b.n	800d3f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2220      	movs	r2, #32
 800d3ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	e000      	b.n	800d3f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800d3f4:	2302      	movs	r3, #2
  }
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3720      	adds	r7, #32
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b084      	sub	sp, #16
 800d402:	af00      	add	r7, sp, #0
 800d404:	60f8      	str	r0, [r7, #12]
 800d406:	60b9      	str	r1, [r7, #8]
 800d408:	4613      	mov	r3, r2
 800d40a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d412:	b2db      	uxtb	r3, r3
 800d414:	2b20      	cmp	r3, #32
 800d416:	d112      	bne.n	800d43e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <HAL_UART_Receive_IT+0x26>
 800d41e:	88fb      	ldrh	r3, [r7, #6]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d101      	bne.n	800d428 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d424:	2301      	movs	r3, #1
 800d426:	e00b      	b.n	800d440 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2200      	movs	r2, #0
 800d42c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d42e:	88fb      	ldrh	r3, [r7, #6]
 800d430:	461a      	mov	r2, r3
 800d432:	68b9      	ldr	r1, [r7, #8]
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f000 fb12 	bl	800da5e <UART_Start_Receive_IT>
 800d43a:	4603      	mov	r3, r0
 800d43c:	e000      	b.n	800d440 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d43e:	2302      	movs	r3, #2
  }
}
 800d440:	4618      	mov	r0, r3
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b0ba      	sub	sp, #232	@ 0xe8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	695b      	ldr	r3, [r3, #20]
 800d46a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d46e:	2300      	movs	r3, #0
 800d470:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d474:	2300      	movs	r3, #0
 800d476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d47e:	f003 030f 	and.w	r3, r3, #15
 800d482:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10f      	bne.n	800d4ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d492:	f003 0320 	and.w	r3, r3, #32
 800d496:	2b00      	cmp	r3, #0
 800d498:	d009      	beq.n	800d4ae <HAL_UART_IRQHandler+0x66>
 800d49a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d49e:	f003 0320 	and.w	r3, r3, #32
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d003      	beq.n	800d4ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fbf2 	bl	800dc90 <UART_Receive_IT>
      return;
 800d4ac:	e25b      	b.n	800d966 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d4ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f000 80de 	beq.w	800d674 <HAL_UART_IRQHandler+0x22c>
 800d4b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d4bc:	f003 0301 	and.w	r3, r3, #1
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d106      	bne.n	800d4d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f000 80d1 	beq.w	800d674 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4d6:	f003 0301 	and.w	r3, r3, #1
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00b      	beq.n	800d4f6 <HAL_UART_IRQHandler+0xae>
 800d4de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d005      	beq.n	800d4f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4ee:	f043 0201 	orr.w	r2, r3, #1
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4fa:	f003 0304 	and.w	r3, r3, #4
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00b      	beq.n	800d51a <HAL_UART_IRQHandler+0xd2>
 800d502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d506:	f003 0301 	and.w	r3, r3, #1
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d005      	beq.n	800d51a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d512:	f043 0202 	orr.w	r2, r3, #2
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d51e:	f003 0302 	and.w	r3, r3, #2
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00b      	beq.n	800d53e <HAL_UART_IRQHandler+0xf6>
 800d526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d005      	beq.n	800d53e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d536:	f043 0204 	orr.w	r2, r3, #4
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d542:	f003 0308 	and.w	r3, r3, #8
 800d546:	2b00      	cmp	r3, #0
 800d548:	d011      	beq.n	800d56e <HAL_UART_IRQHandler+0x126>
 800d54a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d54e:	f003 0320 	and.w	r3, r3, #32
 800d552:	2b00      	cmp	r3, #0
 800d554:	d105      	bne.n	800d562 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d005      	beq.n	800d56e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d566:	f043 0208 	orr.w	r2, r3, #8
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 81f2 	beq.w	800d95c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d57c:	f003 0320 	and.w	r3, r3, #32
 800d580:	2b00      	cmp	r3, #0
 800d582:	d008      	beq.n	800d596 <HAL_UART_IRQHandler+0x14e>
 800d584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d588:	f003 0320 	and.w	r3, r3, #32
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 fb7d 	bl	800dc90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	695b      	ldr	r3, [r3, #20]
 800d59c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5a0:	2b40      	cmp	r3, #64	@ 0x40
 800d5a2:	bf0c      	ite	eq
 800d5a4:	2301      	moveq	r3, #1
 800d5a6:	2300      	movne	r3, #0
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5b2:	f003 0308 	and.w	r3, r3, #8
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d103      	bne.n	800d5c2 <HAL_UART_IRQHandler+0x17a>
 800d5ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d04f      	beq.n	800d662 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 fa85 	bl	800dad2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	695b      	ldr	r3, [r3, #20]
 800d5ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5d2:	2b40      	cmp	r3, #64	@ 0x40
 800d5d4:	d141      	bne.n	800d65a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3314      	adds	r3, #20
 800d5dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d5e4:	e853 3f00 	ldrex	r3, [r3]
 800d5e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d5ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d5f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3314      	adds	r3, #20
 800d5fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d602:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d60e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d612:	e841 2300 	strex	r3, r2, [r1]
 800d616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d61a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1d9      	bne.n	800d5d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d626:	2b00      	cmp	r3, #0
 800d628:	d013      	beq.n	800d652 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d62e:	4a7e      	ldr	r2, [pc, #504]	@ (800d828 <HAL_UART_IRQHandler+0x3e0>)
 800d630:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d636:	4618      	mov	r0, r3
 800d638:	f7fb ff0e 	bl	8009458 <HAL_DMA_Abort_IT>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d016      	beq.n	800d670 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d64c:	4610      	mov	r0, r2
 800d64e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d650:	e00e      	b.n	800d670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f994 	bl	800d980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d658:	e00a      	b.n	800d670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f990 	bl	800d980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d660:	e006      	b.n	800d670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 f98c 	bl	800d980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d66e:	e175      	b.n	800d95c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d670:	bf00      	nop
    return;
 800d672:	e173      	b.n	800d95c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d678:	2b01      	cmp	r3, #1
 800d67a:	f040 814f 	bne.w	800d91c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d682:	f003 0310 	and.w	r3, r3, #16
 800d686:	2b00      	cmp	r3, #0
 800d688:	f000 8148 	beq.w	800d91c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d68c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d690:	f003 0310 	and.w	r3, r3, #16
 800d694:	2b00      	cmp	r3, #0
 800d696:	f000 8141 	beq.w	800d91c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d69a:	2300      	movs	r3, #0
 800d69c:	60bb      	str	r3, [r7, #8]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	60bb      	str	r3, [r7, #8]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	60bb      	str	r3, [r7, #8]
 800d6ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	695b      	ldr	r3, [r3, #20]
 800d6b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6ba:	2b40      	cmp	r3, #64	@ 0x40
 800d6bc:	f040 80b6 	bne.w	800d82c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d6cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f000 8145 	beq.w	800d960 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d6da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	f080 813e 	bcs.w	800d960 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6f0:	69db      	ldr	r3, [r3, #28]
 800d6f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6f6:	f000 8088 	beq.w	800d80a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	330c      	adds	r3, #12
 800d700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d704:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d708:	e853 3f00 	ldrex	r3, [r3]
 800d70c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d710:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	330c      	adds	r3, #12
 800d722:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d726:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d72a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d732:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d736:	e841 2300 	strex	r3, r2, [r1]
 800d73a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d73e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1d9      	bne.n	800d6fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3314      	adds	r3, #20
 800d74c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d750:	e853 3f00 	ldrex	r3, [r3]
 800d754:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d758:	f023 0301 	bic.w	r3, r3, #1
 800d75c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3314      	adds	r3, #20
 800d766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d76a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d76e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d770:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d772:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d776:	e841 2300 	strex	r3, r2, [r1]
 800d77a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d77c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d1e1      	bne.n	800d746 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	3314      	adds	r3, #20
 800d788:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d78c:	e853 3f00 	ldrex	r3, [r3]
 800d790:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d798:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3314      	adds	r3, #20
 800d7a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d7a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d7a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d7ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7ae:	e841 2300 	strex	r3, r2, [r1]
 800d7b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d7b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1e3      	bne.n	800d782 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	330c      	adds	r3, #12
 800d7ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7d2:	e853 3f00 	ldrex	r3, [r3]
 800d7d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d7d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7da:	f023 0310 	bic.w	r3, r3, #16
 800d7de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	330c      	adds	r3, #12
 800d7e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d7ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d7ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7f4:	e841 2300 	strex	r3, r2, [r1]
 800d7f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d7fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d1e3      	bne.n	800d7c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d804:	4618      	mov	r0, r3
 800d806:	f7fb fdb7 	bl	8009378 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2202      	movs	r2, #2
 800d80e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d818:	b29b      	uxth	r3, r3
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	4619      	mov	r1, r3
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 f8b7 	bl	800d994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d826:	e09b      	b.n	800d960 <HAL_UART_IRQHandler+0x518>
 800d828:	0800db99 	.word	0x0800db99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d834:	b29b      	uxth	r3, r3
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d840:	b29b      	uxth	r3, r3
 800d842:	2b00      	cmp	r3, #0
 800d844:	f000 808e 	beq.w	800d964 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f000 8089 	beq.w	800d964 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	330c      	adds	r3, #12
 800d858:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d85c:	e853 3f00 	ldrex	r3, [r3]
 800d860:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d868:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	330c      	adds	r3, #12
 800d872:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d876:	647a      	str	r2, [r7, #68]	@ 0x44
 800d878:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d87c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d87e:	e841 2300 	strex	r3, r2, [r1]
 800d882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1e3      	bne.n	800d852 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	3314      	adds	r3, #20
 800d890:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d894:	e853 3f00 	ldrex	r3, [r3]
 800d898:	623b      	str	r3, [r7, #32]
   return(result);
 800d89a:	6a3b      	ldr	r3, [r7, #32]
 800d89c:	f023 0301 	bic.w	r3, r3, #1
 800d8a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3314      	adds	r3, #20
 800d8aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d8ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800d8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8b6:	e841 2300 	strex	r3, r2, [r1]
 800d8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d1e3      	bne.n	800d88a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2220      	movs	r2, #32
 800d8c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	330c      	adds	r3, #12
 800d8d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	e853 3f00 	ldrex	r3, [r3]
 800d8de:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f023 0310 	bic.w	r3, r3, #16
 800d8e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	330c      	adds	r3, #12
 800d8f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d8f4:	61fa      	str	r2, [r7, #28]
 800d8f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f8:	69b9      	ldr	r1, [r7, #24]
 800d8fa:	69fa      	ldr	r2, [r7, #28]
 800d8fc:	e841 2300 	strex	r3, r2, [r1]
 800d900:	617b      	str	r3, [r7, #20]
   return(result);
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1e3      	bne.n	800d8d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2202      	movs	r2, #2
 800d90c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d90e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d912:	4619      	mov	r1, r3
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f83d 	bl	800d994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d91a:	e023      	b.n	800d964 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d924:	2b00      	cmp	r3, #0
 800d926:	d009      	beq.n	800d93c <HAL_UART_IRQHandler+0x4f4>
 800d928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d92c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d930:	2b00      	cmp	r3, #0
 800d932:	d003      	beq.n	800d93c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 f943 	bl	800dbc0 <UART_Transmit_IT>
    return;
 800d93a:	e014      	b.n	800d966 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00e      	beq.n	800d966 <HAL_UART_IRQHandler+0x51e>
 800d948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d94c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d950:	2b00      	cmp	r3, #0
 800d952:	d008      	beq.n	800d966 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f983 	bl	800dc60 <UART_EndTransmit_IT>
    return;
 800d95a:	e004      	b.n	800d966 <HAL_UART_IRQHandler+0x51e>
    return;
 800d95c:	bf00      	nop
 800d95e:	e002      	b.n	800d966 <HAL_UART_IRQHandler+0x51e>
      return;
 800d960:	bf00      	nop
 800d962:	e000      	b.n	800d966 <HAL_UART_IRQHandler+0x51e>
      return;
 800d964:	bf00      	nop
  }
}
 800d966:	37e8      	adds	r7, #232	@ 0xe8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d974:	bf00      	nop
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d988:	bf00      	nop
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9a0:	bf00      	nop
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b086      	sub	sp, #24
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	603b      	str	r3, [r7, #0]
 800d9b8:	4613      	mov	r3, r2
 800d9ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9bc:	e03b      	b.n	800da36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9be:	6a3b      	ldr	r3, [r7, #32]
 800d9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c4:	d037      	beq.n	800da36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9c6:	f7fa fd53 	bl	8008470 <HAL_GetTick>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	6a3a      	ldr	r2, [r7, #32]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d302      	bcc.n	800d9dc <UART_WaitOnFlagUntilTimeout+0x30>
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d101      	bne.n	800d9e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d9dc:	2303      	movs	r3, #3
 800d9de:	e03a      	b.n	800da56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	f003 0304 	and.w	r3, r3, #4
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d023      	beq.n	800da36 <UART_WaitOnFlagUntilTimeout+0x8a>
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2b80      	cmp	r3, #128	@ 0x80
 800d9f2:	d020      	beq.n	800da36 <UART_WaitOnFlagUntilTimeout+0x8a>
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	2b40      	cmp	r3, #64	@ 0x40
 800d9f8:	d01d      	beq.n	800da36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f003 0308 	and.w	r3, r3, #8
 800da04:	2b08      	cmp	r3, #8
 800da06:	d116      	bne.n	800da36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800da08:	2300      	movs	r3, #0
 800da0a:	617b      	str	r3, [r7, #20]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	617b      	str	r3, [r7, #20]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	617b      	str	r3, [r7, #20]
 800da1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f000 f857 	bl	800dad2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2208      	movs	r2, #8
 800da28:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	e00f      	b.n	800da56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	4013      	ands	r3, r2
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	429a      	cmp	r2, r3
 800da44:	bf0c      	ite	eq
 800da46:	2301      	moveq	r3, #1
 800da48:	2300      	movne	r3, #0
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	461a      	mov	r2, r3
 800da4e:	79fb      	ldrb	r3, [r7, #7]
 800da50:	429a      	cmp	r2, r3
 800da52:	d0b4      	beq.n	800d9be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3718      	adds	r7, #24
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da5e:	b480      	push	{r7}
 800da60:	b085      	sub	sp, #20
 800da62:	af00      	add	r7, sp, #0
 800da64:	60f8      	str	r0, [r7, #12]
 800da66:	60b9      	str	r1, [r7, #8]
 800da68:	4613      	mov	r3, r2
 800da6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	88fa      	ldrh	r2, [r7, #6]
 800da76:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	88fa      	ldrh	r2, [r7, #6]
 800da7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2222      	movs	r2, #34	@ 0x22
 800da88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d007      	beq.n	800daa4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68da      	ldr	r2, [r3, #12]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800daa2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	695a      	ldr	r2, [r3, #20]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f042 0201 	orr.w	r2, r2, #1
 800dab2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	68da      	ldr	r2, [r3, #12]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f042 0220 	orr.w	r2, r2, #32
 800dac2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr

0800dad2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dad2:	b480      	push	{r7}
 800dad4:	b095      	sub	sp, #84	@ 0x54
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	330c      	adds	r3, #12
 800dae0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dae4:	e853 3f00 	ldrex	r3, [r3]
 800dae8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800daea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800daf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	330c      	adds	r3, #12
 800daf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dafa:	643a      	str	r2, [r7, #64]	@ 0x40
 800dafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db02:	e841 2300 	strex	r3, r2, [r1]
 800db06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1e5      	bne.n	800dada <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	3314      	adds	r3, #20
 800db14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db16:	6a3b      	ldr	r3, [r7, #32]
 800db18:	e853 3f00 	ldrex	r3, [r3]
 800db1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	f023 0301 	bic.w	r3, r3, #1
 800db24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	3314      	adds	r3, #20
 800db2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800db30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db36:	e841 2300 	strex	r3, r2, [r1]
 800db3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1e5      	bne.n	800db0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db46:	2b01      	cmp	r3, #1
 800db48:	d119      	bne.n	800db7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	330c      	adds	r3, #12
 800db50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	e853 3f00 	ldrex	r3, [r3]
 800db58:	60bb      	str	r3, [r7, #8]
   return(result);
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	f023 0310 	bic.w	r3, r3, #16
 800db60:	647b      	str	r3, [r7, #68]	@ 0x44
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	330c      	adds	r3, #12
 800db68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db6a:	61ba      	str	r2, [r7, #24]
 800db6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db6e:	6979      	ldr	r1, [r7, #20]
 800db70:	69ba      	ldr	r2, [r7, #24]
 800db72:	e841 2300 	strex	r3, r2, [r1]
 800db76:	613b      	str	r3, [r7, #16]
   return(result);
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d1e5      	bne.n	800db4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2220      	movs	r2, #32
 800db82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800db8c:	bf00      	nop
 800db8e:	3754      	adds	r7, #84	@ 0x54
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f7ff fee4 	bl	800d980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbb8:	bf00      	nop
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	2b21      	cmp	r3, #33	@ 0x21
 800dbd2:	d13e      	bne.n	800dc52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbdc:	d114      	bne.n	800dc08 <UART_Transmit_IT+0x48>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	691b      	ldr	r3, [r3, #16]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d110      	bne.n	800dc08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	881b      	ldrh	r3, [r3, #0]
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dbfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6a1b      	ldr	r3, [r3, #32]
 800dc00:	1c9a      	adds	r2, r3, #2
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	621a      	str	r2, [r3, #32]
 800dc06:	e008      	b.n	800dc1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a1b      	ldr	r3, [r3, #32]
 800dc0c:	1c59      	adds	r1, r3, #1
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	6211      	str	r1, [r2, #32]
 800dc12:	781a      	ldrb	r2, [r3, #0]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	3b01      	subs	r3, #1
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	4619      	mov	r1, r3
 800dc28:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10f      	bne.n	800dc4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	68da      	ldr	r2, [r3, #12]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dc3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68da      	ldr	r2, [r3, #12]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	e000      	b.n	800dc54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dc52:	2302      	movs	r3, #2
  }
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3714      	adds	r7, #20
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	68da      	ldr	r2, [r3, #12]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2220      	movs	r2, #32
 800dc7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff fe73 	bl	800d96c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dc86:	2300      	movs	r3, #0
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3708      	adds	r7, #8
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08c      	sub	sp, #48	@ 0x30
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2b22      	cmp	r3, #34	@ 0x22
 800dca2:	f040 80ae 	bne.w	800de02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcae:	d117      	bne.n	800dce0 <UART_Receive_IT+0x50>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	691b      	ldr	r3, [r3, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d113      	bne.n	800dce0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcce:	b29a      	uxth	r2, r3
 800dcd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd8:	1c9a      	adds	r2, r3, #2
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	629a      	str	r2, [r3, #40]	@ 0x28
 800dcde:	e026      	b.n	800dd2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800dce6:	2300      	movs	r3, #0
 800dce8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcf2:	d007      	beq.n	800dd04 <UART_Receive_IT+0x74>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	689b      	ldr	r3, [r3, #8]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d10a      	bne.n	800dd12 <UART_Receive_IT+0x82>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d106      	bne.n	800dd12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0e:	701a      	strb	r2, [r3, #0]
 800dd10:	e008      	b.n	800dd24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	3b01      	subs	r3, #1
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d15d      	bne.n	800ddfe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	68da      	ldr	r2, [r3, #12]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f022 0220 	bic.w	r2, r2, #32
 800dd50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68da      	ldr	r2, [r3, #12]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dd60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	695a      	ldr	r2, [r3, #20]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f022 0201 	bic.w	r2, r2, #1
 800dd70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2220      	movs	r2, #32
 800dd76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d135      	bne.n	800ddf4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	330c      	adds	r3, #12
 800dd94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	e853 3f00 	ldrex	r3, [r3]
 800dd9c:	613b      	str	r3, [r7, #16]
   return(result);
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	f023 0310 	bic.w	r3, r3, #16
 800dda4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	330c      	adds	r3, #12
 800ddac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddae:	623a      	str	r2, [r7, #32]
 800ddb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb2:	69f9      	ldr	r1, [r7, #28]
 800ddb4:	6a3a      	ldr	r2, [r7, #32]
 800ddb6:	e841 2300 	strex	r3, r2, [r1]
 800ddba:	61bb      	str	r3, [r7, #24]
   return(result);
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d1e5      	bne.n	800dd8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f003 0310 	and.w	r3, r3, #16
 800ddcc:	2b10      	cmp	r3, #16
 800ddce:	d10a      	bne.n	800dde6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	60fb      	str	r3, [r7, #12]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	60fb      	str	r3, [r7, #12]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	60fb      	str	r3, [r7, #12]
 800dde4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f7ff fdd1 	bl	800d994 <HAL_UARTEx_RxEventCallback>
 800ddf2:	e002      	b.n	800ddfa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7f9 fe5b 	bl	8007ab0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	e002      	b.n	800de04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ddfe:	2300      	movs	r3, #0
 800de00:	e000      	b.n	800de04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800de02:	2302      	movs	r3, #2
  }
}
 800de04:	4618      	mov	r0, r3
 800de06:	3730      	adds	r7, #48	@ 0x30
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de10:	b0c0      	sub	sp, #256	@ 0x100
 800de12:	af00      	add	r7, sp, #0
 800de14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800de24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de28:	68d9      	ldr	r1, [r3, #12]
 800de2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de2e:	681a      	ldr	r2, [r3, #0]
 800de30:	ea40 0301 	orr.w	r3, r0, r1
 800de34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800de36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de3a:	689a      	ldr	r2, [r3, #8]
 800de3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de40:	691b      	ldr	r3, [r3, #16]
 800de42:	431a      	orrs	r2, r3
 800de44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	431a      	orrs	r2, r3
 800de4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de50:	69db      	ldr	r3, [r3, #28]
 800de52:	4313      	orrs	r3, r2
 800de54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800de58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800de64:	f021 010c 	bic.w	r1, r1, #12
 800de68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800de72:	430b      	orrs	r3, r1
 800de74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800de76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	695b      	ldr	r3, [r3, #20]
 800de7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800de82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de86:	6999      	ldr	r1, [r3, #24]
 800de88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	ea40 0301 	orr.w	r3, r0, r1
 800de92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800de94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	4b8f      	ldr	r3, [pc, #572]	@ (800e0d8 <UART_SetConfig+0x2cc>)
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d005      	beq.n	800deac <UART_SetConfig+0xa0>
 800dea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	4b8d      	ldr	r3, [pc, #564]	@ (800e0dc <UART_SetConfig+0x2d0>)
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d104      	bne.n	800deb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800deac:	f7fd fc7a 	bl	800b7a4 <HAL_RCC_GetPCLK2Freq>
 800deb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800deb4:	e003      	b.n	800debe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800deb6:	f7fd fc61 	bl	800b77c <HAL_RCC_GetPCLK1Freq>
 800deba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800debe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dec2:	69db      	ldr	r3, [r3, #28]
 800dec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dec8:	f040 810c 	bne.w	800e0e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800decc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ded0:	2200      	movs	r2, #0
 800ded2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ded6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800deda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800dede:	4622      	mov	r2, r4
 800dee0:	462b      	mov	r3, r5
 800dee2:	1891      	adds	r1, r2, r2
 800dee4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800dee6:	415b      	adcs	r3, r3
 800dee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800deea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800deee:	4621      	mov	r1, r4
 800def0:	eb12 0801 	adds.w	r8, r2, r1
 800def4:	4629      	mov	r1, r5
 800def6:	eb43 0901 	adc.w	r9, r3, r1
 800defa:	f04f 0200 	mov.w	r2, #0
 800defe:	f04f 0300 	mov.w	r3, #0
 800df02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800df06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800df0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800df0e:	4690      	mov	r8, r2
 800df10:	4699      	mov	r9, r3
 800df12:	4623      	mov	r3, r4
 800df14:	eb18 0303 	adds.w	r3, r8, r3
 800df18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800df1c:	462b      	mov	r3, r5
 800df1e:	eb49 0303 	adc.w	r3, r9, r3
 800df22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800df26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800df36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800df3a:	460b      	mov	r3, r1
 800df3c:	18db      	adds	r3, r3, r3
 800df3e:	653b      	str	r3, [r7, #80]	@ 0x50
 800df40:	4613      	mov	r3, r2
 800df42:	eb42 0303 	adc.w	r3, r2, r3
 800df46:	657b      	str	r3, [r7, #84]	@ 0x54
 800df48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800df4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800df50:	f7f2 feba 	bl	8000cc8 <__aeabi_uldivmod>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4b61      	ldr	r3, [pc, #388]	@ (800e0e0 <UART_SetConfig+0x2d4>)
 800df5a:	fba3 2302 	umull	r2, r3, r3, r2
 800df5e:	095b      	lsrs	r3, r3, #5
 800df60:	011c      	lsls	r4, r3, #4
 800df62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800df66:	2200      	movs	r2, #0
 800df68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800df6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800df70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800df74:	4642      	mov	r2, r8
 800df76:	464b      	mov	r3, r9
 800df78:	1891      	adds	r1, r2, r2
 800df7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800df7c:	415b      	adcs	r3, r3
 800df7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800df84:	4641      	mov	r1, r8
 800df86:	eb12 0a01 	adds.w	sl, r2, r1
 800df8a:	4649      	mov	r1, r9
 800df8c:	eb43 0b01 	adc.w	fp, r3, r1
 800df90:	f04f 0200 	mov.w	r2, #0
 800df94:	f04f 0300 	mov.w	r3, #0
 800df98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800df9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dfa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dfa4:	4692      	mov	sl, r2
 800dfa6:	469b      	mov	fp, r3
 800dfa8:	4643      	mov	r3, r8
 800dfaa:	eb1a 0303 	adds.w	r3, sl, r3
 800dfae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dfb2:	464b      	mov	r3, r9
 800dfb4:	eb4b 0303 	adc.w	r3, fp, r3
 800dfb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dfbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dfc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800dfcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	18db      	adds	r3, r3, r3
 800dfd4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	eb42 0303 	adc.w	r3, r2, r3
 800dfdc:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800dfe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800dfe6:	f7f2 fe6f 	bl	8000cc8 <__aeabi_uldivmod>
 800dfea:	4602      	mov	r2, r0
 800dfec:	460b      	mov	r3, r1
 800dfee:	4611      	mov	r1, r2
 800dff0:	4b3b      	ldr	r3, [pc, #236]	@ (800e0e0 <UART_SetConfig+0x2d4>)
 800dff2:	fba3 2301 	umull	r2, r3, r3, r1
 800dff6:	095b      	lsrs	r3, r3, #5
 800dff8:	2264      	movs	r2, #100	@ 0x64
 800dffa:	fb02 f303 	mul.w	r3, r2, r3
 800dffe:	1acb      	subs	r3, r1, r3
 800e000:	00db      	lsls	r3, r3, #3
 800e002:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800e006:	4b36      	ldr	r3, [pc, #216]	@ (800e0e0 <UART_SetConfig+0x2d4>)
 800e008:	fba3 2302 	umull	r2, r3, r3, r2
 800e00c:	095b      	lsrs	r3, r3, #5
 800e00e:	005b      	lsls	r3, r3, #1
 800e010:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e014:	441c      	add	r4, r3
 800e016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e01a:	2200      	movs	r2, #0
 800e01c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e020:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800e024:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800e028:	4642      	mov	r2, r8
 800e02a:	464b      	mov	r3, r9
 800e02c:	1891      	adds	r1, r2, r2
 800e02e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e030:	415b      	adcs	r3, r3
 800e032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e038:	4641      	mov	r1, r8
 800e03a:	1851      	adds	r1, r2, r1
 800e03c:	6339      	str	r1, [r7, #48]	@ 0x30
 800e03e:	4649      	mov	r1, r9
 800e040:	414b      	adcs	r3, r1
 800e042:	637b      	str	r3, [r7, #52]	@ 0x34
 800e044:	f04f 0200 	mov.w	r2, #0
 800e048:	f04f 0300 	mov.w	r3, #0
 800e04c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800e050:	4659      	mov	r1, fp
 800e052:	00cb      	lsls	r3, r1, #3
 800e054:	4651      	mov	r1, sl
 800e056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e05a:	4651      	mov	r1, sl
 800e05c:	00ca      	lsls	r2, r1, #3
 800e05e:	4610      	mov	r0, r2
 800e060:	4619      	mov	r1, r3
 800e062:	4603      	mov	r3, r0
 800e064:	4642      	mov	r2, r8
 800e066:	189b      	adds	r3, r3, r2
 800e068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e06c:	464b      	mov	r3, r9
 800e06e:	460a      	mov	r2, r1
 800e070:	eb42 0303 	adc.w	r3, r2, r3
 800e074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e084:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e08c:	460b      	mov	r3, r1
 800e08e:	18db      	adds	r3, r3, r3
 800e090:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e092:	4613      	mov	r3, r2
 800e094:	eb42 0303 	adc.w	r3, r2, r3
 800e098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e09a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e09e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e0a2:	f7f2 fe11 	bl	8000cc8 <__aeabi_uldivmod>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e0e0 <UART_SetConfig+0x2d4>)
 800e0ac:	fba3 1302 	umull	r1, r3, r3, r2
 800e0b0:	095b      	lsrs	r3, r3, #5
 800e0b2:	2164      	movs	r1, #100	@ 0x64
 800e0b4:	fb01 f303 	mul.w	r3, r1, r3
 800e0b8:	1ad3      	subs	r3, r2, r3
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	3332      	adds	r3, #50	@ 0x32
 800e0be:	4a08      	ldr	r2, [pc, #32]	@ (800e0e0 <UART_SetConfig+0x2d4>)
 800e0c0:	fba2 2303 	umull	r2, r3, r2, r3
 800e0c4:	095b      	lsrs	r3, r3, #5
 800e0c6:	f003 0207 	and.w	r2, r3, #7
 800e0ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4422      	add	r2, r4
 800e0d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e0d4:	e106      	b.n	800e2e4 <UART_SetConfig+0x4d8>
 800e0d6:	bf00      	nop
 800e0d8:	40011000 	.word	0x40011000
 800e0dc:	40011400 	.word	0x40011400
 800e0e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e0e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e0ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e0f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e0f6:	4642      	mov	r2, r8
 800e0f8:	464b      	mov	r3, r9
 800e0fa:	1891      	adds	r1, r2, r2
 800e0fc:	6239      	str	r1, [r7, #32]
 800e0fe:	415b      	adcs	r3, r3
 800e100:	627b      	str	r3, [r7, #36]	@ 0x24
 800e102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e106:	4641      	mov	r1, r8
 800e108:	1854      	adds	r4, r2, r1
 800e10a:	4649      	mov	r1, r9
 800e10c:	eb43 0501 	adc.w	r5, r3, r1
 800e110:	f04f 0200 	mov.w	r2, #0
 800e114:	f04f 0300 	mov.w	r3, #0
 800e118:	00eb      	lsls	r3, r5, #3
 800e11a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e11e:	00e2      	lsls	r2, r4, #3
 800e120:	4614      	mov	r4, r2
 800e122:	461d      	mov	r5, r3
 800e124:	4643      	mov	r3, r8
 800e126:	18e3      	adds	r3, r4, r3
 800e128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e12c:	464b      	mov	r3, r9
 800e12e:	eb45 0303 	adc.w	r3, r5, r3
 800e132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	2200      	movs	r2, #0
 800e13e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e142:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e146:	f04f 0200 	mov.w	r2, #0
 800e14a:	f04f 0300 	mov.w	r3, #0
 800e14e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e152:	4629      	mov	r1, r5
 800e154:	008b      	lsls	r3, r1, #2
 800e156:	4621      	mov	r1, r4
 800e158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e15c:	4621      	mov	r1, r4
 800e15e:	008a      	lsls	r2, r1, #2
 800e160:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e164:	f7f2 fdb0 	bl	8000cc8 <__aeabi_uldivmod>
 800e168:	4602      	mov	r2, r0
 800e16a:	460b      	mov	r3, r1
 800e16c:	4b60      	ldr	r3, [pc, #384]	@ (800e2f0 <UART_SetConfig+0x4e4>)
 800e16e:	fba3 2302 	umull	r2, r3, r3, r2
 800e172:	095b      	lsrs	r3, r3, #5
 800e174:	011c      	lsls	r4, r3, #4
 800e176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e17a:	2200      	movs	r2, #0
 800e17c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e180:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e188:	4642      	mov	r2, r8
 800e18a:	464b      	mov	r3, r9
 800e18c:	1891      	adds	r1, r2, r2
 800e18e:	61b9      	str	r1, [r7, #24]
 800e190:	415b      	adcs	r3, r3
 800e192:	61fb      	str	r3, [r7, #28]
 800e194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e198:	4641      	mov	r1, r8
 800e19a:	1851      	adds	r1, r2, r1
 800e19c:	6139      	str	r1, [r7, #16]
 800e19e:	4649      	mov	r1, r9
 800e1a0:	414b      	adcs	r3, r1
 800e1a2:	617b      	str	r3, [r7, #20]
 800e1a4:	f04f 0200 	mov.w	r2, #0
 800e1a8:	f04f 0300 	mov.w	r3, #0
 800e1ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e1b0:	4659      	mov	r1, fp
 800e1b2:	00cb      	lsls	r3, r1, #3
 800e1b4:	4651      	mov	r1, sl
 800e1b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e1ba:	4651      	mov	r1, sl
 800e1bc:	00ca      	lsls	r2, r1, #3
 800e1be:	4610      	mov	r0, r2
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	4642      	mov	r2, r8
 800e1c6:	189b      	adds	r3, r3, r2
 800e1c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e1cc:	464b      	mov	r3, r9
 800e1ce:	460a      	mov	r2, r1
 800e1d0:	eb42 0303 	adc.w	r3, r2, r3
 800e1d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e1e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e1e4:	f04f 0200 	mov.w	r2, #0
 800e1e8:	f04f 0300 	mov.w	r3, #0
 800e1ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e1f0:	4649      	mov	r1, r9
 800e1f2:	008b      	lsls	r3, r1, #2
 800e1f4:	4641      	mov	r1, r8
 800e1f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e1fa:	4641      	mov	r1, r8
 800e1fc:	008a      	lsls	r2, r1, #2
 800e1fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e202:	f7f2 fd61 	bl	8000cc8 <__aeabi_uldivmod>
 800e206:	4602      	mov	r2, r0
 800e208:	460b      	mov	r3, r1
 800e20a:	4611      	mov	r1, r2
 800e20c:	4b38      	ldr	r3, [pc, #224]	@ (800e2f0 <UART_SetConfig+0x4e4>)
 800e20e:	fba3 2301 	umull	r2, r3, r3, r1
 800e212:	095b      	lsrs	r3, r3, #5
 800e214:	2264      	movs	r2, #100	@ 0x64
 800e216:	fb02 f303 	mul.w	r3, r2, r3
 800e21a:	1acb      	subs	r3, r1, r3
 800e21c:	011b      	lsls	r3, r3, #4
 800e21e:	3332      	adds	r3, #50	@ 0x32
 800e220:	4a33      	ldr	r2, [pc, #204]	@ (800e2f0 <UART_SetConfig+0x4e4>)
 800e222:	fba2 2303 	umull	r2, r3, r2, r3
 800e226:	095b      	lsrs	r3, r3, #5
 800e228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e22c:	441c      	add	r4, r3
 800e22e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e232:	2200      	movs	r2, #0
 800e234:	673b      	str	r3, [r7, #112]	@ 0x70
 800e236:	677a      	str	r2, [r7, #116]	@ 0x74
 800e238:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e23c:	4642      	mov	r2, r8
 800e23e:	464b      	mov	r3, r9
 800e240:	1891      	adds	r1, r2, r2
 800e242:	60b9      	str	r1, [r7, #8]
 800e244:	415b      	adcs	r3, r3
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e24c:	4641      	mov	r1, r8
 800e24e:	1851      	adds	r1, r2, r1
 800e250:	6039      	str	r1, [r7, #0]
 800e252:	4649      	mov	r1, r9
 800e254:	414b      	adcs	r3, r1
 800e256:	607b      	str	r3, [r7, #4]
 800e258:	f04f 0200 	mov.w	r2, #0
 800e25c:	f04f 0300 	mov.w	r3, #0
 800e260:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e264:	4659      	mov	r1, fp
 800e266:	00cb      	lsls	r3, r1, #3
 800e268:	4651      	mov	r1, sl
 800e26a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e26e:	4651      	mov	r1, sl
 800e270:	00ca      	lsls	r2, r1, #3
 800e272:	4610      	mov	r0, r2
 800e274:	4619      	mov	r1, r3
 800e276:	4603      	mov	r3, r0
 800e278:	4642      	mov	r2, r8
 800e27a:	189b      	adds	r3, r3, r2
 800e27c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e27e:	464b      	mov	r3, r9
 800e280:	460a      	mov	r2, r1
 800e282:	eb42 0303 	adc.w	r3, r2, r3
 800e286:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	663b      	str	r3, [r7, #96]	@ 0x60
 800e292:	667a      	str	r2, [r7, #100]	@ 0x64
 800e294:	f04f 0200 	mov.w	r2, #0
 800e298:	f04f 0300 	mov.w	r3, #0
 800e29c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e2a0:	4649      	mov	r1, r9
 800e2a2:	008b      	lsls	r3, r1, #2
 800e2a4:	4641      	mov	r1, r8
 800e2a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e2aa:	4641      	mov	r1, r8
 800e2ac:	008a      	lsls	r2, r1, #2
 800e2ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e2b2:	f7f2 fd09 	bl	8000cc8 <__aeabi_uldivmod>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f0 <UART_SetConfig+0x4e4>)
 800e2bc:	fba3 1302 	umull	r1, r3, r3, r2
 800e2c0:	095b      	lsrs	r3, r3, #5
 800e2c2:	2164      	movs	r1, #100	@ 0x64
 800e2c4:	fb01 f303 	mul.w	r3, r1, r3
 800e2c8:	1ad3      	subs	r3, r2, r3
 800e2ca:	011b      	lsls	r3, r3, #4
 800e2cc:	3332      	adds	r3, #50	@ 0x32
 800e2ce:	4a08      	ldr	r2, [pc, #32]	@ (800e2f0 <UART_SetConfig+0x4e4>)
 800e2d0:	fba2 2303 	umull	r2, r3, r2, r3
 800e2d4:	095b      	lsrs	r3, r3, #5
 800e2d6:	f003 020f 	and.w	r2, r3, #15
 800e2da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4422      	add	r2, r4
 800e2e2:	609a      	str	r2, [r3, #8]
}
 800e2e4:	bf00      	nop
 800e2e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2f0:	51eb851f 	.word	0x51eb851f

0800e2f4 <downpart_accel_step>:

/* Model step function */
int downpart_accel_step_max=500.0;
int downpart_accel_step_min=300.0;
real_T rtb_Clock;
void downpart_accel_step(void) {
 800e2f4:	b5b0      	push	{r4, r5, r7, lr}
 800e2f6:	af00      	add	r7, sp, #0


	/* Clock: '<Root>/Clock' */
	rtb_Clock = downpart_accel_M->Timing.t[0];
 800e2f8:	4b4f      	ldr	r3, [pc, #316]	@ (800e438 <downpart_accel_step+0x144>)
 800e2fa:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	494e      	ldr	r1, [pc, #312]	@ (800e43c <downpart_accel_step+0x148>)
 800e304:	e9c1 2300 	strd	r2, r3, [r1]

	/* MATLAB Function: '<Root>/MATLAB Function' */
	if (rtb_Clock < 25) {
 800e308:	4b4c      	ldr	r3, [pc, #304]	@ (800e43c <downpart_accel_step+0x148>)
 800e30a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e30e:	f04f 0200 	mov.w	r2, #0
 800e312:	4b4b      	ldr	r3, [pc, #300]	@ (800e440 <downpart_accel_step+0x14c>)
 800e314:	f7f2 fc02 	bl	8000b1c <__aeabi_dcmplt>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d059      	beq.n	800e3d2 <downpart_accel_step+0xde>
		/* Outport: '<Root>/accel_wave' */
		downpart_accel_Y.accel_wave = (downpart_accel_step_min-downpart_accel_step_max)/ (exp((rtb_Clock / 30 - 0.5) * -10.0) + 1.0) + downpart_accel_step_max;
 800e31e:	4b49      	ldr	r3, [pc, #292]	@ (800e444 <downpart_accel_step+0x150>)
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	4b49      	ldr	r3, [pc, #292]	@ (800e448 <downpart_accel_step+0x154>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	4618      	mov	r0, r3
 800e32a:	f7f2 f91b 	bl	8000564 <__aeabi_i2d>
 800e32e:	4604      	mov	r4, r0
 800e330:	460d      	mov	r5, r1
 800e332:	4b42      	ldr	r3, [pc, #264]	@ (800e43c <downpart_accel_step+0x148>)
 800e334:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e338:	f04f 0200 	mov.w	r2, #0
 800e33c:	4b43      	ldr	r3, [pc, #268]	@ (800e44c <downpart_accel_step+0x158>)
 800e33e:	f7f2 faa5 	bl	800088c <__aeabi_ddiv>
 800e342:	4602      	mov	r2, r0
 800e344:	460b      	mov	r3, r1
 800e346:	4610      	mov	r0, r2
 800e348:	4619      	mov	r1, r3
 800e34a:	f04f 0200 	mov.w	r2, #0
 800e34e:	4b40      	ldr	r3, [pc, #256]	@ (800e450 <downpart_accel_step+0x15c>)
 800e350:	f7f1 ffba 	bl	80002c8 <__aeabi_dsub>
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4610      	mov	r0, r2
 800e35a:	4619      	mov	r1, r3
 800e35c:	f04f 0200 	mov.w	r2, #0
 800e360:	4b3c      	ldr	r3, [pc, #240]	@ (800e454 <downpart_accel_step+0x160>)
 800e362:	f7f2 f969 	bl	8000638 <__aeabi_dmul>
 800e366:	4602      	mov	r2, r0
 800e368:	460b      	mov	r3, r1
 800e36a:	ec43 2b17 	vmov	d7, r2, r3
 800e36e:	eeb0 0a47 	vmov.f32	s0, s14
 800e372:	eef0 0a67 	vmov.f32	s1, s15
 800e376:	f004 fd4b 	bl	8012e10 <exp>
 800e37a:	ec51 0b10 	vmov	r0, r1, d0
 800e37e:	f04f 0200 	mov.w	r2, #0
 800e382:	4b35      	ldr	r3, [pc, #212]	@ (800e458 <downpart_accel_step+0x164>)
 800e384:	f7f1 ffa2 	bl	80002cc <__adddf3>
 800e388:	4602      	mov	r2, r0
 800e38a:	460b      	mov	r3, r1
 800e38c:	4620      	mov	r0, r4
 800e38e:	4629      	mov	r1, r5
 800e390:	f7f2 fa7c 	bl	800088c <__aeabi_ddiv>
 800e394:	4602      	mov	r2, r0
 800e396:	460b      	mov	r3, r1
 800e398:	4614      	mov	r4, r2
 800e39a:	461d      	mov	r5, r3
 800e39c:	4b2a      	ldr	r3, [pc, #168]	@ (800e448 <downpart_accel_step+0x154>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7f2 f8df 	bl	8000564 <__aeabi_i2d>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	f7f1 ff8d 	bl	80002cc <__adddf3>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	4929      	ldr	r1, [pc, #164]	@ (800e45c <downpart_accel_step+0x168>)
 800e3b8:	e9c1 2300 	strd	r2, r3, [r1]

		TIM13->ARR = downpart_accel_Y.accel_wave;
 800e3bc:	4b27      	ldr	r3, [pc, #156]	@ (800e45c <downpart_accel_step+0x168>)
 800e3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c2:	4c27      	ldr	r4, [pc, #156]	@ (800e460 <downpart_accel_step+0x16c>)
 800e3c4:	4610      	mov	r0, r2
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	f7f2 fc0e 	bl	8000be8 <__aeabi_d2uiz>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e3d0:	e013      	b.n	800e3fa <downpart_accel_step+0x106>
	} else {
		/* Outport: '<Root>/accel_wave' */
		downpart_accel_Y.accel_wave = downpart_accel_step_min;
 800e3d2:	4b1c      	ldr	r3, [pc, #112]	@ (800e444 <downpart_accel_step+0x150>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7f2 f8c4 	bl	8000564 <__aeabi_i2d>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	460b      	mov	r3, r1
 800e3e0:	491e      	ldr	r1, [pc, #120]	@ (800e45c <downpart_accel_step+0x168>)
 800e3e2:	e9c1 2300 	strd	r2, r3, [r1]
		TIM13->ARR = downpart_accel_Y.accel_wave;
 800e3e6:	4b1d      	ldr	r3, [pc, #116]	@ (800e45c <downpart_accel_step+0x168>)
 800e3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ec:	4c1c      	ldr	r4, [pc, #112]	@ (800e460 <downpart_accel_step+0x16c>)
 800e3ee:	4610      	mov	r0, r2
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	f7f2 fbf9 	bl	8000be8 <__aeabi_d2uiz>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
	 * been executed. The absolute time is the multiplication of "clockTick0"
	 * and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
	 * overflow during the application lifespan selected.
	 */
	downpart_accel_M->Timing.t[0] =
			((time_T) (++downpart_accel_M->Timing.clockTick0))
 800e3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800e438 <downpart_accel_step+0x144>)
 800e3fc:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800e400:	3201      	adds	r2, #1
	downpart_accel_M->Timing.t[0] =
 800e402:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
			((time_T) (++downpart_accel_M->Timing.clockTick0))
 800e406:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7f2 f89a 	bl	8000544 <__aeabi_ui2d>
					* downpart_accel_M->Timing.stepSize0;
 800e410:	4b09      	ldr	r3, [pc, #36]	@ (800e438 <downpart_accel_step+0x144>)
 800e412:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
	downpart_accel_M->Timing.t[0] =
 800e416:	4c08      	ldr	r4, [pc, #32]	@ (800e438 <downpart_accel_step+0x144>)
 800e418:	f8d4 4128 	ldr.w	r4, [r4, #296]	@ 0x128
					* downpart_accel_M->Timing.stepSize0;
 800e41c:	f7f2 f90c 	bl	8000638 <__aeabi_dmul>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
	downpart_accel_M->Timing.t[0] =
 800e424:	e9c4 2300 	strd	r2, r3, [r4]
		/* The "clockTick1" counts the number of times the code of this task has
		 * been executed. The resolution of this integer timer is 0.2, which is the step size
		 * of the task. Size of "clockTick1" ensures timer will not overflow during the
		 * application lifespan selected.
		 */
		downpart_accel_M->Timing.clockTick1++;
 800e428:	4b03      	ldr	r3, [pc, #12]	@ (800e438 <downpart_accel_step+0x144>)
 800e42a:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800e42e:	3201      	adds	r2, #1
 800e430:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
	}
}
 800e434:	bf00      	nop
 800e436:	bdb0      	pop	{r4, r5, r7, pc}
 800e438:	200041f0 	.word	0x200041f0
 800e43c:	20004330 	.word	0x20004330
 800e440:	40390000 	.word	0x40390000
 800e444:	2000051c 	.word	0x2000051c
 800e448:	20000518 	.word	0x20000518
 800e44c:	403e0000 	.word	0x403e0000
 800e450:	3fe00000 	.word	0x3fe00000
 800e454:	c0240000 	.word	0xc0240000
 800e458:	3ff00000 	.word	0x3ff00000
 800e45c:	200041e8 	.word	0x200041e8
 800e460:	40001c00 	.word	0x40001c00
 800e464:	00000000 	.word	0x00000000

0800e468 <downpart_accel_initialize>:

/* Model initialize function */
void downpart_accel_initialize(void) {
 800e468:	b480      	push	{r7}
 800e46a:	af00      	add	r7, sp, #0
	/* Registration code */
	{
		/* Setup solver object */
		rtsiSetSimTimeStepPtr(&downpart_accel_M->solverInfo,
 800e46c:	4b1e      	ldr	r3, [pc, #120]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e46e:	4a1e      	ldr	r2, [pc, #120]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e470:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e474:	60d3      	str	r3, [r2, #12]
				&downpart_accel_M->Timing.simTimeStep);
		rtsiSetTPtr(&downpart_accel_M->solverInfo,
 800e476:	4b1c      	ldr	r3, [pc, #112]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e478:	4a1b      	ldr	r2, [pc, #108]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e47a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800e47e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
				&rtmGetTPtr(downpart_accel_M));
		rtsiSetStepSizePtr(&downpart_accel_M->solverInfo,
 800e482:	4b19      	ldr	r3, [pc, #100]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e484:	4a18      	ldr	r2, [pc, #96]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e486:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800e48a:	6293      	str	r3, [r2, #40]	@ 0x28
				&downpart_accel_M->Timing.stepSize0);
		rtsiSetErrorStatusPtr(&downpart_accel_M->solverInfo,
 800e48c:	4a16      	ldr	r2, [pc, #88]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e48e:	4b16      	ldr	r3, [pc, #88]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e490:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
				(&rtmGetErrorStatus(downpart_accel_M)));
		rtsiSetRTModelPtr(&downpart_accel_M->solverInfo, downpart_accel_M);
 800e494:	4b14      	ldr	r3, [pc, #80]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e496:	4a14      	ldr	r2, [pc, #80]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e498:	609a      	str	r2, [r3, #8]
	}

	rtsiSetSimTimeStep(&downpart_accel_M->solverInfo, MAJOR_TIME_STEP);
 800e49a:	4b13      	ldr	r3, [pc, #76]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	701a      	strb	r2, [r3, #0]
	rtsiSetIsMinorTimeStepWithModeChange(&downpart_accel_M->solverInfo, false);
 800e4a2:	4b11      	ldr	r3, [pc, #68]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
	rtsiSetIsContModeFrozen(&downpart_accel_M->solverInfo, false);
 800e4aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
	rtsiSetSolverName(&downpart_accel_M->solverInfo, "FixedStepDiscrete");
 800e4b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e4b4:	4a0d      	ldr	r2, [pc, #52]	@ (800e4ec <downpart_accel_initialize+0x84>)
 800e4b6:	615a      	str	r2, [r3, #20]
	rtmSetTPtr(downpart_accel_M, &downpart_accel_M->Timing.tArray[0]);
 800e4b8:	4b0b      	ldr	r3, [pc, #44]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e4ba:	4a0b      	ldr	r2, [pc, #44]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e4bc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800e4c0:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
	downpart_accel_M->Timing.stepSize0 = 0.2;
 800e4c4:	4908      	ldr	r1, [pc, #32]	@ (800e4e8 <downpart_accel_initialize+0x80>)
 800e4c6:	a306      	add	r3, pc, #24	@ (adr r3, 800e4e0 <downpart_accel_initialize+0x78>)
 800e4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4cc:	e9c1 2346 	strd	r2, r3, [r1, #280]	@ 0x118
}
 800e4d0:	bf00      	nop
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	f3af 8000 	nop.w
 800e4e0:	9999999a 	.word	0x9999999a
 800e4e4:	3fc99999 	.word	0x3fc99999
 800e4e8:	200041f0 	.word	0x200041f0
 800e4ec:	08014184 	.word	0x08014184

0800e4f0 <__cvt>:
 800e4f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f4:	ec57 6b10 	vmov	r6, r7, d0
 800e4f8:	2f00      	cmp	r7, #0
 800e4fa:	460c      	mov	r4, r1
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	463b      	mov	r3, r7
 800e500:	bfbb      	ittet	lt
 800e502:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e506:	461f      	movlt	r7, r3
 800e508:	2300      	movge	r3, #0
 800e50a:	232d      	movlt	r3, #45	@ 0x2d
 800e50c:	700b      	strb	r3, [r1, #0]
 800e50e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e510:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e514:	4691      	mov	r9, r2
 800e516:	f023 0820 	bic.w	r8, r3, #32
 800e51a:	bfbc      	itt	lt
 800e51c:	4632      	movlt	r2, r6
 800e51e:	4616      	movlt	r6, r2
 800e520:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e524:	d005      	beq.n	800e532 <__cvt+0x42>
 800e526:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e52a:	d100      	bne.n	800e52e <__cvt+0x3e>
 800e52c:	3401      	adds	r4, #1
 800e52e:	2102      	movs	r1, #2
 800e530:	e000      	b.n	800e534 <__cvt+0x44>
 800e532:	2103      	movs	r1, #3
 800e534:	ab03      	add	r3, sp, #12
 800e536:	9301      	str	r3, [sp, #4]
 800e538:	ab02      	add	r3, sp, #8
 800e53a:	9300      	str	r3, [sp, #0]
 800e53c:	ec47 6b10 	vmov	d0, r6, r7
 800e540:	4653      	mov	r3, sl
 800e542:	4622      	mov	r2, r4
 800e544:	f001 fa2c 	bl	800f9a0 <_dtoa_r>
 800e548:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e54c:	4605      	mov	r5, r0
 800e54e:	d119      	bne.n	800e584 <__cvt+0x94>
 800e550:	f019 0f01 	tst.w	r9, #1
 800e554:	d00e      	beq.n	800e574 <__cvt+0x84>
 800e556:	eb00 0904 	add.w	r9, r0, r4
 800e55a:	2200      	movs	r2, #0
 800e55c:	2300      	movs	r3, #0
 800e55e:	4630      	mov	r0, r6
 800e560:	4639      	mov	r1, r7
 800e562:	f7f2 fad1 	bl	8000b08 <__aeabi_dcmpeq>
 800e566:	b108      	cbz	r0, 800e56c <__cvt+0x7c>
 800e568:	f8cd 900c 	str.w	r9, [sp, #12]
 800e56c:	2230      	movs	r2, #48	@ 0x30
 800e56e:	9b03      	ldr	r3, [sp, #12]
 800e570:	454b      	cmp	r3, r9
 800e572:	d31e      	bcc.n	800e5b2 <__cvt+0xc2>
 800e574:	9b03      	ldr	r3, [sp, #12]
 800e576:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e578:	1b5b      	subs	r3, r3, r5
 800e57a:	4628      	mov	r0, r5
 800e57c:	6013      	str	r3, [r2, #0]
 800e57e:	b004      	add	sp, #16
 800e580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e584:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e588:	eb00 0904 	add.w	r9, r0, r4
 800e58c:	d1e5      	bne.n	800e55a <__cvt+0x6a>
 800e58e:	7803      	ldrb	r3, [r0, #0]
 800e590:	2b30      	cmp	r3, #48	@ 0x30
 800e592:	d10a      	bne.n	800e5aa <__cvt+0xba>
 800e594:	2200      	movs	r2, #0
 800e596:	2300      	movs	r3, #0
 800e598:	4630      	mov	r0, r6
 800e59a:	4639      	mov	r1, r7
 800e59c:	f7f2 fab4 	bl	8000b08 <__aeabi_dcmpeq>
 800e5a0:	b918      	cbnz	r0, 800e5aa <__cvt+0xba>
 800e5a2:	f1c4 0401 	rsb	r4, r4, #1
 800e5a6:	f8ca 4000 	str.w	r4, [sl]
 800e5aa:	f8da 3000 	ldr.w	r3, [sl]
 800e5ae:	4499      	add	r9, r3
 800e5b0:	e7d3      	b.n	800e55a <__cvt+0x6a>
 800e5b2:	1c59      	adds	r1, r3, #1
 800e5b4:	9103      	str	r1, [sp, #12]
 800e5b6:	701a      	strb	r2, [r3, #0]
 800e5b8:	e7d9      	b.n	800e56e <__cvt+0x7e>

0800e5ba <__exponent>:
 800e5ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5bc:	2900      	cmp	r1, #0
 800e5be:	bfba      	itte	lt
 800e5c0:	4249      	neglt	r1, r1
 800e5c2:	232d      	movlt	r3, #45	@ 0x2d
 800e5c4:	232b      	movge	r3, #43	@ 0x2b
 800e5c6:	2909      	cmp	r1, #9
 800e5c8:	7002      	strb	r2, [r0, #0]
 800e5ca:	7043      	strb	r3, [r0, #1]
 800e5cc:	dd29      	ble.n	800e622 <__exponent+0x68>
 800e5ce:	f10d 0307 	add.w	r3, sp, #7
 800e5d2:	461d      	mov	r5, r3
 800e5d4:	270a      	movs	r7, #10
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	fbb1 f6f7 	udiv	r6, r1, r7
 800e5dc:	fb07 1416 	mls	r4, r7, r6, r1
 800e5e0:	3430      	adds	r4, #48	@ 0x30
 800e5e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	2c63      	cmp	r4, #99	@ 0x63
 800e5ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800e5ee:	4631      	mov	r1, r6
 800e5f0:	dcf1      	bgt.n	800e5d6 <__exponent+0x1c>
 800e5f2:	3130      	adds	r1, #48	@ 0x30
 800e5f4:	1e94      	subs	r4, r2, #2
 800e5f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e5fa:	1c41      	adds	r1, r0, #1
 800e5fc:	4623      	mov	r3, r4
 800e5fe:	42ab      	cmp	r3, r5
 800e600:	d30a      	bcc.n	800e618 <__exponent+0x5e>
 800e602:	f10d 0309 	add.w	r3, sp, #9
 800e606:	1a9b      	subs	r3, r3, r2
 800e608:	42ac      	cmp	r4, r5
 800e60a:	bf88      	it	hi
 800e60c:	2300      	movhi	r3, #0
 800e60e:	3302      	adds	r3, #2
 800e610:	4403      	add	r3, r0
 800e612:	1a18      	subs	r0, r3, r0
 800e614:	b003      	add	sp, #12
 800e616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e618:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e61c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e620:	e7ed      	b.n	800e5fe <__exponent+0x44>
 800e622:	2330      	movs	r3, #48	@ 0x30
 800e624:	3130      	adds	r1, #48	@ 0x30
 800e626:	7083      	strb	r3, [r0, #2]
 800e628:	70c1      	strb	r1, [r0, #3]
 800e62a:	1d03      	adds	r3, r0, #4
 800e62c:	e7f1      	b.n	800e612 <__exponent+0x58>
	...

0800e630 <_printf_float>:
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	b08d      	sub	sp, #52	@ 0x34
 800e636:	460c      	mov	r4, r1
 800e638:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e63c:	4616      	mov	r6, r2
 800e63e:	461f      	mov	r7, r3
 800e640:	4605      	mov	r5, r0
 800e642:	f001 f8a7 	bl	800f794 <_localeconv_r>
 800e646:	6803      	ldr	r3, [r0, #0]
 800e648:	9304      	str	r3, [sp, #16]
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7f1 fe30 	bl	80002b0 <strlen>
 800e650:	2300      	movs	r3, #0
 800e652:	930a      	str	r3, [sp, #40]	@ 0x28
 800e654:	f8d8 3000 	ldr.w	r3, [r8]
 800e658:	9005      	str	r0, [sp, #20]
 800e65a:	3307      	adds	r3, #7
 800e65c:	f023 0307 	bic.w	r3, r3, #7
 800e660:	f103 0208 	add.w	r2, r3, #8
 800e664:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e668:	f8d4 b000 	ldr.w	fp, [r4]
 800e66c:	f8c8 2000 	str.w	r2, [r8]
 800e670:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e674:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e678:	9307      	str	r3, [sp, #28]
 800e67a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e67e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e686:	4b9c      	ldr	r3, [pc, #624]	@ (800e8f8 <_printf_float+0x2c8>)
 800e688:	f04f 32ff 	mov.w	r2, #4294967295
 800e68c:	f7f2 fa6e 	bl	8000b6c <__aeabi_dcmpun>
 800e690:	bb70      	cbnz	r0, 800e6f0 <_printf_float+0xc0>
 800e692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e696:	4b98      	ldr	r3, [pc, #608]	@ (800e8f8 <_printf_float+0x2c8>)
 800e698:	f04f 32ff 	mov.w	r2, #4294967295
 800e69c:	f7f2 fa48 	bl	8000b30 <__aeabi_dcmple>
 800e6a0:	bb30      	cbnz	r0, 800e6f0 <_printf_float+0xc0>
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	4640      	mov	r0, r8
 800e6a8:	4649      	mov	r1, r9
 800e6aa:	f7f2 fa37 	bl	8000b1c <__aeabi_dcmplt>
 800e6ae:	b110      	cbz	r0, 800e6b6 <_printf_float+0x86>
 800e6b0:	232d      	movs	r3, #45	@ 0x2d
 800e6b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6b6:	4a91      	ldr	r2, [pc, #580]	@ (800e8fc <_printf_float+0x2cc>)
 800e6b8:	4b91      	ldr	r3, [pc, #580]	@ (800e900 <_printf_float+0x2d0>)
 800e6ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e6be:	bf94      	ite	ls
 800e6c0:	4690      	movls	r8, r2
 800e6c2:	4698      	movhi	r8, r3
 800e6c4:	2303      	movs	r3, #3
 800e6c6:	6123      	str	r3, [r4, #16]
 800e6c8:	f02b 0304 	bic.w	r3, fp, #4
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	f04f 0900 	mov.w	r9, #0
 800e6d2:	9700      	str	r7, [sp, #0]
 800e6d4:	4633      	mov	r3, r6
 800e6d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e6d8:	4621      	mov	r1, r4
 800e6da:	4628      	mov	r0, r5
 800e6dc:	f000 f9d2 	bl	800ea84 <_printf_common>
 800e6e0:	3001      	adds	r0, #1
 800e6e2:	f040 808d 	bne.w	800e800 <_printf_float+0x1d0>
 800e6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ea:	b00d      	add	sp, #52	@ 0x34
 800e6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f0:	4642      	mov	r2, r8
 800e6f2:	464b      	mov	r3, r9
 800e6f4:	4640      	mov	r0, r8
 800e6f6:	4649      	mov	r1, r9
 800e6f8:	f7f2 fa38 	bl	8000b6c <__aeabi_dcmpun>
 800e6fc:	b140      	cbz	r0, 800e710 <_printf_float+0xe0>
 800e6fe:	464b      	mov	r3, r9
 800e700:	2b00      	cmp	r3, #0
 800e702:	bfbc      	itt	lt
 800e704:	232d      	movlt	r3, #45	@ 0x2d
 800e706:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e70a:	4a7e      	ldr	r2, [pc, #504]	@ (800e904 <_printf_float+0x2d4>)
 800e70c:	4b7e      	ldr	r3, [pc, #504]	@ (800e908 <_printf_float+0x2d8>)
 800e70e:	e7d4      	b.n	800e6ba <_printf_float+0x8a>
 800e710:	6863      	ldr	r3, [r4, #4]
 800e712:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e716:	9206      	str	r2, [sp, #24]
 800e718:	1c5a      	adds	r2, r3, #1
 800e71a:	d13b      	bne.n	800e794 <_printf_float+0x164>
 800e71c:	2306      	movs	r3, #6
 800e71e:	6063      	str	r3, [r4, #4]
 800e720:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e724:	2300      	movs	r3, #0
 800e726:	6022      	str	r2, [r4, #0]
 800e728:	9303      	str	r3, [sp, #12]
 800e72a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e72c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e730:	ab09      	add	r3, sp, #36	@ 0x24
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	6861      	ldr	r1, [r4, #4]
 800e736:	ec49 8b10 	vmov	d0, r8, r9
 800e73a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e73e:	4628      	mov	r0, r5
 800e740:	f7ff fed6 	bl	800e4f0 <__cvt>
 800e744:	9b06      	ldr	r3, [sp, #24]
 800e746:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e748:	2b47      	cmp	r3, #71	@ 0x47
 800e74a:	4680      	mov	r8, r0
 800e74c:	d129      	bne.n	800e7a2 <_printf_float+0x172>
 800e74e:	1cc8      	adds	r0, r1, #3
 800e750:	db02      	blt.n	800e758 <_printf_float+0x128>
 800e752:	6863      	ldr	r3, [r4, #4]
 800e754:	4299      	cmp	r1, r3
 800e756:	dd41      	ble.n	800e7dc <_printf_float+0x1ac>
 800e758:	f1aa 0a02 	sub.w	sl, sl, #2
 800e75c:	fa5f fa8a 	uxtb.w	sl, sl
 800e760:	3901      	subs	r1, #1
 800e762:	4652      	mov	r2, sl
 800e764:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e768:	9109      	str	r1, [sp, #36]	@ 0x24
 800e76a:	f7ff ff26 	bl	800e5ba <__exponent>
 800e76e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e770:	1813      	adds	r3, r2, r0
 800e772:	2a01      	cmp	r2, #1
 800e774:	4681      	mov	r9, r0
 800e776:	6123      	str	r3, [r4, #16]
 800e778:	dc02      	bgt.n	800e780 <_printf_float+0x150>
 800e77a:	6822      	ldr	r2, [r4, #0]
 800e77c:	07d2      	lsls	r2, r2, #31
 800e77e:	d501      	bpl.n	800e784 <_printf_float+0x154>
 800e780:	3301      	adds	r3, #1
 800e782:	6123      	str	r3, [r4, #16]
 800e784:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d0a2      	beq.n	800e6d2 <_printf_float+0xa2>
 800e78c:	232d      	movs	r3, #45	@ 0x2d
 800e78e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e792:	e79e      	b.n	800e6d2 <_printf_float+0xa2>
 800e794:	9a06      	ldr	r2, [sp, #24]
 800e796:	2a47      	cmp	r2, #71	@ 0x47
 800e798:	d1c2      	bne.n	800e720 <_printf_float+0xf0>
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d1c0      	bne.n	800e720 <_printf_float+0xf0>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e7bd      	b.n	800e71e <_printf_float+0xee>
 800e7a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e7a6:	d9db      	bls.n	800e760 <_printf_float+0x130>
 800e7a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e7ac:	d118      	bne.n	800e7e0 <_printf_float+0x1b0>
 800e7ae:	2900      	cmp	r1, #0
 800e7b0:	6863      	ldr	r3, [r4, #4]
 800e7b2:	dd0b      	ble.n	800e7cc <_printf_float+0x19c>
 800e7b4:	6121      	str	r1, [r4, #16]
 800e7b6:	b913      	cbnz	r3, 800e7be <_printf_float+0x18e>
 800e7b8:	6822      	ldr	r2, [r4, #0]
 800e7ba:	07d0      	lsls	r0, r2, #31
 800e7bc:	d502      	bpl.n	800e7c4 <_printf_float+0x194>
 800e7be:	3301      	adds	r3, #1
 800e7c0:	440b      	add	r3, r1
 800e7c2:	6123      	str	r3, [r4, #16]
 800e7c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e7c6:	f04f 0900 	mov.w	r9, #0
 800e7ca:	e7db      	b.n	800e784 <_printf_float+0x154>
 800e7cc:	b913      	cbnz	r3, 800e7d4 <_printf_float+0x1a4>
 800e7ce:	6822      	ldr	r2, [r4, #0]
 800e7d0:	07d2      	lsls	r2, r2, #31
 800e7d2:	d501      	bpl.n	800e7d8 <_printf_float+0x1a8>
 800e7d4:	3302      	adds	r3, #2
 800e7d6:	e7f4      	b.n	800e7c2 <_printf_float+0x192>
 800e7d8:	2301      	movs	r3, #1
 800e7da:	e7f2      	b.n	800e7c2 <_printf_float+0x192>
 800e7dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e7e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7e2:	4299      	cmp	r1, r3
 800e7e4:	db05      	blt.n	800e7f2 <_printf_float+0x1c2>
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	6121      	str	r1, [r4, #16]
 800e7ea:	07d8      	lsls	r0, r3, #31
 800e7ec:	d5ea      	bpl.n	800e7c4 <_printf_float+0x194>
 800e7ee:	1c4b      	adds	r3, r1, #1
 800e7f0:	e7e7      	b.n	800e7c2 <_printf_float+0x192>
 800e7f2:	2900      	cmp	r1, #0
 800e7f4:	bfd4      	ite	le
 800e7f6:	f1c1 0202 	rsble	r2, r1, #2
 800e7fa:	2201      	movgt	r2, #1
 800e7fc:	4413      	add	r3, r2
 800e7fe:	e7e0      	b.n	800e7c2 <_printf_float+0x192>
 800e800:	6823      	ldr	r3, [r4, #0]
 800e802:	055a      	lsls	r2, r3, #21
 800e804:	d407      	bmi.n	800e816 <_printf_float+0x1e6>
 800e806:	6923      	ldr	r3, [r4, #16]
 800e808:	4642      	mov	r2, r8
 800e80a:	4631      	mov	r1, r6
 800e80c:	4628      	mov	r0, r5
 800e80e:	47b8      	blx	r7
 800e810:	3001      	adds	r0, #1
 800e812:	d12b      	bne.n	800e86c <_printf_float+0x23c>
 800e814:	e767      	b.n	800e6e6 <_printf_float+0xb6>
 800e816:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e81a:	f240 80dd 	bls.w	800e9d8 <_printf_float+0x3a8>
 800e81e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e822:	2200      	movs	r2, #0
 800e824:	2300      	movs	r3, #0
 800e826:	f7f2 f96f 	bl	8000b08 <__aeabi_dcmpeq>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d033      	beq.n	800e896 <_printf_float+0x266>
 800e82e:	4a37      	ldr	r2, [pc, #220]	@ (800e90c <_printf_float+0x2dc>)
 800e830:	2301      	movs	r3, #1
 800e832:	4631      	mov	r1, r6
 800e834:	4628      	mov	r0, r5
 800e836:	47b8      	blx	r7
 800e838:	3001      	adds	r0, #1
 800e83a:	f43f af54 	beq.w	800e6e6 <_printf_float+0xb6>
 800e83e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e842:	4543      	cmp	r3, r8
 800e844:	db02      	blt.n	800e84c <_printf_float+0x21c>
 800e846:	6823      	ldr	r3, [r4, #0]
 800e848:	07d8      	lsls	r0, r3, #31
 800e84a:	d50f      	bpl.n	800e86c <_printf_float+0x23c>
 800e84c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e850:	4631      	mov	r1, r6
 800e852:	4628      	mov	r0, r5
 800e854:	47b8      	blx	r7
 800e856:	3001      	adds	r0, #1
 800e858:	f43f af45 	beq.w	800e6e6 <_printf_float+0xb6>
 800e85c:	f04f 0900 	mov.w	r9, #0
 800e860:	f108 38ff 	add.w	r8, r8, #4294967295
 800e864:	f104 0a1a 	add.w	sl, r4, #26
 800e868:	45c8      	cmp	r8, r9
 800e86a:	dc09      	bgt.n	800e880 <_printf_float+0x250>
 800e86c:	6823      	ldr	r3, [r4, #0]
 800e86e:	079b      	lsls	r3, r3, #30
 800e870:	f100 8103 	bmi.w	800ea7a <_printf_float+0x44a>
 800e874:	68e0      	ldr	r0, [r4, #12]
 800e876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e878:	4298      	cmp	r0, r3
 800e87a:	bfb8      	it	lt
 800e87c:	4618      	movlt	r0, r3
 800e87e:	e734      	b.n	800e6ea <_printf_float+0xba>
 800e880:	2301      	movs	r3, #1
 800e882:	4652      	mov	r2, sl
 800e884:	4631      	mov	r1, r6
 800e886:	4628      	mov	r0, r5
 800e888:	47b8      	blx	r7
 800e88a:	3001      	adds	r0, #1
 800e88c:	f43f af2b 	beq.w	800e6e6 <_printf_float+0xb6>
 800e890:	f109 0901 	add.w	r9, r9, #1
 800e894:	e7e8      	b.n	800e868 <_printf_float+0x238>
 800e896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e898:	2b00      	cmp	r3, #0
 800e89a:	dc39      	bgt.n	800e910 <_printf_float+0x2e0>
 800e89c:	4a1b      	ldr	r2, [pc, #108]	@ (800e90c <_printf_float+0x2dc>)
 800e89e:	2301      	movs	r3, #1
 800e8a0:	4631      	mov	r1, r6
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	47b8      	blx	r7
 800e8a6:	3001      	adds	r0, #1
 800e8a8:	f43f af1d 	beq.w	800e6e6 <_printf_float+0xb6>
 800e8ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e8b0:	ea59 0303 	orrs.w	r3, r9, r3
 800e8b4:	d102      	bne.n	800e8bc <_printf_float+0x28c>
 800e8b6:	6823      	ldr	r3, [r4, #0]
 800e8b8:	07d9      	lsls	r1, r3, #31
 800e8ba:	d5d7      	bpl.n	800e86c <_printf_float+0x23c>
 800e8bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	47b8      	blx	r7
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	f43f af0d 	beq.w	800e6e6 <_printf_float+0xb6>
 800e8cc:	f04f 0a00 	mov.w	sl, #0
 800e8d0:	f104 0b1a 	add.w	fp, r4, #26
 800e8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8d6:	425b      	negs	r3, r3
 800e8d8:	4553      	cmp	r3, sl
 800e8da:	dc01      	bgt.n	800e8e0 <_printf_float+0x2b0>
 800e8dc:	464b      	mov	r3, r9
 800e8de:	e793      	b.n	800e808 <_printf_float+0x1d8>
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	465a      	mov	r2, fp
 800e8e4:	4631      	mov	r1, r6
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	47b8      	blx	r7
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	f43f aefb 	beq.w	800e6e6 <_printf_float+0xb6>
 800e8f0:	f10a 0a01 	add.w	sl, sl, #1
 800e8f4:	e7ee      	b.n	800e8d4 <_printf_float+0x2a4>
 800e8f6:	bf00      	nop
 800e8f8:	7fefffff 	.word	0x7fefffff
 800e8fc:	080141b8 	.word	0x080141b8
 800e900:	080141bc 	.word	0x080141bc
 800e904:	080141c0 	.word	0x080141c0
 800e908:	080141c4 	.word	0x080141c4
 800e90c:	080141c8 	.word	0x080141c8
 800e910:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e912:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e916:	4553      	cmp	r3, sl
 800e918:	bfa8      	it	ge
 800e91a:	4653      	movge	r3, sl
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	4699      	mov	r9, r3
 800e920:	dc36      	bgt.n	800e990 <_printf_float+0x360>
 800e922:	f04f 0b00 	mov.w	fp, #0
 800e926:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e92a:	f104 021a 	add.w	r2, r4, #26
 800e92e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e930:	9306      	str	r3, [sp, #24]
 800e932:	eba3 0309 	sub.w	r3, r3, r9
 800e936:	455b      	cmp	r3, fp
 800e938:	dc31      	bgt.n	800e99e <_printf_float+0x36e>
 800e93a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e93c:	459a      	cmp	sl, r3
 800e93e:	dc3a      	bgt.n	800e9b6 <_printf_float+0x386>
 800e940:	6823      	ldr	r3, [r4, #0]
 800e942:	07da      	lsls	r2, r3, #31
 800e944:	d437      	bmi.n	800e9b6 <_printf_float+0x386>
 800e946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e948:	ebaa 0903 	sub.w	r9, sl, r3
 800e94c:	9b06      	ldr	r3, [sp, #24]
 800e94e:	ebaa 0303 	sub.w	r3, sl, r3
 800e952:	4599      	cmp	r9, r3
 800e954:	bfa8      	it	ge
 800e956:	4699      	movge	r9, r3
 800e958:	f1b9 0f00 	cmp.w	r9, #0
 800e95c:	dc33      	bgt.n	800e9c6 <_printf_float+0x396>
 800e95e:	f04f 0800 	mov.w	r8, #0
 800e962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e966:	f104 0b1a 	add.w	fp, r4, #26
 800e96a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e96c:	ebaa 0303 	sub.w	r3, sl, r3
 800e970:	eba3 0309 	sub.w	r3, r3, r9
 800e974:	4543      	cmp	r3, r8
 800e976:	f77f af79 	ble.w	800e86c <_printf_float+0x23c>
 800e97a:	2301      	movs	r3, #1
 800e97c:	465a      	mov	r2, fp
 800e97e:	4631      	mov	r1, r6
 800e980:	4628      	mov	r0, r5
 800e982:	47b8      	blx	r7
 800e984:	3001      	adds	r0, #1
 800e986:	f43f aeae 	beq.w	800e6e6 <_printf_float+0xb6>
 800e98a:	f108 0801 	add.w	r8, r8, #1
 800e98e:	e7ec      	b.n	800e96a <_printf_float+0x33a>
 800e990:	4642      	mov	r2, r8
 800e992:	4631      	mov	r1, r6
 800e994:	4628      	mov	r0, r5
 800e996:	47b8      	blx	r7
 800e998:	3001      	adds	r0, #1
 800e99a:	d1c2      	bne.n	800e922 <_printf_float+0x2f2>
 800e99c:	e6a3      	b.n	800e6e6 <_printf_float+0xb6>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	4631      	mov	r1, r6
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	9206      	str	r2, [sp, #24]
 800e9a6:	47b8      	blx	r7
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	f43f ae9c 	beq.w	800e6e6 <_printf_float+0xb6>
 800e9ae:	9a06      	ldr	r2, [sp, #24]
 800e9b0:	f10b 0b01 	add.w	fp, fp, #1
 800e9b4:	e7bb      	b.n	800e92e <_printf_float+0x2fe>
 800e9b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9ba:	4631      	mov	r1, r6
 800e9bc:	4628      	mov	r0, r5
 800e9be:	47b8      	blx	r7
 800e9c0:	3001      	adds	r0, #1
 800e9c2:	d1c0      	bne.n	800e946 <_printf_float+0x316>
 800e9c4:	e68f      	b.n	800e6e6 <_printf_float+0xb6>
 800e9c6:	9a06      	ldr	r2, [sp, #24]
 800e9c8:	464b      	mov	r3, r9
 800e9ca:	4442      	add	r2, r8
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	47b8      	blx	r7
 800e9d2:	3001      	adds	r0, #1
 800e9d4:	d1c3      	bne.n	800e95e <_printf_float+0x32e>
 800e9d6:	e686      	b.n	800e6e6 <_printf_float+0xb6>
 800e9d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e9dc:	f1ba 0f01 	cmp.w	sl, #1
 800e9e0:	dc01      	bgt.n	800e9e6 <_printf_float+0x3b6>
 800e9e2:	07db      	lsls	r3, r3, #31
 800e9e4:	d536      	bpl.n	800ea54 <_printf_float+0x424>
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	4631      	mov	r1, r6
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	47b8      	blx	r7
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	f43f ae78 	beq.w	800e6e6 <_printf_float+0xb6>
 800e9f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	47b8      	blx	r7
 800ea00:	3001      	adds	r0, #1
 800ea02:	f43f ae70 	beq.w	800e6e6 <_printf_float+0xb6>
 800ea06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea12:	f7f2 f879 	bl	8000b08 <__aeabi_dcmpeq>
 800ea16:	b9c0      	cbnz	r0, 800ea4a <_printf_float+0x41a>
 800ea18:	4653      	mov	r3, sl
 800ea1a:	f108 0201 	add.w	r2, r8, #1
 800ea1e:	4631      	mov	r1, r6
 800ea20:	4628      	mov	r0, r5
 800ea22:	47b8      	blx	r7
 800ea24:	3001      	adds	r0, #1
 800ea26:	d10c      	bne.n	800ea42 <_printf_float+0x412>
 800ea28:	e65d      	b.n	800e6e6 <_printf_float+0xb6>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	465a      	mov	r2, fp
 800ea2e:	4631      	mov	r1, r6
 800ea30:	4628      	mov	r0, r5
 800ea32:	47b8      	blx	r7
 800ea34:	3001      	adds	r0, #1
 800ea36:	f43f ae56 	beq.w	800e6e6 <_printf_float+0xb6>
 800ea3a:	f108 0801 	add.w	r8, r8, #1
 800ea3e:	45d0      	cmp	r8, sl
 800ea40:	dbf3      	blt.n	800ea2a <_printf_float+0x3fa>
 800ea42:	464b      	mov	r3, r9
 800ea44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ea48:	e6df      	b.n	800e80a <_printf_float+0x1da>
 800ea4a:	f04f 0800 	mov.w	r8, #0
 800ea4e:	f104 0b1a 	add.w	fp, r4, #26
 800ea52:	e7f4      	b.n	800ea3e <_printf_float+0x40e>
 800ea54:	2301      	movs	r3, #1
 800ea56:	4642      	mov	r2, r8
 800ea58:	e7e1      	b.n	800ea1e <_printf_float+0x3ee>
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	464a      	mov	r2, r9
 800ea5e:	4631      	mov	r1, r6
 800ea60:	4628      	mov	r0, r5
 800ea62:	47b8      	blx	r7
 800ea64:	3001      	adds	r0, #1
 800ea66:	f43f ae3e 	beq.w	800e6e6 <_printf_float+0xb6>
 800ea6a:	f108 0801 	add.w	r8, r8, #1
 800ea6e:	68e3      	ldr	r3, [r4, #12]
 800ea70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ea72:	1a5b      	subs	r3, r3, r1
 800ea74:	4543      	cmp	r3, r8
 800ea76:	dcf0      	bgt.n	800ea5a <_printf_float+0x42a>
 800ea78:	e6fc      	b.n	800e874 <_printf_float+0x244>
 800ea7a:	f04f 0800 	mov.w	r8, #0
 800ea7e:	f104 0919 	add.w	r9, r4, #25
 800ea82:	e7f4      	b.n	800ea6e <_printf_float+0x43e>

0800ea84 <_printf_common>:
 800ea84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea88:	4616      	mov	r6, r2
 800ea8a:	4698      	mov	r8, r3
 800ea8c:	688a      	ldr	r2, [r1, #8]
 800ea8e:	690b      	ldr	r3, [r1, #16]
 800ea90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea94:	4293      	cmp	r3, r2
 800ea96:	bfb8      	it	lt
 800ea98:	4613      	movlt	r3, r2
 800ea9a:	6033      	str	r3, [r6, #0]
 800ea9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eaa0:	4607      	mov	r7, r0
 800eaa2:	460c      	mov	r4, r1
 800eaa4:	b10a      	cbz	r2, 800eaaa <_printf_common+0x26>
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	6033      	str	r3, [r6, #0]
 800eaaa:	6823      	ldr	r3, [r4, #0]
 800eaac:	0699      	lsls	r1, r3, #26
 800eaae:	bf42      	ittt	mi
 800eab0:	6833      	ldrmi	r3, [r6, #0]
 800eab2:	3302      	addmi	r3, #2
 800eab4:	6033      	strmi	r3, [r6, #0]
 800eab6:	6825      	ldr	r5, [r4, #0]
 800eab8:	f015 0506 	ands.w	r5, r5, #6
 800eabc:	d106      	bne.n	800eacc <_printf_common+0x48>
 800eabe:	f104 0a19 	add.w	sl, r4, #25
 800eac2:	68e3      	ldr	r3, [r4, #12]
 800eac4:	6832      	ldr	r2, [r6, #0]
 800eac6:	1a9b      	subs	r3, r3, r2
 800eac8:	42ab      	cmp	r3, r5
 800eaca:	dc26      	bgt.n	800eb1a <_printf_common+0x96>
 800eacc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ead0:	6822      	ldr	r2, [r4, #0]
 800ead2:	3b00      	subs	r3, #0
 800ead4:	bf18      	it	ne
 800ead6:	2301      	movne	r3, #1
 800ead8:	0692      	lsls	r2, r2, #26
 800eada:	d42b      	bmi.n	800eb34 <_printf_common+0xb0>
 800eadc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eae0:	4641      	mov	r1, r8
 800eae2:	4638      	mov	r0, r7
 800eae4:	47c8      	blx	r9
 800eae6:	3001      	adds	r0, #1
 800eae8:	d01e      	beq.n	800eb28 <_printf_common+0xa4>
 800eaea:	6823      	ldr	r3, [r4, #0]
 800eaec:	6922      	ldr	r2, [r4, #16]
 800eaee:	f003 0306 	and.w	r3, r3, #6
 800eaf2:	2b04      	cmp	r3, #4
 800eaf4:	bf02      	ittt	eq
 800eaf6:	68e5      	ldreq	r5, [r4, #12]
 800eaf8:	6833      	ldreq	r3, [r6, #0]
 800eafa:	1aed      	subeq	r5, r5, r3
 800eafc:	68a3      	ldr	r3, [r4, #8]
 800eafe:	bf0c      	ite	eq
 800eb00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb04:	2500      	movne	r5, #0
 800eb06:	4293      	cmp	r3, r2
 800eb08:	bfc4      	itt	gt
 800eb0a:	1a9b      	subgt	r3, r3, r2
 800eb0c:	18ed      	addgt	r5, r5, r3
 800eb0e:	2600      	movs	r6, #0
 800eb10:	341a      	adds	r4, #26
 800eb12:	42b5      	cmp	r5, r6
 800eb14:	d11a      	bne.n	800eb4c <_printf_common+0xc8>
 800eb16:	2000      	movs	r0, #0
 800eb18:	e008      	b.n	800eb2c <_printf_common+0xa8>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	4652      	mov	r2, sl
 800eb1e:	4641      	mov	r1, r8
 800eb20:	4638      	mov	r0, r7
 800eb22:	47c8      	blx	r9
 800eb24:	3001      	adds	r0, #1
 800eb26:	d103      	bne.n	800eb30 <_printf_common+0xac>
 800eb28:	f04f 30ff 	mov.w	r0, #4294967295
 800eb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb30:	3501      	adds	r5, #1
 800eb32:	e7c6      	b.n	800eac2 <_printf_common+0x3e>
 800eb34:	18e1      	adds	r1, r4, r3
 800eb36:	1c5a      	adds	r2, r3, #1
 800eb38:	2030      	movs	r0, #48	@ 0x30
 800eb3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb3e:	4422      	add	r2, r4
 800eb40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb48:	3302      	adds	r3, #2
 800eb4a:	e7c7      	b.n	800eadc <_printf_common+0x58>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	4622      	mov	r2, r4
 800eb50:	4641      	mov	r1, r8
 800eb52:	4638      	mov	r0, r7
 800eb54:	47c8      	blx	r9
 800eb56:	3001      	adds	r0, #1
 800eb58:	d0e6      	beq.n	800eb28 <_printf_common+0xa4>
 800eb5a:	3601      	adds	r6, #1
 800eb5c:	e7d9      	b.n	800eb12 <_printf_common+0x8e>
	...

0800eb60 <_printf_i>:
 800eb60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb64:	7e0f      	ldrb	r7, [r1, #24]
 800eb66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb68:	2f78      	cmp	r7, #120	@ 0x78
 800eb6a:	4691      	mov	r9, r2
 800eb6c:	4680      	mov	r8, r0
 800eb6e:	460c      	mov	r4, r1
 800eb70:	469a      	mov	sl, r3
 800eb72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb76:	d807      	bhi.n	800eb88 <_printf_i+0x28>
 800eb78:	2f62      	cmp	r7, #98	@ 0x62
 800eb7a:	d80a      	bhi.n	800eb92 <_printf_i+0x32>
 800eb7c:	2f00      	cmp	r7, #0
 800eb7e:	f000 80d2 	beq.w	800ed26 <_printf_i+0x1c6>
 800eb82:	2f58      	cmp	r7, #88	@ 0x58
 800eb84:	f000 80b9 	beq.w	800ecfa <_printf_i+0x19a>
 800eb88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb90:	e03a      	b.n	800ec08 <_printf_i+0xa8>
 800eb92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb96:	2b15      	cmp	r3, #21
 800eb98:	d8f6      	bhi.n	800eb88 <_printf_i+0x28>
 800eb9a:	a101      	add	r1, pc, #4	@ (adr r1, 800eba0 <_printf_i+0x40>)
 800eb9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eba0:	0800ebf9 	.word	0x0800ebf9
 800eba4:	0800ec0d 	.word	0x0800ec0d
 800eba8:	0800eb89 	.word	0x0800eb89
 800ebac:	0800eb89 	.word	0x0800eb89
 800ebb0:	0800eb89 	.word	0x0800eb89
 800ebb4:	0800eb89 	.word	0x0800eb89
 800ebb8:	0800ec0d 	.word	0x0800ec0d
 800ebbc:	0800eb89 	.word	0x0800eb89
 800ebc0:	0800eb89 	.word	0x0800eb89
 800ebc4:	0800eb89 	.word	0x0800eb89
 800ebc8:	0800eb89 	.word	0x0800eb89
 800ebcc:	0800ed0d 	.word	0x0800ed0d
 800ebd0:	0800ec37 	.word	0x0800ec37
 800ebd4:	0800ecc7 	.word	0x0800ecc7
 800ebd8:	0800eb89 	.word	0x0800eb89
 800ebdc:	0800eb89 	.word	0x0800eb89
 800ebe0:	0800ed2f 	.word	0x0800ed2f
 800ebe4:	0800eb89 	.word	0x0800eb89
 800ebe8:	0800ec37 	.word	0x0800ec37
 800ebec:	0800eb89 	.word	0x0800eb89
 800ebf0:	0800eb89 	.word	0x0800eb89
 800ebf4:	0800eccf 	.word	0x0800eccf
 800ebf8:	6833      	ldr	r3, [r6, #0]
 800ebfa:	1d1a      	adds	r2, r3, #4
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	6032      	str	r2, [r6, #0]
 800ec00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec08:	2301      	movs	r3, #1
 800ec0a:	e09d      	b.n	800ed48 <_printf_i+0x1e8>
 800ec0c:	6833      	ldr	r3, [r6, #0]
 800ec0e:	6820      	ldr	r0, [r4, #0]
 800ec10:	1d19      	adds	r1, r3, #4
 800ec12:	6031      	str	r1, [r6, #0]
 800ec14:	0606      	lsls	r6, r0, #24
 800ec16:	d501      	bpl.n	800ec1c <_printf_i+0xbc>
 800ec18:	681d      	ldr	r5, [r3, #0]
 800ec1a:	e003      	b.n	800ec24 <_printf_i+0xc4>
 800ec1c:	0645      	lsls	r5, r0, #25
 800ec1e:	d5fb      	bpl.n	800ec18 <_printf_i+0xb8>
 800ec20:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec24:	2d00      	cmp	r5, #0
 800ec26:	da03      	bge.n	800ec30 <_printf_i+0xd0>
 800ec28:	232d      	movs	r3, #45	@ 0x2d
 800ec2a:	426d      	negs	r5, r5
 800ec2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec30:	4859      	ldr	r0, [pc, #356]	@ (800ed98 <_printf_i+0x238>)
 800ec32:	230a      	movs	r3, #10
 800ec34:	e011      	b.n	800ec5a <_printf_i+0xfa>
 800ec36:	6821      	ldr	r1, [r4, #0]
 800ec38:	6833      	ldr	r3, [r6, #0]
 800ec3a:	0608      	lsls	r0, r1, #24
 800ec3c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec40:	d402      	bmi.n	800ec48 <_printf_i+0xe8>
 800ec42:	0649      	lsls	r1, r1, #25
 800ec44:	bf48      	it	mi
 800ec46:	b2ad      	uxthmi	r5, r5
 800ec48:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec4a:	4853      	ldr	r0, [pc, #332]	@ (800ed98 <_printf_i+0x238>)
 800ec4c:	6033      	str	r3, [r6, #0]
 800ec4e:	bf14      	ite	ne
 800ec50:	230a      	movne	r3, #10
 800ec52:	2308      	moveq	r3, #8
 800ec54:	2100      	movs	r1, #0
 800ec56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ec5a:	6866      	ldr	r6, [r4, #4]
 800ec5c:	60a6      	str	r6, [r4, #8]
 800ec5e:	2e00      	cmp	r6, #0
 800ec60:	bfa2      	ittt	ge
 800ec62:	6821      	ldrge	r1, [r4, #0]
 800ec64:	f021 0104 	bicge.w	r1, r1, #4
 800ec68:	6021      	strge	r1, [r4, #0]
 800ec6a:	b90d      	cbnz	r5, 800ec70 <_printf_i+0x110>
 800ec6c:	2e00      	cmp	r6, #0
 800ec6e:	d04b      	beq.n	800ed08 <_printf_i+0x1a8>
 800ec70:	4616      	mov	r6, r2
 800ec72:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec76:	fb03 5711 	mls	r7, r3, r1, r5
 800ec7a:	5dc7      	ldrb	r7, [r0, r7]
 800ec7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec80:	462f      	mov	r7, r5
 800ec82:	42bb      	cmp	r3, r7
 800ec84:	460d      	mov	r5, r1
 800ec86:	d9f4      	bls.n	800ec72 <_printf_i+0x112>
 800ec88:	2b08      	cmp	r3, #8
 800ec8a:	d10b      	bne.n	800eca4 <_printf_i+0x144>
 800ec8c:	6823      	ldr	r3, [r4, #0]
 800ec8e:	07df      	lsls	r7, r3, #31
 800ec90:	d508      	bpl.n	800eca4 <_printf_i+0x144>
 800ec92:	6923      	ldr	r3, [r4, #16]
 800ec94:	6861      	ldr	r1, [r4, #4]
 800ec96:	4299      	cmp	r1, r3
 800ec98:	bfde      	ittt	le
 800ec9a:	2330      	movle	r3, #48	@ 0x30
 800ec9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eca4:	1b92      	subs	r2, r2, r6
 800eca6:	6122      	str	r2, [r4, #16]
 800eca8:	f8cd a000 	str.w	sl, [sp]
 800ecac:	464b      	mov	r3, r9
 800ecae:	aa03      	add	r2, sp, #12
 800ecb0:	4621      	mov	r1, r4
 800ecb2:	4640      	mov	r0, r8
 800ecb4:	f7ff fee6 	bl	800ea84 <_printf_common>
 800ecb8:	3001      	adds	r0, #1
 800ecba:	d14a      	bne.n	800ed52 <_printf_i+0x1f2>
 800ecbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc0:	b004      	add	sp, #16
 800ecc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecc6:	6823      	ldr	r3, [r4, #0]
 800ecc8:	f043 0320 	orr.w	r3, r3, #32
 800eccc:	6023      	str	r3, [r4, #0]
 800ecce:	4833      	ldr	r0, [pc, #204]	@ (800ed9c <_printf_i+0x23c>)
 800ecd0:	2778      	movs	r7, #120	@ 0x78
 800ecd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ecd6:	6823      	ldr	r3, [r4, #0]
 800ecd8:	6831      	ldr	r1, [r6, #0]
 800ecda:	061f      	lsls	r7, r3, #24
 800ecdc:	f851 5b04 	ldr.w	r5, [r1], #4
 800ece0:	d402      	bmi.n	800ece8 <_printf_i+0x188>
 800ece2:	065f      	lsls	r7, r3, #25
 800ece4:	bf48      	it	mi
 800ece6:	b2ad      	uxthmi	r5, r5
 800ece8:	6031      	str	r1, [r6, #0]
 800ecea:	07d9      	lsls	r1, r3, #31
 800ecec:	bf44      	itt	mi
 800ecee:	f043 0320 	orrmi.w	r3, r3, #32
 800ecf2:	6023      	strmi	r3, [r4, #0]
 800ecf4:	b11d      	cbz	r5, 800ecfe <_printf_i+0x19e>
 800ecf6:	2310      	movs	r3, #16
 800ecf8:	e7ac      	b.n	800ec54 <_printf_i+0xf4>
 800ecfa:	4827      	ldr	r0, [pc, #156]	@ (800ed98 <_printf_i+0x238>)
 800ecfc:	e7e9      	b.n	800ecd2 <_printf_i+0x172>
 800ecfe:	6823      	ldr	r3, [r4, #0]
 800ed00:	f023 0320 	bic.w	r3, r3, #32
 800ed04:	6023      	str	r3, [r4, #0]
 800ed06:	e7f6      	b.n	800ecf6 <_printf_i+0x196>
 800ed08:	4616      	mov	r6, r2
 800ed0a:	e7bd      	b.n	800ec88 <_printf_i+0x128>
 800ed0c:	6833      	ldr	r3, [r6, #0]
 800ed0e:	6825      	ldr	r5, [r4, #0]
 800ed10:	6961      	ldr	r1, [r4, #20]
 800ed12:	1d18      	adds	r0, r3, #4
 800ed14:	6030      	str	r0, [r6, #0]
 800ed16:	062e      	lsls	r6, r5, #24
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	d501      	bpl.n	800ed20 <_printf_i+0x1c0>
 800ed1c:	6019      	str	r1, [r3, #0]
 800ed1e:	e002      	b.n	800ed26 <_printf_i+0x1c6>
 800ed20:	0668      	lsls	r0, r5, #25
 800ed22:	d5fb      	bpl.n	800ed1c <_printf_i+0x1bc>
 800ed24:	8019      	strh	r1, [r3, #0]
 800ed26:	2300      	movs	r3, #0
 800ed28:	6123      	str	r3, [r4, #16]
 800ed2a:	4616      	mov	r6, r2
 800ed2c:	e7bc      	b.n	800eca8 <_printf_i+0x148>
 800ed2e:	6833      	ldr	r3, [r6, #0]
 800ed30:	1d1a      	adds	r2, r3, #4
 800ed32:	6032      	str	r2, [r6, #0]
 800ed34:	681e      	ldr	r6, [r3, #0]
 800ed36:	6862      	ldr	r2, [r4, #4]
 800ed38:	2100      	movs	r1, #0
 800ed3a:	4630      	mov	r0, r6
 800ed3c:	f7f1 fa68 	bl	8000210 <memchr>
 800ed40:	b108      	cbz	r0, 800ed46 <_printf_i+0x1e6>
 800ed42:	1b80      	subs	r0, r0, r6
 800ed44:	6060      	str	r0, [r4, #4]
 800ed46:	6863      	ldr	r3, [r4, #4]
 800ed48:	6123      	str	r3, [r4, #16]
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed50:	e7aa      	b.n	800eca8 <_printf_i+0x148>
 800ed52:	6923      	ldr	r3, [r4, #16]
 800ed54:	4632      	mov	r2, r6
 800ed56:	4649      	mov	r1, r9
 800ed58:	4640      	mov	r0, r8
 800ed5a:	47d0      	blx	sl
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	d0ad      	beq.n	800ecbc <_printf_i+0x15c>
 800ed60:	6823      	ldr	r3, [r4, #0]
 800ed62:	079b      	lsls	r3, r3, #30
 800ed64:	d413      	bmi.n	800ed8e <_printf_i+0x22e>
 800ed66:	68e0      	ldr	r0, [r4, #12]
 800ed68:	9b03      	ldr	r3, [sp, #12]
 800ed6a:	4298      	cmp	r0, r3
 800ed6c:	bfb8      	it	lt
 800ed6e:	4618      	movlt	r0, r3
 800ed70:	e7a6      	b.n	800ecc0 <_printf_i+0x160>
 800ed72:	2301      	movs	r3, #1
 800ed74:	4632      	mov	r2, r6
 800ed76:	4649      	mov	r1, r9
 800ed78:	4640      	mov	r0, r8
 800ed7a:	47d0      	blx	sl
 800ed7c:	3001      	adds	r0, #1
 800ed7e:	d09d      	beq.n	800ecbc <_printf_i+0x15c>
 800ed80:	3501      	adds	r5, #1
 800ed82:	68e3      	ldr	r3, [r4, #12]
 800ed84:	9903      	ldr	r1, [sp, #12]
 800ed86:	1a5b      	subs	r3, r3, r1
 800ed88:	42ab      	cmp	r3, r5
 800ed8a:	dcf2      	bgt.n	800ed72 <_printf_i+0x212>
 800ed8c:	e7eb      	b.n	800ed66 <_printf_i+0x206>
 800ed8e:	2500      	movs	r5, #0
 800ed90:	f104 0619 	add.w	r6, r4, #25
 800ed94:	e7f5      	b.n	800ed82 <_printf_i+0x222>
 800ed96:	bf00      	nop
 800ed98:	080141ca 	.word	0x080141ca
 800ed9c:	080141db 	.word	0x080141db

0800eda0 <_scanf_float>:
 800eda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda4:	b087      	sub	sp, #28
 800eda6:	4617      	mov	r7, r2
 800eda8:	9303      	str	r3, [sp, #12]
 800edaa:	688b      	ldr	r3, [r1, #8]
 800edac:	1e5a      	subs	r2, r3, #1
 800edae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800edb2:	bf81      	itttt	hi
 800edb4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800edb8:	eb03 0b05 	addhi.w	fp, r3, r5
 800edbc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800edc0:	608b      	strhi	r3, [r1, #8]
 800edc2:	680b      	ldr	r3, [r1, #0]
 800edc4:	460a      	mov	r2, r1
 800edc6:	f04f 0500 	mov.w	r5, #0
 800edca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800edce:	f842 3b1c 	str.w	r3, [r2], #28
 800edd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800edd6:	4680      	mov	r8, r0
 800edd8:	460c      	mov	r4, r1
 800edda:	bf98      	it	ls
 800eddc:	f04f 0b00 	movls.w	fp, #0
 800ede0:	9201      	str	r2, [sp, #4]
 800ede2:	4616      	mov	r6, r2
 800ede4:	46aa      	mov	sl, r5
 800ede6:	46a9      	mov	r9, r5
 800ede8:	9502      	str	r5, [sp, #8]
 800edea:	68a2      	ldr	r2, [r4, #8]
 800edec:	b152      	cbz	r2, 800ee04 <_scanf_float+0x64>
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	2b4e      	cmp	r3, #78	@ 0x4e
 800edf4:	d864      	bhi.n	800eec0 <_scanf_float+0x120>
 800edf6:	2b40      	cmp	r3, #64	@ 0x40
 800edf8:	d83c      	bhi.n	800ee74 <_scanf_float+0xd4>
 800edfa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800edfe:	b2c8      	uxtb	r0, r1
 800ee00:	280e      	cmp	r0, #14
 800ee02:	d93a      	bls.n	800ee7a <_scanf_float+0xda>
 800ee04:	f1b9 0f00 	cmp.w	r9, #0
 800ee08:	d003      	beq.n	800ee12 <_scanf_float+0x72>
 800ee0a:	6823      	ldr	r3, [r4, #0]
 800ee0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee10:	6023      	str	r3, [r4, #0]
 800ee12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee16:	f1ba 0f01 	cmp.w	sl, #1
 800ee1a:	f200 8117 	bhi.w	800f04c <_scanf_float+0x2ac>
 800ee1e:	9b01      	ldr	r3, [sp, #4]
 800ee20:	429e      	cmp	r6, r3
 800ee22:	f200 8108 	bhi.w	800f036 <_scanf_float+0x296>
 800ee26:	2001      	movs	r0, #1
 800ee28:	b007      	add	sp, #28
 800ee2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee2e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ee32:	2a0d      	cmp	r2, #13
 800ee34:	d8e6      	bhi.n	800ee04 <_scanf_float+0x64>
 800ee36:	a101      	add	r1, pc, #4	@ (adr r1, 800ee3c <_scanf_float+0x9c>)
 800ee38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ee3c:	0800ef83 	.word	0x0800ef83
 800ee40:	0800ee05 	.word	0x0800ee05
 800ee44:	0800ee05 	.word	0x0800ee05
 800ee48:	0800ee05 	.word	0x0800ee05
 800ee4c:	0800efe3 	.word	0x0800efe3
 800ee50:	0800efbb 	.word	0x0800efbb
 800ee54:	0800ee05 	.word	0x0800ee05
 800ee58:	0800ee05 	.word	0x0800ee05
 800ee5c:	0800ef91 	.word	0x0800ef91
 800ee60:	0800ee05 	.word	0x0800ee05
 800ee64:	0800ee05 	.word	0x0800ee05
 800ee68:	0800ee05 	.word	0x0800ee05
 800ee6c:	0800ee05 	.word	0x0800ee05
 800ee70:	0800ef49 	.word	0x0800ef49
 800ee74:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ee78:	e7db      	b.n	800ee32 <_scanf_float+0x92>
 800ee7a:	290e      	cmp	r1, #14
 800ee7c:	d8c2      	bhi.n	800ee04 <_scanf_float+0x64>
 800ee7e:	a001      	add	r0, pc, #4	@ (adr r0, 800ee84 <_scanf_float+0xe4>)
 800ee80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ee84:	0800ef39 	.word	0x0800ef39
 800ee88:	0800ee05 	.word	0x0800ee05
 800ee8c:	0800ef39 	.word	0x0800ef39
 800ee90:	0800efcf 	.word	0x0800efcf
 800ee94:	0800ee05 	.word	0x0800ee05
 800ee98:	0800eee1 	.word	0x0800eee1
 800ee9c:	0800ef1f 	.word	0x0800ef1f
 800eea0:	0800ef1f 	.word	0x0800ef1f
 800eea4:	0800ef1f 	.word	0x0800ef1f
 800eea8:	0800ef1f 	.word	0x0800ef1f
 800eeac:	0800ef1f 	.word	0x0800ef1f
 800eeb0:	0800ef1f 	.word	0x0800ef1f
 800eeb4:	0800ef1f 	.word	0x0800ef1f
 800eeb8:	0800ef1f 	.word	0x0800ef1f
 800eebc:	0800ef1f 	.word	0x0800ef1f
 800eec0:	2b6e      	cmp	r3, #110	@ 0x6e
 800eec2:	d809      	bhi.n	800eed8 <_scanf_float+0x138>
 800eec4:	2b60      	cmp	r3, #96	@ 0x60
 800eec6:	d8b2      	bhi.n	800ee2e <_scanf_float+0x8e>
 800eec8:	2b54      	cmp	r3, #84	@ 0x54
 800eeca:	d07b      	beq.n	800efc4 <_scanf_float+0x224>
 800eecc:	2b59      	cmp	r3, #89	@ 0x59
 800eece:	d199      	bne.n	800ee04 <_scanf_float+0x64>
 800eed0:	2d07      	cmp	r5, #7
 800eed2:	d197      	bne.n	800ee04 <_scanf_float+0x64>
 800eed4:	2508      	movs	r5, #8
 800eed6:	e02c      	b.n	800ef32 <_scanf_float+0x192>
 800eed8:	2b74      	cmp	r3, #116	@ 0x74
 800eeda:	d073      	beq.n	800efc4 <_scanf_float+0x224>
 800eedc:	2b79      	cmp	r3, #121	@ 0x79
 800eede:	e7f6      	b.n	800eece <_scanf_float+0x12e>
 800eee0:	6821      	ldr	r1, [r4, #0]
 800eee2:	05c8      	lsls	r0, r1, #23
 800eee4:	d51b      	bpl.n	800ef1e <_scanf_float+0x17e>
 800eee6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800eeea:	6021      	str	r1, [r4, #0]
 800eeec:	f109 0901 	add.w	r9, r9, #1
 800eef0:	f1bb 0f00 	cmp.w	fp, #0
 800eef4:	d003      	beq.n	800eefe <_scanf_float+0x15e>
 800eef6:	3201      	adds	r2, #1
 800eef8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eefc:	60a2      	str	r2, [r4, #8]
 800eefe:	68a3      	ldr	r3, [r4, #8]
 800ef00:	3b01      	subs	r3, #1
 800ef02:	60a3      	str	r3, [r4, #8]
 800ef04:	6923      	ldr	r3, [r4, #16]
 800ef06:	3301      	adds	r3, #1
 800ef08:	6123      	str	r3, [r4, #16]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	607b      	str	r3, [r7, #4]
 800ef12:	f340 8087 	ble.w	800f024 <_scanf_float+0x284>
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	3301      	adds	r3, #1
 800ef1a:	603b      	str	r3, [r7, #0]
 800ef1c:	e765      	b.n	800edea <_scanf_float+0x4a>
 800ef1e:	eb1a 0105 	adds.w	r1, sl, r5
 800ef22:	f47f af6f 	bne.w	800ee04 <_scanf_float+0x64>
 800ef26:	6822      	ldr	r2, [r4, #0]
 800ef28:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ef2c:	6022      	str	r2, [r4, #0]
 800ef2e:	460d      	mov	r5, r1
 800ef30:	468a      	mov	sl, r1
 800ef32:	f806 3b01 	strb.w	r3, [r6], #1
 800ef36:	e7e2      	b.n	800eefe <_scanf_float+0x15e>
 800ef38:	6822      	ldr	r2, [r4, #0]
 800ef3a:	0610      	lsls	r0, r2, #24
 800ef3c:	f57f af62 	bpl.w	800ee04 <_scanf_float+0x64>
 800ef40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ef44:	6022      	str	r2, [r4, #0]
 800ef46:	e7f4      	b.n	800ef32 <_scanf_float+0x192>
 800ef48:	f1ba 0f00 	cmp.w	sl, #0
 800ef4c:	d10e      	bne.n	800ef6c <_scanf_float+0x1cc>
 800ef4e:	f1b9 0f00 	cmp.w	r9, #0
 800ef52:	d10e      	bne.n	800ef72 <_scanf_float+0x1d2>
 800ef54:	6822      	ldr	r2, [r4, #0]
 800ef56:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ef5a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ef5e:	d108      	bne.n	800ef72 <_scanf_float+0x1d2>
 800ef60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ef64:	6022      	str	r2, [r4, #0]
 800ef66:	f04f 0a01 	mov.w	sl, #1
 800ef6a:	e7e2      	b.n	800ef32 <_scanf_float+0x192>
 800ef6c:	f1ba 0f02 	cmp.w	sl, #2
 800ef70:	d055      	beq.n	800f01e <_scanf_float+0x27e>
 800ef72:	2d01      	cmp	r5, #1
 800ef74:	d002      	beq.n	800ef7c <_scanf_float+0x1dc>
 800ef76:	2d04      	cmp	r5, #4
 800ef78:	f47f af44 	bne.w	800ee04 <_scanf_float+0x64>
 800ef7c:	3501      	adds	r5, #1
 800ef7e:	b2ed      	uxtb	r5, r5
 800ef80:	e7d7      	b.n	800ef32 <_scanf_float+0x192>
 800ef82:	f1ba 0f01 	cmp.w	sl, #1
 800ef86:	f47f af3d 	bne.w	800ee04 <_scanf_float+0x64>
 800ef8a:	f04f 0a02 	mov.w	sl, #2
 800ef8e:	e7d0      	b.n	800ef32 <_scanf_float+0x192>
 800ef90:	b97d      	cbnz	r5, 800efb2 <_scanf_float+0x212>
 800ef92:	f1b9 0f00 	cmp.w	r9, #0
 800ef96:	f47f af38 	bne.w	800ee0a <_scanf_float+0x6a>
 800ef9a:	6822      	ldr	r2, [r4, #0]
 800ef9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800efa0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800efa4:	f040 8108 	bne.w	800f1b8 <_scanf_float+0x418>
 800efa8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800efac:	6022      	str	r2, [r4, #0]
 800efae:	2501      	movs	r5, #1
 800efb0:	e7bf      	b.n	800ef32 <_scanf_float+0x192>
 800efb2:	2d03      	cmp	r5, #3
 800efb4:	d0e2      	beq.n	800ef7c <_scanf_float+0x1dc>
 800efb6:	2d05      	cmp	r5, #5
 800efb8:	e7de      	b.n	800ef78 <_scanf_float+0x1d8>
 800efba:	2d02      	cmp	r5, #2
 800efbc:	f47f af22 	bne.w	800ee04 <_scanf_float+0x64>
 800efc0:	2503      	movs	r5, #3
 800efc2:	e7b6      	b.n	800ef32 <_scanf_float+0x192>
 800efc4:	2d06      	cmp	r5, #6
 800efc6:	f47f af1d 	bne.w	800ee04 <_scanf_float+0x64>
 800efca:	2507      	movs	r5, #7
 800efcc:	e7b1      	b.n	800ef32 <_scanf_float+0x192>
 800efce:	6822      	ldr	r2, [r4, #0]
 800efd0:	0591      	lsls	r1, r2, #22
 800efd2:	f57f af17 	bpl.w	800ee04 <_scanf_float+0x64>
 800efd6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800efda:	6022      	str	r2, [r4, #0]
 800efdc:	f8cd 9008 	str.w	r9, [sp, #8]
 800efe0:	e7a7      	b.n	800ef32 <_scanf_float+0x192>
 800efe2:	6822      	ldr	r2, [r4, #0]
 800efe4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800efe8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800efec:	d006      	beq.n	800effc <_scanf_float+0x25c>
 800efee:	0550      	lsls	r0, r2, #21
 800eff0:	f57f af08 	bpl.w	800ee04 <_scanf_float+0x64>
 800eff4:	f1b9 0f00 	cmp.w	r9, #0
 800eff8:	f000 80de 	beq.w	800f1b8 <_scanf_float+0x418>
 800effc:	0591      	lsls	r1, r2, #22
 800effe:	bf58      	it	pl
 800f000:	9902      	ldrpl	r1, [sp, #8]
 800f002:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f006:	bf58      	it	pl
 800f008:	eba9 0101 	subpl.w	r1, r9, r1
 800f00c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f010:	bf58      	it	pl
 800f012:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f016:	6022      	str	r2, [r4, #0]
 800f018:	f04f 0900 	mov.w	r9, #0
 800f01c:	e789      	b.n	800ef32 <_scanf_float+0x192>
 800f01e:	f04f 0a03 	mov.w	sl, #3
 800f022:	e786      	b.n	800ef32 <_scanf_float+0x192>
 800f024:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f028:	4639      	mov	r1, r7
 800f02a:	4640      	mov	r0, r8
 800f02c:	4798      	blx	r3
 800f02e:	2800      	cmp	r0, #0
 800f030:	f43f aedb 	beq.w	800edea <_scanf_float+0x4a>
 800f034:	e6e6      	b.n	800ee04 <_scanf_float+0x64>
 800f036:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f03a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f03e:	463a      	mov	r2, r7
 800f040:	4640      	mov	r0, r8
 800f042:	4798      	blx	r3
 800f044:	6923      	ldr	r3, [r4, #16]
 800f046:	3b01      	subs	r3, #1
 800f048:	6123      	str	r3, [r4, #16]
 800f04a:	e6e8      	b.n	800ee1e <_scanf_float+0x7e>
 800f04c:	1e6b      	subs	r3, r5, #1
 800f04e:	2b06      	cmp	r3, #6
 800f050:	d824      	bhi.n	800f09c <_scanf_float+0x2fc>
 800f052:	2d02      	cmp	r5, #2
 800f054:	d836      	bhi.n	800f0c4 <_scanf_float+0x324>
 800f056:	9b01      	ldr	r3, [sp, #4]
 800f058:	429e      	cmp	r6, r3
 800f05a:	f67f aee4 	bls.w	800ee26 <_scanf_float+0x86>
 800f05e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f062:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f066:	463a      	mov	r2, r7
 800f068:	4640      	mov	r0, r8
 800f06a:	4798      	blx	r3
 800f06c:	6923      	ldr	r3, [r4, #16]
 800f06e:	3b01      	subs	r3, #1
 800f070:	6123      	str	r3, [r4, #16]
 800f072:	e7f0      	b.n	800f056 <_scanf_float+0x2b6>
 800f074:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f078:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f07c:	463a      	mov	r2, r7
 800f07e:	4640      	mov	r0, r8
 800f080:	4798      	blx	r3
 800f082:	6923      	ldr	r3, [r4, #16]
 800f084:	3b01      	subs	r3, #1
 800f086:	6123      	str	r3, [r4, #16]
 800f088:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f08c:	fa5f fa8a 	uxtb.w	sl, sl
 800f090:	f1ba 0f02 	cmp.w	sl, #2
 800f094:	d1ee      	bne.n	800f074 <_scanf_float+0x2d4>
 800f096:	3d03      	subs	r5, #3
 800f098:	b2ed      	uxtb	r5, r5
 800f09a:	1b76      	subs	r6, r6, r5
 800f09c:	6823      	ldr	r3, [r4, #0]
 800f09e:	05da      	lsls	r2, r3, #23
 800f0a0:	d530      	bpl.n	800f104 <_scanf_float+0x364>
 800f0a2:	055b      	lsls	r3, r3, #21
 800f0a4:	d511      	bpl.n	800f0ca <_scanf_float+0x32a>
 800f0a6:	9b01      	ldr	r3, [sp, #4]
 800f0a8:	429e      	cmp	r6, r3
 800f0aa:	f67f aebc 	bls.w	800ee26 <_scanf_float+0x86>
 800f0ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0b6:	463a      	mov	r2, r7
 800f0b8:	4640      	mov	r0, r8
 800f0ba:	4798      	blx	r3
 800f0bc:	6923      	ldr	r3, [r4, #16]
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	6123      	str	r3, [r4, #16]
 800f0c2:	e7f0      	b.n	800f0a6 <_scanf_float+0x306>
 800f0c4:	46aa      	mov	sl, r5
 800f0c6:	46b3      	mov	fp, r6
 800f0c8:	e7de      	b.n	800f088 <_scanf_float+0x2e8>
 800f0ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f0ce:	6923      	ldr	r3, [r4, #16]
 800f0d0:	2965      	cmp	r1, #101	@ 0x65
 800f0d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f0d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800f0da:	6123      	str	r3, [r4, #16]
 800f0dc:	d00c      	beq.n	800f0f8 <_scanf_float+0x358>
 800f0de:	2945      	cmp	r1, #69	@ 0x45
 800f0e0:	d00a      	beq.n	800f0f8 <_scanf_float+0x358>
 800f0e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0e6:	463a      	mov	r2, r7
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	4798      	blx	r3
 800f0ec:	6923      	ldr	r3, [r4, #16]
 800f0ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f0f2:	3b01      	subs	r3, #1
 800f0f4:	1eb5      	subs	r5, r6, #2
 800f0f6:	6123      	str	r3, [r4, #16]
 800f0f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0fc:	463a      	mov	r2, r7
 800f0fe:	4640      	mov	r0, r8
 800f100:	4798      	blx	r3
 800f102:	462e      	mov	r6, r5
 800f104:	6822      	ldr	r2, [r4, #0]
 800f106:	f012 0210 	ands.w	r2, r2, #16
 800f10a:	d001      	beq.n	800f110 <_scanf_float+0x370>
 800f10c:	2000      	movs	r0, #0
 800f10e:	e68b      	b.n	800ee28 <_scanf_float+0x88>
 800f110:	7032      	strb	r2, [r6, #0]
 800f112:	6823      	ldr	r3, [r4, #0]
 800f114:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f11c:	d11c      	bne.n	800f158 <_scanf_float+0x3b8>
 800f11e:	9b02      	ldr	r3, [sp, #8]
 800f120:	454b      	cmp	r3, r9
 800f122:	eba3 0209 	sub.w	r2, r3, r9
 800f126:	d123      	bne.n	800f170 <_scanf_float+0x3d0>
 800f128:	9901      	ldr	r1, [sp, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	4640      	mov	r0, r8
 800f12e:	f002 fdaf 	bl	8011c90 <_strtod_r>
 800f132:	9b03      	ldr	r3, [sp, #12]
 800f134:	6821      	ldr	r1, [r4, #0]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f011 0f02 	tst.w	r1, #2
 800f13c:	ec57 6b10 	vmov	r6, r7, d0
 800f140:	f103 0204 	add.w	r2, r3, #4
 800f144:	d01f      	beq.n	800f186 <_scanf_float+0x3e6>
 800f146:	9903      	ldr	r1, [sp, #12]
 800f148:	600a      	str	r2, [r1, #0]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	e9c3 6700 	strd	r6, r7, [r3]
 800f150:	68e3      	ldr	r3, [r4, #12]
 800f152:	3301      	adds	r3, #1
 800f154:	60e3      	str	r3, [r4, #12]
 800f156:	e7d9      	b.n	800f10c <_scanf_float+0x36c>
 800f158:	9b04      	ldr	r3, [sp, #16]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d0e4      	beq.n	800f128 <_scanf_float+0x388>
 800f15e:	9905      	ldr	r1, [sp, #20]
 800f160:	230a      	movs	r3, #10
 800f162:	3101      	adds	r1, #1
 800f164:	4640      	mov	r0, r8
 800f166:	f002 fe13 	bl	8011d90 <_strtol_r>
 800f16a:	9b04      	ldr	r3, [sp, #16]
 800f16c:	9e05      	ldr	r6, [sp, #20]
 800f16e:	1ac2      	subs	r2, r0, r3
 800f170:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f174:	429e      	cmp	r6, r3
 800f176:	bf28      	it	cs
 800f178:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f17c:	4910      	ldr	r1, [pc, #64]	@ (800f1c0 <_scanf_float+0x420>)
 800f17e:	4630      	mov	r0, r6
 800f180:	f000 fa08 	bl	800f594 <siprintf>
 800f184:	e7d0      	b.n	800f128 <_scanf_float+0x388>
 800f186:	f011 0f04 	tst.w	r1, #4
 800f18a:	9903      	ldr	r1, [sp, #12]
 800f18c:	600a      	str	r2, [r1, #0]
 800f18e:	d1dc      	bne.n	800f14a <_scanf_float+0x3aa>
 800f190:	681d      	ldr	r5, [r3, #0]
 800f192:	4632      	mov	r2, r6
 800f194:	463b      	mov	r3, r7
 800f196:	4630      	mov	r0, r6
 800f198:	4639      	mov	r1, r7
 800f19a:	f7f1 fce7 	bl	8000b6c <__aeabi_dcmpun>
 800f19e:	b128      	cbz	r0, 800f1ac <_scanf_float+0x40c>
 800f1a0:	4808      	ldr	r0, [pc, #32]	@ (800f1c4 <_scanf_float+0x424>)
 800f1a2:	f000 fb6f 	bl	800f884 <nanf>
 800f1a6:	ed85 0a00 	vstr	s0, [r5]
 800f1aa:	e7d1      	b.n	800f150 <_scanf_float+0x3b0>
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	4639      	mov	r1, r7
 800f1b0:	f7f1 fd3a 	bl	8000c28 <__aeabi_d2f>
 800f1b4:	6028      	str	r0, [r5, #0]
 800f1b6:	e7cb      	b.n	800f150 <_scanf_float+0x3b0>
 800f1b8:	f04f 0900 	mov.w	r9, #0
 800f1bc:	e629      	b.n	800ee12 <_scanf_float+0x72>
 800f1be:	bf00      	nop
 800f1c0:	080141ec 	.word	0x080141ec
 800f1c4:	08014585 	.word	0x08014585

0800f1c8 <std>:
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	b510      	push	{r4, lr}
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	e9c0 3300 	strd	r3, r3, [r0]
 800f1d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f1d6:	6083      	str	r3, [r0, #8]
 800f1d8:	8181      	strh	r1, [r0, #12]
 800f1da:	6643      	str	r3, [r0, #100]	@ 0x64
 800f1dc:	81c2      	strh	r2, [r0, #14]
 800f1de:	6183      	str	r3, [r0, #24]
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	2208      	movs	r2, #8
 800f1e4:	305c      	adds	r0, #92	@ 0x5c
 800f1e6:	f000 facd 	bl	800f784 <memset>
 800f1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f220 <std+0x58>)
 800f1ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800f1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800f224 <std+0x5c>)
 800f1f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f228 <std+0x60>)
 800f1f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f22c <std+0x64>)
 800f1f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800f230 <std+0x68>)
 800f1fc:	6224      	str	r4, [r4, #32]
 800f1fe:	429c      	cmp	r4, r3
 800f200:	d006      	beq.n	800f210 <std+0x48>
 800f202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f206:	4294      	cmp	r4, r2
 800f208:	d002      	beq.n	800f210 <std+0x48>
 800f20a:	33d0      	adds	r3, #208	@ 0xd0
 800f20c:	429c      	cmp	r4, r3
 800f20e:	d105      	bne.n	800f21c <std+0x54>
 800f210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f218:	f000 bb30 	b.w	800f87c <__retarget_lock_init_recursive>
 800f21c:	bd10      	pop	{r4, pc}
 800f21e:	bf00      	nop
 800f220:	0800f5d5 	.word	0x0800f5d5
 800f224:	0800f5f7 	.word	0x0800f5f7
 800f228:	0800f62f 	.word	0x0800f62f
 800f22c:	0800f653 	.word	0x0800f653
 800f230:	20004338 	.word	0x20004338

0800f234 <stdio_exit_handler>:
 800f234:	4a02      	ldr	r2, [pc, #8]	@ (800f240 <stdio_exit_handler+0xc>)
 800f236:	4903      	ldr	r1, [pc, #12]	@ (800f244 <stdio_exit_handler+0x10>)
 800f238:	4803      	ldr	r0, [pc, #12]	@ (800f248 <stdio_exit_handler+0x14>)
 800f23a:	f000 b869 	b.w	800f310 <_fwalk_sglue>
 800f23e:	bf00      	nop
 800f240:	20000520 	.word	0x20000520
 800f244:	080123d1 	.word	0x080123d1
 800f248:	20000530 	.word	0x20000530

0800f24c <cleanup_stdio>:
 800f24c:	6841      	ldr	r1, [r0, #4]
 800f24e:	4b0c      	ldr	r3, [pc, #48]	@ (800f280 <cleanup_stdio+0x34>)
 800f250:	4299      	cmp	r1, r3
 800f252:	b510      	push	{r4, lr}
 800f254:	4604      	mov	r4, r0
 800f256:	d001      	beq.n	800f25c <cleanup_stdio+0x10>
 800f258:	f003 f8ba 	bl	80123d0 <_fflush_r>
 800f25c:	68a1      	ldr	r1, [r4, #8]
 800f25e:	4b09      	ldr	r3, [pc, #36]	@ (800f284 <cleanup_stdio+0x38>)
 800f260:	4299      	cmp	r1, r3
 800f262:	d002      	beq.n	800f26a <cleanup_stdio+0x1e>
 800f264:	4620      	mov	r0, r4
 800f266:	f003 f8b3 	bl	80123d0 <_fflush_r>
 800f26a:	68e1      	ldr	r1, [r4, #12]
 800f26c:	4b06      	ldr	r3, [pc, #24]	@ (800f288 <cleanup_stdio+0x3c>)
 800f26e:	4299      	cmp	r1, r3
 800f270:	d004      	beq.n	800f27c <cleanup_stdio+0x30>
 800f272:	4620      	mov	r0, r4
 800f274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f278:	f003 b8aa 	b.w	80123d0 <_fflush_r>
 800f27c:	bd10      	pop	{r4, pc}
 800f27e:	bf00      	nop
 800f280:	20004338 	.word	0x20004338
 800f284:	200043a0 	.word	0x200043a0
 800f288:	20004408 	.word	0x20004408

0800f28c <global_stdio_init.part.0>:
 800f28c:	b510      	push	{r4, lr}
 800f28e:	4b0b      	ldr	r3, [pc, #44]	@ (800f2bc <global_stdio_init.part.0+0x30>)
 800f290:	4c0b      	ldr	r4, [pc, #44]	@ (800f2c0 <global_stdio_init.part.0+0x34>)
 800f292:	4a0c      	ldr	r2, [pc, #48]	@ (800f2c4 <global_stdio_init.part.0+0x38>)
 800f294:	601a      	str	r2, [r3, #0]
 800f296:	4620      	mov	r0, r4
 800f298:	2200      	movs	r2, #0
 800f29a:	2104      	movs	r1, #4
 800f29c:	f7ff ff94 	bl	800f1c8 <std>
 800f2a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	2109      	movs	r1, #9
 800f2a8:	f7ff ff8e 	bl	800f1c8 <std>
 800f2ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f2b0:	2202      	movs	r2, #2
 800f2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2b6:	2112      	movs	r1, #18
 800f2b8:	f7ff bf86 	b.w	800f1c8 <std>
 800f2bc:	20004470 	.word	0x20004470
 800f2c0:	20004338 	.word	0x20004338
 800f2c4:	0800f235 	.word	0x0800f235

0800f2c8 <__sfp_lock_acquire>:
 800f2c8:	4801      	ldr	r0, [pc, #4]	@ (800f2d0 <__sfp_lock_acquire+0x8>)
 800f2ca:	f000 bad8 	b.w	800f87e <__retarget_lock_acquire_recursive>
 800f2ce:	bf00      	nop
 800f2d0:	20004479 	.word	0x20004479

0800f2d4 <__sfp_lock_release>:
 800f2d4:	4801      	ldr	r0, [pc, #4]	@ (800f2dc <__sfp_lock_release+0x8>)
 800f2d6:	f000 bad3 	b.w	800f880 <__retarget_lock_release_recursive>
 800f2da:	bf00      	nop
 800f2dc:	20004479 	.word	0x20004479

0800f2e0 <__sinit>:
 800f2e0:	b510      	push	{r4, lr}
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	f7ff fff0 	bl	800f2c8 <__sfp_lock_acquire>
 800f2e8:	6a23      	ldr	r3, [r4, #32]
 800f2ea:	b11b      	cbz	r3, 800f2f4 <__sinit+0x14>
 800f2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2f0:	f7ff bff0 	b.w	800f2d4 <__sfp_lock_release>
 800f2f4:	4b04      	ldr	r3, [pc, #16]	@ (800f308 <__sinit+0x28>)
 800f2f6:	6223      	str	r3, [r4, #32]
 800f2f8:	4b04      	ldr	r3, [pc, #16]	@ (800f30c <__sinit+0x2c>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1f5      	bne.n	800f2ec <__sinit+0xc>
 800f300:	f7ff ffc4 	bl	800f28c <global_stdio_init.part.0>
 800f304:	e7f2      	b.n	800f2ec <__sinit+0xc>
 800f306:	bf00      	nop
 800f308:	0800f24d 	.word	0x0800f24d
 800f30c:	20004470 	.word	0x20004470

0800f310 <_fwalk_sglue>:
 800f310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f314:	4607      	mov	r7, r0
 800f316:	4688      	mov	r8, r1
 800f318:	4614      	mov	r4, r2
 800f31a:	2600      	movs	r6, #0
 800f31c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f320:	f1b9 0901 	subs.w	r9, r9, #1
 800f324:	d505      	bpl.n	800f332 <_fwalk_sglue+0x22>
 800f326:	6824      	ldr	r4, [r4, #0]
 800f328:	2c00      	cmp	r4, #0
 800f32a:	d1f7      	bne.n	800f31c <_fwalk_sglue+0xc>
 800f32c:	4630      	mov	r0, r6
 800f32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f332:	89ab      	ldrh	r3, [r5, #12]
 800f334:	2b01      	cmp	r3, #1
 800f336:	d907      	bls.n	800f348 <_fwalk_sglue+0x38>
 800f338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f33c:	3301      	adds	r3, #1
 800f33e:	d003      	beq.n	800f348 <_fwalk_sglue+0x38>
 800f340:	4629      	mov	r1, r5
 800f342:	4638      	mov	r0, r7
 800f344:	47c0      	blx	r8
 800f346:	4306      	orrs	r6, r0
 800f348:	3568      	adds	r5, #104	@ 0x68
 800f34a:	e7e9      	b.n	800f320 <_fwalk_sglue+0x10>

0800f34c <iprintf>:
 800f34c:	b40f      	push	{r0, r1, r2, r3}
 800f34e:	b507      	push	{r0, r1, r2, lr}
 800f350:	4906      	ldr	r1, [pc, #24]	@ (800f36c <iprintf+0x20>)
 800f352:	ab04      	add	r3, sp, #16
 800f354:	6808      	ldr	r0, [r1, #0]
 800f356:	f853 2b04 	ldr.w	r2, [r3], #4
 800f35a:	6881      	ldr	r1, [r0, #8]
 800f35c:	9301      	str	r3, [sp, #4]
 800f35e:	f002 fe9b 	bl	8012098 <_vfiprintf_r>
 800f362:	b003      	add	sp, #12
 800f364:	f85d eb04 	ldr.w	lr, [sp], #4
 800f368:	b004      	add	sp, #16
 800f36a:	4770      	bx	lr
 800f36c:	2000052c 	.word	0x2000052c

0800f370 <_puts_r>:
 800f370:	6a03      	ldr	r3, [r0, #32]
 800f372:	b570      	push	{r4, r5, r6, lr}
 800f374:	6884      	ldr	r4, [r0, #8]
 800f376:	4605      	mov	r5, r0
 800f378:	460e      	mov	r6, r1
 800f37a:	b90b      	cbnz	r3, 800f380 <_puts_r+0x10>
 800f37c:	f7ff ffb0 	bl	800f2e0 <__sinit>
 800f380:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f382:	07db      	lsls	r3, r3, #31
 800f384:	d405      	bmi.n	800f392 <_puts_r+0x22>
 800f386:	89a3      	ldrh	r3, [r4, #12]
 800f388:	0598      	lsls	r0, r3, #22
 800f38a:	d402      	bmi.n	800f392 <_puts_r+0x22>
 800f38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f38e:	f000 fa76 	bl	800f87e <__retarget_lock_acquire_recursive>
 800f392:	89a3      	ldrh	r3, [r4, #12]
 800f394:	0719      	lsls	r1, r3, #28
 800f396:	d502      	bpl.n	800f39e <_puts_r+0x2e>
 800f398:	6923      	ldr	r3, [r4, #16]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d135      	bne.n	800f40a <_puts_r+0x9a>
 800f39e:	4621      	mov	r1, r4
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	f000 f999 	bl	800f6d8 <__swsetup_r>
 800f3a6:	b380      	cbz	r0, 800f40a <_puts_r+0x9a>
 800f3a8:	f04f 35ff 	mov.w	r5, #4294967295
 800f3ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3ae:	07da      	lsls	r2, r3, #31
 800f3b0:	d405      	bmi.n	800f3be <_puts_r+0x4e>
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	059b      	lsls	r3, r3, #22
 800f3b6:	d402      	bmi.n	800f3be <_puts_r+0x4e>
 800f3b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3ba:	f000 fa61 	bl	800f880 <__retarget_lock_release_recursive>
 800f3be:	4628      	mov	r0, r5
 800f3c0:	bd70      	pop	{r4, r5, r6, pc}
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	da04      	bge.n	800f3d0 <_puts_r+0x60>
 800f3c6:	69a2      	ldr	r2, [r4, #24]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	dc17      	bgt.n	800f3fc <_puts_r+0x8c>
 800f3cc:	290a      	cmp	r1, #10
 800f3ce:	d015      	beq.n	800f3fc <_puts_r+0x8c>
 800f3d0:	6823      	ldr	r3, [r4, #0]
 800f3d2:	1c5a      	adds	r2, r3, #1
 800f3d4:	6022      	str	r2, [r4, #0]
 800f3d6:	7019      	strb	r1, [r3, #0]
 800f3d8:	68a3      	ldr	r3, [r4, #8]
 800f3da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f3de:	3b01      	subs	r3, #1
 800f3e0:	60a3      	str	r3, [r4, #8]
 800f3e2:	2900      	cmp	r1, #0
 800f3e4:	d1ed      	bne.n	800f3c2 <_puts_r+0x52>
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	da11      	bge.n	800f40e <_puts_r+0x9e>
 800f3ea:	4622      	mov	r2, r4
 800f3ec:	210a      	movs	r1, #10
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	f000 f933 	bl	800f65a <__swbuf_r>
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	d0d7      	beq.n	800f3a8 <_puts_r+0x38>
 800f3f8:	250a      	movs	r5, #10
 800f3fa:	e7d7      	b.n	800f3ac <_puts_r+0x3c>
 800f3fc:	4622      	mov	r2, r4
 800f3fe:	4628      	mov	r0, r5
 800f400:	f000 f92b 	bl	800f65a <__swbuf_r>
 800f404:	3001      	adds	r0, #1
 800f406:	d1e7      	bne.n	800f3d8 <_puts_r+0x68>
 800f408:	e7ce      	b.n	800f3a8 <_puts_r+0x38>
 800f40a:	3e01      	subs	r6, #1
 800f40c:	e7e4      	b.n	800f3d8 <_puts_r+0x68>
 800f40e:	6823      	ldr	r3, [r4, #0]
 800f410:	1c5a      	adds	r2, r3, #1
 800f412:	6022      	str	r2, [r4, #0]
 800f414:	220a      	movs	r2, #10
 800f416:	701a      	strb	r2, [r3, #0]
 800f418:	e7ee      	b.n	800f3f8 <_puts_r+0x88>
	...

0800f41c <puts>:
 800f41c:	4b02      	ldr	r3, [pc, #8]	@ (800f428 <puts+0xc>)
 800f41e:	4601      	mov	r1, r0
 800f420:	6818      	ldr	r0, [r3, #0]
 800f422:	f7ff bfa5 	b.w	800f370 <_puts_r>
 800f426:	bf00      	nop
 800f428:	2000052c 	.word	0x2000052c

0800f42c <setvbuf>:
 800f42c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f430:	461d      	mov	r5, r3
 800f432:	4b57      	ldr	r3, [pc, #348]	@ (800f590 <setvbuf+0x164>)
 800f434:	681f      	ldr	r7, [r3, #0]
 800f436:	4604      	mov	r4, r0
 800f438:	460e      	mov	r6, r1
 800f43a:	4690      	mov	r8, r2
 800f43c:	b127      	cbz	r7, 800f448 <setvbuf+0x1c>
 800f43e:	6a3b      	ldr	r3, [r7, #32]
 800f440:	b913      	cbnz	r3, 800f448 <setvbuf+0x1c>
 800f442:	4638      	mov	r0, r7
 800f444:	f7ff ff4c 	bl	800f2e0 <__sinit>
 800f448:	f1b8 0f02 	cmp.w	r8, #2
 800f44c:	d006      	beq.n	800f45c <setvbuf+0x30>
 800f44e:	f1b8 0f01 	cmp.w	r8, #1
 800f452:	f200 809a 	bhi.w	800f58a <setvbuf+0x15e>
 800f456:	2d00      	cmp	r5, #0
 800f458:	f2c0 8097 	blt.w	800f58a <setvbuf+0x15e>
 800f45c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f45e:	07d9      	lsls	r1, r3, #31
 800f460:	d405      	bmi.n	800f46e <setvbuf+0x42>
 800f462:	89a3      	ldrh	r3, [r4, #12]
 800f464:	059a      	lsls	r2, r3, #22
 800f466:	d402      	bmi.n	800f46e <setvbuf+0x42>
 800f468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f46a:	f000 fa08 	bl	800f87e <__retarget_lock_acquire_recursive>
 800f46e:	4621      	mov	r1, r4
 800f470:	4638      	mov	r0, r7
 800f472:	f002 ffad 	bl	80123d0 <_fflush_r>
 800f476:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f478:	b141      	cbz	r1, 800f48c <setvbuf+0x60>
 800f47a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f47e:	4299      	cmp	r1, r3
 800f480:	d002      	beq.n	800f488 <setvbuf+0x5c>
 800f482:	4638      	mov	r0, r7
 800f484:	f001 f850 	bl	8010528 <_free_r>
 800f488:	2300      	movs	r3, #0
 800f48a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f48c:	2300      	movs	r3, #0
 800f48e:	61a3      	str	r3, [r4, #24]
 800f490:	6063      	str	r3, [r4, #4]
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	061b      	lsls	r3, r3, #24
 800f496:	d503      	bpl.n	800f4a0 <setvbuf+0x74>
 800f498:	6921      	ldr	r1, [r4, #16]
 800f49a:	4638      	mov	r0, r7
 800f49c:	f001 f844 	bl	8010528 <_free_r>
 800f4a0:	89a3      	ldrh	r3, [r4, #12]
 800f4a2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800f4a6:	f023 0303 	bic.w	r3, r3, #3
 800f4aa:	f1b8 0f02 	cmp.w	r8, #2
 800f4ae:	81a3      	strh	r3, [r4, #12]
 800f4b0:	d061      	beq.n	800f576 <setvbuf+0x14a>
 800f4b2:	ab01      	add	r3, sp, #4
 800f4b4:	466a      	mov	r2, sp
 800f4b6:	4621      	mov	r1, r4
 800f4b8:	4638      	mov	r0, r7
 800f4ba:	f002 ffb1 	bl	8012420 <__swhatbuf_r>
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	4318      	orrs	r0, r3
 800f4c2:	81a0      	strh	r0, [r4, #12]
 800f4c4:	bb2d      	cbnz	r5, 800f512 <setvbuf+0xe6>
 800f4c6:	9d00      	ldr	r5, [sp, #0]
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	f001 f877 	bl	80105bc <malloc>
 800f4ce:	4606      	mov	r6, r0
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d152      	bne.n	800f57a <setvbuf+0x14e>
 800f4d4:	f8dd 9000 	ldr.w	r9, [sp]
 800f4d8:	45a9      	cmp	r9, r5
 800f4da:	d140      	bne.n	800f55e <setvbuf+0x132>
 800f4dc:	f04f 35ff 	mov.w	r5, #4294967295
 800f4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4e4:	f043 0202 	orr.w	r2, r3, #2
 800f4e8:	81a2      	strh	r2, [r4, #12]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	60a2      	str	r2, [r4, #8]
 800f4ee:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800f4f2:	6022      	str	r2, [r4, #0]
 800f4f4:	6122      	str	r2, [r4, #16]
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	6162      	str	r2, [r4, #20]
 800f4fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f4fc:	07d6      	lsls	r6, r2, #31
 800f4fe:	d404      	bmi.n	800f50a <setvbuf+0xde>
 800f500:	0598      	lsls	r0, r3, #22
 800f502:	d402      	bmi.n	800f50a <setvbuf+0xde>
 800f504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f506:	f000 f9bb 	bl	800f880 <__retarget_lock_release_recursive>
 800f50a:	4628      	mov	r0, r5
 800f50c:	b003      	add	sp, #12
 800f50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f512:	2e00      	cmp	r6, #0
 800f514:	d0d8      	beq.n	800f4c8 <setvbuf+0x9c>
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	b913      	cbnz	r3, 800f520 <setvbuf+0xf4>
 800f51a:	4638      	mov	r0, r7
 800f51c:	f7ff fee0 	bl	800f2e0 <__sinit>
 800f520:	f1b8 0f01 	cmp.w	r8, #1
 800f524:	bf08      	it	eq
 800f526:	89a3      	ldrheq	r3, [r4, #12]
 800f528:	6026      	str	r6, [r4, #0]
 800f52a:	bf04      	itt	eq
 800f52c:	f043 0301 	orreq.w	r3, r3, #1
 800f530:	81a3      	strheq	r3, [r4, #12]
 800f532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f536:	f013 0208 	ands.w	r2, r3, #8
 800f53a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f53e:	d01e      	beq.n	800f57e <setvbuf+0x152>
 800f540:	07d9      	lsls	r1, r3, #31
 800f542:	bf41      	itttt	mi
 800f544:	2200      	movmi	r2, #0
 800f546:	426d      	negmi	r5, r5
 800f548:	60a2      	strmi	r2, [r4, #8]
 800f54a:	61a5      	strmi	r5, [r4, #24]
 800f54c:	bf58      	it	pl
 800f54e:	60a5      	strpl	r5, [r4, #8]
 800f550:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f552:	07d2      	lsls	r2, r2, #31
 800f554:	d401      	bmi.n	800f55a <setvbuf+0x12e>
 800f556:	059b      	lsls	r3, r3, #22
 800f558:	d513      	bpl.n	800f582 <setvbuf+0x156>
 800f55a:	2500      	movs	r5, #0
 800f55c:	e7d5      	b.n	800f50a <setvbuf+0xde>
 800f55e:	4648      	mov	r0, r9
 800f560:	f001 f82c 	bl	80105bc <malloc>
 800f564:	4606      	mov	r6, r0
 800f566:	2800      	cmp	r0, #0
 800f568:	d0b8      	beq.n	800f4dc <setvbuf+0xb0>
 800f56a:	89a3      	ldrh	r3, [r4, #12]
 800f56c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f570:	81a3      	strh	r3, [r4, #12]
 800f572:	464d      	mov	r5, r9
 800f574:	e7cf      	b.n	800f516 <setvbuf+0xea>
 800f576:	2500      	movs	r5, #0
 800f578:	e7b2      	b.n	800f4e0 <setvbuf+0xb4>
 800f57a:	46a9      	mov	r9, r5
 800f57c:	e7f5      	b.n	800f56a <setvbuf+0x13e>
 800f57e:	60a2      	str	r2, [r4, #8]
 800f580:	e7e6      	b.n	800f550 <setvbuf+0x124>
 800f582:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f584:	f000 f97c 	bl	800f880 <__retarget_lock_release_recursive>
 800f588:	e7e7      	b.n	800f55a <setvbuf+0x12e>
 800f58a:	f04f 35ff 	mov.w	r5, #4294967295
 800f58e:	e7bc      	b.n	800f50a <setvbuf+0xde>
 800f590:	2000052c 	.word	0x2000052c

0800f594 <siprintf>:
 800f594:	b40e      	push	{r1, r2, r3}
 800f596:	b500      	push	{lr}
 800f598:	b09c      	sub	sp, #112	@ 0x70
 800f59a:	ab1d      	add	r3, sp, #116	@ 0x74
 800f59c:	9002      	str	r0, [sp, #8]
 800f59e:	9006      	str	r0, [sp, #24]
 800f5a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f5a4:	4809      	ldr	r0, [pc, #36]	@ (800f5cc <siprintf+0x38>)
 800f5a6:	9107      	str	r1, [sp, #28]
 800f5a8:	9104      	str	r1, [sp, #16]
 800f5aa:	4909      	ldr	r1, [pc, #36]	@ (800f5d0 <siprintf+0x3c>)
 800f5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5b0:	9105      	str	r1, [sp, #20]
 800f5b2:	6800      	ldr	r0, [r0, #0]
 800f5b4:	9301      	str	r3, [sp, #4]
 800f5b6:	a902      	add	r1, sp, #8
 800f5b8:	f002 fc48 	bl	8011e4c <_svfiprintf_r>
 800f5bc:	9b02      	ldr	r3, [sp, #8]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	701a      	strb	r2, [r3, #0]
 800f5c2:	b01c      	add	sp, #112	@ 0x70
 800f5c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5c8:	b003      	add	sp, #12
 800f5ca:	4770      	bx	lr
 800f5cc:	2000052c 	.word	0x2000052c
 800f5d0:	ffff0208 	.word	0xffff0208

0800f5d4 <__sread>:
 800f5d4:	b510      	push	{r4, lr}
 800f5d6:	460c      	mov	r4, r1
 800f5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5dc:	f000 f900 	bl	800f7e0 <_read_r>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	bfab      	itete	ge
 800f5e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f5e6:	89a3      	ldrhlt	r3, [r4, #12]
 800f5e8:	181b      	addge	r3, r3, r0
 800f5ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f5ee:	bfac      	ite	ge
 800f5f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f5f2:	81a3      	strhlt	r3, [r4, #12]
 800f5f4:	bd10      	pop	{r4, pc}

0800f5f6 <__swrite>:
 800f5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5fa:	461f      	mov	r7, r3
 800f5fc:	898b      	ldrh	r3, [r1, #12]
 800f5fe:	05db      	lsls	r3, r3, #23
 800f600:	4605      	mov	r5, r0
 800f602:	460c      	mov	r4, r1
 800f604:	4616      	mov	r6, r2
 800f606:	d505      	bpl.n	800f614 <__swrite+0x1e>
 800f608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f60c:	2302      	movs	r3, #2
 800f60e:	2200      	movs	r2, #0
 800f610:	f000 f8d4 	bl	800f7bc <_lseek_r>
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f61a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f61e:	81a3      	strh	r3, [r4, #12]
 800f620:	4632      	mov	r2, r6
 800f622:	463b      	mov	r3, r7
 800f624:	4628      	mov	r0, r5
 800f626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f62a:	f000 b8eb 	b.w	800f804 <_write_r>

0800f62e <__sseek>:
 800f62e:	b510      	push	{r4, lr}
 800f630:	460c      	mov	r4, r1
 800f632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f636:	f000 f8c1 	bl	800f7bc <_lseek_r>
 800f63a:	1c43      	adds	r3, r0, #1
 800f63c:	89a3      	ldrh	r3, [r4, #12]
 800f63e:	bf15      	itete	ne
 800f640:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f642:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f646:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f64a:	81a3      	strheq	r3, [r4, #12]
 800f64c:	bf18      	it	ne
 800f64e:	81a3      	strhne	r3, [r4, #12]
 800f650:	bd10      	pop	{r4, pc}

0800f652 <__sclose>:
 800f652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f656:	f000 b8a1 	b.w	800f79c <_close_r>

0800f65a <__swbuf_r>:
 800f65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f65c:	460e      	mov	r6, r1
 800f65e:	4614      	mov	r4, r2
 800f660:	4605      	mov	r5, r0
 800f662:	b118      	cbz	r0, 800f66c <__swbuf_r+0x12>
 800f664:	6a03      	ldr	r3, [r0, #32]
 800f666:	b90b      	cbnz	r3, 800f66c <__swbuf_r+0x12>
 800f668:	f7ff fe3a 	bl	800f2e0 <__sinit>
 800f66c:	69a3      	ldr	r3, [r4, #24]
 800f66e:	60a3      	str	r3, [r4, #8]
 800f670:	89a3      	ldrh	r3, [r4, #12]
 800f672:	071a      	lsls	r2, r3, #28
 800f674:	d501      	bpl.n	800f67a <__swbuf_r+0x20>
 800f676:	6923      	ldr	r3, [r4, #16]
 800f678:	b943      	cbnz	r3, 800f68c <__swbuf_r+0x32>
 800f67a:	4621      	mov	r1, r4
 800f67c:	4628      	mov	r0, r5
 800f67e:	f000 f82b 	bl	800f6d8 <__swsetup_r>
 800f682:	b118      	cbz	r0, 800f68c <__swbuf_r+0x32>
 800f684:	f04f 37ff 	mov.w	r7, #4294967295
 800f688:	4638      	mov	r0, r7
 800f68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f68c:	6823      	ldr	r3, [r4, #0]
 800f68e:	6922      	ldr	r2, [r4, #16]
 800f690:	1a98      	subs	r0, r3, r2
 800f692:	6963      	ldr	r3, [r4, #20]
 800f694:	b2f6      	uxtb	r6, r6
 800f696:	4283      	cmp	r3, r0
 800f698:	4637      	mov	r7, r6
 800f69a:	dc05      	bgt.n	800f6a8 <__swbuf_r+0x4e>
 800f69c:	4621      	mov	r1, r4
 800f69e:	4628      	mov	r0, r5
 800f6a0:	f002 fe96 	bl	80123d0 <_fflush_r>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	d1ed      	bne.n	800f684 <__swbuf_r+0x2a>
 800f6a8:	68a3      	ldr	r3, [r4, #8]
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	60a3      	str	r3, [r4, #8]
 800f6ae:	6823      	ldr	r3, [r4, #0]
 800f6b0:	1c5a      	adds	r2, r3, #1
 800f6b2:	6022      	str	r2, [r4, #0]
 800f6b4:	701e      	strb	r6, [r3, #0]
 800f6b6:	6962      	ldr	r2, [r4, #20]
 800f6b8:	1c43      	adds	r3, r0, #1
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d004      	beq.n	800f6c8 <__swbuf_r+0x6e>
 800f6be:	89a3      	ldrh	r3, [r4, #12]
 800f6c0:	07db      	lsls	r3, r3, #31
 800f6c2:	d5e1      	bpl.n	800f688 <__swbuf_r+0x2e>
 800f6c4:	2e0a      	cmp	r6, #10
 800f6c6:	d1df      	bne.n	800f688 <__swbuf_r+0x2e>
 800f6c8:	4621      	mov	r1, r4
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	f002 fe80 	bl	80123d0 <_fflush_r>
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	d0d9      	beq.n	800f688 <__swbuf_r+0x2e>
 800f6d4:	e7d6      	b.n	800f684 <__swbuf_r+0x2a>
	...

0800f6d8 <__swsetup_r>:
 800f6d8:	b538      	push	{r3, r4, r5, lr}
 800f6da:	4b29      	ldr	r3, [pc, #164]	@ (800f780 <__swsetup_r+0xa8>)
 800f6dc:	4605      	mov	r5, r0
 800f6de:	6818      	ldr	r0, [r3, #0]
 800f6e0:	460c      	mov	r4, r1
 800f6e2:	b118      	cbz	r0, 800f6ec <__swsetup_r+0x14>
 800f6e4:	6a03      	ldr	r3, [r0, #32]
 800f6e6:	b90b      	cbnz	r3, 800f6ec <__swsetup_r+0x14>
 800f6e8:	f7ff fdfa 	bl	800f2e0 <__sinit>
 800f6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6f0:	0719      	lsls	r1, r3, #28
 800f6f2:	d422      	bmi.n	800f73a <__swsetup_r+0x62>
 800f6f4:	06da      	lsls	r2, r3, #27
 800f6f6:	d407      	bmi.n	800f708 <__swsetup_r+0x30>
 800f6f8:	2209      	movs	r2, #9
 800f6fa:	602a      	str	r2, [r5, #0]
 800f6fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f700:	81a3      	strh	r3, [r4, #12]
 800f702:	f04f 30ff 	mov.w	r0, #4294967295
 800f706:	e033      	b.n	800f770 <__swsetup_r+0x98>
 800f708:	0758      	lsls	r0, r3, #29
 800f70a:	d512      	bpl.n	800f732 <__swsetup_r+0x5a>
 800f70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f70e:	b141      	cbz	r1, 800f722 <__swsetup_r+0x4a>
 800f710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f714:	4299      	cmp	r1, r3
 800f716:	d002      	beq.n	800f71e <__swsetup_r+0x46>
 800f718:	4628      	mov	r0, r5
 800f71a:	f000 ff05 	bl	8010528 <_free_r>
 800f71e:	2300      	movs	r3, #0
 800f720:	6363      	str	r3, [r4, #52]	@ 0x34
 800f722:	89a3      	ldrh	r3, [r4, #12]
 800f724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f728:	81a3      	strh	r3, [r4, #12]
 800f72a:	2300      	movs	r3, #0
 800f72c:	6063      	str	r3, [r4, #4]
 800f72e:	6923      	ldr	r3, [r4, #16]
 800f730:	6023      	str	r3, [r4, #0]
 800f732:	89a3      	ldrh	r3, [r4, #12]
 800f734:	f043 0308 	orr.w	r3, r3, #8
 800f738:	81a3      	strh	r3, [r4, #12]
 800f73a:	6923      	ldr	r3, [r4, #16]
 800f73c:	b94b      	cbnz	r3, 800f752 <__swsetup_r+0x7a>
 800f73e:	89a3      	ldrh	r3, [r4, #12]
 800f740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f748:	d003      	beq.n	800f752 <__swsetup_r+0x7a>
 800f74a:	4621      	mov	r1, r4
 800f74c:	4628      	mov	r0, r5
 800f74e:	f002 fe8d 	bl	801246c <__smakebuf_r>
 800f752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f756:	f013 0201 	ands.w	r2, r3, #1
 800f75a:	d00a      	beq.n	800f772 <__swsetup_r+0x9a>
 800f75c:	2200      	movs	r2, #0
 800f75e:	60a2      	str	r2, [r4, #8]
 800f760:	6962      	ldr	r2, [r4, #20]
 800f762:	4252      	negs	r2, r2
 800f764:	61a2      	str	r2, [r4, #24]
 800f766:	6922      	ldr	r2, [r4, #16]
 800f768:	b942      	cbnz	r2, 800f77c <__swsetup_r+0xa4>
 800f76a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f76e:	d1c5      	bne.n	800f6fc <__swsetup_r+0x24>
 800f770:	bd38      	pop	{r3, r4, r5, pc}
 800f772:	0799      	lsls	r1, r3, #30
 800f774:	bf58      	it	pl
 800f776:	6962      	ldrpl	r2, [r4, #20]
 800f778:	60a2      	str	r2, [r4, #8]
 800f77a:	e7f4      	b.n	800f766 <__swsetup_r+0x8e>
 800f77c:	2000      	movs	r0, #0
 800f77e:	e7f7      	b.n	800f770 <__swsetup_r+0x98>
 800f780:	2000052c 	.word	0x2000052c

0800f784 <memset>:
 800f784:	4402      	add	r2, r0
 800f786:	4603      	mov	r3, r0
 800f788:	4293      	cmp	r3, r2
 800f78a:	d100      	bne.n	800f78e <memset+0xa>
 800f78c:	4770      	bx	lr
 800f78e:	f803 1b01 	strb.w	r1, [r3], #1
 800f792:	e7f9      	b.n	800f788 <memset+0x4>

0800f794 <_localeconv_r>:
 800f794:	4800      	ldr	r0, [pc, #0]	@ (800f798 <_localeconv_r+0x4>)
 800f796:	4770      	bx	lr
 800f798:	2000066c 	.word	0x2000066c

0800f79c <_close_r>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4d06      	ldr	r5, [pc, #24]	@ (800f7b8 <_close_r+0x1c>)
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	4608      	mov	r0, r1
 800f7a6:	602b      	str	r3, [r5, #0]
 800f7a8:	f7f8 fd56 	bl	8008258 <_close>
 800f7ac:	1c43      	adds	r3, r0, #1
 800f7ae:	d102      	bne.n	800f7b6 <_close_r+0x1a>
 800f7b0:	682b      	ldr	r3, [r5, #0]
 800f7b2:	b103      	cbz	r3, 800f7b6 <_close_r+0x1a>
 800f7b4:	6023      	str	r3, [r4, #0]
 800f7b6:	bd38      	pop	{r3, r4, r5, pc}
 800f7b8:	20004474 	.word	0x20004474

0800f7bc <_lseek_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	4d07      	ldr	r5, [pc, #28]	@ (800f7dc <_lseek_r+0x20>)
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	4608      	mov	r0, r1
 800f7c4:	4611      	mov	r1, r2
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	602a      	str	r2, [r5, #0]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	f7f8 fd6b 	bl	80082a6 <_lseek>
 800f7d0:	1c43      	adds	r3, r0, #1
 800f7d2:	d102      	bne.n	800f7da <_lseek_r+0x1e>
 800f7d4:	682b      	ldr	r3, [r5, #0]
 800f7d6:	b103      	cbz	r3, 800f7da <_lseek_r+0x1e>
 800f7d8:	6023      	str	r3, [r4, #0]
 800f7da:	bd38      	pop	{r3, r4, r5, pc}
 800f7dc:	20004474 	.word	0x20004474

0800f7e0 <_read_r>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	4d07      	ldr	r5, [pc, #28]	@ (800f800 <_read_r+0x20>)
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	4608      	mov	r0, r1
 800f7e8:	4611      	mov	r1, r2
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	602a      	str	r2, [r5, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	f7f8 fcf9 	bl	80081e6 <_read>
 800f7f4:	1c43      	adds	r3, r0, #1
 800f7f6:	d102      	bne.n	800f7fe <_read_r+0x1e>
 800f7f8:	682b      	ldr	r3, [r5, #0]
 800f7fa:	b103      	cbz	r3, 800f7fe <_read_r+0x1e>
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}
 800f800:	20004474 	.word	0x20004474

0800f804 <_write_r>:
 800f804:	b538      	push	{r3, r4, r5, lr}
 800f806:	4d07      	ldr	r5, [pc, #28]	@ (800f824 <_write_r+0x20>)
 800f808:	4604      	mov	r4, r0
 800f80a:	4608      	mov	r0, r1
 800f80c:	4611      	mov	r1, r2
 800f80e:	2200      	movs	r2, #0
 800f810:	602a      	str	r2, [r5, #0]
 800f812:	461a      	mov	r2, r3
 800f814:	f7f8 fd04 	bl	8008220 <_write>
 800f818:	1c43      	adds	r3, r0, #1
 800f81a:	d102      	bne.n	800f822 <_write_r+0x1e>
 800f81c:	682b      	ldr	r3, [r5, #0]
 800f81e:	b103      	cbz	r3, 800f822 <_write_r+0x1e>
 800f820:	6023      	str	r3, [r4, #0]
 800f822:	bd38      	pop	{r3, r4, r5, pc}
 800f824:	20004474 	.word	0x20004474

0800f828 <__errno>:
 800f828:	4b01      	ldr	r3, [pc, #4]	@ (800f830 <__errno+0x8>)
 800f82a:	6818      	ldr	r0, [r3, #0]
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop
 800f830:	2000052c 	.word	0x2000052c

0800f834 <__libc_init_array>:
 800f834:	b570      	push	{r4, r5, r6, lr}
 800f836:	4d0d      	ldr	r5, [pc, #52]	@ (800f86c <__libc_init_array+0x38>)
 800f838:	4c0d      	ldr	r4, [pc, #52]	@ (800f870 <__libc_init_array+0x3c>)
 800f83a:	1b64      	subs	r4, r4, r5
 800f83c:	10a4      	asrs	r4, r4, #2
 800f83e:	2600      	movs	r6, #0
 800f840:	42a6      	cmp	r6, r4
 800f842:	d109      	bne.n	800f858 <__libc_init_array+0x24>
 800f844:	4d0b      	ldr	r5, [pc, #44]	@ (800f874 <__libc_init_array+0x40>)
 800f846:	4c0c      	ldr	r4, [pc, #48]	@ (800f878 <__libc_init_array+0x44>)
 800f848:	f004 fc32 	bl	80140b0 <_init>
 800f84c:	1b64      	subs	r4, r4, r5
 800f84e:	10a4      	asrs	r4, r4, #2
 800f850:	2600      	movs	r6, #0
 800f852:	42a6      	cmp	r6, r4
 800f854:	d105      	bne.n	800f862 <__libc_init_array+0x2e>
 800f856:	bd70      	pop	{r4, r5, r6, pc}
 800f858:	f855 3b04 	ldr.w	r3, [r5], #4
 800f85c:	4798      	blx	r3
 800f85e:	3601      	adds	r6, #1
 800f860:	e7ee      	b.n	800f840 <__libc_init_array+0xc>
 800f862:	f855 3b04 	ldr.w	r3, [r5], #4
 800f866:	4798      	blx	r3
 800f868:	3601      	adds	r6, #1
 800f86a:	e7f2      	b.n	800f852 <__libc_init_array+0x1e>
 800f86c:	08014650 	.word	0x08014650
 800f870:	08014650 	.word	0x08014650
 800f874:	08014650 	.word	0x08014650
 800f878:	08014654 	.word	0x08014654

0800f87c <__retarget_lock_init_recursive>:
 800f87c:	4770      	bx	lr

0800f87e <__retarget_lock_acquire_recursive>:
 800f87e:	4770      	bx	lr

0800f880 <__retarget_lock_release_recursive>:
 800f880:	4770      	bx	lr
	...

0800f884 <nanf>:
 800f884:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f88c <nanf+0x8>
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	7fc00000 	.word	0x7fc00000

0800f890 <quorem>:
 800f890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f894:	6903      	ldr	r3, [r0, #16]
 800f896:	690c      	ldr	r4, [r1, #16]
 800f898:	42a3      	cmp	r3, r4
 800f89a:	4607      	mov	r7, r0
 800f89c:	db7e      	blt.n	800f99c <quorem+0x10c>
 800f89e:	3c01      	subs	r4, #1
 800f8a0:	f101 0814 	add.w	r8, r1, #20
 800f8a4:	00a3      	lsls	r3, r4, #2
 800f8a6:	f100 0514 	add.w	r5, r0, #20
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8b0:	9301      	str	r3, [sp, #4]
 800f8b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8c2:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8c6:	d32e      	bcc.n	800f926 <quorem+0x96>
 800f8c8:	f04f 0a00 	mov.w	sl, #0
 800f8cc:	46c4      	mov	ip, r8
 800f8ce:	46ae      	mov	lr, r5
 800f8d0:	46d3      	mov	fp, sl
 800f8d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f8d6:	b298      	uxth	r0, r3
 800f8d8:	fb06 a000 	mla	r0, r6, r0, sl
 800f8dc:	0c02      	lsrs	r2, r0, #16
 800f8de:	0c1b      	lsrs	r3, r3, #16
 800f8e0:	fb06 2303 	mla	r3, r6, r3, r2
 800f8e4:	f8de 2000 	ldr.w	r2, [lr]
 800f8e8:	b280      	uxth	r0, r0
 800f8ea:	b292      	uxth	r2, r2
 800f8ec:	1a12      	subs	r2, r2, r0
 800f8ee:	445a      	add	r2, fp
 800f8f0:	f8de 0000 	ldr.w	r0, [lr]
 800f8f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f8fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f902:	b292      	uxth	r2, r2
 800f904:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f908:	45e1      	cmp	r9, ip
 800f90a:	f84e 2b04 	str.w	r2, [lr], #4
 800f90e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f912:	d2de      	bcs.n	800f8d2 <quorem+0x42>
 800f914:	9b00      	ldr	r3, [sp, #0]
 800f916:	58eb      	ldr	r3, [r5, r3]
 800f918:	b92b      	cbnz	r3, 800f926 <quorem+0x96>
 800f91a:	9b01      	ldr	r3, [sp, #4]
 800f91c:	3b04      	subs	r3, #4
 800f91e:	429d      	cmp	r5, r3
 800f920:	461a      	mov	r2, r3
 800f922:	d32f      	bcc.n	800f984 <quorem+0xf4>
 800f924:	613c      	str	r4, [r7, #16]
 800f926:	4638      	mov	r0, r7
 800f928:	f001 f9c2 	bl	8010cb0 <__mcmp>
 800f92c:	2800      	cmp	r0, #0
 800f92e:	db25      	blt.n	800f97c <quorem+0xec>
 800f930:	4629      	mov	r1, r5
 800f932:	2000      	movs	r0, #0
 800f934:	f858 2b04 	ldr.w	r2, [r8], #4
 800f938:	f8d1 c000 	ldr.w	ip, [r1]
 800f93c:	fa1f fe82 	uxth.w	lr, r2
 800f940:	fa1f f38c 	uxth.w	r3, ip
 800f944:	eba3 030e 	sub.w	r3, r3, lr
 800f948:	4403      	add	r3, r0
 800f94a:	0c12      	lsrs	r2, r2, #16
 800f94c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f950:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f954:	b29b      	uxth	r3, r3
 800f956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f95a:	45c1      	cmp	r9, r8
 800f95c:	f841 3b04 	str.w	r3, [r1], #4
 800f960:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f964:	d2e6      	bcs.n	800f934 <quorem+0xa4>
 800f966:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f96a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f96e:	b922      	cbnz	r2, 800f97a <quorem+0xea>
 800f970:	3b04      	subs	r3, #4
 800f972:	429d      	cmp	r5, r3
 800f974:	461a      	mov	r2, r3
 800f976:	d30b      	bcc.n	800f990 <quorem+0x100>
 800f978:	613c      	str	r4, [r7, #16]
 800f97a:	3601      	adds	r6, #1
 800f97c:	4630      	mov	r0, r6
 800f97e:	b003      	add	sp, #12
 800f980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f984:	6812      	ldr	r2, [r2, #0]
 800f986:	3b04      	subs	r3, #4
 800f988:	2a00      	cmp	r2, #0
 800f98a:	d1cb      	bne.n	800f924 <quorem+0x94>
 800f98c:	3c01      	subs	r4, #1
 800f98e:	e7c6      	b.n	800f91e <quorem+0x8e>
 800f990:	6812      	ldr	r2, [r2, #0]
 800f992:	3b04      	subs	r3, #4
 800f994:	2a00      	cmp	r2, #0
 800f996:	d1ef      	bne.n	800f978 <quorem+0xe8>
 800f998:	3c01      	subs	r4, #1
 800f99a:	e7ea      	b.n	800f972 <quorem+0xe2>
 800f99c:	2000      	movs	r0, #0
 800f99e:	e7ee      	b.n	800f97e <quorem+0xee>

0800f9a0 <_dtoa_r>:
 800f9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a4:	69c7      	ldr	r7, [r0, #28]
 800f9a6:	b099      	sub	sp, #100	@ 0x64
 800f9a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f9ac:	ec55 4b10 	vmov	r4, r5, d0
 800f9b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f9b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f9b4:	4683      	mov	fp, r0
 800f9b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f9ba:	b97f      	cbnz	r7, 800f9dc <_dtoa_r+0x3c>
 800f9bc:	2010      	movs	r0, #16
 800f9be:	f000 fdfd 	bl	80105bc <malloc>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800f9c8:	b920      	cbnz	r0, 800f9d4 <_dtoa_r+0x34>
 800f9ca:	4ba7      	ldr	r3, [pc, #668]	@ (800fc68 <_dtoa_r+0x2c8>)
 800f9cc:	21ef      	movs	r1, #239	@ 0xef
 800f9ce:	48a7      	ldr	r0, [pc, #668]	@ (800fc6c <_dtoa_r+0x2cc>)
 800f9d0:	f002 fdfe 	bl	80125d0 <__assert_func>
 800f9d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f9d8:	6007      	str	r7, [r0, #0]
 800f9da:	60c7      	str	r7, [r0, #12]
 800f9dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f9e0:	6819      	ldr	r1, [r3, #0]
 800f9e2:	b159      	cbz	r1, 800f9fc <_dtoa_r+0x5c>
 800f9e4:	685a      	ldr	r2, [r3, #4]
 800f9e6:	604a      	str	r2, [r1, #4]
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	4093      	lsls	r3, r2
 800f9ec:	608b      	str	r3, [r1, #8]
 800f9ee:	4658      	mov	r0, fp
 800f9f0:	f000 feda 	bl	80107a8 <_Bfree>
 800f9f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	601a      	str	r2, [r3, #0]
 800f9fc:	1e2b      	subs	r3, r5, #0
 800f9fe:	bfb9      	ittee	lt
 800fa00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fa04:	9303      	strlt	r3, [sp, #12]
 800fa06:	2300      	movge	r3, #0
 800fa08:	6033      	strge	r3, [r6, #0]
 800fa0a:	9f03      	ldr	r7, [sp, #12]
 800fa0c:	4b98      	ldr	r3, [pc, #608]	@ (800fc70 <_dtoa_r+0x2d0>)
 800fa0e:	bfbc      	itt	lt
 800fa10:	2201      	movlt	r2, #1
 800fa12:	6032      	strlt	r2, [r6, #0]
 800fa14:	43bb      	bics	r3, r7
 800fa16:	d112      	bne.n	800fa3e <_dtoa_r+0x9e>
 800fa18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fa1e:	6013      	str	r3, [r2, #0]
 800fa20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa24:	4323      	orrs	r3, r4
 800fa26:	f000 854d 	beq.w	80104c4 <_dtoa_r+0xb24>
 800fa2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fc84 <_dtoa_r+0x2e4>
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 854f 	beq.w	80104d4 <_dtoa_r+0xb34>
 800fa36:	f10a 0303 	add.w	r3, sl, #3
 800fa3a:	f000 bd49 	b.w	80104d0 <_dtoa_r+0xb30>
 800fa3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa42:	2200      	movs	r2, #0
 800fa44:	ec51 0b17 	vmov	r0, r1, d7
 800fa48:	2300      	movs	r3, #0
 800fa4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fa4e:	f7f1 f85b 	bl	8000b08 <__aeabi_dcmpeq>
 800fa52:	4680      	mov	r8, r0
 800fa54:	b158      	cbz	r0, 800fa6e <_dtoa_r+0xce>
 800fa56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa58:	2301      	movs	r3, #1
 800fa5a:	6013      	str	r3, [r2, #0]
 800fa5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa5e:	b113      	cbz	r3, 800fa66 <_dtoa_r+0xc6>
 800fa60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fa62:	4b84      	ldr	r3, [pc, #528]	@ (800fc74 <_dtoa_r+0x2d4>)
 800fa64:	6013      	str	r3, [r2, #0]
 800fa66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fc88 <_dtoa_r+0x2e8>
 800fa6a:	f000 bd33 	b.w	80104d4 <_dtoa_r+0xb34>
 800fa6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fa72:	aa16      	add	r2, sp, #88	@ 0x58
 800fa74:	a917      	add	r1, sp, #92	@ 0x5c
 800fa76:	4658      	mov	r0, fp
 800fa78:	f001 fa3a 	bl	8010ef0 <__d2b>
 800fa7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fa80:	4681      	mov	r9, r0
 800fa82:	2e00      	cmp	r6, #0
 800fa84:	d077      	beq.n	800fb76 <_dtoa_r+0x1d6>
 800fa86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fa8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fa98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fa9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800faa0:	4619      	mov	r1, r3
 800faa2:	2200      	movs	r2, #0
 800faa4:	4b74      	ldr	r3, [pc, #464]	@ (800fc78 <_dtoa_r+0x2d8>)
 800faa6:	f7f0 fc0f 	bl	80002c8 <__aeabi_dsub>
 800faaa:	a369      	add	r3, pc, #420	@ (adr r3, 800fc50 <_dtoa_r+0x2b0>)
 800faac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab0:	f7f0 fdc2 	bl	8000638 <__aeabi_dmul>
 800fab4:	a368      	add	r3, pc, #416	@ (adr r3, 800fc58 <_dtoa_r+0x2b8>)
 800fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faba:	f7f0 fc07 	bl	80002cc <__adddf3>
 800fabe:	4604      	mov	r4, r0
 800fac0:	4630      	mov	r0, r6
 800fac2:	460d      	mov	r5, r1
 800fac4:	f7f0 fd4e 	bl	8000564 <__aeabi_i2d>
 800fac8:	a365      	add	r3, pc, #404	@ (adr r3, 800fc60 <_dtoa_r+0x2c0>)
 800faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800face:	f7f0 fdb3 	bl	8000638 <__aeabi_dmul>
 800fad2:	4602      	mov	r2, r0
 800fad4:	460b      	mov	r3, r1
 800fad6:	4620      	mov	r0, r4
 800fad8:	4629      	mov	r1, r5
 800fada:	f7f0 fbf7 	bl	80002cc <__adddf3>
 800fade:	4604      	mov	r4, r0
 800fae0:	460d      	mov	r5, r1
 800fae2:	f7f1 f859 	bl	8000b98 <__aeabi_d2iz>
 800fae6:	2200      	movs	r2, #0
 800fae8:	4607      	mov	r7, r0
 800faea:	2300      	movs	r3, #0
 800faec:	4620      	mov	r0, r4
 800faee:	4629      	mov	r1, r5
 800faf0:	f7f1 f814 	bl	8000b1c <__aeabi_dcmplt>
 800faf4:	b140      	cbz	r0, 800fb08 <_dtoa_r+0x168>
 800faf6:	4638      	mov	r0, r7
 800faf8:	f7f0 fd34 	bl	8000564 <__aeabi_i2d>
 800fafc:	4622      	mov	r2, r4
 800fafe:	462b      	mov	r3, r5
 800fb00:	f7f1 f802 	bl	8000b08 <__aeabi_dcmpeq>
 800fb04:	b900      	cbnz	r0, 800fb08 <_dtoa_r+0x168>
 800fb06:	3f01      	subs	r7, #1
 800fb08:	2f16      	cmp	r7, #22
 800fb0a:	d851      	bhi.n	800fbb0 <_dtoa_r+0x210>
 800fb0c:	4b5b      	ldr	r3, [pc, #364]	@ (800fc7c <_dtoa_r+0x2dc>)
 800fb0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb1a:	f7f0 ffff 	bl	8000b1c <__aeabi_dcmplt>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	d048      	beq.n	800fbb4 <_dtoa_r+0x214>
 800fb22:	3f01      	subs	r7, #1
 800fb24:	2300      	movs	r3, #0
 800fb26:	9312      	str	r3, [sp, #72]	@ 0x48
 800fb28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fb2a:	1b9b      	subs	r3, r3, r6
 800fb2c:	1e5a      	subs	r2, r3, #1
 800fb2e:	bf44      	itt	mi
 800fb30:	f1c3 0801 	rsbmi	r8, r3, #1
 800fb34:	2300      	movmi	r3, #0
 800fb36:	9208      	str	r2, [sp, #32]
 800fb38:	bf54      	ite	pl
 800fb3a:	f04f 0800 	movpl.w	r8, #0
 800fb3e:	9308      	strmi	r3, [sp, #32]
 800fb40:	2f00      	cmp	r7, #0
 800fb42:	db39      	blt.n	800fbb8 <_dtoa_r+0x218>
 800fb44:	9b08      	ldr	r3, [sp, #32]
 800fb46:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fb48:	443b      	add	r3, r7
 800fb4a:	9308      	str	r3, [sp, #32]
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb52:	2b09      	cmp	r3, #9
 800fb54:	d864      	bhi.n	800fc20 <_dtoa_r+0x280>
 800fb56:	2b05      	cmp	r3, #5
 800fb58:	bfc4      	itt	gt
 800fb5a:	3b04      	subgt	r3, #4
 800fb5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fb5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb60:	f1a3 0302 	sub.w	r3, r3, #2
 800fb64:	bfcc      	ite	gt
 800fb66:	2400      	movgt	r4, #0
 800fb68:	2401      	movle	r4, #1
 800fb6a:	2b03      	cmp	r3, #3
 800fb6c:	d863      	bhi.n	800fc36 <_dtoa_r+0x296>
 800fb6e:	e8df f003 	tbb	[pc, r3]
 800fb72:	372a      	.short	0x372a
 800fb74:	5535      	.short	0x5535
 800fb76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fb7a:	441e      	add	r6, r3
 800fb7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fb80:	2b20      	cmp	r3, #32
 800fb82:	bfc1      	itttt	gt
 800fb84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fb88:	409f      	lslgt	r7, r3
 800fb8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fb8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fb92:	bfd6      	itet	le
 800fb94:	f1c3 0320 	rsble	r3, r3, #32
 800fb98:	ea47 0003 	orrgt.w	r0, r7, r3
 800fb9c:	fa04 f003 	lslle.w	r0, r4, r3
 800fba0:	f7f0 fcd0 	bl	8000544 <__aeabi_ui2d>
 800fba4:	2201      	movs	r2, #1
 800fba6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fbaa:	3e01      	subs	r6, #1
 800fbac:	9214      	str	r2, [sp, #80]	@ 0x50
 800fbae:	e777      	b.n	800faa0 <_dtoa_r+0x100>
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	e7b8      	b.n	800fb26 <_dtoa_r+0x186>
 800fbb4:	9012      	str	r0, [sp, #72]	@ 0x48
 800fbb6:	e7b7      	b.n	800fb28 <_dtoa_r+0x188>
 800fbb8:	427b      	negs	r3, r7
 800fbba:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	eba8 0807 	sub.w	r8, r8, r7
 800fbc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fbc4:	e7c4      	b.n	800fb50 <_dtoa_r+0x1b0>
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	dc35      	bgt.n	800fc3c <_dtoa_r+0x29c>
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	9307      	str	r3, [sp, #28]
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	920e      	str	r2, [sp, #56]	@ 0x38
 800fbda:	e00b      	b.n	800fbf4 <_dtoa_r+0x254>
 800fbdc:	2301      	movs	r3, #1
 800fbde:	e7f3      	b.n	800fbc8 <_dtoa_r+0x228>
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbe6:	18fb      	adds	r3, r7, r3
 800fbe8:	9300      	str	r3, [sp, #0]
 800fbea:	3301      	adds	r3, #1
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	9307      	str	r3, [sp, #28]
 800fbf0:	bfb8      	it	lt
 800fbf2:	2301      	movlt	r3, #1
 800fbf4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	2204      	movs	r2, #4
 800fbfc:	f102 0514 	add.w	r5, r2, #20
 800fc00:	429d      	cmp	r5, r3
 800fc02:	d91f      	bls.n	800fc44 <_dtoa_r+0x2a4>
 800fc04:	6041      	str	r1, [r0, #4]
 800fc06:	4658      	mov	r0, fp
 800fc08:	f000 fd8e 	bl	8010728 <_Balloc>
 800fc0c:	4682      	mov	sl, r0
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d13c      	bne.n	800fc8c <_dtoa_r+0x2ec>
 800fc12:	4b1b      	ldr	r3, [pc, #108]	@ (800fc80 <_dtoa_r+0x2e0>)
 800fc14:	4602      	mov	r2, r0
 800fc16:	f240 11af 	movw	r1, #431	@ 0x1af
 800fc1a:	e6d8      	b.n	800f9ce <_dtoa_r+0x2e>
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	e7e0      	b.n	800fbe2 <_dtoa_r+0x242>
 800fc20:	2401      	movs	r4, #1
 800fc22:	2300      	movs	r3, #0
 800fc24:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fc28:	f04f 33ff 	mov.w	r3, #4294967295
 800fc2c:	9300      	str	r3, [sp, #0]
 800fc2e:	9307      	str	r3, [sp, #28]
 800fc30:	2200      	movs	r2, #0
 800fc32:	2312      	movs	r3, #18
 800fc34:	e7d0      	b.n	800fbd8 <_dtoa_r+0x238>
 800fc36:	2301      	movs	r3, #1
 800fc38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc3a:	e7f5      	b.n	800fc28 <_dtoa_r+0x288>
 800fc3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	9307      	str	r3, [sp, #28]
 800fc42:	e7d7      	b.n	800fbf4 <_dtoa_r+0x254>
 800fc44:	3101      	adds	r1, #1
 800fc46:	0052      	lsls	r2, r2, #1
 800fc48:	e7d8      	b.n	800fbfc <_dtoa_r+0x25c>
 800fc4a:	bf00      	nop
 800fc4c:	f3af 8000 	nop.w
 800fc50:	636f4361 	.word	0x636f4361
 800fc54:	3fd287a7 	.word	0x3fd287a7
 800fc58:	8b60c8b3 	.word	0x8b60c8b3
 800fc5c:	3fc68a28 	.word	0x3fc68a28
 800fc60:	509f79fb 	.word	0x509f79fb
 800fc64:	3fd34413 	.word	0x3fd34413
 800fc68:	080141fe 	.word	0x080141fe
 800fc6c:	08014215 	.word	0x08014215
 800fc70:	7ff00000 	.word	0x7ff00000
 800fc74:	080141c9 	.word	0x080141c9
 800fc78:	3ff80000 	.word	0x3ff80000
 800fc7c:	08014310 	.word	0x08014310
 800fc80:	0801426d 	.word	0x0801426d
 800fc84:	080141fa 	.word	0x080141fa
 800fc88:	080141c8 	.word	0x080141c8
 800fc8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fc90:	6018      	str	r0, [r3, #0]
 800fc92:	9b07      	ldr	r3, [sp, #28]
 800fc94:	2b0e      	cmp	r3, #14
 800fc96:	f200 80a4 	bhi.w	800fde2 <_dtoa_r+0x442>
 800fc9a:	2c00      	cmp	r4, #0
 800fc9c:	f000 80a1 	beq.w	800fde2 <_dtoa_r+0x442>
 800fca0:	2f00      	cmp	r7, #0
 800fca2:	dd33      	ble.n	800fd0c <_dtoa_r+0x36c>
 800fca4:	4bad      	ldr	r3, [pc, #692]	@ (800ff5c <_dtoa_r+0x5bc>)
 800fca6:	f007 020f 	and.w	r2, r7, #15
 800fcaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcae:	ed93 7b00 	vldr	d7, [r3]
 800fcb2:	05f8      	lsls	r0, r7, #23
 800fcb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fcb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fcbc:	d516      	bpl.n	800fcec <_dtoa_r+0x34c>
 800fcbe:	4ba8      	ldr	r3, [pc, #672]	@ (800ff60 <_dtoa_r+0x5c0>)
 800fcc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fcc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fcc8:	f7f0 fde0 	bl	800088c <__aeabi_ddiv>
 800fccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcd0:	f004 040f 	and.w	r4, r4, #15
 800fcd4:	2603      	movs	r6, #3
 800fcd6:	4da2      	ldr	r5, [pc, #648]	@ (800ff60 <_dtoa_r+0x5c0>)
 800fcd8:	b954      	cbnz	r4, 800fcf0 <_dtoa_r+0x350>
 800fcda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fce2:	f7f0 fdd3 	bl	800088c <__aeabi_ddiv>
 800fce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcea:	e028      	b.n	800fd3e <_dtoa_r+0x39e>
 800fcec:	2602      	movs	r6, #2
 800fcee:	e7f2      	b.n	800fcd6 <_dtoa_r+0x336>
 800fcf0:	07e1      	lsls	r1, r4, #31
 800fcf2:	d508      	bpl.n	800fd06 <_dtoa_r+0x366>
 800fcf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fcfc:	f7f0 fc9c 	bl	8000638 <__aeabi_dmul>
 800fd00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd04:	3601      	adds	r6, #1
 800fd06:	1064      	asrs	r4, r4, #1
 800fd08:	3508      	adds	r5, #8
 800fd0a:	e7e5      	b.n	800fcd8 <_dtoa_r+0x338>
 800fd0c:	f000 80d2 	beq.w	800feb4 <_dtoa_r+0x514>
 800fd10:	427c      	negs	r4, r7
 800fd12:	4b92      	ldr	r3, [pc, #584]	@ (800ff5c <_dtoa_r+0x5bc>)
 800fd14:	4d92      	ldr	r5, [pc, #584]	@ (800ff60 <_dtoa_r+0x5c0>)
 800fd16:	f004 020f 	and.w	r2, r4, #15
 800fd1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd26:	f7f0 fc87 	bl	8000638 <__aeabi_dmul>
 800fd2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd2e:	1124      	asrs	r4, r4, #4
 800fd30:	2300      	movs	r3, #0
 800fd32:	2602      	movs	r6, #2
 800fd34:	2c00      	cmp	r4, #0
 800fd36:	f040 80b2 	bne.w	800fe9e <_dtoa_r+0x4fe>
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1d3      	bne.n	800fce6 <_dtoa_r+0x346>
 800fd3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f000 80b7 	beq.w	800feb8 <_dtoa_r+0x518>
 800fd4a:	4b86      	ldr	r3, [pc, #536]	@ (800ff64 <_dtoa_r+0x5c4>)
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	4620      	mov	r0, r4
 800fd50:	4629      	mov	r1, r5
 800fd52:	f7f0 fee3 	bl	8000b1c <__aeabi_dcmplt>
 800fd56:	2800      	cmp	r0, #0
 800fd58:	f000 80ae 	beq.w	800feb8 <_dtoa_r+0x518>
 800fd5c:	9b07      	ldr	r3, [sp, #28]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f000 80aa 	beq.w	800feb8 <_dtoa_r+0x518>
 800fd64:	9b00      	ldr	r3, [sp, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	dd37      	ble.n	800fdda <_dtoa_r+0x43a>
 800fd6a:	1e7b      	subs	r3, r7, #1
 800fd6c:	9304      	str	r3, [sp, #16]
 800fd6e:	4620      	mov	r0, r4
 800fd70:	4b7d      	ldr	r3, [pc, #500]	@ (800ff68 <_dtoa_r+0x5c8>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	4629      	mov	r1, r5
 800fd76:	f7f0 fc5f 	bl	8000638 <__aeabi_dmul>
 800fd7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd7e:	9c00      	ldr	r4, [sp, #0]
 800fd80:	3601      	adds	r6, #1
 800fd82:	4630      	mov	r0, r6
 800fd84:	f7f0 fbee 	bl	8000564 <__aeabi_i2d>
 800fd88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd8c:	f7f0 fc54 	bl	8000638 <__aeabi_dmul>
 800fd90:	4b76      	ldr	r3, [pc, #472]	@ (800ff6c <_dtoa_r+0x5cc>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	f7f0 fa9a 	bl	80002cc <__adddf3>
 800fd98:	4605      	mov	r5, r0
 800fd9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fd9e:	2c00      	cmp	r4, #0
 800fda0:	f040 808d 	bne.w	800febe <_dtoa_r+0x51e>
 800fda4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fda8:	4b71      	ldr	r3, [pc, #452]	@ (800ff70 <_dtoa_r+0x5d0>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f7f0 fa8c 	bl	80002c8 <__aeabi_dsub>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fdb8:	462a      	mov	r2, r5
 800fdba:	4633      	mov	r3, r6
 800fdbc:	f7f0 fecc 	bl	8000b58 <__aeabi_dcmpgt>
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	f040 828b 	bne.w	80102dc <_dtoa_r+0x93c>
 800fdc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdca:	462a      	mov	r2, r5
 800fdcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fdd0:	f7f0 fea4 	bl	8000b1c <__aeabi_dcmplt>
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	f040 8128 	bne.w	801002a <_dtoa_r+0x68a>
 800fdda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fdde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fde2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f2c0 815a 	blt.w	801009e <_dtoa_r+0x6fe>
 800fdea:	2f0e      	cmp	r7, #14
 800fdec:	f300 8157 	bgt.w	801009e <_dtoa_r+0x6fe>
 800fdf0:	4b5a      	ldr	r3, [pc, #360]	@ (800ff5c <_dtoa_r+0x5bc>)
 800fdf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fdf6:	ed93 7b00 	vldr	d7, [r3]
 800fdfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	ed8d 7b00 	vstr	d7, [sp]
 800fe02:	da03      	bge.n	800fe0c <_dtoa_r+0x46c>
 800fe04:	9b07      	ldr	r3, [sp, #28]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	f340 8101 	ble.w	801000e <_dtoa_r+0x66e>
 800fe0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fe10:	4656      	mov	r6, sl
 800fe12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe16:	4620      	mov	r0, r4
 800fe18:	4629      	mov	r1, r5
 800fe1a:	f7f0 fd37 	bl	800088c <__aeabi_ddiv>
 800fe1e:	f7f0 febb 	bl	8000b98 <__aeabi_d2iz>
 800fe22:	4680      	mov	r8, r0
 800fe24:	f7f0 fb9e 	bl	8000564 <__aeabi_i2d>
 800fe28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe2c:	f7f0 fc04 	bl	8000638 <__aeabi_dmul>
 800fe30:	4602      	mov	r2, r0
 800fe32:	460b      	mov	r3, r1
 800fe34:	4620      	mov	r0, r4
 800fe36:	4629      	mov	r1, r5
 800fe38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fe3c:	f7f0 fa44 	bl	80002c8 <__aeabi_dsub>
 800fe40:	f806 4b01 	strb.w	r4, [r6], #1
 800fe44:	9d07      	ldr	r5, [sp, #28]
 800fe46:	eba6 040a 	sub.w	r4, r6, sl
 800fe4a:	42a5      	cmp	r5, r4
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	460b      	mov	r3, r1
 800fe50:	f040 8117 	bne.w	8010082 <_dtoa_r+0x6e2>
 800fe54:	f7f0 fa3a 	bl	80002cc <__adddf3>
 800fe58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	460d      	mov	r5, r1
 800fe60:	f7f0 fe7a 	bl	8000b58 <__aeabi_dcmpgt>
 800fe64:	2800      	cmp	r0, #0
 800fe66:	f040 80f9 	bne.w	801005c <_dtoa_r+0x6bc>
 800fe6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe6e:	4620      	mov	r0, r4
 800fe70:	4629      	mov	r1, r5
 800fe72:	f7f0 fe49 	bl	8000b08 <__aeabi_dcmpeq>
 800fe76:	b118      	cbz	r0, 800fe80 <_dtoa_r+0x4e0>
 800fe78:	f018 0f01 	tst.w	r8, #1
 800fe7c:	f040 80ee 	bne.w	801005c <_dtoa_r+0x6bc>
 800fe80:	4649      	mov	r1, r9
 800fe82:	4658      	mov	r0, fp
 800fe84:	f000 fc90 	bl	80107a8 <_Bfree>
 800fe88:	2300      	movs	r3, #0
 800fe8a:	7033      	strb	r3, [r6, #0]
 800fe8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fe8e:	3701      	adds	r7, #1
 800fe90:	601f      	str	r7, [r3, #0]
 800fe92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f000 831d 	beq.w	80104d4 <_dtoa_r+0xb34>
 800fe9a:	601e      	str	r6, [r3, #0]
 800fe9c:	e31a      	b.n	80104d4 <_dtoa_r+0xb34>
 800fe9e:	07e2      	lsls	r2, r4, #31
 800fea0:	d505      	bpl.n	800feae <_dtoa_r+0x50e>
 800fea2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fea6:	f7f0 fbc7 	bl	8000638 <__aeabi_dmul>
 800feaa:	3601      	adds	r6, #1
 800feac:	2301      	movs	r3, #1
 800feae:	1064      	asrs	r4, r4, #1
 800feb0:	3508      	adds	r5, #8
 800feb2:	e73f      	b.n	800fd34 <_dtoa_r+0x394>
 800feb4:	2602      	movs	r6, #2
 800feb6:	e742      	b.n	800fd3e <_dtoa_r+0x39e>
 800feb8:	9c07      	ldr	r4, [sp, #28]
 800feba:	9704      	str	r7, [sp, #16]
 800febc:	e761      	b.n	800fd82 <_dtoa_r+0x3e2>
 800febe:	4b27      	ldr	r3, [pc, #156]	@ (800ff5c <_dtoa_r+0x5bc>)
 800fec0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fec2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fec6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800feca:	4454      	add	r4, sl
 800fecc:	2900      	cmp	r1, #0
 800fece:	d053      	beq.n	800ff78 <_dtoa_r+0x5d8>
 800fed0:	4928      	ldr	r1, [pc, #160]	@ (800ff74 <_dtoa_r+0x5d4>)
 800fed2:	2000      	movs	r0, #0
 800fed4:	f7f0 fcda 	bl	800088c <__aeabi_ddiv>
 800fed8:	4633      	mov	r3, r6
 800feda:	462a      	mov	r2, r5
 800fedc:	f7f0 f9f4 	bl	80002c8 <__aeabi_dsub>
 800fee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fee4:	4656      	mov	r6, sl
 800fee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800feea:	f7f0 fe55 	bl	8000b98 <__aeabi_d2iz>
 800feee:	4605      	mov	r5, r0
 800fef0:	f7f0 fb38 	bl	8000564 <__aeabi_i2d>
 800fef4:	4602      	mov	r2, r0
 800fef6:	460b      	mov	r3, r1
 800fef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fefc:	f7f0 f9e4 	bl	80002c8 <__aeabi_dsub>
 800ff00:	3530      	adds	r5, #48	@ 0x30
 800ff02:	4602      	mov	r2, r0
 800ff04:	460b      	mov	r3, r1
 800ff06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff0a:	f806 5b01 	strb.w	r5, [r6], #1
 800ff0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff12:	f7f0 fe03 	bl	8000b1c <__aeabi_dcmplt>
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d171      	bne.n	800fffe <_dtoa_r+0x65e>
 800ff1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff1e:	4911      	ldr	r1, [pc, #68]	@ (800ff64 <_dtoa_r+0x5c4>)
 800ff20:	2000      	movs	r0, #0
 800ff22:	f7f0 f9d1 	bl	80002c8 <__aeabi_dsub>
 800ff26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff2a:	f7f0 fdf7 	bl	8000b1c <__aeabi_dcmplt>
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	f040 8095 	bne.w	801005e <_dtoa_r+0x6be>
 800ff34:	42a6      	cmp	r6, r4
 800ff36:	f43f af50 	beq.w	800fdda <_dtoa_r+0x43a>
 800ff3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ff3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ff68 <_dtoa_r+0x5c8>)
 800ff40:	2200      	movs	r2, #0
 800ff42:	f7f0 fb79 	bl	8000638 <__aeabi_dmul>
 800ff46:	4b08      	ldr	r3, [pc, #32]	@ (800ff68 <_dtoa_r+0x5c8>)
 800ff48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff52:	f7f0 fb71 	bl	8000638 <__aeabi_dmul>
 800ff56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff5a:	e7c4      	b.n	800fee6 <_dtoa_r+0x546>
 800ff5c:	08014310 	.word	0x08014310
 800ff60:	080142e8 	.word	0x080142e8
 800ff64:	3ff00000 	.word	0x3ff00000
 800ff68:	40240000 	.word	0x40240000
 800ff6c:	401c0000 	.word	0x401c0000
 800ff70:	40140000 	.word	0x40140000
 800ff74:	3fe00000 	.word	0x3fe00000
 800ff78:	4631      	mov	r1, r6
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	f7f0 fb5c 	bl	8000638 <__aeabi_dmul>
 800ff80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff84:	9415      	str	r4, [sp, #84]	@ 0x54
 800ff86:	4656      	mov	r6, sl
 800ff88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff8c:	f7f0 fe04 	bl	8000b98 <__aeabi_d2iz>
 800ff90:	4605      	mov	r5, r0
 800ff92:	f7f0 fae7 	bl	8000564 <__aeabi_i2d>
 800ff96:	4602      	mov	r2, r0
 800ff98:	460b      	mov	r3, r1
 800ff9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff9e:	f7f0 f993 	bl	80002c8 <__aeabi_dsub>
 800ffa2:	3530      	adds	r5, #48	@ 0x30
 800ffa4:	f806 5b01 	strb.w	r5, [r6], #1
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	460b      	mov	r3, r1
 800ffac:	42a6      	cmp	r6, r4
 800ffae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ffb2:	f04f 0200 	mov.w	r2, #0
 800ffb6:	d124      	bne.n	8010002 <_dtoa_r+0x662>
 800ffb8:	4bac      	ldr	r3, [pc, #688]	@ (801026c <_dtoa_r+0x8cc>)
 800ffba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ffbe:	f7f0 f985 	bl	80002cc <__adddf3>
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffca:	f7f0 fdc5 	bl	8000b58 <__aeabi_dcmpgt>
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	d145      	bne.n	801005e <_dtoa_r+0x6be>
 800ffd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ffd6:	49a5      	ldr	r1, [pc, #660]	@ (801026c <_dtoa_r+0x8cc>)
 800ffd8:	2000      	movs	r0, #0
 800ffda:	f7f0 f975 	bl	80002c8 <__aeabi_dsub>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffe6:	f7f0 fd99 	bl	8000b1c <__aeabi_dcmplt>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	f43f aef5 	beq.w	800fdda <_dtoa_r+0x43a>
 800fff0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fff2:	1e73      	subs	r3, r6, #1
 800fff4:	9315      	str	r3, [sp, #84]	@ 0x54
 800fff6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fffa:	2b30      	cmp	r3, #48	@ 0x30
 800fffc:	d0f8      	beq.n	800fff0 <_dtoa_r+0x650>
 800fffe:	9f04      	ldr	r7, [sp, #16]
 8010000:	e73e      	b.n	800fe80 <_dtoa_r+0x4e0>
 8010002:	4b9b      	ldr	r3, [pc, #620]	@ (8010270 <_dtoa_r+0x8d0>)
 8010004:	f7f0 fb18 	bl	8000638 <__aeabi_dmul>
 8010008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801000c:	e7bc      	b.n	800ff88 <_dtoa_r+0x5e8>
 801000e:	d10c      	bne.n	801002a <_dtoa_r+0x68a>
 8010010:	4b98      	ldr	r3, [pc, #608]	@ (8010274 <_dtoa_r+0x8d4>)
 8010012:	2200      	movs	r2, #0
 8010014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010018:	f7f0 fb0e 	bl	8000638 <__aeabi_dmul>
 801001c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010020:	f7f0 fd90 	bl	8000b44 <__aeabi_dcmpge>
 8010024:	2800      	cmp	r0, #0
 8010026:	f000 8157 	beq.w	80102d8 <_dtoa_r+0x938>
 801002a:	2400      	movs	r4, #0
 801002c:	4625      	mov	r5, r4
 801002e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010030:	43db      	mvns	r3, r3
 8010032:	9304      	str	r3, [sp, #16]
 8010034:	4656      	mov	r6, sl
 8010036:	2700      	movs	r7, #0
 8010038:	4621      	mov	r1, r4
 801003a:	4658      	mov	r0, fp
 801003c:	f000 fbb4 	bl	80107a8 <_Bfree>
 8010040:	2d00      	cmp	r5, #0
 8010042:	d0dc      	beq.n	800fffe <_dtoa_r+0x65e>
 8010044:	b12f      	cbz	r7, 8010052 <_dtoa_r+0x6b2>
 8010046:	42af      	cmp	r7, r5
 8010048:	d003      	beq.n	8010052 <_dtoa_r+0x6b2>
 801004a:	4639      	mov	r1, r7
 801004c:	4658      	mov	r0, fp
 801004e:	f000 fbab 	bl	80107a8 <_Bfree>
 8010052:	4629      	mov	r1, r5
 8010054:	4658      	mov	r0, fp
 8010056:	f000 fba7 	bl	80107a8 <_Bfree>
 801005a:	e7d0      	b.n	800fffe <_dtoa_r+0x65e>
 801005c:	9704      	str	r7, [sp, #16]
 801005e:	4633      	mov	r3, r6
 8010060:	461e      	mov	r6, r3
 8010062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010066:	2a39      	cmp	r2, #57	@ 0x39
 8010068:	d107      	bne.n	801007a <_dtoa_r+0x6da>
 801006a:	459a      	cmp	sl, r3
 801006c:	d1f8      	bne.n	8010060 <_dtoa_r+0x6c0>
 801006e:	9a04      	ldr	r2, [sp, #16]
 8010070:	3201      	adds	r2, #1
 8010072:	9204      	str	r2, [sp, #16]
 8010074:	2230      	movs	r2, #48	@ 0x30
 8010076:	f88a 2000 	strb.w	r2, [sl]
 801007a:	781a      	ldrb	r2, [r3, #0]
 801007c:	3201      	adds	r2, #1
 801007e:	701a      	strb	r2, [r3, #0]
 8010080:	e7bd      	b.n	800fffe <_dtoa_r+0x65e>
 8010082:	4b7b      	ldr	r3, [pc, #492]	@ (8010270 <_dtoa_r+0x8d0>)
 8010084:	2200      	movs	r2, #0
 8010086:	f7f0 fad7 	bl	8000638 <__aeabi_dmul>
 801008a:	2200      	movs	r2, #0
 801008c:	2300      	movs	r3, #0
 801008e:	4604      	mov	r4, r0
 8010090:	460d      	mov	r5, r1
 8010092:	f7f0 fd39 	bl	8000b08 <__aeabi_dcmpeq>
 8010096:	2800      	cmp	r0, #0
 8010098:	f43f aebb 	beq.w	800fe12 <_dtoa_r+0x472>
 801009c:	e6f0      	b.n	800fe80 <_dtoa_r+0x4e0>
 801009e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100a0:	2a00      	cmp	r2, #0
 80100a2:	f000 80db 	beq.w	801025c <_dtoa_r+0x8bc>
 80100a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100a8:	2a01      	cmp	r2, #1
 80100aa:	f300 80bf 	bgt.w	801022c <_dtoa_r+0x88c>
 80100ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80100b0:	2a00      	cmp	r2, #0
 80100b2:	f000 80b7 	beq.w	8010224 <_dtoa_r+0x884>
 80100b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80100ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80100bc:	4646      	mov	r6, r8
 80100be:	9a08      	ldr	r2, [sp, #32]
 80100c0:	2101      	movs	r1, #1
 80100c2:	441a      	add	r2, r3
 80100c4:	4658      	mov	r0, fp
 80100c6:	4498      	add	r8, r3
 80100c8:	9208      	str	r2, [sp, #32]
 80100ca:	f000 fc6b 	bl	80109a4 <__i2b>
 80100ce:	4605      	mov	r5, r0
 80100d0:	b15e      	cbz	r6, 80100ea <_dtoa_r+0x74a>
 80100d2:	9b08      	ldr	r3, [sp, #32]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	dd08      	ble.n	80100ea <_dtoa_r+0x74a>
 80100d8:	42b3      	cmp	r3, r6
 80100da:	9a08      	ldr	r2, [sp, #32]
 80100dc:	bfa8      	it	ge
 80100de:	4633      	movge	r3, r6
 80100e0:	eba8 0803 	sub.w	r8, r8, r3
 80100e4:	1af6      	subs	r6, r6, r3
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	9308      	str	r3, [sp, #32]
 80100ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100ec:	b1f3      	cbz	r3, 801012c <_dtoa_r+0x78c>
 80100ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f000 80b7 	beq.w	8010264 <_dtoa_r+0x8c4>
 80100f6:	b18c      	cbz	r4, 801011c <_dtoa_r+0x77c>
 80100f8:	4629      	mov	r1, r5
 80100fa:	4622      	mov	r2, r4
 80100fc:	4658      	mov	r0, fp
 80100fe:	f000 fd11 	bl	8010b24 <__pow5mult>
 8010102:	464a      	mov	r2, r9
 8010104:	4601      	mov	r1, r0
 8010106:	4605      	mov	r5, r0
 8010108:	4658      	mov	r0, fp
 801010a:	f000 fc61 	bl	80109d0 <__multiply>
 801010e:	4649      	mov	r1, r9
 8010110:	9004      	str	r0, [sp, #16]
 8010112:	4658      	mov	r0, fp
 8010114:	f000 fb48 	bl	80107a8 <_Bfree>
 8010118:	9b04      	ldr	r3, [sp, #16]
 801011a:	4699      	mov	r9, r3
 801011c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801011e:	1b1a      	subs	r2, r3, r4
 8010120:	d004      	beq.n	801012c <_dtoa_r+0x78c>
 8010122:	4649      	mov	r1, r9
 8010124:	4658      	mov	r0, fp
 8010126:	f000 fcfd 	bl	8010b24 <__pow5mult>
 801012a:	4681      	mov	r9, r0
 801012c:	2101      	movs	r1, #1
 801012e:	4658      	mov	r0, fp
 8010130:	f000 fc38 	bl	80109a4 <__i2b>
 8010134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010136:	4604      	mov	r4, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	f000 81cf 	beq.w	80104dc <_dtoa_r+0xb3c>
 801013e:	461a      	mov	r2, r3
 8010140:	4601      	mov	r1, r0
 8010142:	4658      	mov	r0, fp
 8010144:	f000 fcee 	bl	8010b24 <__pow5mult>
 8010148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801014a:	2b01      	cmp	r3, #1
 801014c:	4604      	mov	r4, r0
 801014e:	f300 8095 	bgt.w	801027c <_dtoa_r+0x8dc>
 8010152:	9b02      	ldr	r3, [sp, #8]
 8010154:	2b00      	cmp	r3, #0
 8010156:	f040 8087 	bne.w	8010268 <_dtoa_r+0x8c8>
 801015a:	9b03      	ldr	r3, [sp, #12]
 801015c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010160:	2b00      	cmp	r3, #0
 8010162:	f040 8089 	bne.w	8010278 <_dtoa_r+0x8d8>
 8010166:	9b03      	ldr	r3, [sp, #12]
 8010168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801016c:	0d1b      	lsrs	r3, r3, #20
 801016e:	051b      	lsls	r3, r3, #20
 8010170:	b12b      	cbz	r3, 801017e <_dtoa_r+0x7de>
 8010172:	9b08      	ldr	r3, [sp, #32]
 8010174:	3301      	adds	r3, #1
 8010176:	9308      	str	r3, [sp, #32]
 8010178:	f108 0801 	add.w	r8, r8, #1
 801017c:	2301      	movs	r3, #1
 801017e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010182:	2b00      	cmp	r3, #0
 8010184:	f000 81b0 	beq.w	80104e8 <_dtoa_r+0xb48>
 8010188:	6923      	ldr	r3, [r4, #16]
 801018a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801018e:	6918      	ldr	r0, [r3, #16]
 8010190:	f000 fbbc 	bl	801090c <__hi0bits>
 8010194:	f1c0 0020 	rsb	r0, r0, #32
 8010198:	9b08      	ldr	r3, [sp, #32]
 801019a:	4418      	add	r0, r3
 801019c:	f010 001f 	ands.w	r0, r0, #31
 80101a0:	d077      	beq.n	8010292 <_dtoa_r+0x8f2>
 80101a2:	f1c0 0320 	rsb	r3, r0, #32
 80101a6:	2b04      	cmp	r3, #4
 80101a8:	dd6b      	ble.n	8010282 <_dtoa_r+0x8e2>
 80101aa:	9b08      	ldr	r3, [sp, #32]
 80101ac:	f1c0 001c 	rsb	r0, r0, #28
 80101b0:	4403      	add	r3, r0
 80101b2:	4480      	add	r8, r0
 80101b4:	4406      	add	r6, r0
 80101b6:	9308      	str	r3, [sp, #32]
 80101b8:	f1b8 0f00 	cmp.w	r8, #0
 80101bc:	dd05      	ble.n	80101ca <_dtoa_r+0x82a>
 80101be:	4649      	mov	r1, r9
 80101c0:	4642      	mov	r2, r8
 80101c2:	4658      	mov	r0, fp
 80101c4:	f000 fd08 	bl	8010bd8 <__lshift>
 80101c8:	4681      	mov	r9, r0
 80101ca:	9b08      	ldr	r3, [sp, #32]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	dd05      	ble.n	80101dc <_dtoa_r+0x83c>
 80101d0:	4621      	mov	r1, r4
 80101d2:	461a      	mov	r2, r3
 80101d4:	4658      	mov	r0, fp
 80101d6:	f000 fcff 	bl	8010bd8 <__lshift>
 80101da:	4604      	mov	r4, r0
 80101dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d059      	beq.n	8010296 <_dtoa_r+0x8f6>
 80101e2:	4621      	mov	r1, r4
 80101e4:	4648      	mov	r0, r9
 80101e6:	f000 fd63 	bl	8010cb0 <__mcmp>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	da53      	bge.n	8010296 <_dtoa_r+0x8f6>
 80101ee:	1e7b      	subs	r3, r7, #1
 80101f0:	9304      	str	r3, [sp, #16]
 80101f2:	4649      	mov	r1, r9
 80101f4:	2300      	movs	r3, #0
 80101f6:	220a      	movs	r2, #10
 80101f8:	4658      	mov	r0, fp
 80101fa:	f000 faf7 	bl	80107ec <__multadd>
 80101fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010200:	4681      	mov	r9, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	f000 8172 	beq.w	80104ec <_dtoa_r+0xb4c>
 8010208:	2300      	movs	r3, #0
 801020a:	4629      	mov	r1, r5
 801020c:	220a      	movs	r2, #10
 801020e:	4658      	mov	r0, fp
 8010210:	f000 faec 	bl	80107ec <__multadd>
 8010214:	9b00      	ldr	r3, [sp, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	4605      	mov	r5, r0
 801021a:	dc67      	bgt.n	80102ec <_dtoa_r+0x94c>
 801021c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801021e:	2b02      	cmp	r3, #2
 8010220:	dc41      	bgt.n	80102a6 <_dtoa_r+0x906>
 8010222:	e063      	b.n	80102ec <_dtoa_r+0x94c>
 8010224:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010226:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801022a:	e746      	b.n	80100ba <_dtoa_r+0x71a>
 801022c:	9b07      	ldr	r3, [sp, #28]
 801022e:	1e5c      	subs	r4, r3, #1
 8010230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010232:	42a3      	cmp	r3, r4
 8010234:	bfbf      	itttt	lt
 8010236:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010238:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801023a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801023c:	1ae3      	sublt	r3, r4, r3
 801023e:	bfb4      	ite	lt
 8010240:	18d2      	addlt	r2, r2, r3
 8010242:	1b1c      	subge	r4, r3, r4
 8010244:	9b07      	ldr	r3, [sp, #28]
 8010246:	bfbc      	itt	lt
 8010248:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801024a:	2400      	movlt	r4, #0
 801024c:	2b00      	cmp	r3, #0
 801024e:	bfb5      	itete	lt
 8010250:	eba8 0603 	sublt.w	r6, r8, r3
 8010254:	9b07      	ldrge	r3, [sp, #28]
 8010256:	2300      	movlt	r3, #0
 8010258:	4646      	movge	r6, r8
 801025a:	e730      	b.n	80100be <_dtoa_r+0x71e>
 801025c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801025e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010260:	4646      	mov	r6, r8
 8010262:	e735      	b.n	80100d0 <_dtoa_r+0x730>
 8010264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010266:	e75c      	b.n	8010122 <_dtoa_r+0x782>
 8010268:	2300      	movs	r3, #0
 801026a:	e788      	b.n	801017e <_dtoa_r+0x7de>
 801026c:	3fe00000 	.word	0x3fe00000
 8010270:	40240000 	.word	0x40240000
 8010274:	40140000 	.word	0x40140000
 8010278:	9b02      	ldr	r3, [sp, #8]
 801027a:	e780      	b.n	801017e <_dtoa_r+0x7de>
 801027c:	2300      	movs	r3, #0
 801027e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010280:	e782      	b.n	8010188 <_dtoa_r+0x7e8>
 8010282:	d099      	beq.n	80101b8 <_dtoa_r+0x818>
 8010284:	9a08      	ldr	r2, [sp, #32]
 8010286:	331c      	adds	r3, #28
 8010288:	441a      	add	r2, r3
 801028a:	4498      	add	r8, r3
 801028c:	441e      	add	r6, r3
 801028e:	9208      	str	r2, [sp, #32]
 8010290:	e792      	b.n	80101b8 <_dtoa_r+0x818>
 8010292:	4603      	mov	r3, r0
 8010294:	e7f6      	b.n	8010284 <_dtoa_r+0x8e4>
 8010296:	9b07      	ldr	r3, [sp, #28]
 8010298:	9704      	str	r7, [sp, #16]
 801029a:	2b00      	cmp	r3, #0
 801029c:	dc20      	bgt.n	80102e0 <_dtoa_r+0x940>
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	dd1e      	ble.n	80102e4 <_dtoa_r+0x944>
 80102a6:	9b00      	ldr	r3, [sp, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f47f aec0 	bne.w	801002e <_dtoa_r+0x68e>
 80102ae:	4621      	mov	r1, r4
 80102b0:	2205      	movs	r2, #5
 80102b2:	4658      	mov	r0, fp
 80102b4:	f000 fa9a 	bl	80107ec <__multadd>
 80102b8:	4601      	mov	r1, r0
 80102ba:	4604      	mov	r4, r0
 80102bc:	4648      	mov	r0, r9
 80102be:	f000 fcf7 	bl	8010cb0 <__mcmp>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	f77f aeb3 	ble.w	801002e <_dtoa_r+0x68e>
 80102c8:	4656      	mov	r6, sl
 80102ca:	2331      	movs	r3, #49	@ 0x31
 80102cc:	f806 3b01 	strb.w	r3, [r6], #1
 80102d0:	9b04      	ldr	r3, [sp, #16]
 80102d2:	3301      	adds	r3, #1
 80102d4:	9304      	str	r3, [sp, #16]
 80102d6:	e6ae      	b.n	8010036 <_dtoa_r+0x696>
 80102d8:	9c07      	ldr	r4, [sp, #28]
 80102da:	9704      	str	r7, [sp, #16]
 80102dc:	4625      	mov	r5, r4
 80102de:	e7f3      	b.n	80102c8 <_dtoa_r+0x928>
 80102e0:	9b07      	ldr	r3, [sp, #28]
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f000 8104 	beq.w	80104f4 <_dtoa_r+0xb54>
 80102ec:	2e00      	cmp	r6, #0
 80102ee:	dd05      	ble.n	80102fc <_dtoa_r+0x95c>
 80102f0:	4629      	mov	r1, r5
 80102f2:	4632      	mov	r2, r6
 80102f4:	4658      	mov	r0, fp
 80102f6:	f000 fc6f 	bl	8010bd8 <__lshift>
 80102fa:	4605      	mov	r5, r0
 80102fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d05a      	beq.n	80103b8 <_dtoa_r+0xa18>
 8010302:	6869      	ldr	r1, [r5, #4]
 8010304:	4658      	mov	r0, fp
 8010306:	f000 fa0f 	bl	8010728 <_Balloc>
 801030a:	4606      	mov	r6, r0
 801030c:	b928      	cbnz	r0, 801031a <_dtoa_r+0x97a>
 801030e:	4b84      	ldr	r3, [pc, #528]	@ (8010520 <_dtoa_r+0xb80>)
 8010310:	4602      	mov	r2, r0
 8010312:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010316:	f7ff bb5a 	b.w	800f9ce <_dtoa_r+0x2e>
 801031a:	692a      	ldr	r2, [r5, #16]
 801031c:	3202      	adds	r2, #2
 801031e:	0092      	lsls	r2, r2, #2
 8010320:	f105 010c 	add.w	r1, r5, #12
 8010324:	300c      	adds	r0, #12
 8010326:	f002 f93b 	bl	80125a0 <memcpy>
 801032a:	2201      	movs	r2, #1
 801032c:	4631      	mov	r1, r6
 801032e:	4658      	mov	r0, fp
 8010330:	f000 fc52 	bl	8010bd8 <__lshift>
 8010334:	f10a 0301 	add.w	r3, sl, #1
 8010338:	9307      	str	r3, [sp, #28]
 801033a:	9b00      	ldr	r3, [sp, #0]
 801033c:	4453      	add	r3, sl
 801033e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010340:	9b02      	ldr	r3, [sp, #8]
 8010342:	f003 0301 	and.w	r3, r3, #1
 8010346:	462f      	mov	r7, r5
 8010348:	930a      	str	r3, [sp, #40]	@ 0x28
 801034a:	4605      	mov	r5, r0
 801034c:	9b07      	ldr	r3, [sp, #28]
 801034e:	4621      	mov	r1, r4
 8010350:	3b01      	subs	r3, #1
 8010352:	4648      	mov	r0, r9
 8010354:	9300      	str	r3, [sp, #0]
 8010356:	f7ff fa9b 	bl	800f890 <quorem>
 801035a:	4639      	mov	r1, r7
 801035c:	9002      	str	r0, [sp, #8]
 801035e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010362:	4648      	mov	r0, r9
 8010364:	f000 fca4 	bl	8010cb0 <__mcmp>
 8010368:	462a      	mov	r2, r5
 801036a:	9008      	str	r0, [sp, #32]
 801036c:	4621      	mov	r1, r4
 801036e:	4658      	mov	r0, fp
 8010370:	f000 fcba 	bl	8010ce8 <__mdiff>
 8010374:	68c2      	ldr	r2, [r0, #12]
 8010376:	4606      	mov	r6, r0
 8010378:	bb02      	cbnz	r2, 80103bc <_dtoa_r+0xa1c>
 801037a:	4601      	mov	r1, r0
 801037c:	4648      	mov	r0, r9
 801037e:	f000 fc97 	bl	8010cb0 <__mcmp>
 8010382:	4602      	mov	r2, r0
 8010384:	4631      	mov	r1, r6
 8010386:	4658      	mov	r0, fp
 8010388:	920e      	str	r2, [sp, #56]	@ 0x38
 801038a:	f000 fa0d 	bl	80107a8 <_Bfree>
 801038e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010390:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010392:	9e07      	ldr	r6, [sp, #28]
 8010394:	ea43 0102 	orr.w	r1, r3, r2
 8010398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801039a:	4319      	orrs	r1, r3
 801039c:	d110      	bne.n	80103c0 <_dtoa_r+0xa20>
 801039e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80103a2:	d029      	beq.n	80103f8 <_dtoa_r+0xa58>
 80103a4:	9b08      	ldr	r3, [sp, #32]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	dd02      	ble.n	80103b0 <_dtoa_r+0xa10>
 80103aa:	9b02      	ldr	r3, [sp, #8]
 80103ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80103b0:	9b00      	ldr	r3, [sp, #0]
 80103b2:	f883 8000 	strb.w	r8, [r3]
 80103b6:	e63f      	b.n	8010038 <_dtoa_r+0x698>
 80103b8:	4628      	mov	r0, r5
 80103ba:	e7bb      	b.n	8010334 <_dtoa_r+0x994>
 80103bc:	2201      	movs	r2, #1
 80103be:	e7e1      	b.n	8010384 <_dtoa_r+0x9e4>
 80103c0:	9b08      	ldr	r3, [sp, #32]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	db04      	blt.n	80103d0 <_dtoa_r+0xa30>
 80103c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80103c8:	430b      	orrs	r3, r1
 80103ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80103cc:	430b      	orrs	r3, r1
 80103ce:	d120      	bne.n	8010412 <_dtoa_r+0xa72>
 80103d0:	2a00      	cmp	r2, #0
 80103d2:	dded      	ble.n	80103b0 <_dtoa_r+0xa10>
 80103d4:	4649      	mov	r1, r9
 80103d6:	2201      	movs	r2, #1
 80103d8:	4658      	mov	r0, fp
 80103da:	f000 fbfd 	bl	8010bd8 <__lshift>
 80103de:	4621      	mov	r1, r4
 80103e0:	4681      	mov	r9, r0
 80103e2:	f000 fc65 	bl	8010cb0 <__mcmp>
 80103e6:	2800      	cmp	r0, #0
 80103e8:	dc03      	bgt.n	80103f2 <_dtoa_r+0xa52>
 80103ea:	d1e1      	bne.n	80103b0 <_dtoa_r+0xa10>
 80103ec:	f018 0f01 	tst.w	r8, #1
 80103f0:	d0de      	beq.n	80103b0 <_dtoa_r+0xa10>
 80103f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80103f6:	d1d8      	bne.n	80103aa <_dtoa_r+0xa0a>
 80103f8:	9a00      	ldr	r2, [sp, #0]
 80103fa:	2339      	movs	r3, #57	@ 0x39
 80103fc:	7013      	strb	r3, [r2, #0]
 80103fe:	4633      	mov	r3, r6
 8010400:	461e      	mov	r6, r3
 8010402:	3b01      	subs	r3, #1
 8010404:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010408:	2a39      	cmp	r2, #57	@ 0x39
 801040a:	d052      	beq.n	80104b2 <_dtoa_r+0xb12>
 801040c:	3201      	adds	r2, #1
 801040e:	701a      	strb	r2, [r3, #0]
 8010410:	e612      	b.n	8010038 <_dtoa_r+0x698>
 8010412:	2a00      	cmp	r2, #0
 8010414:	dd07      	ble.n	8010426 <_dtoa_r+0xa86>
 8010416:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801041a:	d0ed      	beq.n	80103f8 <_dtoa_r+0xa58>
 801041c:	9a00      	ldr	r2, [sp, #0]
 801041e:	f108 0301 	add.w	r3, r8, #1
 8010422:	7013      	strb	r3, [r2, #0]
 8010424:	e608      	b.n	8010038 <_dtoa_r+0x698>
 8010426:	9b07      	ldr	r3, [sp, #28]
 8010428:	9a07      	ldr	r2, [sp, #28]
 801042a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801042e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010430:	4293      	cmp	r3, r2
 8010432:	d028      	beq.n	8010486 <_dtoa_r+0xae6>
 8010434:	4649      	mov	r1, r9
 8010436:	2300      	movs	r3, #0
 8010438:	220a      	movs	r2, #10
 801043a:	4658      	mov	r0, fp
 801043c:	f000 f9d6 	bl	80107ec <__multadd>
 8010440:	42af      	cmp	r7, r5
 8010442:	4681      	mov	r9, r0
 8010444:	f04f 0300 	mov.w	r3, #0
 8010448:	f04f 020a 	mov.w	r2, #10
 801044c:	4639      	mov	r1, r7
 801044e:	4658      	mov	r0, fp
 8010450:	d107      	bne.n	8010462 <_dtoa_r+0xac2>
 8010452:	f000 f9cb 	bl	80107ec <__multadd>
 8010456:	4607      	mov	r7, r0
 8010458:	4605      	mov	r5, r0
 801045a:	9b07      	ldr	r3, [sp, #28]
 801045c:	3301      	adds	r3, #1
 801045e:	9307      	str	r3, [sp, #28]
 8010460:	e774      	b.n	801034c <_dtoa_r+0x9ac>
 8010462:	f000 f9c3 	bl	80107ec <__multadd>
 8010466:	4629      	mov	r1, r5
 8010468:	4607      	mov	r7, r0
 801046a:	2300      	movs	r3, #0
 801046c:	220a      	movs	r2, #10
 801046e:	4658      	mov	r0, fp
 8010470:	f000 f9bc 	bl	80107ec <__multadd>
 8010474:	4605      	mov	r5, r0
 8010476:	e7f0      	b.n	801045a <_dtoa_r+0xaba>
 8010478:	9b00      	ldr	r3, [sp, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	bfcc      	ite	gt
 801047e:	461e      	movgt	r6, r3
 8010480:	2601      	movle	r6, #1
 8010482:	4456      	add	r6, sl
 8010484:	2700      	movs	r7, #0
 8010486:	4649      	mov	r1, r9
 8010488:	2201      	movs	r2, #1
 801048a:	4658      	mov	r0, fp
 801048c:	f000 fba4 	bl	8010bd8 <__lshift>
 8010490:	4621      	mov	r1, r4
 8010492:	4681      	mov	r9, r0
 8010494:	f000 fc0c 	bl	8010cb0 <__mcmp>
 8010498:	2800      	cmp	r0, #0
 801049a:	dcb0      	bgt.n	80103fe <_dtoa_r+0xa5e>
 801049c:	d102      	bne.n	80104a4 <_dtoa_r+0xb04>
 801049e:	f018 0f01 	tst.w	r8, #1
 80104a2:	d1ac      	bne.n	80103fe <_dtoa_r+0xa5e>
 80104a4:	4633      	mov	r3, r6
 80104a6:	461e      	mov	r6, r3
 80104a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104ac:	2a30      	cmp	r2, #48	@ 0x30
 80104ae:	d0fa      	beq.n	80104a6 <_dtoa_r+0xb06>
 80104b0:	e5c2      	b.n	8010038 <_dtoa_r+0x698>
 80104b2:	459a      	cmp	sl, r3
 80104b4:	d1a4      	bne.n	8010400 <_dtoa_r+0xa60>
 80104b6:	9b04      	ldr	r3, [sp, #16]
 80104b8:	3301      	adds	r3, #1
 80104ba:	9304      	str	r3, [sp, #16]
 80104bc:	2331      	movs	r3, #49	@ 0x31
 80104be:	f88a 3000 	strb.w	r3, [sl]
 80104c2:	e5b9      	b.n	8010038 <_dtoa_r+0x698>
 80104c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80104c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010524 <_dtoa_r+0xb84>
 80104ca:	b11b      	cbz	r3, 80104d4 <_dtoa_r+0xb34>
 80104cc:	f10a 0308 	add.w	r3, sl, #8
 80104d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80104d2:	6013      	str	r3, [r2, #0]
 80104d4:	4650      	mov	r0, sl
 80104d6:	b019      	add	sp, #100	@ 0x64
 80104d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104de:	2b01      	cmp	r3, #1
 80104e0:	f77f ae37 	ble.w	8010152 <_dtoa_r+0x7b2>
 80104e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80104e8:	2001      	movs	r0, #1
 80104ea:	e655      	b.n	8010198 <_dtoa_r+0x7f8>
 80104ec:	9b00      	ldr	r3, [sp, #0]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	f77f aed6 	ble.w	80102a0 <_dtoa_r+0x900>
 80104f4:	4656      	mov	r6, sl
 80104f6:	4621      	mov	r1, r4
 80104f8:	4648      	mov	r0, r9
 80104fa:	f7ff f9c9 	bl	800f890 <quorem>
 80104fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010502:	f806 8b01 	strb.w	r8, [r6], #1
 8010506:	9b00      	ldr	r3, [sp, #0]
 8010508:	eba6 020a 	sub.w	r2, r6, sl
 801050c:	4293      	cmp	r3, r2
 801050e:	ddb3      	ble.n	8010478 <_dtoa_r+0xad8>
 8010510:	4649      	mov	r1, r9
 8010512:	2300      	movs	r3, #0
 8010514:	220a      	movs	r2, #10
 8010516:	4658      	mov	r0, fp
 8010518:	f000 f968 	bl	80107ec <__multadd>
 801051c:	4681      	mov	r9, r0
 801051e:	e7ea      	b.n	80104f6 <_dtoa_r+0xb56>
 8010520:	0801426d 	.word	0x0801426d
 8010524:	080141f1 	.word	0x080141f1

08010528 <_free_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4605      	mov	r5, r0
 801052c:	2900      	cmp	r1, #0
 801052e:	d041      	beq.n	80105b4 <_free_r+0x8c>
 8010530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010534:	1f0c      	subs	r4, r1, #4
 8010536:	2b00      	cmp	r3, #0
 8010538:	bfb8      	it	lt
 801053a:	18e4      	addlt	r4, r4, r3
 801053c:	f000 f8e8 	bl	8010710 <__malloc_lock>
 8010540:	4a1d      	ldr	r2, [pc, #116]	@ (80105b8 <_free_r+0x90>)
 8010542:	6813      	ldr	r3, [r2, #0]
 8010544:	b933      	cbnz	r3, 8010554 <_free_r+0x2c>
 8010546:	6063      	str	r3, [r4, #4]
 8010548:	6014      	str	r4, [r2, #0]
 801054a:	4628      	mov	r0, r5
 801054c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010550:	f000 b8e4 	b.w	801071c <__malloc_unlock>
 8010554:	42a3      	cmp	r3, r4
 8010556:	d908      	bls.n	801056a <_free_r+0x42>
 8010558:	6820      	ldr	r0, [r4, #0]
 801055a:	1821      	adds	r1, r4, r0
 801055c:	428b      	cmp	r3, r1
 801055e:	bf01      	itttt	eq
 8010560:	6819      	ldreq	r1, [r3, #0]
 8010562:	685b      	ldreq	r3, [r3, #4]
 8010564:	1809      	addeq	r1, r1, r0
 8010566:	6021      	streq	r1, [r4, #0]
 8010568:	e7ed      	b.n	8010546 <_free_r+0x1e>
 801056a:	461a      	mov	r2, r3
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	b10b      	cbz	r3, 8010574 <_free_r+0x4c>
 8010570:	42a3      	cmp	r3, r4
 8010572:	d9fa      	bls.n	801056a <_free_r+0x42>
 8010574:	6811      	ldr	r1, [r2, #0]
 8010576:	1850      	adds	r0, r2, r1
 8010578:	42a0      	cmp	r0, r4
 801057a:	d10b      	bne.n	8010594 <_free_r+0x6c>
 801057c:	6820      	ldr	r0, [r4, #0]
 801057e:	4401      	add	r1, r0
 8010580:	1850      	adds	r0, r2, r1
 8010582:	4283      	cmp	r3, r0
 8010584:	6011      	str	r1, [r2, #0]
 8010586:	d1e0      	bne.n	801054a <_free_r+0x22>
 8010588:	6818      	ldr	r0, [r3, #0]
 801058a:	685b      	ldr	r3, [r3, #4]
 801058c:	6053      	str	r3, [r2, #4]
 801058e:	4408      	add	r0, r1
 8010590:	6010      	str	r0, [r2, #0]
 8010592:	e7da      	b.n	801054a <_free_r+0x22>
 8010594:	d902      	bls.n	801059c <_free_r+0x74>
 8010596:	230c      	movs	r3, #12
 8010598:	602b      	str	r3, [r5, #0]
 801059a:	e7d6      	b.n	801054a <_free_r+0x22>
 801059c:	6820      	ldr	r0, [r4, #0]
 801059e:	1821      	adds	r1, r4, r0
 80105a0:	428b      	cmp	r3, r1
 80105a2:	bf04      	itt	eq
 80105a4:	6819      	ldreq	r1, [r3, #0]
 80105a6:	685b      	ldreq	r3, [r3, #4]
 80105a8:	6063      	str	r3, [r4, #4]
 80105aa:	bf04      	itt	eq
 80105ac:	1809      	addeq	r1, r1, r0
 80105ae:	6021      	streq	r1, [r4, #0]
 80105b0:	6054      	str	r4, [r2, #4]
 80105b2:	e7ca      	b.n	801054a <_free_r+0x22>
 80105b4:	bd38      	pop	{r3, r4, r5, pc}
 80105b6:	bf00      	nop
 80105b8:	20004480 	.word	0x20004480

080105bc <malloc>:
 80105bc:	4b02      	ldr	r3, [pc, #8]	@ (80105c8 <malloc+0xc>)
 80105be:	4601      	mov	r1, r0
 80105c0:	6818      	ldr	r0, [r3, #0]
 80105c2:	f000 b825 	b.w	8010610 <_malloc_r>
 80105c6:	bf00      	nop
 80105c8:	2000052c 	.word	0x2000052c

080105cc <sbrk_aligned>:
 80105cc:	b570      	push	{r4, r5, r6, lr}
 80105ce:	4e0f      	ldr	r6, [pc, #60]	@ (801060c <sbrk_aligned+0x40>)
 80105d0:	460c      	mov	r4, r1
 80105d2:	6831      	ldr	r1, [r6, #0]
 80105d4:	4605      	mov	r5, r0
 80105d6:	b911      	cbnz	r1, 80105de <sbrk_aligned+0x12>
 80105d8:	f001 ffd2 	bl	8012580 <_sbrk_r>
 80105dc:	6030      	str	r0, [r6, #0]
 80105de:	4621      	mov	r1, r4
 80105e0:	4628      	mov	r0, r5
 80105e2:	f001 ffcd 	bl	8012580 <_sbrk_r>
 80105e6:	1c43      	adds	r3, r0, #1
 80105e8:	d103      	bne.n	80105f2 <sbrk_aligned+0x26>
 80105ea:	f04f 34ff 	mov.w	r4, #4294967295
 80105ee:	4620      	mov	r0, r4
 80105f0:	bd70      	pop	{r4, r5, r6, pc}
 80105f2:	1cc4      	adds	r4, r0, #3
 80105f4:	f024 0403 	bic.w	r4, r4, #3
 80105f8:	42a0      	cmp	r0, r4
 80105fa:	d0f8      	beq.n	80105ee <sbrk_aligned+0x22>
 80105fc:	1a21      	subs	r1, r4, r0
 80105fe:	4628      	mov	r0, r5
 8010600:	f001 ffbe 	bl	8012580 <_sbrk_r>
 8010604:	3001      	adds	r0, #1
 8010606:	d1f2      	bne.n	80105ee <sbrk_aligned+0x22>
 8010608:	e7ef      	b.n	80105ea <sbrk_aligned+0x1e>
 801060a:	bf00      	nop
 801060c:	2000447c 	.word	0x2000447c

08010610 <_malloc_r>:
 8010610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010614:	1ccd      	adds	r5, r1, #3
 8010616:	f025 0503 	bic.w	r5, r5, #3
 801061a:	3508      	adds	r5, #8
 801061c:	2d0c      	cmp	r5, #12
 801061e:	bf38      	it	cc
 8010620:	250c      	movcc	r5, #12
 8010622:	2d00      	cmp	r5, #0
 8010624:	4606      	mov	r6, r0
 8010626:	db01      	blt.n	801062c <_malloc_r+0x1c>
 8010628:	42a9      	cmp	r1, r5
 801062a:	d904      	bls.n	8010636 <_malloc_r+0x26>
 801062c:	230c      	movs	r3, #12
 801062e:	6033      	str	r3, [r6, #0]
 8010630:	2000      	movs	r0, #0
 8010632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010636:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801070c <_malloc_r+0xfc>
 801063a:	f000 f869 	bl	8010710 <__malloc_lock>
 801063e:	f8d8 3000 	ldr.w	r3, [r8]
 8010642:	461c      	mov	r4, r3
 8010644:	bb44      	cbnz	r4, 8010698 <_malloc_r+0x88>
 8010646:	4629      	mov	r1, r5
 8010648:	4630      	mov	r0, r6
 801064a:	f7ff ffbf 	bl	80105cc <sbrk_aligned>
 801064e:	1c43      	adds	r3, r0, #1
 8010650:	4604      	mov	r4, r0
 8010652:	d158      	bne.n	8010706 <_malloc_r+0xf6>
 8010654:	f8d8 4000 	ldr.w	r4, [r8]
 8010658:	4627      	mov	r7, r4
 801065a:	2f00      	cmp	r7, #0
 801065c:	d143      	bne.n	80106e6 <_malloc_r+0xd6>
 801065e:	2c00      	cmp	r4, #0
 8010660:	d04b      	beq.n	80106fa <_malloc_r+0xea>
 8010662:	6823      	ldr	r3, [r4, #0]
 8010664:	4639      	mov	r1, r7
 8010666:	4630      	mov	r0, r6
 8010668:	eb04 0903 	add.w	r9, r4, r3
 801066c:	f001 ff88 	bl	8012580 <_sbrk_r>
 8010670:	4581      	cmp	r9, r0
 8010672:	d142      	bne.n	80106fa <_malloc_r+0xea>
 8010674:	6821      	ldr	r1, [r4, #0]
 8010676:	1a6d      	subs	r5, r5, r1
 8010678:	4629      	mov	r1, r5
 801067a:	4630      	mov	r0, r6
 801067c:	f7ff ffa6 	bl	80105cc <sbrk_aligned>
 8010680:	3001      	adds	r0, #1
 8010682:	d03a      	beq.n	80106fa <_malloc_r+0xea>
 8010684:	6823      	ldr	r3, [r4, #0]
 8010686:	442b      	add	r3, r5
 8010688:	6023      	str	r3, [r4, #0]
 801068a:	f8d8 3000 	ldr.w	r3, [r8]
 801068e:	685a      	ldr	r2, [r3, #4]
 8010690:	bb62      	cbnz	r2, 80106ec <_malloc_r+0xdc>
 8010692:	f8c8 7000 	str.w	r7, [r8]
 8010696:	e00f      	b.n	80106b8 <_malloc_r+0xa8>
 8010698:	6822      	ldr	r2, [r4, #0]
 801069a:	1b52      	subs	r2, r2, r5
 801069c:	d420      	bmi.n	80106e0 <_malloc_r+0xd0>
 801069e:	2a0b      	cmp	r2, #11
 80106a0:	d917      	bls.n	80106d2 <_malloc_r+0xc2>
 80106a2:	1961      	adds	r1, r4, r5
 80106a4:	42a3      	cmp	r3, r4
 80106a6:	6025      	str	r5, [r4, #0]
 80106a8:	bf18      	it	ne
 80106aa:	6059      	strne	r1, [r3, #4]
 80106ac:	6863      	ldr	r3, [r4, #4]
 80106ae:	bf08      	it	eq
 80106b0:	f8c8 1000 	streq.w	r1, [r8]
 80106b4:	5162      	str	r2, [r4, r5]
 80106b6:	604b      	str	r3, [r1, #4]
 80106b8:	4630      	mov	r0, r6
 80106ba:	f000 f82f 	bl	801071c <__malloc_unlock>
 80106be:	f104 000b 	add.w	r0, r4, #11
 80106c2:	1d23      	adds	r3, r4, #4
 80106c4:	f020 0007 	bic.w	r0, r0, #7
 80106c8:	1ac2      	subs	r2, r0, r3
 80106ca:	bf1c      	itt	ne
 80106cc:	1a1b      	subne	r3, r3, r0
 80106ce:	50a3      	strne	r3, [r4, r2]
 80106d0:	e7af      	b.n	8010632 <_malloc_r+0x22>
 80106d2:	6862      	ldr	r2, [r4, #4]
 80106d4:	42a3      	cmp	r3, r4
 80106d6:	bf0c      	ite	eq
 80106d8:	f8c8 2000 	streq.w	r2, [r8]
 80106dc:	605a      	strne	r2, [r3, #4]
 80106de:	e7eb      	b.n	80106b8 <_malloc_r+0xa8>
 80106e0:	4623      	mov	r3, r4
 80106e2:	6864      	ldr	r4, [r4, #4]
 80106e4:	e7ae      	b.n	8010644 <_malloc_r+0x34>
 80106e6:	463c      	mov	r4, r7
 80106e8:	687f      	ldr	r7, [r7, #4]
 80106ea:	e7b6      	b.n	801065a <_malloc_r+0x4a>
 80106ec:	461a      	mov	r2, r3
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	42a3      	cmp	r3, r4
 80106f2:	d1fb      	bne.n	80106ec <_malloc_r+0xdc>
 80106f4:	2300      	movs	r3, #0
 80106f6:	6053      	str	r3, [r2, #4]
 80106f8:	e7de      	b.n	80106b8 <_malloc_r+0xa8>
 80106fa:	230c      	movs	r3, #12
 80106fc:	6033      	str	r3, [r6, #0]
 80106fe:	4630      	mov	r0, r6
 8010700:	f000 f80c 	bl	801071c <__malloc_unlock>
 8010704:	e794      	b.n	8010630 <_malloc_r+0x20>
 8010706:	6005      	str	r5, [r0, #0]
 8010708:	e7d6      	b.n	80106b8 <_malloc_r+0xa8>
 801070a:	bf00      	nop
 801070c:	20004480 	.word	0x20004480

08010710 <__malloc_lock>:
 8010710:	4801      	ldr	r0, [pc, #4]	@ (8010718 <__malloc_lock+0x8>)
 8010712:	f7ff b8b4 	b.w	800f87e <__retarget_lock_acquire_recursive>
 8010716:	bf00      	nop
 8010718:	20004478 	.word	0x20004478

0801071c <__malloc_unlock>:
 801071c:	4801      	ldr	r0, [pc, #4]	@ (8010724 <__malloc_unlock+0x8>)
 801071e:	f7ff b8af 	b.w	800f880 <__retarget_lock_release_recursive>
 8010722:	bf00      	nop
 8010724:	20004478 	.word	0x20004478

08010728 <_Balloc>:
 8010728:	b570      	push	{r4, r5, r6, lr}
 801072a:	69c6      	ldr	r6, [r0, #28]
 801072c:	4604      	mov	r4, r0
 801072e:	460d      	mov	r5, r1
 8010730:	b976      	cbnz	r6, 8010750 <_Balloc+0x28>
 8010732:	2010      	movs	r0, #16
 8010734:	f7ff ff42 	bl	80105bc <malloc>
 8010738:	4602      	mov	r2, r0
 801073a:	61e0      	str	r0, [r4, #28]
 801073c:	b920      	cbnz	r0, 8010748 <_Balloc+0x20>
 801073e:	4b18      	ldr	r3, [pc, #96]	@ (80107a0 <_Balloc+0x78>)
 8010740:	4818      	ldr	r0, [pc, #96]	@ (80107a4 <_Balloc+0x7c>)
 8010742:	216b      	movs	r1, #107	@ 0x6b
 8010744:	f001 ff44 	bl	80125d0 <__assert_func>
 8010748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801074c:	6006      	str	r6, [r0, #0]
 801074e:	60c6      	str	r6, [r0, #12]
 8010750:	69e6      	ldr	r6, [r4, #28]
 8010752:	68f3      	ldr	r3, [r6, #12]
 8010754:	b183      	cbz	r3, 8010778 <_Balloc+0x50>
 8010756:	69e3      	ldr	r3, [r4, #28]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801075e:	b9b8      	cbnz	r0, 8010790 <_Balloc+0x68>
 8010760:	2101      	movs	r1, #1
 8010762:	fa01 f605 	lsl.w	r6, r1, r5
 8010766:	1d72      	adds	r2, r6, #5
 8010768:	0092      	lsls	r2, r2, #2
 801076a:	4620      	mov	r0, r4
 801076c:	f001 ff4e 	bl	801260c <_calloc_r>
 8010770:	b160      	cbz	r0, 801078c <_Balloc+0x64>
 8010772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010776:	e00e      	b.n	8010796 <_Balloc+0x6e>
 8010778:	2221      	movs	r2, #33	@ 0x21
 801077a:	2104      	movs	r1, #4
 801077c:	4620      	mov	r0, r4
 801077e:	f001 ff45 	bl	801260c <_calloc_r>
 8010782:	69e3      	ldr	r3, [r4, #28]
 8010784:	60f0      	str	r0, [r6, #12]
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d1e4      	bne.n	8010756 <_Balloc+0x2e>
 801078c:	2000      	movs	r0, #0
 801078e:	bd70      	pop	{r4, r5, r6, pc}
 8010790:	6802      	ldr	r2, [r0, #0]
 8010792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010796:	2300      	movs	r3, #0
 8010798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801079c:	e7f7      	b.n	801078e <_Balloc+0x66>
 801079e:	bf00      	nop
 80107a0:	080141fe 	.word	0x080141fe
 80107a4:	0801427e 	.word	0x0801427e

080107a8 <_Bfree>:
 80107a8:	b570      	push	{r4, r5, r6, lr}
 80107aa:	69c6      	ldr	r6, [r0, #28]
 80107ac:	4605      	mov	r5, r0
 80107ae:	460c      	mov	r4, r1
 80107b0:	b976      	cbnz	r6, 80107d0 <_Bfree+0x28>
 80107b2:	2010      	movs	r0, #16
 80107b4:	f7ff ff02 	bl	80105bc <malloc>
 80107b8:	4602      	mov	r2, r0
 80107ba:	61e8      	str	r0, [r5, #28]
 80107bc:	b920      	cbnz	r0, 80107c8 <_Bfree+0x20>
 80107be:	4b09      	ldr	r3, [pc, #36]	@ (80107e4 <_Bfree+0x3c>)
 80107c0:	4809      	ldr	r0, [pc, #36]	@ (80107e8 <_Bfree+0x40>)
 80107c2:	218f      	movs	r1, #143	@ 0x8f
 80107c4:	f001 ff04 	bl	80125d0 <__assert_func>
 80107c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107cc:	6006      	str	r6, [r0, #0]
 80107ce:	60c6      	str	r6, [r0, #12]
 80107d0:	b13c      	cbz	r4, 80107e2 <_Bfree+0x3a>
 80107d2:	69eb      	ldr	r3, [r5, #28]
 80107d4:	6862      	ldr	r2, [r4, #4]
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80107dc:	6021      	str	r1, [r4, #0]
 80107de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80107e2:	bd70      	pop	{r4, r5, r6, pc}
 80107e4:	080141fe 	.word	0x080141fe
 80107e8:	0801427e 	.word	0x0801427e

080107ec <__multadd>:
 80107ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107f0:	690d      	ldr	r5, [r1, #16]
 80107f2:	4607      	mov	r7, r0
 80107f4:	460c      	mov	r4, r1
 80107f6:	461e      	mov	r6, r3
 80107f8:	f101 0c14 	add.w	ip, r1, #20
 80107fc:	2000      	movs	r0, #0
 80107fe:	f8dc 3000 	ldr.w	r3, [ip]
 8010802:	b299      	uxth	r1, r3
 8010804:	fb02 6101 	mla	r1, r2, r1, r6
 8010808:	0c1e      	lsrs	r6, r3, #16
 801080a:	0c0b      	lsrs	r3, r1, #16
 801080c:	fb02 3306 	mla	r3, r2, r6, r3
 8010810:	b289      	uxth	r1, r1
 8010812:	3001      	adds	r0, #1
 8010814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010818:	4285      	cmp	r5, r0
 801081a:	f84c 1b04 	str.w	r1, [ip], #4
 801081e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010822:	dcec      	bgt.n	80107fe <__multadd+0x12>
 8010824:	b30e      	cbz	r6, 801086a <__multadd+0x7e>
 8010826:	68a3      	ldr	r3, [r4, #8]
 8010828:	42ab      	cmp	r3, r5
 801082a:	dc19      	bgt.n	8010860 <__multadd+0x74>
 801082c:	6861      	ldr	r1, [r4, #4]
 801082e:	4638      	mov	r0, r7
 8010830:	3101      	adds	r1, #1
 8010832:	f7ff ff79 	bl	8010728 <_Balloc>
 8010836:	4680      	mov	r8, r0
 8010838:	b928      	cbnz	r0, 8010846 <__multadd+0x5a>
 801083a:	4602      	mov	r2, r0
 801083c:	4b0c      	ldr	r3, [pc, #48]	@ (8010870 <__multadd+0x84>)
 801083e:	480d      	ldr	r0, [pc, #52]	@ (8010874 <__multadd+0x88>)
 8010840:	21ba      	movs	r1, #186	@ 0xba
 8010842:	f001 fec5 	bl	80125d0 <__assert_func>
 8010846:	6922      	ldr	r2, [r4, #16]
 8010848:	3202      	adds	r2, #2
 801084a:	f104 010c 	add.w	r1, r4, #12
 801084e:	0092      	lsls	r2, r2, #2
 8010850:	300c      	adds	r0, #12
 8010852:	f001 fea5 	bl	80125a0 <memcpy>
 8010856:	4621      	mov	r1, r4
 8010858:	4638      	mov	r0, r7
 801085a:	f7ff ffa5 	bl	80107a8 <_Bfree>
 801085e:	4644      	mov	r4, r8
 8010860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010864:	3501      	adds	r5, #1
 8010866:	615e      	str	r6, [r3, #20]
 8010868:	6125      	str	r5, [r4, #16]
 801086a:	4620      	mov	r0, r4
 801086c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010870:	0801426d 	.word	0x0801426d
 8010874:	0801427e 	.word	0x0801427e

08010878 <__s2b>:
 8010878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801087c:	460c      	mov	r4, r1
 801087e:	4615      	mov	r5, r2
 8010880:	461f      	mov	r7, r3
 8010882:	2209      	movs	r2, #9
 8010884:	3308      	adds	r3, #8
 8010886:	4606      	mov	r6, r0
 8010888:	fb93 f3f2 	sdiv	r3, r3, r2
 801088c:	2100      	movs	r1, #0
 801088e:	2201      	movs	r2, #1
 8010890:	429a      	cmp	r2, r3
 8010892:	db09      	blt.n	80108a8 <__s2b+0x30>
 8010894:	4630      	mov	r0, r6
 8010896:	f7ff ff47 	bl	8010728 <_Balloc>
 801089a:	b940      	cbnz	r0, 80108ae <__s2b+0x36>
 801089c:	4602      	mov	r2, r0
 801089e:	4b19      	ldr	r3, [pc, #100]	@ (8010904 <__s2b+0x8c>)
 80108a0:	4819      	ldr	r0, [pc, #100]	@ (8010908 <__s2b+0x90>)
 80108a2:	21d3      	movs	r1, #211	@ 0xd3
 80108a4:	f001 fe94 	bl	80125d0 <__assert_func>
 80108a8:	0052      	lsls	r2, r2, #1
 80108aa:	3101      	adds	r1, #1
 80108ac:	e7f0      	b.n	8010890 <__s2b+0x18>
 80108ae:	9b08      	ldr	r3, [sp, #32]
 80108b0:	6143      	str	r3, [r0, #20]
 80108b2:	2d09      	cmp	r5, #9
 80108b4:	f04f 0301 	mov.w	r3, #1
 80108b8:	6103      	str	r3, [r0, #16]
 80108ba:	dd16      	ble.n	80108ea <__s2b+0x72>
 80108bc:	f104 0909 	add.w	r9, r4, #9
 80108c0:	46c8      	mov	r8, r9
 80108c2:	442c      	add	r4, r5
 80108c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80108c8:	4601      	mov	r1, r0
 80108ca:	3b30      	subs	r3, #48	@ 0x30
 80108cc:	220a      	movs	r2, #10
 80108ce:	4630      	mov	r0, r6
 80108d0:	f7ff ff8c 	bl	80107ec <__multadd>
 80108d4:	45a0      	cmp	r8, r4
 80108d6:	d1f5      	bne.n	80108c4 <__s2b+0x4c>
 80108d8:	f1a5 0408 	sub.w	r4, r5, #8
 80108dc:	444c      	add	r4, r9
 80108de:	1b2d      	subs	r5, r5, r4
 80108e0:	1963      	adds	r3, r4, r5
 80108e2:	42bb      	cmp	r3, r7
 80108e4:	db04      	blt.n	80108f0 <__s2b+0x78>
 80108e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108ea:	340a      	adds	r4, #10
 80108ec:	2509      	movs	r5, #9
 80108ee:	e7f6      	b.n	80108de <__s2b+0x66>
 80108f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80108f4:	4601      	mov	r1, r0
 80108f6:	3b30      	subs	r3, #48	@ 0x30
 80108f8:	220a      	movs	r2, #10
 80108fa:	4630      	mov	r0, r6
 80108fc:	f7ff ff76 	bl	80107ec <__multadd>
 8010900:	e7ee      	b.n	80108e0 <__s2b+0x68>
 8010902:	bf00      	nop
 8010904:	0801426d 	.word	0x0801426d
 8010908:	0801427e 	.word	0x0801427e

0801090c <__hi0bits>:
 801090c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010910:	4603      	mov	r3, r0
 8010912:	bf36      	itet	cc
 8010914:	0403      	lslcc	r3, r0, #16
 8010916:	2000      	movcs	r0, #0
 8010918:	2010      	movcc	r0, #16
 801091a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801091e:	bf3c      	itt	cc
 8010920:	021b      	lslcc	r3, r3, #8
 8010922:	3008      	addcc	r0, #8
 8010924:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010928:	bf3c      	itt	cc
 801092a:	011b      	lslcc	r3, r3, #4
 801092c:	3004      	addcc	r0, #4
 801092e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010932:	bf3c      	itt	cc
 8010934:	009b      	lslcc	r3, r3, #2
 8010936:	3002      	addcc	r0, #2
 8010938:	2b00      	cmp	r3, #0
 801093a:	db05      	blt.n	8010948 <__hi0bits+0x3c>
 801093c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010940:	f100 0001 	add.w	r0, r0, #1
 8010944:	bf08      	it	eq
 8010946:	2020      	moveq	r0, #32
 8010948:	4770      	bx	lr

0801094a <__lo0bits>:
 801094a:	6803      	ldr	r3, [r0, #0]
 801094c:	4602      	mov	r2, r0
 801094e:	f013 0007 	ands.w	r0, r3, #7
 8010952:	d00b      	beq.n	801096c <__lo0bits+0x22>
 8010954:	07d9      	lsls	r1, r3, #31
 8010956:	d421      	bmi.n	801099c <__lo0bits+0x52>
 8010958:	0798      	lsls	r0, r3, #30
 801095a:	bf49      	itett	mi
 801095c:	085b      	lsrmi	r3, r3, #1
 801095e:	089b      	lsrpl	r3, r3, #2
 8010960:	2001      	movmi	r0, #1
 8010962:	6013      	strmi	r3, [r2, #0]
 8010964:	bf5c      	itt	pl
 8010966:	6013      	strpl	r3, [r2, #0]
 8010968:	2002      	movpl	r0, #2
 801096a:	4770      	bx	lr
 801096c:	b299      	uxth	r1, r3
 801096e:	b909      	cbnz	r1, 8010974 <__lo0bits+0x2a>
 8010970:	0c1b      	lsrs	r3, r3, #16
 8010972:	2010      	movs	r0, #16
 8010974:	b2d9      	uxtb	r1, r3
 8010976:	b909      	cbnz	r1, 801097c <__lo0bits+0x32>
 8010978:	3008      	adds	r0, #8
 801097a:	0a1b      	lsrs	r3, r3, #8
 801097c:	0719      	lsls	r1, r3, #28
 801097e:	bf04      	itt	eq
 8010980:	091b      	lsreq	r3, r3, #4
 8010982:	3004      	addeq	r0, #4
 8010984:	0799      	lsls	r1, r3, #30
 8010986:	bf04      	itt	eq
 8010988:	089b      	lsreq	r3, r3, #2
 801098a:	3002      	addeq	r0, #2
 801098c:	07d9      	lsls	r1, r3, #31
 801098e:	d403      	bmi.n	8010998 <__lo0bits+0x4e>
 8010990:	085b      	lsrs	r3, r3, #1
 8010992:	f100 0001 	add.w	r0, r0, #1
 8010996:	d003      	beq.n	80109a0 <__lo0bits+0x56>
 8010998:	6013      	str	r3, [r2, #0]
 801099a:	4770      	bx	lr
 801099c:	2000      	movs	r0, #0
 801099e:	4770      	bx	lr
 80109a0:	2020      	movs	r0, #32
 80109a2:	4770      	bx	lr

080109a4 <__i2b>:
 80109a4:	b510      	push	{r4, lr}
 80109a6:	460c      	mov	r4, r1
 80109a8:	2101      	movs	r1, #1
 80109aa:	f7ff febd 	bl	8010728 <_Balloc>
 80109ae:	4602      	mov	r2, r0
 80109b0:	b928      	cbnz	r0, 80109be <__i2b+0x1a>
 80109b2:	4b05      	ldr	r3, [pc, #20]	@ (80109c8 <__i2b+0x24>)
 80109b4:	4805      	ldr	r0, [pc, #20]	@ (80109cc <__i2b+0x28>)
 80109b6:	f240 1145 	movw	r1, #325	@ 0x145
 80109ba:	f001 fe09 	bl	80125d0 <__assert_func>
 80109be:	2301      	movs	r3, #1
 80109c0:	6144      	str	r4, [r0, #20]
 80109c2:	6103      	str	r3, [r0, #16]
 80109c4:	bd10      	pop	{r4, pc}
 80109c6:	bf00      	nop
 80109c8:	0801426d 	.word	0x0801426d
 80109cc:	0801427e 	.word	0x0801427e

080109d0 <__multiply>:
 80109d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d4:	4614      	mov	r4, r2
 80109d6:	690a      	ldr	r2, [r1, #16]
 80109d8:	6923      	ldr	r3, [r4, #16]
 80109da:	429a      	cmp	r2, r3
 80109dc:	bfa8      	it	ge
 80109de:	4623      	movge	r3, r4
 80109e0:	460f      	mov	r7, r1
 80109e2:	bfa4      	itt	ge
 80109e4:	460c      	movge	r4, r1
 80109e6:	461f      	movge	r7, r3
 80109e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80109ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80109f0:	68a3      	ldr	r3, [r4, #8]
 80109f2:	6861      	ldr	r1, [r4, #4]
 80109f4:	eb0a 0609 	add.w	r6, sl, r9
 80109f8:	42b3      	cmp	r3, r6
 80109fa:	b085      	sub	sp, #20
 80109fc:	bfb8      	it	lt
 80109fe:	3101      	addlt	r1, #1
 8010a00:	f7ff fe92 	bl	8010728 <_Balloc>
 8010a04:	b930      	cbnz	r0, 8010a14 <__multiply+0x44>
 8010a06:	4602      	mov	r2, r0
 8010a08:	4b44      	ldr	r3, [pc, #272]	@ (8010b1c <__multiply+0x14c>)
 8010a0a:	4845      	ldr	r0, [pc, #276]	@ (8010b20 <__multiply+0x150>)
 8010a0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010a10:	f001 fdde 	bl	80125d0 <__assert_func>
 8010a14:	f100 0514 	add.w	r5, r0, #20
 8010a18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010a1c:	462b      	mov	r3, r5
 8010a1e:	2200      	movs	r2, #0
 8010a20:	4543      	cmp	r3, r8
 8010a22:	d321      	bcc.n	8010a68 <__multiply+0x98>
 8010a24:	f107 0114 	add.w	r1, r7, #20
 8010a28:	f104 0214 	add.w	r2, r4, #20
 8010a2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010a30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010a34:	9302      	str	r3, [sp, #8]
 8010a36:	1b13      	subs	r3, r2, r4
 8010a38:	3b15      	subs	r3, #21
 8010a3a:	f023 0303 	bic.w	r3, r3, #3
 8010a3e:	3304      	adds	r3, #4
 8010a40:	f104 0715 	add.w	r7, r4, #21
 8010a44:	42ba      	cmp	r2, r7
 8010a46:	bf38      	it	cc
 8010a48:	2304      	movcc	r3, #4
 8010a4a:	9301      	str	r3, [sp, #4]
 8010a4c:	9b02      	ldr	r3, [sp, #8]
 8010a4e:	9103      	str	r1, [sp, #12]
 8010a50:	428b      	cmp	r3, r1
 8010a52:	d80c      	bhi.n	8010a6e <__multiply+0x9e>
 8010a54:	2e00      	cmp	r6, #0
 8010a56:	dd03      	ble.n	8010a60 <__multiply+0x90>
 8010a58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d05b      	beq.n	8010b18 <__multiply+0x148>
 8010a60:	6106      	str	r6, [r0, #16]
 8010a62:	b005      	add	sp, #20
 8010a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a68:	f843 2b04 	str.w	r2, [r3], #4
 8010a6c:	e7d8      	b.n	8010a20 <__multiply+0x50>
 8010a6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8010a72:	f1ba 0f00 	cmp.w	sl, #0
 8010a76:	d024      	beq.n	8010ac2 <__multiply+0xf2>
 8010a78:	f104 0e14 	add.w	lr, r4, #20
 8010a7c:	46a9      	mov	r9, r5
 8010a7e:	f04f 0c00 	mov.w	ip, #0
 8010a82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a86:	f8d9 3000 	ldr.w	r3, [r9]
 8010a8a:	fa1f fb87 	uxth.w	fp, r7
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	fb0a 330b 	mla	r3, sl, fp, r3
 8010a94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010a98:	f8d9 7000 	ldr.w	r7, [r9]
 8010a9c:	4463      	add	r3, ip
 8010a9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010aa2:	fb0a c70b 	mla	r7, sl, fp, ip
 8010aa6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010ab0:	4572      	cmp	r2, lr
 8010ab2:	f849 3b04 	str.w	r3, [r9], #4
 8010ab6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010aba:	d8e2      	bhi.n	8010a82 <__multiply+0xb2>
 8010abc:	9b01      	ldr	r3, [sp, #4]
 8010abe:	f845 c003 	str.w	ip, [r5, r3]
 8010ac2:	9b03      	ldr	r3, [sp, #12]
 8010ac4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010ac8:	3104      	adds	r1, #4
 8010aca:	f1b9 0f00 	cmp.w	r9, #0
 8010ace:	d021      	beq.n	8010b14 <__multiply+0x144>
 8010ad0:	682b      	ldr	r3, [r5, #0]
 8010ad2:	f104 0c14 	add.w	ip, r4, #20
 8010ad6:	46ae      	mov	lr, r5
 8010ad8:	f04f 0a00 	mov.w	sl, #0
 8010adc:	f8bc b000 	ldrh.w	fp, [ip]
 8010ae0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010ae4:	fb09 770b 	mla	r7, r9, fp, r7
 8010ae8:	4457      	add	r7, sl
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010af0:	f84e 3b04 	str.w	r3, [lr], #4
 8010af4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010af8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010afc:	f8be 3000 	ldrh.w	r3, [lr]
 8010b00:	fb09 330a 	mla	r3, r9, sl, r3
 8010b04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010b08:	4562      	cmp	r2, ip
 8010b0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010b0e:	d8e5      	bhi.n	8010adc <__multiply+0x10c>
 8010b10:	9f01      	ldr	r7, [sp, #4]
 8010b12:	51eb      	str	r3, [r5, r7]
 8010b14:	3504      	adds	r5, #4
 8010b16:	e799      	b.n	8010a4c <__multiply+0x7c>
 8010b18:	3e01      	subs	r6, #1
 8010b1a:	e79b      	b.n	8010a54 <__multiply+0x84>
 8010b1c:	0801426d 	.word	0x0801426d
 8010b20:	0801427e 	.word	0x0801427e

08010b24 <__pow5mult>:
 8010b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b28:	4615      	mov	r5, r2
 8010b2a:	f012 0203 	ands.w	r2, r2, #3
 8010b2e:	4607      	mov	r7, r0
 8010b30:	460e      	mov	r6, r1
 8010b32:	d007      	beq.n	8010b44 <__pow5mult+0x20>
 8010b34:	4c25      	ldr	r4, [pc, #148]	@ (8010bcc <__pow5mult+0xa8>)
 8010b36:	3a01      	subs	r2, #1
 8010b38:	2300      	movs	r3, #0
 8010b3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010b3e:	f7ff fe55 	bl	80107ec <__multadd>
 8010b42:	4606      	mov	r6, r0
 8010b44:	10ad      	asrs	r5, r5, #2
 8010b46:	d03d      	beq.n	8010bc4 <__pow5mult+0xa0>
 8010b48:	69fc      	ldr	r4, [r7, #28]
 8010b4a:	b97c      	cbnz	r4, 8010b6c <__pow5mult+0x48>
 8010b4c:	2010      	movs	r0, #16
 8010b4e:	f7ff fd35 	bl	80105bc <malloc>
 8010b52:	4602      	mov	r2, r0
 8010b54:	61f8      	str	r0, [r7, #28]
 8010b56:	b928      	cbnz	r0, 8010b64 <__pow5mult+0x40>
 8010b58:	4b1d      	ldr	r3, [pc, #116]	@ (8010bd0 <__pow5mult+0xac>)
 8010b5a:	481e      	ldr	r0, [pc, #120]	@ (8010bd4 <__pow5mult+0xb0>)
 8010b5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010b60:	f001 fd36 	bl	80125d0 <__assert_func>
 8010b64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010b68:	6004      	str	r4, [r0, #0]
 8010b6a:	60c4      	str	r4, [r0, #12]
 8010b6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010b70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010b74:	b94c      	cbnz	r4, 8010b8a <__pow5mult+0x66>
 8010b76:	f240 2171 	movw	r1, #625	@ 0x271
 8010b7a:	4638      	mov	r0, r7
 8010b7c:	f7ff ff12 	bl	80109a4 <__i2b>
 8010b80:	2300      	movs	r3, #0
 8010b82:	f8c8 0008 	str.w	r0, [r8, #8]
 8010b86:	4604      	mov	r4, r0
 8010b88:	6003      	str	r3, [r0, #0]
 8010b8a:	f04f 0900 	mov.w	r9, #0
 8010b8e:	07eb      	lsls	r3, r5, #31
 8010b90:	d50a      	bpl.n	8010ba8 <__pow5mult+0x84>
 8010b92:	4631      	mov	r1, r6
 8010b94:	4622      	mov	r2, r4
 8010b96:	4638      	mov	r0, r7
 8010b98:	f7ff ff1a 	bl	80109d0 <__multiply>
 8010b9c:	4631      	mov	r1, r6
 8010b9e:	4680      	mov	r8, r0
 8010ba0:	4638      	mov	r0, r7
 8010ba2:	f7ff fe01 	bl	80107a8 <_Bfree>
 8010ba6:	4646      	mov	r6, r8
 8010ba8:	106d      	asrs	r5, r5, #1
 8010baa:	d00b      	beq.n	8010bc4 <__pow5mult+0xa0>
 8010bac:	6820      	ldr	r0, [r4, #0]
 8010bae:	b938      	cbnz	r0, 8010bc0 <__pow5mult+0x9c>
 8010bb0:	4622      	mov	r2, r4
 8010bb2:	4621      	mov	r1, r4
 8010bb4:	4638      	mov	r0, r7
 8010bb6:	f7ff ff0b 	bl	80109d0 <__multiply>
 8010bba:	6020      	str	r0, [r4, #0]
 8010bbc:	f8c0 9000 	str.w	r9, [r0]
 8010bc0:	4604      	mov	r4, r0
 8010bc2:	e7e4      	b.n	8010b8e <__pow5mult+0x6a>
 8010bc4:	4630      	mov	r0, r6
 8010bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bca:	bf00      	nop
 8010bcc:	080142d8 	.word	0x080142d8
 8010bd0:	080141fe 	.word	0x080141fe
 8010bd4:	0801427e 	.word	0x0801427e

08010bd8 <__lshift>:
 8010bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bdc:	460c      	mov	r4, r1
 8010bde:	6849      	ldr	r1, [r1, #4]
 8010be0:	6923      	ldr	r3, [r4, #16]
 8010be2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010be6:	68a3      	ldr	r3, [r4, #8]
 8010be8:	4607      	mov	r7, r0
 8010bea:	4691      	mov	r9, r2
 8010bec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010bf0:	f108 0601 	add.w	r6, r8, #1
 8010bf4:	42b3      	cmp	r3, r6
 8010bf6:	db0b      	blt.n	8010c10 <__lshift+0x38>
 8010bf8:	4638      	mov	r0, r7
 8010bfa:	f7ff fd95 	bl	8010728 <_Balloc>
 8010bfe:	4605      	mov	r5, r0
 8010c00:	b948      	cbnz	r0, 8010c16 <__lshift+0x3e>
 8010c02:	4602      	mov	r2, r0
 8010c04:	4b28      	ldr	r3, [pc, #160]	@ (8010ca8 <__lshift+0xd0>)
 8010c06:	4829      	ldr	r0, [pc, #164]	@ (8010cac <__lshift+0xd4>)
 8010c08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010c0c:	f001 fce0 	bl	80125d0 <__assert_func>
 8010c10:	3101      	adds	r1, #1
 8010c12:	005b      	lsls	r3, r3, #1
 8010c14:	e7ee      	b.n	8010bf4 <__lshift+0x1c>
 8010c16:	2300      	movs	r3, #0
 8010c18:	f100 0114 	add.w	r1, r0, #20
 8010c1c:	f100 0210 	add.w	r2, r0, #16
 8010c20:	4618      	mov	r0, r3
 8010c22:	4553      	cmp	r3, sl
 8010c24:	db33      	blt.n	8010c8e <__lshift+0xb6>
 8010c26:	6920      	ldr	r0, [r4, #16]
 8010c28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c2c:	f104 0314 	add.w	r3, r4, #20
 8010c30:	f019 091f 	ands.w	r9, r9, #31
 8010c34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010c38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010c3c:	d02b      	beq.n	8010c96 <__lshift+0xbe>
 8010c3e:	f1c9 0e20 	rsb	lr, r9, #32
 8010c42:	468a      	mov	sl, r1
 8010c44:	2200      	movs	r2, #0
 8010c46:	6818      	ldr	r0, [r3, #0]
 8010c48:	fa00 f009 	lsl.w	r0, r0, r9
 8010c4c:	4310      	orrs	r0, r2
 8010c4e:	f84a 0b04 	str.w	r0, [sl], #4
 8010c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c56:	459c      	cmp	ip, r3
 8010c58:	fa22 f20e 	lsr.w	r2, r2, lr
 8010c5c:	d8f3      	bhi.n	8010c46 <__lshift+0x6e>
 8010c5e:	ebac 0304 	sub.w	r3, ip, r4
 8010c62:	3b15      	subs	r3, #21
 8010c64:	f023 0303 	bic.w	r3, r3, #3
 8010c68:	3304      	adds	r3, #4
 8010c6a:	f104 0015 	add.w	r0, r4, #21
 8010c6e:	4584      	cmp	ip, r0
 8010c70:	bf38      	it	cc
 8010c72:	2304      	movcc	r3, #4
 8010c74:	50ca      	str	r2, [r1, r3]
 8010c76:	b10a      	cbz	r2, 8010c7c <__lshift+0xa4>
 8010c78:	f108 0602 	add.w	r6, r8, #2
 8010c7c:	3e01      	subs	r6, #1
 8010c7e:	4638      	mov	r0, r7
 8010c80:	612e      	str	r6, [r5, #16]
 8010c82:	4621      	mov	r1, r4
 8010c84:	f7ff fd90 	bl	80107a8 <_Bfree>
 8010c88:	4628      	mov	r0, r5
 8010c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010c92:	3301      	adds	r3, #1
 8010c94:	e7c5      	b.n	8010c22 <__lshift+0x4a>
 8010c96:	3904      	subs	r1, #4
 8010c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ca0:	459c      	cmp	ip, r3
 8010ca2:	d8f9      	bhi.n	8010c98 <__lshift+0xc0>
 8010ca4:	e7ea      	b.n	8010c7c <__lshift+0xa4>
 8010ca6:	bf00      	nop
 8010ca8:	0801426d 	.word	0x0801426d
 8010cac:	0801427e 	.word	0x0801427e

08010cb0 <__mcmp>:
 8010cb0:	690a      	ldr	r2, [r1, #16]
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	6900      	ldr	r0, [r0, #16]
 8010cb6:	1a80      	subs	r0, r0, r2
 8010cb8:	b530      	push	{r4, r5, lr}
 8010cba:	d10e      	bne.n	8010cda <__mcmp+0x2a>
 8010cbc:	3314      	adds	r3, #20
 8010cbe:	3114      	adds	r1, #20
 8010cc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010cc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010cc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010ccc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010cd0:	4295      	cmp	r5, r2
 8010cd2:	d003      	beq.n	8010cdc <__mcmp+0x2c>
 8010cd4:	d205      	bcs.n	8010ce2 <__mcmp+0x32>
 8010cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8010cda:	bd30      	pop	{r4, r5, pc}
 8010cdc:	42a3      	cmp	r3, r4
 8010cde:	d3f3      	bcc.n	8010cc8 <__mcmp+0x18>
 8010ce0:	e7fb      	b.n	8010cda <__mcmp+0x2a>
 8010ce2:	2001      	movs	r0, #1
 8010ce4:	e7f9      	b.n	8010cda <__mcmp+0x2a>
	...

08010ce8 <__mdiff>:
 8010ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cec:	4689      	mov	r9, r1
 8010cee:	4606      	mov	r6, r0
 8010cf0:	4611      	mov	r1, r2
 8010cf2:	4648      	mov	r0, r9
 8010cf4:	4614      	mov	r4, r2
 8010cf6:	f7ff ffdb 	bl	8010cb0 <__mcmp>
 8010cfa:	1e05      	subs	r5, r0, #0
 8010cfc:	d112      	bne.n	8010d24 <__mdiff+0x3c>
 8010cfe:	4629      	mov	r1, r5
 8010d00:	4630      	mov	r0, r6
 8010d02:	f7ff fd11 	bl	8010728 <_Balloc>
 8010d06:	4602      	mov	r2, r0
 8010d08:	b928      	cbnz	r0, 8010d16 <__mdiff+0x2e>
 8010d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8010e08 <__mdiff+0x120>)
 8010d0c:	f240 2137 	movw	r1, #567	@ 0x237
 8010d10:	483e      	ldr	r0, [pc, #248]	@ (8010e0c <__mdiff+0x124>)
 8010d12:	f001 fc5d 	bl	80125d0 <__assert_func>
 8010d16:	2301      	movs	r3, #1
 8010d18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010d1c:	4610      	mov	r0, r2
 8010d1e:	b003      	add	sp, #12
 8010d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d24:	bfbc      	itt	lt
 8010d26:	464b      	movlt	r3, r9
 8010d28:	46a1      	movlt	r9, r4
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010d30:	bfba      	itte	lt
 8010d32:	461c      	movlt	r4, r3
 8010d34:	2501      	movlt	r5, #1
 8010d36:	2500      	movge	r5, #0
 8010d38:	f7ff fcf6 	bl	8010728 <_Balloc>
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	b918      	cbnz	r0, 8010d48 <__mdiff+0x60>
 8010d40:	4b31      	ldr	r3, [pc, #196]	@ (8010e08 <__mdiff+0x120>)
 8010d42:	f240 2145 	movw	r1, #581	@ 0x245
 8010d46:	e7e3      	b.n	8010d10 <__mdiff+0x28>
 8010d48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010d4c:	6926      	ldr	r6, [r4, #16]
 8010d4e:	60c5      	str	r5, [r0, #12]
 8010d50:	f109 0310 	add.w	r3, r9, #16
 8010d54:	f109 0514 	add.w	r5, r9, #20
 8010d58:	f104 0e14 	add.w	lr, r4, #20
 8010d5c:	f100 0b14 	add.w	fp, r0, #20
 8010d60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010d64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010d68:	9301      	str	r3, [sp, #4]
 8010d6a:	46d9      	mov	r9, fp
 8010d6c:	f04f 0c00 	mov.w	ip, #0
 8010d70:	9b01      	ldr	r3, [sp, #4]
 8010d72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010d76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010d7a:	9301      	str	r3, [sp, #4]
 8010d7c:	fa1f f38a 	uxth.w	r3, sl
 8010d80:	4619      	mov	r1, r3
 8010d82:	b283      	uxth	r3, r0
 8010d84:	1acb      	subs	r3, r1, r3
 8010d86:	0c00      	lsrs	r0, r0, #16
 8010d88:	4463      	add	r3, ip
 8010d8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010d8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010d98:	4576      	cmp	r6, lr
 8010d9a:	f849 3b04 	str.w	r3, [r9], #4
 8010d9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010da2:	d8e5      	bhi.n	8010d70 <__mdiff+0x88>
 8010da4:	1b33      	subs	r3, r6, r4
 8010da6:	3b15      	subs	r3, #21
 8010da8:	f023 0303 	bic.w	r3, r3, #3
 8010dac:	3415      	adds	r4, #21
 8010dae:	3304      	adds	r3, #4
 8010db0:	42a6      	cmp	r6, r4
 8010db2:	bf38      	it	cc
 8010db4:	2304      	movcc	r3, #4
 8010db6:	441d      	add	r5, r3
 8010db8:	445b      	add	r3, fp
 8010dba:	461e      	mov	r6, r3
 8010dbc:	462c      	mov	r4, r5
 8010dbe:	4544      	cmp	r4, r8
 8010dc0:	d30e      	bcc.n	8010de0 <__mdiff+0xf8>
 8010dc2:	f108 0103 	add.w	r1, r8, #3
 8010dc6:	1b49      	subs	r1, r1, r5
 8010dc8:	f021 0103 	bic.w	r1, r1, #3
 8010dcc:	3d03      	subs	r5, #3
 8010dce:	45a8      	cmp	r8, r5
 8010dd0:	bf38      	it	cc
 8010dd2:	2100      	movcc	r1, #0
 8010dd4:	440b      	add	r3, r1
 8010dd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010dda:	b191      	cbz	r1, 8010e02 <__mdiff+0x11a>
 8010ddc:	6117      	str	r7, [r2, #16]
 8010dde:	e79d      	b.n	8010d1c <__mdiff+0x34>
 8010de0:	f854 1b04 	ldr.w	r1, [r4], #4
 8010de4:	46e6      	mov	lr, ip
 8010de6:	0c08      	lsrs	r0, r1, #16
 8010de8:	fa1c fc81 	uxtah	ip, ip, r1
 8010dec:	4471      	add	r1, lr
 8010dee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010df2:	b289      	uxth	r1, r1
 8010df4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010df8:	f846 1b04 	str.w	r1, [r6], #4
 8010dfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010e00:	e7dd      	b.n	8010dbe <__mdiff+0xd6>
 8010e02:	3f01      	subs	r7, #1
 8010e04:	e7e7      	b.n	8010dd6 <__mdiff+0xee>
 8010e06:	bf00      	nop
 8010e08:	0801426d 	.word	0x0801426d
 8010e0c:	0801427e 	.word	0x0801427e

08010e10 <__ulp>:
 8010e10:	b082      	sub	sp, #8
 8010e12:	ed8d 0b00 	vstr	d0, [sp]
 8010e16:	9a01      	ldr	r2, [sp, #4]
 8010e18:	4b0f      	ldr	r3, [pc, #60]	@ (8010e58 <__ulp+0x48>)
 8010e1a:	4013      	ands	r3, r2
 8010e1c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	dc08      	bgt.n	8010e36 <__ulp+0x26>
 8010e24:	425b      	negs	r3, r3
 8010e26:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010e2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010e2e:	da04      	bge.n	8010e3a <__ulp+0x2a>
 8010e30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010e34:	4113      	asrs	r3, r2
 8010e36:	2200      	movs	r2, #0
 8010e38:	e008      	b.n	8010e4c <__ulp+0x3c>
 8010e3a:	f1a2 0314 	sub.w	r3, r2, #20
 8010e3e:	2b1e      	cmp	r3, #30
 8010e40:	bfda      	itte	le
 8010e42:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010e46:	40da      	lsrle	r2, r3
 8010e48:	2201      	movgt	r2, #1
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	4610      	mov	r0, r2
 8010e50:	ec41 0b10 	vmov	d0, r0, r1
 8010e54:	b002      	add	sp, #8
 8010e56:	4770      	bx	lr
 8010e58:	7ff00000 	.word	0x7ff00000

08010e5c <__b2d>:
 8010e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e60:	6906      	ldr	r6, [r0, #16]
 8010e62:	f100 0814 	add.w	r8, r0, #20
 8010e66:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010e6a:	1f37      	subs	r7, r6, #4
 8010e6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010e70:	4610      	mov	r0, r2
 8010e72:	f7ff fd4b 	bl	801090c <__hi0bits>
 8010e76:	f1c0 0320 	rsb	r3, r0, #32
 8010e7a:	280a      	cmp	r0, #10
 8010e7c:	600b      	str	r3, [r1, #0]
 8010e7e:	491b      	ldr	r1, [pc, #108]	@ (8010eec <__b2d+0x90>)
 8010e80:	dc15      	bgt.n	8010eae <__b2d+0x52>
 8010e82:	f1c0 0c0b 	rsb	ip, r0, #11
 8010e86:	fa22 f30c 	lsr.w	r3, r2, ip
 8010e8a:	45b8      	cmp	r8, r7
 8010e8c:	ea43 0501 	orr.w	r5, r3, r1
 8010e90:	bf34      	ite	cc
 8010e92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010e96:	2300      	movcs	r3, #0
 8010e98:	3015      	adds	r0, #21
 8010e9a:	fa02 f000 	lsl.w	r0, r2, r0
 8010e9e:	fa23 f30c 	lsr.w	r3, r3, ip
 8010ea2:	4303      	orrs	r3, r0
 8010ea4:	461c      	mov	r4, r3
 8010ea6:	ec45 4b10 	vmov	d0, r4, r5
 8010eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eae:	45b8      	cmp	r8, r7
 8010eb0:	bf3a      	itte	cc
 8010eb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010eb6:	f1a6 0708 	subcc.w	r7, r6, #8
 8010eba:	2300      	movcs	r3, #0
 8010ebc:	380b      	subs	r0, #11
 8010ebe:	d012      	beq.n	8010ee6 <__b2d+0x8a>
 8010ec0:	f1c0 0120 	rsb	r1, r0, #32
 8010ec4:	fa23 f401 	lsr.w	r4, r3, r1
 8010ec8:	4082      	lsls	r2, r0
 8010eca:	4322      	orrs	r2, r4
 8010ecc:	4547      	cmp	r7, r8
 8010ece:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010ed2:	bf8c      	ite	hi
 8010ed4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010ed8:	2200      	movls	r2, #0
 8010eda:	4083      	lsls	r3, r0
 8010edc:	40ca      	lsrs	r2, r1
 8010ede:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	e7de      	b.n	8010ea4 <__b2d+0x48>
 8010ee6:	ea42 0501 	orr.w	r5, r2, r1
 8010eea:	e7db      	b.n	8010ea4 <__b2d+0x48>
 8010eec:	3ff00000 	.word	0x3ff00000

08010ef0 <__d2b>:
 8010ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ef4:	460f      	mov	r7, r1
 8010ef6:	2101      	movs	r1, #1
 8010ef8:	ec59 8b10 	vmov	r8, r9, d0
 8010efc:	4616      	mov	r6, r2
 8010efe:	f7ff fc13 	bl	8010728 <_Balloc>
 8010f02:	4604      	mov	r4, r0
 8010f04:	b930      	cbnz	r0, 8010f14 <__d2b+0x24>
 8010f06:	4602      	mov	r2, r0
 8010f08:	4b23      	ldr	r3, [pc, #140]	@ (8010f98 <__d2b+0xa8>)
 8010f0a:	4824      	ldr	r0, [pc, #144]	@ (8010f9c <__d2b+0xac>)
 8010f0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010f10:	f001 fb5e 	bl	80125d0 <__assert_func>
 8010f14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f1c:	b10d      	cbz	r5, 8010f22 <__d2b+0x32>
 8010f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010f22:	9301      	str	r3, [sp, #4]
 8010f24:	f1b8 0300 	subs.w	r3, r8, #0
 8010f28:	d023      	beq.n	8010f72 <__d2b+0x82>
 8010f2a:	4668      	mov	r0, sp
 8010f2c:	9300      	str	r3, [sp, #0]
 8010f2e:	f7ff fd0c 	bl	801094a <__lo0bits>
 8010f32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010f36:	b1d0      	cbz	r0, 8010f6e <__d2b+0x7e>
 8010f38:	f1c0 0320 	rsb	r3, r0, #32
 8010f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f40:	430b      	orrs	r3, r1
 8010f42:	40c2      	lsrs	r2, r0
 8010f44:	6163      	str	r3, [r4, #20]
 8010f46:	9201      	str	r2, [sp, #4]
 8010f48:	9b01      	ldr	r3, [sp, #4]
 8010f4a:	61a3      	str	r3, [r4, #24]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	bf0c      	ite	eq
 8010f50:	2201      	moveq	r2, #1
 8010f52:	2202      	movne	r2, #2
 8010f54:	6122      	str	r2, [r4, #16]
 8010f56:	b1a5      	cbz	r5, 8010f82 <__d2b+0x92>
 8010f58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010f5c:	4405      	add	r5, r0
 8010f5e:	603d      	str	r5, [r7, #0]
 8010f60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010f64:	6030      	str	r0, [r6, #0]
 8010f66:	4620      	mov	r0, r4
 8010f68:	b003      	add	sp, #12
 8010f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f6e:	6161      	str	r1, [r4, #20]
 8010f70:	e7ea      	b.n	8010f48 <__d2b+0x58>
 8010f72:	a801      	add	r0, sp, #4
 8010f74:	f7ff fce9 	bl	801094a <__lo0bits>
 8010f78:	9b01      	ldr	r3, [sp, #4]
 8010f7a:	6163      	str	r3, [r4, #20]
 8010f7c:	3020      	adds	r0, #32
 8010f7e:	2201      	movs	r2, #1
 8010f80:	e7e8      	b.n	8010f54 <__d2b+0x64>
 8010f82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010f86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010f8a:	6038      	str	r0, [r7, #0]
 8010f8c:	6918      	ldr	r0, [r3, #16]
 8010f8e:	f7ff fcbd 	bl	801090c <__hi0bits>
 8010f92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010f96:	e7e5      	b.n	8010f64 <__d2b+0x74>
 8010f98:	0801426d 	.word	0x0801426d
 8010f9c:	0801427e 	.word	0x0801427e

08010fa0 <__ratio>:
 8010fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa4:	b085      	sub	sp, #20
 8010fa6:	e9cd 1000 	strd	r1, r0, [sp]
 8010faa:	a902      	add	r1, sp, #8
 8010fac:	f7ff ff56 	bl	8010e5c <__b2d>
 8010fb0:	9800      	ldr	r0, [sp, #0]
 8010fb2:	a903      	add	r1, sp, #12
 8010fb4:	ec55 4b10 	vmov	r4, r5, d0
 8010fb8:	f7ff ff50 	bl	8010e5c <__b2d>
 8010fbc:	9b01      	ldr	r3, [sp, #4]
 8010fbe:	6919      	ldr	r1, [r3, #16]
 8010fc0:	9b00      	ldr	r3, [sp, #0]
 8010fc2:	691b      	ldr	r3, [r3, #16]
 8010fc4:	1ac9      	subs	r1, r1, r3
 8010fc6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010fca:	1a9b      	subs	r3, r3, r2
 8010fcc:	ec5b ab10 	vmov	sl, fp, d0
 8010fd0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	bfce      	itee	gt
 8010fd8:	462a      	movgt	r2, r5
 8010fda:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010fde:	465a      	movle	r2, fp
 8010fe0:	462f      	mov	r7, r5
 8010fe2:	46d9      	mov	r9, fp
 8010fe4:	bfcc      	ite	gt
 8010fe6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010fea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010fee:	464b      	mov	r3, r9
 8010ff0:	4652      	mov	r2, sl
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	4639      	mov	r1, r7
 8010ff6:	f7ef fc49 	bl	800088c <__aeabi_ddiv>
 8010ffa:	ec41 0b10 	vmov	d0, r0, r1
 8010ffe:	b005      	add	sp, #20
 8011000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011004 <__copybits>:
 8011004:	3901      	subs	r1, #1
 8011006:	b570      	push	{r4, r5, r6, lr}
 8011008:	1149      	asrs	r1, r1, #5
 801100a:	6914      	ldr	r4, [r2, #16]
 801100c:	3101      	adds	r1, #1
 801100e:	f102 0314 	add.w	r3, r2, #20
 8011012:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011016:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801101a:	1f05      	subs	r5, r0, #4
 801101c:	42a3      	cmp	r3, r4
 801101e:	d30c      	bcc.n	801103a <__copybits+0x36>
 8011020:	1aa3      	subs	r3, r4, r2
 8011022:	3b11      	subs	r3, #17
 8011024:	f023 0303 	bic.w	r3, r3, #3
 8011028:	3211      	adds	r2, #17
 801102a:	42a2      	cmp	r2, r4
 801102c:	bf88      	it	hi
 801102e:	2300      	movhi	r3, #0
 8011030:	4418      	add	r0, r3
 8011032:	2300      	movs	r3, #0
 8011034:	4288      	cmp	r0, r1
 8011036:	d305      	bcc.n	8011044 <__copybits+0x40>
 8011038:	bd70      	pop	{r4, r5, r6, pc}
 801103a:	f853 6b04 	ldr.w	r6, [r3], #4
 801103e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011042:	e7eb      	b.n	801101c <__copybits+0x18>
 8011044:	f840 3b04 	str.w	r3, [r0], #4
 8011048:	e7f4      	b.n	8011034 <__copybits+0x30>

0801104a <__any_on>:
 801104a:	f100 0214 	add.w	r2, r0, #20
 801104e:	6900      	ldr	r0, [r0, #16]
 8011050:	114b      	asrs	r3, r1, #5
 8011052:	4298      	cmp	r0, r3
 8011054:	b510      	push	{r4, lr}
 8011056:	db11      	blt.n	801107c <__any_on+0x32>
 8011058:	dd0a      	ble.n	8011070 <__any_on+0x26>
 801105a:	f011 011f 	ands.w	r1, r1, #31
 801105e:	d007      	beq.n	8011070 <__any_on+0x26>
 8011060:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011064:	fa24 f001 	lsr.w	r0, r4, r1
 8011068:	fa00 f101 	lsl.w	r1, r0, r1
 801106c:	428c      	cmp	r4, r1
 801106e:	d10b      	bne.n	8011088 <__any_on+0x3e>
 8011070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011074:	4293      	cmp	r3, r2
 8011076:	d803      	bhi.n	8011080 <__any_on+0x36>
 8011078:	2000      	movs	r0, #0
 801107a:	bd10      	pop	{r4, pc}
 801107c:	4603      	mov	r3, r0
 801107e:	e7f7      	b.n	8011070 <__any_on+0x26>
 8011080:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011084:	2900      	cmp	r1, #0
 8011086:	d0f5      	beq.n	8011074 <__any_on+0x2a>
 8011088:	2001      	movs	r0, #1
 801108a:	e7f6      	b.n	801107a <__any_on+0x30>

0801108c <sulp>:
 801108c:	b570      	push	{r4, r5, r6, lr}
 801108e:	4604      	mov	r4, r0
 8011090:	460d      	mov	r5, r1
 8011092:	ec45 4b10 	vmov	d0, r4, r5
 8011096:	4616      	mov	r6, r2
 8011098:	f7ff feba 	bl	8010e10 <__ulp>
 801109c:	ec51 0b10 	vmov	r0, r1, d0
 80110a0:	b17e      	cbz	r6, 80110c2 <sulp+0x36>
 80110a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80110a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	dd09      	ble.n	80110c2 <sulp+0x36>
 80110ae:	051b      	lsls	r3, r3, #20
 80110b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80110b4:	2400      	movs	r4, #0
 80110b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80110ba:	4622      	mov	r2, r4
 80110bc:	462b      	mov	r3, r5
 80110be:	f7ef fabb 	bl	8000638 <__aeabi_dmul>
 80110c2:	ec41 0b10 	vmov	d0, r0, r1
 80110c6:	bd70      	pop	{r4, r5, r6, pc}

080110c8 <_strtod_l>:
 80110c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110cc:	b09f      	sub	sp, #124	@ 0x7c
 80110ce:	460c      	mov	r4, r1
 80110d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80110d2:	2200      	movs	r2, #0
 80110d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80110d6:	9005      	str	r0, [sp, #20]
 80110d8:	f04f 0a00 	mov.w	sl, #0
 80110dc:	f04f 0b00 	mov.w	fp, #0
 80110e0:	460a      	mov	r2, r1
 80110e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80110e4:	7811      	ldrb	r1, [r2, #0]
 80110e6:	292b      	cmp	r1, #43	@ 0x2b
 80110e8:	d04a      	beq.n	8011180 <_strtod_l+0xb8>
 80110ea:	d838      	bhi.n	801115e <_strtod_l+0x96>
 80110ec:	290d      	cmp	r1, #13
 80110ee:	d832      	bhi.n	8011156 <_strtod_l+0x8e>
 80110f0:	2908      	cmp	r1, #8
 80110f2:	d832      	bhi.n	801115a <_strtod_l+0x92>
 80110f4:	2900      	cmp	r1, #0
 80110f6:	d03b      	beq.n	8011170 <_strtod_l+0xa8>
 80110f8:	2200      	movs	r2, #0
 80110fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80110fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80110fe:	782a      	ldrb	r2, [r5, #0]
 8011100:	2a30      	cmp	r2, #48	@ 0x30
 8011102:	f040 80b3 	bne.w	801126c <_strtod_l+0x1a4>
 8011106:	786a      	ldrb	r2, [r5, #1]
 8011108:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801110c:	2a58      	cmp	r2, #88	@ 0x58
 801110e:	d16e      	bne.n	80111ee <_strtod_l+0x126>
 8011110:	9302      	str	r3, [sp, #8]
 8011112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011114:	9301      	str	r3, [sp, #4]
 8011116:	ab1a      	add	r3, sp, #104	@ 0x68
 8011118:	9300      	str	r3, [sp, #0]
 801111a:	4a8e      	ldr	r2, [pc, #568]	@ (8011354 <_strtod_l+0x28c>)
 801111c:	9805      	ldr	r0, [sp, #20]
 801111e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011120:	a919      	add	r1, sp, #100	@ 0x64
 8011122:	f001 faef 	bl	8012704 <__gethex>
 8011126:	f010 060f 	ands.w	r6, r0, #15
 801112a:	4604      	mov	r4, r0
 801112c:	d005      	beq.n	801113a <_strtod_l+0x72>
 801112e:	2e06      	cmp	r6, #6
 8011130:	d128      	bne.n	8011184 <_strtod_l+0xbc>
 8011132:	3501      	adds	r5, #1
 8011134:	2300      	movs	r3, #0
 8011136:	9519      	str	r5, [sp, #100]	@ 0x64
 8011138:	930b      	str	r3, [sp, #44]	@ 0x2c
 801113a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801113c:	2b00      	cmp	r3, #0
 801113e:	f040 858e 	bne.w	8011c5e <_strtod_l+0xb96>
 8011142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011144:	b1cb      	cbz	r3, 801117a <_strtod_l+0xb2>
 8011146:	4652      	mov	r2, sl
 8011148:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801114c:	ec43 2b10 	vmov	d0, r2, r3
 8011150:	b01f      	add	sp, #124	@ 0x7c
 8011152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011156:	2920      	cmp	r1, #32
 8011158:	d1ce      	bne.n	80110f8 <_strtod_l+0x30>
 801115a:	3201      	adds	r2, #1
 801115c:	e7c1      	b.n	80110e2 <_strtod_l+0x1a>
 801115e:	292d      	cmp	r1, #45	@ 0x2d
 8011160:	d1ca      	bne.n	80110f8 <_strtod_l+0x30>
 8011162:	2101      	movs	r1, #1
 8011164:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011166:	1c51      	adds	r1, r2, #1
 8011168:	9119      	str	r1, [sp, #100]	@ 0x64
 801116a:	7852      	ldrb	r2, [r2, #1]
 801116c:	2a00      	cmp	r2, #0
 801116e:	d1c5      	bne.n	80110fc <_strtod_l+0x34>
 8011170:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011172:	9419      	str	r4, [sp, #100]	@ 0x64
 8011174:	2b00      	cmp	r3, #0
 8011176:	f040 8570 	bne.w	8011c5a <_strtod_l+0xb92>
 801117a:	4652      	mov	r2, sl
 801117c:	465b      	mov	r3, fp
 801117e:	e7e5      	b.n	801114c <_strtod_l+0x84>
 8011180:	2100      	movs	r1, #0
 8011182:	e7ef      	b.n	8011164 <_strtod_l+0x9c>
 8011184:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011186:	b13a      	cbz	r2, 8011198 <_strtod_l+0xd0>
 8011188:	2135      	movs	r1, #53	@ 0x35
 801118a:	a81c      	add	r0, sp, #112	@ 0x70
 801118c:	f7ff ff3a 	bl	8011004 <__copybits>
 8011190:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011192:	9805      	ldr	r0, [sp, #20]
 8011194:	f7ff fb08 	bl	80107a8 <_Bfree>
 8011198:	3e01      	subs	r6, #1
 801119a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801119c:	2e04      	cmp	r6, #4
 801119e:	d806      	bhi.n	80111ae <_strtod_l+0xe6>
 80111a0:	e8df f006 	tbb	[pc, r6]
 80111a4:	201d0314 	.word	0x201d0314
 80111a8:	14          	.byte	0x14
 80111a9:	00          	.byte	0x00
 80111aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80111ae:	05e1      	lsls	r1, r4, #23
 80111b0:	bf48      	it	mi
 80111b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80111b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80111ba:	0d1b      	lsrs	r3, r3, #20
 80111bc:	051b      	lsls	r3, r3, #20
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d1bb      	bne.n	801113a <_strtod_l+0x72>
 80111c2:	f7fe fb31 	bl	800f828 <__errno>
 80111c6:	2322      	movs	r3, #34	@ 0x22
 80111c8:	6003      	str	r3, [r0, #0]
 80111ca:	e7b6      	b.n	801113a <_strtod_l+0x72>
 80111cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80111d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80111d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80111d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80111dc:	e7e7      	b.n	80111ae <_strtod_l+0xe6>
 80111de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801135c <_strtod_l+0x294>
 80111e2:	e7e4      	b.n	80111ae <_strtod_l+0xe6>
 80111e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80111e8:	f04f 3aff 	mov.w	sl, #4294967295
 80111ec:	e7df      	b.n	80111ae <_strtod_l+0xe6>
 80111ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80111f0:	1c5a      	adds	r2, r3, #1
 80111f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80111f4:	785b      	ldrb	r3, [r3, #1]
 80111f6:	2b30      	cmp	r3, #48	@ 0x30
 80111f8:	d0f9      	beq.n	80111ee <_strtod_l+0x126>
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d09d      	beq.n	801113a <_strtod_l+0x72>
 80111fe:	2301      	movs	r3, #1
 8011200:	9309      	str	r3, [sp, #36]	@ 0x24
 8011202:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011204:	930c      	str	r3, [sp, #48]	@ 0x30
 8011206:	2300      	movs	r3, #0
 8011208:	9308      	str	r3, [sp, #32]
 801120a:	930a      	str	r3, [sp, #40]	@ 0x28
 801120c:	461f      	mov	r7, r3
 801120e:	220a      	movs	r2, #10
 8011210:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011212:	7805      	ldrb	r5, [r0, #0]
 8011214:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011218:	b2d9      	uxtb	r1, r3
 801121a:	2909      	cmp	r1, #9
 801121c:	d928      	bls.n	8011270 <_strtod_l+0x1a8>
 801121e:	494e      	ldr	r1, [pc, #312]	@ (8011358 <_strtod_l+0x290>)
 8011220:	2201      	movs	r2, #1
 8011222:	f001 f979 	bl	8012518 <strncmp>
 8011226:	2800      	cmp	r0, #0
 8011228:	d032      	beq.n	8011290 <_strtod_l+0x1c8>
 801122a:	2000      	movs	r0, #0
 801122c:	462a      	mov	r2, r5
 801122e:	4681      	mov	r9, r0
 8011230:	463d      	mov	r5, r7
 8011232:	4603      	mov	r3, r0
 8011234:	2a65      	cmp	r2, #101	@ 0x65
 8011236:	d001      	beq.n	801123c <_strtod_l+0x174>
 8011238:	2a45      	cmp	r2, #69	@ 0x45
 801123a:	d114      	bne.n	8011266 <_strtod_l+0x19e>
 801123c:	b91d      	cbnz	r5, 8011246 <_strtod_l+0x17e>
 801123e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011240:	4302      	orrs	r2, r0
 8011242:	d095      	beq.n	8011170 <_strtod_l+0xa8>
 8011244:	2500      	movs	r5, #0
 8011246:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011248:	1c62      	adds	r2, r4, #1
 801124a:	9219      	str	r2, [sp, #100]	@ 0x64
 801124c:	7862      	ldrb	r2, [r4, #1]
 801124e:	2a2b      	cmp	r2, #43	@ 0x2b
 8011250:	d077      	beq.n	8011342 <_strtod_l+0x27a>
 8011252:	2a2d      	cmp	r2, #45	@ 0x2d
 8011254:	d07b      	beq.n	801134e <_strtod_l+0x286>
 8011256:	f04f 0c00 	mov.w	ip, #0
 801125a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801125e:	2909      	cmp	r1, #9
 8011260:	f240 8082 	bls.w	8011368 <_strtod_l+0x2a0>
 8011264:	9419      	str	r4, [sp, #100]	@ 0x64
 8011266:	f04f 0800 	mov.w	r8, #0
 801126a:	e0a2      	b.n	80113b2 <_strtod_l+0x2ea>
 801126c:	2300      	movs	r3, #0
 801126e:	e7c7      	b.n	8011200 <_strtod_l+0x138>
 8011270:	2f08      	cmp	r7, #8
 8011272:	bfd5      	itete	le
 8011274:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011276:	9908      	ldrgt	r1, [sp, #32]
 8011278:	fb02 3301 	mlale	r3, r2, r1, r3
 801127c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011280:	f100 0001 	add.w	r0, r0, #1
 8011284:	bfd4      	ite	le
 8011286:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011288:	9308      	strgt	r3, [sp, #32]
 801128a:	3701      	adds	r7, #1
 801128c:	9019      	str	r0, [sp, #100]	@ 0x64
 801128e:	e7bf      	b.n	8011210 <_strtod_l+0x148>
 8011290:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011292:	1c5a      	adds	r2, r3, #1
 8011294:	9219      	str	r2, [sp, #100]	@ 0x64
 8011296:	785a      	ldrb	r2, [r3, #1]
 8011298:	b37f      	cbz	r7, 80112fa <_strtod_l+0x232>
 801129a:	4681      	mov	r9, r0
 801129c:	463d      	mov	r5, r7
 801129e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80112a2:	2b09      	cmp	r3, #9
 80112a4:	d912      	bls.n	80112cc <_strtod_l+0x204>
 80112a6:	2301      	movs	r3, #1
 80112a8:	e7c4      	b.n	8011234 <_strtod_l+0x16c>
 80112aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80112ac:	1c5a      	adds	r2, r3, #1
 80112ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80112b0:	785a      	ldrb	r2, [r3, #1]
 80112b2:	3001      	adds	r0, #1
 80112b4:	2a30      	cmp	r2, #48	@ 0x30
 80112b6:	d0f8      	beq.n	80112aa <_strtod_l+0x1e2>
 80112b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80112bc:	2b08      	cmp	r3, #8
 80112be:	f200 84d3 	bhi.w	8011c68 <_strtod_l+0xba0>
 80112c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80112c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80112c6:	4681      	mov	r9, r0
 80112c8:	2000      	movs	r0, #0
 80112ca:	4605      	mov	r5, r0
 80112cc:	3a30      	subs	r2, #48	@ 0x30
 80112ce:	f100 0301 	add.w	r3, r0, #1
 80112d2:	d02a      	beq.n	801132a <_strtod_l+0x262>
 80112d4:	4499      	add	r9, r3
 80112d6:	eb00 0c05 	add.w	ip, r0, r5
 80112da:	462b      	mov	r3, r5
 80112dc:	210a      	movs	r1, #10
 80112de:	4563      	cmp	r3, ip
 80112e0:	d10d      	bne.n	80112fe <_strtod_l+0x236>
 80112e2:	1c69      	adds	r1, r5, #1
 80112e4:	4401      	add	r1, r0
 80112e6:	4428      	add	r0, r5
 80112e8:	2808      	cmp	r0, #8
 80112ea:	dc16      	bgt.n	801131a <_strtod_l+0x252>
 80112ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80112ee:	230a      	movs	r3, #10
 80112f0:	fb03 2300 	mla	r3, r3, r0, r2
 80112f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80112f6:	2300      	movs	r3, #0
 80112f8:	e018      	b.n	801132c <_strtod_l+0x264>
 80112fa:	4638      	mov	r0, r7
 80112fc:	e7da      	b.n	80112b4 <_strtod_l+0x1ec>
 80112fe:	2b08      	cmp	r3, #8
 8011300:	f103 0301 	add.w	r3, r3, #1
 8011304:	dc03      	bgt.n	801130e <_strtod_l+0x246>
 8011306:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011308:	434e      	muls	r6, r1
 801130a:	960a      	str	r6, [sp, #40]	@ 0x28
 801130c:	e7e7      	b.n	80112de <_strtod_l+0x216>
 801130e:	2b10      	cmp	r3, #16
 8011310:	bfde      	ittt	le
 8011312:	9e08      	ldrle	r6, [sp, #32]
 8011314:	434e      	mulle	r6, r1
 8011316:	9608      	strle	r6, [sp, #32]
 8011318:	e7e1      	b.n	80112de <_strtod_l+0x216>
 801131a:	280f      	cmp	r0, #15
 801131c:	dceb      	bgt.n	80112f6 <_strtod_l+0x22e>
 801131e:	9808      	ldr	r0, [sp, #32]
 8011320:	230a      	movs	r3, #10
 8011322:	fb03 2300 	mla	r3, r3, r0, r2
 8011326:	9308      	str	r3, [sp, #32]
 8011328:	e7e5      	b.n	80112f6 <_strtod_l+0x22e>
 801132a:	4629      	mov	r1, r5
 801132c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801132e:	1c50      	adds	r0, r2, #1
 8011330:	9019      	str	r0, [sp, #100]	@ 0x64
 8011332:	7852      	ldrb	r2, [r2, #1]
 8011334:	4618      	mov	r0, r3
 8011336:	460d      	mov	r5, r1
 8011338:	e7b1      	b.n	801129e <_strtod_l+0x1d6>
 801133a:	f04f 0900 	mov.w	r9, #0
 801133e:	2301      	movs	r3, #1
 8011340:	e77d      	b.n	801123e <_strtod_l+0x176>
 8011342:	f04f 0c00 	mov.w	ip, #0
 8011346:	1ca2      	adds	r2, r4, #2
 8011348:	9219      	str	r2, [sp, #100]	@ 0x64
 801134a:	78a2      	ldrb	r2, [r4, #2]
 801134c:	e785      	b.n	801125a <_strtod_l+0x192>
 801134e:	f04f 0c01 	mov.w	ip, #1
 8011352:	e7f8      	b.n	8011346 <_strtod_l+0x27e>
 8011354:	080143f0 	.word	0x080143f0
 8011358:	080143d8 	.word	0x080143d8
 801135c:	7ff00000 	.word	0x7ff00000
 8011360:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011362:	1c51      	adds	r1, r2, #1
 8011364:	9119      	str	r1, [sp, #100]	@ 0x64
 8011366:	7852      	ldrb	r2, [r2, #1]
 8011368:	2a30      	cmp	r2, #48	@ 0x30
 801136a:	d0f9      	beq.n	8011360 <_strtod_l+0x298>
 801136c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011370:	2908      	cmp	r1, #8
 8011372:	f63f af78 	bhi.w	8011266 <_strtod_l+0x19e>
 8011376:	3a30      	subs	r2, #48	@ 0x30
 8011378:	920e      	str	r2, [sp, #56]	@ 0x38
 801137a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801137c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801137e:	f04f 080a 	mov.w	r8, #10
 8011382:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011384:	1c56      	adds	r6, r2, #1
 8011386:	9619      	str	r6, [sp, #100]	@ 0x64
 8011388:	7852      	ldrb	r2, [r2, #1]
 801138a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801138e:	f1be 0f09 	cmp.w	lr, #9
 8011392:	d939      	bls.n	8011408 <_strtod_l+0x340>
 8011394:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011396:	1a76      	subs	r6, r6, r1
 8011398:	2e08      	cmp	r6, #8
 801139a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801139e:	dc03      	bgt.n	80113a8 <_strtod_l+0x2e0>
 80113a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80113a2:	4588      	cmp	r8, r1
 80113a4:	bfa8      	it	ge
 80113a6:	4688      	movge	r8, r1
 80113a8:	f1bc 0f00 	cmp.w	ip, #0
 80113ac:	d001      	beq.n	80113b2 <_strtod_l+0x2ea>
 80113ae:	f1c8 0800 	rsb	r8, r8, #0
 80113b2:	2d00      	cmp	r5, #0
 80113b4:	d14e      	bne.n	8011454 <_strtod_l+0x38c>
 80113b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80113b8:	4308      	orrs	r0, r1
 80113ba:	f47f aebe 	bne.w	801113a <_strtod_l+0x72>
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f47f aed6 	bne.w	8011170 <_strtod_l+0xa8>
 80113c4:	2a69      	cmp	r2, #105	@ 0x69
 80113c6:	d028      	beq.n	801141a <_strtod_l+0x352>
 80113c8:	dc25      	bgt.n	8011416 <_strtod_l+0x34e>
 80113ca:	2a49      	cmp	r2, #73	@ 0x49
 80113cc:	d025      	beq.n	801141a <_strtod_l+0x352>
 80113ce:	2a4e      	cmp	r2, #78	@ 0x4e
 80113d0:	f47f aece 	bne.w	8011170 <_strtod_l+0xa8>
 80113d4:	499b      	ldr	r1, [pc, #620]	@ (8011644 <_strtod_l+0x57c>)
 80113d6:	a819      	add	r0, sp, #100	@ 0x64
 80113d8:	f001 fbb6 	bl	8012b48 <__match>
 80113dc:	2800      	cmp	r0, #0
 80113de:	f43f aec7 	beq.w	8011170 <_strtod_l+0xa8>
 80113e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	2b28      	cmp	r3, #40	@ 0x28
 80113e8:	d12e      	bne.n	8011448 <_strtod_l+0x380>
 80113ea:	4997      	ldr	r1, [pc, #604]	@ (8011648 <_strtod_l+0x580>)
 80113ec:	aa1c      	add	r2, sp, #112	@ 0x70
 80113ee:	a819      	add	r0, sp, #100	@ 0x64
 80113f0:	f001 fbbe 	bl	8012b70 <__hexnan>
 80113f4:	2805      	cmp	r0, #5
 80113f6:	d127      	bne.n	8011448 <_strtod_l+0x380>
 80113f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80113fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80113fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011402:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011406:	e698      	b.n	801113a <_strtod_l+0x72>
 8011408:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801140a:	fb08 2101 	mla	r1, r8, r1, r2
 801140e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011412:	920e      	str	r2, [sp, #56]	@ 0x38
 8011414:	e7b5      	b.n	8011382 <_strtod_l+0x2ba>
 8011416:	2a6e      	cmp	r2, #110	@ 0x6e
 8011418:	e7da      	b.n	80113d0 <_strtod_l+0x308>
 801141a:	498c      	ldr	r1, [pc, #560]	@ (801164c <_strtod_l+0x584>)
 801141c:	a819      	add	r0, sp, #100	@ 0x64
 801141e:	f001 fb93 	bl	8012b48 <__match>
 8011422:	2800      	cmp	r0, #0
 8011424:	f43f aea4 	beq.w	8011170 <_strtod_l+0xa8>
 8011428:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801142a:	4989      	ldr	r1, [pc, #548]	@ (8011650 <_strtod_l+0x588>)
 801142c:	3b01      	subs	r3, #1
 801142e:	a819      	add	r0, sp, #100	@ 0x64
 8011430:	9319      	str	r3, [sp, #100]	@ 0x64
 8011432:	f001 fb89 	bl	8012b48 <__match>
 8011436:	b910      	cbnz	r0, 801143e <_strtod_l+0x376>
 8011438:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801143a:	3301      	adds	r3, #1
 801143c:	9319      	str	r3, [sp, #100]	@ 0x64
 801143e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011660 <_strtod_l+0x598>
 8011442:	f04f 0a00 	mov.w	sl, #0
 8011446:	e678      	b.n	801113a <_strtod_l+0x72>
 8011448:	4882      	ldr	r0, [pc, #520]	@ (8011654 <_strtod_l+0x58c>)
 801144a:	f001 f8b9 	bl	80125c0 <nan>
 801144e:	ec5b ab10 	vmov	sl, fp, d0
 8011452:	e672      	b.n	801113a <_strtod_l+0x72>
 8011454:	eba8 0309 	sub.w	r3, r8, r9
 8011458:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801145a:	9309      	str	r3, [sp, #36]	@ 0x24
 801145c:	2f00      	cmp	r7, #0
 801145e:	bf08      	it	eq
 8011460:	462f      	moveq	r7, r5
 8011462:	2d10      	cmp	r5, #16
 8011464:	462c      	mov	r4, r5
 8011466:	bfa8      	it	ge
 8011468:	2410      	movge	r4, #16
 801146a:	f7ef f86b 	bl	8000544 <__aeabi_ui2d>
 801146e:	2d09      	cmp	r5, #9
 8011470:	4682      	mov	sl, r0
 8011472:	468b      	mov	fp, r1
 8011474:	dc13      	bgt.n	801149e <_strtod_l+0x3d6>
 8011476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011478:	2b00      	cmp	r3, #0
 801147a:	f43f ae5e 	beq.w	801113a <_strtod_l+0x72>
 801147e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011480:	dd78      	ble.n	8011574 <_strtod_l+0x4ac>
 8011482:	2b16      	cmp	r3, #22
 8011484:	dc5f      	bgt.n	8011546 <_strtod_l+0x47e>
 8011486:	4974      	ldr	r1, [pc, #464]	@ (8011658 <_strtod_l+0x590>)
 8011488:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801148c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011490:	4652      	mov	r2, sl
 8011492:	465b      	mov	r3, fp
 8011494:	f7ef f8d0 	bl	8000638 <__aeabi_dmul>
 8011498:	4682      	mov	sl, r0
 801149a:	468b      	mov	fp, r1
 801149c:	e64d      	b.n	801113a <_strtod_l+0x72>
 801149e:	4b6e      	ldr	r3, [pc, #440]	@ (8011658 <_strtod_l+0x590>)
 80114a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80114a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80114a8:	f7ef f8c6 	bl	8000638 <__aeabi_dmul>
 80114ac:	4682      	mov	sl, r0
 80114ae:	9808      	ldr	r0, [sp, #32]
 80114b0:	468b      	mov	fp, r1
 80114b2:	f7ef f847 	bl	8000544 <__aeabi_ui2d>
 80114b6:	4602      	mov	r2, r0
 80114b8:	460b      	mov	r3, r1
 80114ba:	4650      	mov	r0, sl
 80114bc:	4659      	mov	r1, fp
 80114be:	f7ee ff05 	bl	80002cc <__adddf3>
 80114c2:	2d0f      	cmp	r5, #15
 80114c4:	4682      	mov	sl, r0
 80114c6:	468b      	mov	fp, r1
 80114c8:	ddd5      	ble.n	8011476 <_strtod_l+0x3ae>
 80114ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114cc:	1b2c      	subs	r4, r5, r4
 80114ce:	441c      	add	r4, r3
 80114d0:	2c00      	cmp	r4, #0
 80114d2:	f340 8096 	ble.w	8011602 <_strtod_l+0x53a>
 80114d6:	f014 030f 	ands.w	r3, r4, #15
 80114da:	d00a      	beq.n	80114f2 <_strtod_l+0x42a>
 80114dc:	495e      	ldr	r1, [pc, #376]	@ (8011658 <_strtod_l+0x590>)
 80114de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80114e2:	4652      	mov	r2, sl
 80114e4:	465b      	mov	r3, fp
 80114e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114ea:	f7ef f8a5 	bl	8000638 <__aeabi_dmul>
 80114ee:	4682      	mov	sl, r0
 80114f0:	468b      	mov	fp, r1
 80114f2:	f034 040f 	bics.w	r4, r4, #15
 80114f6:	d073      	beq.n	80115e0 <_strtod_l+0x518>
 80114f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80114fc:	dd48      	ble.n	8011590 <_strtod_l+0x4c8>
 80114fe:	2400      	movs	r4, #0
 8011500:	46a0      	mov	r8, r4
 8011502:	940a      	str	r4, [sp, #40]	@ 0x28
 8011504:	46a1      	mov	r9, r4
 8011506:	9a05      	ldr	r2, [sp, #20]
 8011508:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011660 <_strtod_l+0x598>
 801150c:	2322      	movs	r3, #34	@ 0x22
 801150e:	6013      	str	r3, [r2, #0]
 8011510:	f04f 0a00 	mov.w	sl, #0
 8011514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011516:	2b00      	cmp	r3, #0
 8011518:	f43f ae0f 	beq.w	801113a <_strtod_l+0x72>
 801151c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801151e:	9805      	ldr	r0, [sp, #20]
 8011520:	f7ff f942 	bl	80107a8 <_Bfree>
 8011524:	9805      	ldr	r0, [sp, #20]
 8011526:	4649      	mov	r1, r9
 8011528:	f7ff f93e 	bl	80107a8 <_Bfree>
 801152c:	9805      	ldr	r0, [sp, #20]
 801152e:	4641      	mov	r1, r8
 8011530:	f7ff f93a 	bl	80107a8 <_Bfree>
 8011534:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011536:	9805      	ldr	r0, [sp, #20]
 8011538:	f7ff f936 	bl	80107a8 <_Bfree>
 801153c:	9805      	ldr	r0, [sp, #20]
 801153e:	4621      	mov	r1, r4
 8011540:	f7ff f932 	bl	80107a8 <_Bfree>
 8011544:	e5f9      	b.n	801113a <_strtod_l+0x72>
 8011546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011548:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801154c:	4293      	cmp	r3, r2
 801154e:	dbbc      	blt.n	80114ca <_strtod_l+0x402>
 8011550:	4c41      	ldr	r4, [pc, #260]	@ (8011658 <_strtod_l+0x590>)
 8011552:	f1c5 050f 	rsb	r5, r5, #15
 8011556:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801155a:	4652      	mov	r2, sl
 801155c:	465b      	mov	r3, fp
 801155e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011562:	f7ef f869 	bl	8000638 <__aeabi_dmul>
 8011566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011568:	1b5d      	subs	r5, r3, r5
 801156a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801156e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011572:	e78f      	b.n	8011494 <_strtod_l+0x3cc>
 8011574:	3316      	adds	r3, #22
 8011576:	dba8      	blt.n	80114ca <_strtod_l+0x402>
 8011578:	4b37      	ldr	r3, [pc, #220]	@ (8011658 <_strtod_l+0x590>)
 801157a:	eba9 0808 	sub.w	r8, r9, r8
 801157e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011582:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011586:	4650      	mov	r0, sl
 8011588:	4659      	mov	r1, fp
 801158a:	f7ef f97f 	bl	800088c <__aeabi_ddiv>
 801158e:	e783      	b.n	8011498 <_strtod_l+0x3d0>
 8011590:	4b32      	ldr	r3, [pc, #200]	@ (801165c <_strtod_l+0x594>)
 8011592:	9308      	str	r3, [sp, #32]
 8011594:	2300      	movs	r3, #0
 8011596:	1124      	asrs	r4, r4, #4
 8011598:	4650      	mov	r0, sl
 801159a:	4659      	mov	r1, fp
 801159c:	461e      	mov	r6, r3
 801159e:	2c01      	cmp	r4, #1
 80115a0:	dc21      	bgt.n	80115e6 <_strtod_l+0x51e>
 80115a2:	b10b      	cbz	r3, 80115a8 <_strtod_l+0x4e0>
 80115a4:	4682      	mov	sl, r0
 80115a6:	468b      	mov	fp, r1
 80115a8:	492c      	ldr	r1, [pc, #176]	@ (801165c <_strtod_l+0x594>)
 80115aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80115ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80115b2:	4652      	mov	r2, sl
 80115b4:	465b      	mov	r3, fp
 80115b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115ba:	f7ef f83d 	bl	8000638 <__aeabi_dmul>
 80115be:	4b28      	ldr	r3, [pc, #160]	@ (8011660 <_strtod_l+0x598>)
 80115c0:	460a      	mov	r2, r1
 80115c2:	400b      	ands	r3, r1
 80115c4:	4927      	ldr	r1, [pc, #156]	@ (8011664 <_strtod_l+0x59c>)
 80115c6:	428b      	cmp	r3, r1
 80115c8:	4682      	mov	sl, r0
 80115ca:	d898      	bhi.n	80114fe <_strtod_l+0x436>
 80115cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80115d0:	428b      	cmp	r3, r1
 80115d2:	bf86      	itte	hi
 80115d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011668 <_strtod_l+0x5a0>
 80115d8:	f04f 3aff 	movhi.w	sl, #4294967295
 80115dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80115e0:	2300      	movs	r3, #0
 80115e2:	9308      	str	r3, [sp, #32]
 80115e4:	e07a      	b.n	80116dc <_strtod_l+0x614>
 80115e6:	07e2      	lsls	r2, r4, #31
 80115e8:	d505      	bpl.n	80115f6 <_strtod_l+0x52e>
 80115ea:	9b08      	ldr	r3, [sp, #32]
 80115ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f0:	f7ef f822 	bl	8000638 <__aeabi_dmul>
 80115f4:	2301      	movs	r3, #1
 80115f6:	9a08      	ldr	r2, [sp, #32]
 80115f8:	3208      	adds	r2, #8
 80115fa:	3601      	adds	r6, #1
 80115fc:	1064      	asrs	r4, r4, #1
 80115fe:	9208      	str	r2, [sp, #32]
 8011600:	e7cd      	b.n	801159e <_strtod_l+0x4d6>
 8011602:	d0ed      	beq.n	80115e0 <_strtod_l+0x518>
 8011604:	4264      	negs	r4, r4
 8011606:	f014 020f 	ands.w	r2, r4, #15
 801160a:	d00a      	beq.n	8011622 <_strtod_l+0x55a>
 801160c:	4b12      	ldr	r3, [pc, #72]	@ (8011658 <_strtod_l+0x590>)
 801160e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011612:	4650      	mov	r0, sl
 8011614:	4659      	mov	r1, fp
 8011616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161a:	f7ef f937 	bl	800088c <__aeabi_ddiv>
 801161e:	4682      	mov	sl, r0
 8011620:	468b      	mov	fp, r1
 8011622:	1124      	asrs	r4, r4, #4
 8011624:	d0dc      	beq.n	80115e0 <_strtod_l+0x518>
 8011626:	2c1f      	cmp	r4, #31
 8011628:	dd20      	ble.n	801166c <_strtod_l+0x5a4>
 801162a:	2400      	movs	r4, #0
 801162c:	46a0      	mov	r8, r4
 801162e:	940a      	str	r4, [sp, #40]	@ 0x28
 8011630:	46a1      	mov	r9, r4
 8011632:	9a05      	ldr	r2, [sp, #20]
 8011634:	2322      	movs	r3, #34	@ 0x22
 8011636:	f04f 0a00 	mov.w	sl, #0
 801163a:	f04f 0b00 	mov.w	fp, #0
 801163e:	6013      	str	r3, [r2, #0]
 8011640:	e768      	b.n	8011514 <_strtod_l+0x44c>
 8011642:	bf00      	nop
 8011644:	080141c5 	.word	0x080141c5
 8011648:	080143dc 	.word	0x080143dc
 801164c:	080141bd 	.word	0x080141bd
 8011650:	080141f4 	.word	0x080141f4
 8011654:	08014585 	.word	0x08014585
 8011658:	08014310 	.word	0x08014310
 801165c:	080142e8 	.word	0x080142e8
 8011660:	7ff00000 	.word	0x7ff00000
 8011664:	7ca00000 	.word	0x7ca00000
 8011668:	7fefffff 	.word	0x7fefffff
 801166c:	f014 0310 	ands.w	r3, r4, #16
 8011670:	bf18      	it	ne
 8011672:	236a      	movne	r3, #106	@ 0x6a
 8011674:	4ea9      	ldr	r6, [pc, #676]	@ (801191c <_strtod_l+0x854>)
 8011676:	9308      	str	r3, [sp, #32]
 8011678:	4650      	mov	r0, sl
 801167a:	4659      	mov	r1, fp
 801167c:	2300      	movs	r3, #0
 801167e:	07e2      	lsls	r2, r4, #31
 8011680:	d504      	bpl.n	801168c <_strtod_l+0x5c4>
 8011682:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011686:	f7ee ffd7 	bl	8000638 <__aeabi_dmul>
 801168a:	2301      	movs	r3, #1
 801168c:	1064      	asrs	r4, r4, #1
 801168e:	f106 0608 	add.w	r6, r6, #8
 8011692:	d1f4      	bne.n	801167e <_strtod_l+0x5b6>
 8011694:	b10b      	cbz	r3, 801169a <_strtod_l+0x5d2>
 8011696:	4682      	mov	sl, r0
 8011698:	468b      	mov	fp, r1
 801169a:	9b08      	ldr	r3, [sp, #32]
 801169c:	b1b3      	cbz	r3, 80116cc <_strtod_l+0x604>
 801169e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80116a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	4659      	mov	r1, fp
 80116aa:	dd0f      	ble.n	80116cc <_strtod_l+0x604>
 80116ac:	2b1f      	cmp	r3, #31
 80116ae:	dd55      	ble.n	801175c <_strtod_l+0x694>
 80116b0:	2b34      	cmp	r3, #52	@ 0x34
 80116b2:	bfde      	ittt	le
 80116b4:	f04f 33ff 	movle.w	r3, #4294967295
 80116b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80116bc:	4093      	lslle	r3, r2
 80116be:	f04f 0a00 	mov.w	sl, #0
 80116c2:	bfcc      	ite	gt
 80116c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80116c8:	ea03 0b01 	andle.w	fp, r3, r1
 80116cc:	2200      	movs	r2, #0
 80116ce:	2300      	movs	r3, #0
 80116d0:	4650      	mov	r0, sl
 80116d2:	4659      	mov	r1, fp
 80116d4:	f7ef fa18 	bl	8000b08 <__aeabi_dcmpeq>
 80116d8:	2800      	cmp	r0, #0
 80116da:	d1a6      	bne.n	801162a <_strtod_l+0x562>
 80116dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80116e2:	9805      	ldr	r0, [sp, #20]
 80116e4:	462b      	mov	r3, r5
 80116e6:	463a      	mov	r2, r7
 80116e8:	f7ff f8c6 	bl	8010878 <__s2b>
 80116ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80116ee:	2800      	cmp	r0, #0
 80116f0:	f43f af05 	beq.w	80114fe <_strtod_l+0x436>
 80116f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116f6:	2a00      	cmp	r2, #0
 80116f8:	eba9 0308 	sub.w	r3, r9, r8
 80116fc:	bfa8      	it	ge
 80116fe:	2300      	movge	r3, #0
 8011700:	9312      	str	r3, [sp, #72]	@ 0x48
 8011702:	2400      	movs	r4, #0
 8011704:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011708:	9316      	str	r3, [sp, #88]	@ 0x58
 801170a:	46a0      	mov	r8, r4
 801170c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801170e:	9805      	ldr	r0, [sp, #20]
 8011710:	6859      	ldr	r1, [r3, #4]
 8011712:	f7ff f809 	bl	8010728 <_Balloc>
 8011716:	4681      	mov	r9, r0
 8011718:	2800      	cmp	r0, #0
 801171a:	f43f aef4 	beq.w	8011506 <_strtod_l+0x43e>
 801171e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011720:	691a      	ldr	r2, [r3, #16]
 8011722:	3202      	adds	r2, #2
 8011724:	f103 010c 	add.w	r1, r3, #12
 8011728:	0092      	lsls	r2, r2, #2
 801172a:	300c      	adds	r0, #12
 801172c:	f000 ff38 	bl	80125a0 <memcpy>
 8011730:	ec4b ab10 	vmov	d0, sl, fp
 8011734:	9805      	ldr	r0, [sp, #20]
 8011736:	aa1c      	add	r2, sp, #112	@ 0x70
 8011738:	a91b      	add	r1, sp, #108	@ 0x6c
 801173a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801173e:	f7ff fbd7 	bl	8010ef0 <__d2b>
 8011742:	901a      	str	r0, [sp, #104]	@ 0x68
 8011744:	2800      	cmp	r0, #0
 8011746:	f43f aede 	beq.w	8011506 <_strtod_l+0x43e>
 801174a:	9805      	ldr	r0, [sp, #20]
 801174c:	2101      	movs	r1, #1
 801174e:	f7ff f929 	bl	80109a4 <__i2b>
 8011752:	4680      	mov	r8, r0
 8011754:	b948      	cbnz	r0, 801176a <_strtod_l+0x6a2>
 8011756:	f04f 0800 	mov.w	r8, #0
 801175a:	e6d4      	b.n	8011506 <_strtod_l+0x43e>
 801175c:	f04f 32ff 	mov.w	r2, #4294967295
 8011760:	fa02 f303 	lsl.w	r3, r2, r3
 8011764:	ea03 0a0a 	and.w	sl, r3, sl
 8011768:	e7b0      	b.n	80116cc <_strtod_l+0x604>
 801176a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801176c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801176e:	2d00      	cmp	r5, #0
 8011770:	bfab      	itete	ge
 8011772:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011774:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011776:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011778:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801177a:	bfac      	ite	ge
 801177c:	18ef      	addge	r7, r5, r3
 801177e:	1b5e      	sublt	r6, r3, r5
 8011780:	9b08      	ldr	r3, [sp, #32]
 8011782:	1aed      	subs	r5, r5, r3
 8011784:	4415      	add	r5, r2
 8011786:	4b66      	ldr	r3, [pc, #408]	@ (8011920 <_strtod_l+0x858>)
 8011788:	3d01      	subs	r5, #1
 801178a:	429d      	cmp	r5, r3
 801178c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011790:	da50      	bge.n	8011834 <_strtod_l+0x76c>
 8011792:	1b5b      	subs	r3, r3, r5
 8011794:	2b1f      	cmp	r3, #31
 8011796:	eba2 0203 	sub.w	r2, r2, r3
 801179a:	f04f 0101 	mov.w	r1, #1
 801179e:	dc3d      	bgt.n	801181c <_strtod_l+0x754>
 80117a0:	fa01 f303 	lsl.w	r3, r1, r3
 80117a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80117a6:	2300      	movs	r3, #0
 80117a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80117aa:	18bd      	adds	r5, r7, r2
 80117ac:	9b08      	ldr	r3, [sp, #32]
 80117ae:	42af      	cmp	r7, r5
 80117b0:	4416      	add	r6, r2
 80117b2:	441e      	add	r6, r3
 80117b4:	463b      	mov	r3, r7
 80117b6:	bfa8      	it	ge
 80117b8:	462b      	movge	r3, r5
 80117ba:	42b3      	cmp	r3, r6
 80117bc:	bfa8      	it	ge
 80117be:	4633      	movge	r3, r6
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	bfc2      	ittt	gt
 80117c4:	1aed      	subgt	r5, r5, r3
 80117c6:	1af6      	subgt	r6, r6, r3
 80117c8:	1aff      	subgt	r7, r7, r3
 80117ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	dd16      	ble.n	80117fe <_strtod_l+0x736>
 80117d0:	4641      	mov	r1, r8
 80117d2:	9805      	ldr	r0, [sp, #20]
 80117d4:	461a      	mov	r2, r3
 80117d6:	f7ff f9a5 	bl	8010b24 <__pow5mult>
 80117da:	4680      	mov	r8, r0
 80117dc:	2800      	cmp	r0, #0
 80117de:	d0ba      	beq.n	8011756 <_strtod_l+0x68e>
 80117e0:	4601      	mov	r1, r0
 80117e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80117e4:	9805      	ldr	r0, [sp, #20]
 80117e6:	f7ff f8f3 	bl	80109d0 <__multiply>
 80117ea:	900e      	str	r0, [sp, #56]	@ 0x38
 80117ec:	2800      	cmp	r0, #0
 80117ee:	f43f ae8a 	beq.w	8011506 <_strtod_l+0x43e>
 80117f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80117f4:	9805      	ldr	r0, [sp, #20]
 80117f6:	f7fe ffd7 	bl	80107a8 <_Bfree>
 80117fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80117fe:	2d00      	cmp	r5, #0
 8011800:	dc1d      	bgt.n	801183e <_strtod_l+0x776>
 8011802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011804:	2b00      	cmp	r3, #0
 8011806:	dd23      	ble.n	8011850 <_strtod_l+0x788>
 8011808:	4649      	mov	r1, r9
 801180a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801180c:	9805      	ldr	r0, [sp, #20]
 801180e:	f7ff f989 	bl	8010b24 <__pow5mult>
 8011812:	4681      	mov	r9, r0
 8011814:	b9e0      	cbnz	r0, 8011850 <_strtod_l+0x788>
 8011816:	f04f 0900 	mov.w	r9, #0
 801181a:	e674      	b.n	8011506 <_strtod_l+0x43e>
 801181c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011820:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011824:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011828:	35e2      	adds	r5, #226	@ 0xe2
 801182a:	fa01 f305 	lsl.w	r3, r1, r5
 801182e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011830:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011832:	e7ba      	b.n	80117aa <_strtod_l+0x6e2>
 8011834:	2300      	movs	r3, #0
 8011836:	9310      	str	r3, [sp, #64]	@ 0x40
 8011838:	2301      	movs	r3, #1
 801183a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801183c:	e7b5      	b.n	80117aa <_strtod_l+0x6e2>
 801183e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011840:	9805      	ldr	r0, [sp, #20]
 8011842:	462a      	mov	r2, r5
 8011844:	f7ff f9c8 	bl	8010bd8 <__lshift>
 8011848:	901a      	str	r0, [sp, #104]	@ 0x68
 801184a:	2800      	cmp	r0, #0
 801184c:	d1d9      	bne.n	8011802 <_strtod_l+0x73a>
 801184e:	e65a      	b.n	8011506 <_strtod_l+0x43e>
 8011850:	2e00      	cmp	r6, #0
 8011852:	dd07      	ble.n	8011864 <_strtod_l+0x79c>
 8011854:	4649      	mov	r1, r9
 8011856:	9805      	ldr	r0, [sp, #20]
 8011858:	4632      	mov	r2, r6
 801185a:	f7ff f9bd 	bl	8010bd8 <__lshift>
 801185e:	4681      	mov	r9, r0
 8011860:	2800      	cmp	r0, #0
 8011862:	d0d8      	beq.n	8011816 <_strtod_l+0x74e>
 8011864:	2f00      	cmp	r7, #0
 8011866:	dd08      	ble.n	801187a <_strtod_l+0x7b2>
 8011868:	4641      	mov	r1, r8
 801186a:	9805      	ldr	r0, [sp, #20]
 801186c:	463a      	mov	r2, r7
 801186e:	f7ff f9b3 	bl	8010bd8 <__lshift>
 8011872:	4680      	mov	r8, r0
 8011874:	2800      	cmp	r0, #0
 8011876:	f43f ae46 	beq.w	8011506 <_strtod_l+0x43e>
 801187a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801187c:	9805      	ldr	r0, [sp, #20]
 801187e:	464a      	mov	r2, r9
 8011880:	f7ff fa32 	bl	8010ce8 <__mdiff>
 8011884:	4604      	mov	r4, r0
 8011886:	2800      	cmp	r0, #0
 8011888:	f43f ae3d 	beq.w	8011506 <_strtod_l+0x43e>
 801188c:	68c3      	ldr	r3, [r0, #12]
 801188e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011890:	2300      	movs	r3, #0
 8011892:	60c3      	str	r3, [r0, #12]
 8011894:	4641      	mov	r1, r8
 8011896:	f7ff fa0b 	bl	8010cb0 <__mcmp>
 801189a:	2800      	cmp	r0, #0
 801189c:	da46      	bge.n	801192c <_strtod_l+0x864>
 801189e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118a0:	ea53 030a 	orrs.w	r3, r3, sl
 80118a4:	d16c      	bne.n	8011980 <_strtod_l+0x8b8>
 80118a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d168      	bne.n	8011980 <_strtod_l+0x8b8>
 80118ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80118b2:	0d1b      	lsrs	r3, r3, #20
 80118b4:	051b      	lsls	r3, r3, #20
 80118b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80118ba:	d961      	bls.n	8011980 <_strtod_l+0x8b8>
 80118bc:	6963      	ldr	r3, [r4, #20]
 80118be:	b913      	cbnz	r3, 80118c6 <_strtod_l+0x7fe>
 80118c0:	6923      	ldr	r3, [r4, #16]
 80118c2:	2b01      	cmp	r3, #1
 80118c4:	dd5c      	ble.n	8011980 <_strtod_l+0x8b8>
 80118c6:	4621      	mov	r1, r4
 80118c8:	2201      	movs	r2, #1
 80118ca:	9805      	ldr	r0, [sp, #20]
 80118cc:	f7ff f984 	bl	8010bd8 <__lshift>
 80118d0:	4641      	mov	r1, r8
 80118d2:	4604      	mov	r4, r0
 80118d4:	f7ff f9ec 	bl	8010cb0 <__mcmp>
 80118d8:	2800      	cmp	r0, #0
 80118da:	dd51      	ble.n	8011980 <_strtod_l+0x8b8>
 80118dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80118e0:	9a08      	ldr	r2, [sp, #32]
 80118e2:	0d1b      	lsrs	r3, r3, #20
 80118e4:	051b      	lsls	r3, r3, #20
 80118e6:	2a00      	cmp	r2, #0
 80118e8:	d06b      	beq.n	80119c2 <_strtod_l+0x8fa>
 80118ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80118ee:	d868      	bhi.n	80119c2 <_strtod_l+0x8fa>
 80118f0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80118f4:	f67f ae9d 	bls.w	8011632 <_strtod_l+0x56a>
 80118f8:	4b0a      	ldr	r3, [pc, #40]	@ (8011924 <_strtod_l+0x85c>)
 80118fa:	4650      	mov	r0, sl
 80118fc:	4659      	mov	r1, fp
 80118fe:	2200      	movs	r2, #0
 8011900:	f7ee fe9a 	bl	8000638 <__aeabi_dmul>
 8011904:	4b08      	ldr	r3, [pc, #32]	@ (8011928 <_strtod_l+0x860>)
 8011906:	400b      	ands	r3, r1
 8011908:	4682      	mov	sl, r0
 801190a:	468b      	mov	fp, r1
 801190c:	2b00      	cmp	r3, #0
 801190e:	f47f ae05 	bne.w	801151c <_strtod_l+0x454>
 8011912:	9a05      	ldr	r2, [sp, #20]
 8011914:	2322      	movs	r3, #34	@ 0x22
 8011916:	6013      	str	r3, [r2, #0]
 8011918:	e600      	b.n	801151c <_strtod_l+0x454>
 801191a:	bf00      	nop
 801191c:	08014408 	.word	0x08014408
 8011920:	fffffc02 	.word	0xfffffc02
 8011924:	39500000 	.word	0x39500000
 8011928:	7ff00000 	.word	0x7ff00000
 801192c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011930:	d165      	bne.n	80119fe <_strtod_l+0x936>
 8011932:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011938:	b35a      	cbz	r2, 8011992 <_strtod_l+0x8ca>
 801193a:	4a9f      	ldr	r2, [pc, #636]	@ (8011bb8 <_strtod_l+0xaf0>)
 801193c:	4293      	cmp	r3, r2
 801193e:	d12b      	bne.n	8011998 <_strtod_l+0x8d0>
 8011940:	9b08      	ldr	r3, [sp, #32]
 8011942:	4651      	mov	r1, sl
 8011944:	b303      	cbz	r3, 8011988 <_strtod_l+0x8c0>
 8011946:	4b9d      	ldr	r3, [pc, #628]	@ (8011bbc <_strtod_l+0xaf4>)
 8011948:	465a      	mov	r2, fp
 801194a:	4013      	ands	r3, r2
 801194c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011950:	f04f 32ff 	mov.w	r2, #4294967295
 8011954:	d81b      	bhi.n	801198e <_strtod_l+0x8c6>
 8011956:	0d1b      	lsrs	r3, r3, #20
 8011958:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801195c:	fa02 f303 	lsl.w	r3, r2, r3
 8011960:	4299      	cmp	r1, r3
 8011962:	d119      	bne.n	8011998 <_strtod_l+0x8d0>
 8011964:	4b96      	ldr	r3, [pc, #600]	@ (8011bc0 <_strtod_l+0xaf8>)
 8011966:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011968:	429a      	cmp	r2, r3
 801196a:	d102      	bne.n	8011972 <_strtod_l+0x8aa>
 801196c:	3101      	adds	r1, #1
 801196e:	f43f adca 	beq.w	8011506 <_strtod_l+0x43e>
 8011972:	4b92      	ldr	r3, [pc, #584]	@ (8011bbc <_strtod_l+0xaf4>)
 8011974:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011976:	401a      	ands	r2, r3
 8011978:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801197c:	f04f 0a00 	mov.w	sl, #0
 8011980:	9b08      	ldr	r3, [sp, #32]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d1b8      	bne.n	80118f8 <_strtod_l+0x830>
 8011986:	e5c9      	b.n	801151c <_strtod_l+0x454>
 8011988:	f04f 33ff 	mov.w	r3, #4294967295
 801198c:	e7e8      	b.n	8011960 <_strtod_l+0x898>
 801198e:	4613      	mov	r3, r2
 8011990:	e7e6      	b.n	8011960 <_strtod_l+0x898>
 8011992:	ea53 030a 	orrs.w	r3, r3, sl
 8011996:	d0a1      	beq.n	80118dc <_strtod_l+0x814>
 8011998:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801199a:	b1db      	cbz	r3, 80119d4 <_strtod_l+0x90c>
 801199c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801199e:	4213      	tst	r3, r2
 80119a0:	d0ee      	beq.n	8011980 <_strtod_l+0x8b8>
 80119a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119a4:	9a08      	ldr	r2, [sp, #32]
 80119a6:	4650      	mov	r0, sl
 80119a8:	4659      	mov	r1, fp
 80119aa:	b1bb      	cbz	r3, 80119dc <_strtod_l+0x914>
 80119ac:	f7ff fb6e 	bl	801108c <sulp>
 80119b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80119b4:	ec53 2b10 	vmov	r2, r3, d0
 80119b8:	f7ee fc88 	bl	80002cc <__adddf3>
 80119bc:	4682      	mov	sl, r0
 80119be:	468b      	mov	fp, r1
 80119c0:	e7de      	b.n	8011980 <_strtod_l+0x8b8>
 80119c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80119c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80119ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80119ce:	f04f 3aff 	mov.w	sl, #4294967295
 80119d2:	e7d5      	b.n	8011980 <_strtod_l+0x8b8>
 80119d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80119d6:	ea13 0f0a 	tst.w	r3, sl
 80119da:	e7e1      	b.n	80119a0 <_strtod_l+0x8d8>
 80119dc:	f7ff fb56 	bl	801108c <sulp>
 80119e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80119e4:	ec53 2b10 	vmov	r2, r3, d0
 80119e8:	f7ee fc6e 	bl	80002c8 <__aeabi_dsub>
 80119ec:	2200      	movs	r2, #0
 80119ee:	2300      	movs	r3, #0
 80119f0:	4682      	mov	sl, r0
 80119f2:	468b      	mov	fp, r1
 80119f4:	f7ef f888 	bl	8000b08 <__aeabi_dcmpeq>
 80119f8:	2800      	cmp	r0, #0
 80119fa:	d0c1      	beq.n	8011980 <_strtod_l+0x8b8>
 80119fc:	e619      	b.n	8011632 <_strtod_l+0x56a>
 80119fe:	4641      	mov	r1, r8
 8011a00:	4620      	mov	r0, r4
 8011a02:	f7ff facd 	bl	8010fa0 <__ratio>
 8011a06:	ec57 6b10 	vmov	r6, r7, d0
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011a10:	4630      	mov	r0, r6
 8011a12:	4639      	mov	r1, r7
 8011a14:	f7ef f88c 	bl	8000b30 <__aeabi_dcmple>
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	d06f      	beq.n	8011afc <_strtod_l+0xa34>
 8011a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d17a      	bne.n	8011b18 <_strtod_l+0xa50>
 8011a22:	f1ba 0f00 	cmp.w	sl, #0
 8011a26:	d158      	bne.n	8011ada <_strtod_l+0xa12>
 8011a28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d15a      	bne.n	8011ae8 <_strtod_l+0xa20>
 8011a32:	4b64      	ldr	r3, [pc, #400]	@ (8011bc4 <_strtod_l+0xafc>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	4630      	mov	r0, r6
 8011a38:	4639      	mov	r1, r7
 8011a3a:	f7ef f86f 	bl	8000b1c <__aeabi_dcmplt>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d159      	bne.n	8011af6 <_strtod_l+0xa2e>
 8011a42:	4630      	mov	r0, r6
 8011a44:	4639      	mov	r1, r7
 8011a46:	4b60      	ldr	r3, [pc, #384]	@ (8011bc8 <_strtod_l+0xb00>)
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f7ee fdf5 	bl	8000638 <__aeabi_dmul>
 8011a4e:	4606      	mov	r6, r0
 8011a50:	460f      	mov	r7, r1
 8011a52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011a56:	9606      	str	r6, [sp, #24]
 8011a58:	9307      	str	r3, [sp, #28]
 8011a5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a5e:	4d57      	ldr	r5, [pc, #348]	@ (8011bbc <_strtod_l+0xaf4>)
 8011a60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a66:	401d      	ands	r5, r3
 8011a68:	4b58      	ldr	r3, [pc, #352]	@ (8011bcc <_strtod_l+0xb04>)
 8011a6a:	429d      	cmp	r5, r3
 8011a6c:	f040 80b2 	bne.w	8011bd4 <_strtod_l+0xb0c>
 8011a70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011a76:	ec4b ab10 	vmov	d0, sl, fp
 8011a7a:	f7ff f9c9 	bl	8010e10 <__ulp>
 8011a7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a82:	ec51 0b10 	vmov	r0, r1, d0
 8011a86:	f7ee fdd7 	bl	8000638 <__aeabi_dmul>
 8011a8a:	4652      	mov	r2, sl
 8011a8c:	465b      	mov	r3, fp
 8011a8e:	f7ee fc1d 	bl	80002cc <__adddf3>
 8011a92:	460b      	mov	r3, r1
 8011a94:	4949      	ldr	r1, [pc, #292]	@ (8011bbc <_strtod_l+0xaf4>)
 8011a96:	4a4e      	ldr	r2, [pc, #312]	@ (8011bd0 <_strtod_l+0xb08>)
 8011a98:	4019      	ands	r1, r3
 8011a9a:	4291      	cmp	r1, r2
 8011a9c:	4682      	mov	sl, r0
 8011a9e:	d942      	bls.n	8011b26 <_strtod_l+0xa5e>
 8011aa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011aa2:	4b47      	ldr	r3, [pc, #284]	@ (8011bc0 <_strtod_l+0xaf8>)
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d103      	bne.n	8011ab0 <_strtod_l+0x9e8>
 8011aa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011aaa:	3301      	adds	r3, #1
 8011aac:	f43f ad2b 	beq.w	8011506 <_strtod_l+0x43e>
 8011ab0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011bc0 <_strtod_l+0xaf8>
 8011ab4:	f04f 3aff 	mov.w	sl, #4294967295
 8011ab8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011aba:	9805      	ldr	r0, [sp, #20]
 8011abc:	f7fe fe74 	bl	80107a8 <_Bfree>
 8011ac0:	9805      	ldr	r0, [sp, #20]
 8011ac2:	4649      	mov	r1, r9
 8011ac4:	f7fe fe70 	bl	80107a8 <_Bfree>
 8011ac8:	9805      	ldr	r0, [sp, #20]
 8011aca:	4641      	mov	r1, r8
 8011acc:	f7fe fe6c 	bl	80107a8 <_Bfree>
 8011ad0:	9805      	ldr	r0, [sp, #20]
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	f7fe fe68 	bl	80107a8 <_Bfree>
 8011ad8:	e618      	b.n	801170c <_strtod_l+0x644>
 8011ada:	f1ba 0f01 	cmp.w	sl, #1
 8011ade:	d103      	bne.n	8011ae8 <_strtod_l+0xa20>
 8011ae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	f43f ada5 	beq.w	8011632 <_strtod_l+0x56a>
 8011ae8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011b98 <_strtod_l+0xad0>
 8011aec:	4f35      	ldr	r7, [pc, #212]	@ (8011bc4 <_strtod_l+0xafc>)
 8011aee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011af2:	2600      	movs	r6, #0
 8011af4:	e7b1      	b.n	8011a5a <_strtod_l+0x992>
 8011af6:	4f34      	ldr	r7, [pc, #208]	@ (8011bc8 <_strtod_l+0xb00>)
 8011af8:	2600      	movs	r6, #0
 8011afa:	e7aa      	b.n	8011a52 <_strtod_l+0x98a>
 8011afc:	4b32      	ldr	r3, [pc, #200]	@ (8011bc8 <_strtod_l+0xb00>)
 8011afe:	4630      	mov	r0, r6
 8011b00:	4639      	mov	r1, r7
 8011b02:	2200      	movs	r2, #0
 8011b04:	f7ee fd98 	bl	8000638 <__aeabi_dmul>
 8011b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b0a:	4606      	mov	r6, r0
 8011b0c:	460f      	mov	r7, r1
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d09f      	beq.n	8011a52 <_strtod_l+0x98a>
 8011b12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011b16:	e7a0      	b.n	8011a5a <_strtod_l+0x992>
 8011b18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011ba0 <_strtod_l+0xad8>
 8011b1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011b20:	ec57 6b17 	vmov	r6, r7, d7
 8011b24:	e799      	b.n	8011a5a <_strtod_l+0x992>
 8011b26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011b2a:	9b08      	ldr	r3, [sp, #32]
 8011b2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d1c1      	bne.n	8011ab8 <_strtod_l+0x9f0>
 8011b34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011b38:	0d1b      	lsrs	r3, r3, #20
 8011b3a:	051b      	lsls	r3, r3, #20
 8011b3c:	429d      	cmp	r5, r3
 8011b3e:	d1bb      	bne.n	8011ab8 <_strtod_l+0x9f0>
 8011b40:	4630      	mov	r0, r6
 8011b42:	4639      	mov	r1, r7
 8011b44:	f7ef f8d8 	bl	8000cf8 <__aeabi_d2lz>
 8011b48:	f7ee fd48 	bl	80005dc <__aeabi_l2d>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	460b      	mov	r3, r1
 8011b50:	4630      	mov	r0, r6
 8011b52:	4639      	mov	r1, r7
 8011b54:	f7ee fbb8 	bl	80002c8 <__aeabi_dsub>
 8011b58:	460b      	mov	r3, r1
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011b60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b66:	ea46 060a 	orr.w	r6, r6, sl
 8011b6a:	431e      	orrs	r6, r3
 8011b6c:	d06f      	beq.n	8011c4e <_strtod_l+0xb86>
 8011b6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011ba8 <_strtod_l+0xae0>)
 8011b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b74:	f7ee ffd2 	bl	8000b1c <__aeabi_dcmplt>
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	f47f accf 	bne.w	801151c <_strtod_l+0x454>
 8011b7e:	a30c      	add	r3, pc, #48	@ (adr r3, 8011bb0 <_strtod_l+0xae8>)
 8011b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b88:	f7ee ffe6 	bl	8000b58 <__aeabi_dcmpgt>
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	d093      	beq.n	8011ab8 <_strtod_l+0x9f0>
 8011b90:	e4c4      	b.n	801151c <_strtod_l+0x454>
 8011b92:	bf00      	nop
 8011b94:	f3af 8000 	nop.w
 8011b98:	00000000 	.word	0x00000000
 8011b9c:	bff00000 	.word	0xbff00000
 8011ba0:	00000000 	.word	0x00000000
 8011ba4:	3ff00000 	.word	0x3ff00000
 8011ba8:	94a03595 	.word	0x94a03595
 8011bac:	3fdfffff 	.word	0x3fdfffff
 8011bb0:	35afe535 	.word	0x35afe535
 8011bb4:	3fe00000 	.word	0x3fe00000
 8011bb8:	000fffff 	.word	0x000fffff
 8011bbc:	7ff00000 	.word	0x7ff00000
 8011bc0:	7fefffff 	.word	0x7fefffff
 8011bc4:	3ff00000 	.word	0x3ff00000
 8011bc8:	3fe00000 	.word	0x3fe00000
 8011bcc:	7fe00000 	.word	0x7fe00000
 8011bd0:	7c9fffff 	.word	0x7c9fffff
 8011bd4:	9b08      	ldr	r3, [sp, #32]
 8011bd6:	b323      	cbz	r3, 8011c22 <_strtod_l+0xb5a>
 8011bd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011bdc:	d821      	bhi.n	8011c22 <_strtod_l+0xb5a>
 8011bde:	a328      	add	r3, pc, #160	@ (adr r3, 8011c80 <_strtod_l+0xbb8>)
 8011be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be4:	4630      	mov	r0, r6
 8011be6:	4639      	mov	r1, r7
 8011be8:	f7ee ffa2 	bl	8000b30 <__aeabi_dcmple>
 8011bec:	b1a0      	cbz	r0, 8011c18 <_strtod_l+0xb50>
 8011bee:	4639      	mov	r1, r7
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f7ee fff9 	bl	8000be8 <__aeabi_d2uiz>
 8011bf6:	2801      	cmp	r0, #1
 8011bf8:	bf38      	it	cc
 8011bfa:	2001      	movcc	r0, #1
 8011bfc:	f7ee fca2 	bl	8000544 <__aeabi_ui2d>
 8011c00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c02:	4606      	mov	r6, r0
 8011c04:	460f      	mov	r7, r1
 8011c06:	b9fb      	cbnz	r3, 8011c48 <_strtod_l+0xb80>
 8011c08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011c0c:	9014      	str	r0, [sp, #80]	@ 0x50
 8011c0e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011c10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011c14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011c18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011c1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011c1e:	1b5b      	subs	r3, r3, r5
 8011c20:	9311      	str	r3, [sp, #68]	@ 0x44
 8011c22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011c26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011c2a:	f7ff f8f1 	bl	8010e10 <__ulp>
 8011c2e:	4650      	mov	r0, sl
 8011c30:	ec53 2b10 	vmov	r2, r3, d0
 8011c34:	4659      	mov	r1, fp
 8011c36:	f7ee fcff 	bl	8000638 <__aeabi_dmul>
 8011c3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011c3e:	f7ee fb45 	bl	80002cc <__adddf3>
 8011c42:	4682      	mov	sl, r0
 8011c44:	468b      	mov	fp, r1
 8011c46:	e770      	b.n	8011b2a <_strtod_l+0xa62>
 8011c48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011c4c:	e7e0      	b.n	8011c10 <_strtod_l+0xb48>
 8011c4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011c88 <_strtod_l+0xbc0>)
 8011c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c54:	f7ee ff62 	bl	8000b1c <__aeabi_dcmplt>
 8011c58:	e798      	b.n	8011b8c <_strtod_l+0xac4>
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011c60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c62:	6013      	str	r3, [r2, #0]
 8011c64:	f7ff ba6d 	b.w	8011142 <_strtod_l+0x7a>
 8011c68:	2a65      	cmp	r2, #101	@ 0x65
 8011c6a:	f43f ab66 	beq.w	801133a <_strtod_l+0x272>
 8011c6e:	2a45      	cmp	r2, #69	@ 0x45
 8011c70:	f43f ab63 	beq.w	801133a <_strtod_l+0x272>
 8011c74:	2301      	movs	r3, #1
 8011c76:	f7ff bb9e 	b.w	80113b6 <_strtod_l+0x2ee>
 8011c7a:	bf00      	nop
 8011c7c:	f3af 8000 	nop.w
 8011c80:	ffc00000 	.word	0xffc00000
 8011c84:	41dfffff 	.word	0x41dfffff
 8011c88:	94a03595 	.word	0x94a03595
 8011c8c:	3fcfffff 	.word	0x3fcfffff

08011c90 <_strtod_r>:
 8011c90:	4b01      	ldr	r3, [pc, #4]	@ (8011c98 <_strtod_r+0x8>)
 8011c92:	f7ff ba19 	b.w	80110c8 <_strtod_l>
 8011c96:	bf00      	nop
 8011c98:	2000057c 	.word	0x2000057c

08011c9c <_strtol_l.constprop.0>:
 8011c9c:	2b24      	cmp	r3, #36	@ 0x24
 8011c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ca2:	4686      	mov	lr, r0
 8011ca4:	4690      	mov	r8, r2
 8011ca6:	d801      	bhi.n	8011cac <_strtol_l.constprop.0+0x10>
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d106      	bne.n	8011cba <_strtol_l.constprop.0+0x1e>
 8011cac:	f7fd fdbc 	bl	800f828 <__errno>
 8011cb0:	2316      	movs	r3, #22
 8011cb2:	6003      	str	r3, [r0, #0]
 8011cb4:	2000      	movs	r0, #0
 8011cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cba:	4834      	ldr	r0, [pc, #208]	@ (8011d8c <_strtol_l.constprop.0+0xf0>)
 8011cbc:	460d      	mov	r5, r1
 8011cbe:	462a      	mov	r2, r5
 8011cc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cc4:	5d06      	ldrb	r6, [r0, r4]
 8011cc6:	f016 0608 	ands.w	r6, r6, #8
 8011cca:	d1f8      	bne.n	8011cbe <_strtol_l.constprop.0+0x22>
 8011ccc:	2c2d      	cmp	r4, #45	@ 0x2d
 8011cce:	d12d      	bne.n	8011d2c <_strtol_l.constprop.0+0x90>
 8011cd0:	782c      	ldrb	r4, [r5, #0]
 8011cd2:	2601      	movs	r6, #1
 8011cd4:	1c95      	adds	r5, r2, #2
 8011cd6:	f033 0210 	bics.w	r2, r3, #16
 8011cda:	d109      	bne.n	8011cf0 <_strtol_l.constprop.0+0x54>
 8011cdc:	2c30      	cmp	r4, #48	@ 0x30
 8011cde:	d12a      	bne.n	8011d36 <_strtol_l.constprop.0+0x9a>
 8011ce0:	782a      	ldrb	r2, [r5, #0]
 8011ce2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011ce6:	2a58      	cmp	r2, #88	@ 0x58
 8011ce8:	d125      	bne.n	8011d36 <_strtol_l.constprop.0+0x9a>
 8011cea:	786c      	ldrb	r4, [r5, #1]
 8011cec:	2310      	movs	r3, #16
 8011cee:	3502      	adds	r5, #2
 8011cf0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011cf4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	fbbc f9f3 	udiv	r9, ip, r3
 8011cfe:	4610      	mov	r0, r2
 8011d00:	fb03 ca19 	mls	sl, r3, r9, ip
 8011d04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011d08:	2f09      	cmp	r7, #9
 8011d0a:	d81b      	bhi.n	8011d44 <_strtol_l.constprop.0+0xa8>
 8011d0c:	463c      	mov	r4, r7
 8011d0e:	42a3      	cmp	r3, r4
 8011d10:	dd27      	ble.n	8011d62 <_strtol_l.constprop.0+0xc6>
 8011d12:	1c57      	adds	r7, r2, #1
 8011d14:	d007      	beq.n	8011d26 <_strtol_l.constprop.0+0x8a>
 8011d16:	4581      	cmp	r9, r0
 8011d18:	d320      	bcc.n	8011d5c <_strtol_l.constprop.0+0xc0>
 8011d1a:	d101      	bne.n	8011d20 <_strtol_l.constprop.0+0x84>
 8011d1c:	45a2      	cmp	sl, r4
 8011d1e:	db1d      	blt.n	8011d5c <_strtol_l.constprop.0+0xc0>
 8011d20:	fb00 4003 	mla	r0, r0, r3, r4
 8011d24:	2201      	movs	r2, #1
 8011d26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d2a:	e7eb      	b.n	8011d04 <_strtol_l.constprop.0+0x68>
 8011d2c:	2c2b      	cmp	r4, #43	@ 0x2b
 8011d2e:	bf04      	itt	eq
 8011d30:	782c      	ldrbeq	r4, [r5, #0]
 8011d32:	1c95      	addeq	r5, r2, #2
 8011d34:	e7cf      	b.n	8011cd6 <_strtol_l.constprop.0+0x3a>
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d1da      	bne.n	8011cf0 <_strtol_l.constprop.0+0x54>
 8011d3a:	2c30      	cmp	r4, #48	@ 0x30
 8011d3c:	bf0c      	ite	eq
 8011d3e:	2308      	moveq	r3, #8
 8011d40:	230a      	movne	r3, #10
 8011d42:	e7d5      	b.n	8011cf0 <_strtol_l.constprop.0+0x54>
 8011d44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011d48:	2f19      	cmp	r7, #25
 8011d4a:	d801      	bhi.n	8011d50 <_strtol_l.constprop.0+0xb4>
 8011d4c:	3c37      	subs	r4, #55	@ 0x37
 8011d4e:	e7de      	b.n	8011d0e <_strtol_l.constprop.0+0x72>
 8011d50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011d54:	2f19      	cmp	r7, #25
 8011d56:	d804      	bhi.n	8011d62 <_strtol_l.constprop.0+0xc6>
 8011d58:	3c57      	subs	r4, #87	@ 0x57
 8011d5a:	e7d8      	b.n	8011d0e <_strtol_l.constprop.0+0x72>
 8011d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d60:	e7e1      	b.n	8011d26 <_strtol_l.constprop.0+0x8a>
 8011d62:	1c53      	adds	r3, r2, #1
 8011d64:	d108      	bne.n	8011d78 <_strtol_l.constprop.0+0xdc>
 8011d66:	2322      	movs	r3, #34	@ 0x22
 8011d68:	f8ce 3000 	str.w	r3, [lr]
 8011d6c:	4660      	mov	r0, ip
 8011d6e:	f1b8 0f00 	cmp.w	r8, #0
 8011d72:	d0a0      	beq.n	8011cb6 <_strtol_l.constprop.0+0x1a>
 8011d74:	1e69      	subs	r1, r5, #1
 8011d76:	e006      	b.n	8011d86 <_strtol_l.constprop.0+0xea>
 8011d78:	b106      	cbz	r6, 8011d7c <_strtol_l.constprop.0+0xe0>
 8011d7a:	4240      	negs	r0, r0
 8011d7c:	f1b8 0f00 	cmp.w	r8, #0
 8011d80:	d099      	beq.n	8011cb6 <_strtol_l.constprop.0+0x1a>
 8011d82:	2a00      	cmp	r2, #0
 8011d84:	d1f6      	bne.n	8011d74 <_strtol_l.constprop.0+0xd8>
 8011d86:	f8c8 1000 	str.w	r1, [r8]
 8011d8a:	e794      	b.n	8011cb6 <_strtol_l.constprop.0+0x1a>
 8011d8c:	08014431 	.word	0x08014431

08011d90 <_strtol_r>:
 8011d90:	f7ff bf84 	b.w	8011c9c <_strtol_l.constprop.0>

08011d94 <__ssputs_r>:
 8011d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d98:	688e      	ldr	r6, [r1, #8]
 8011d9a:	461f      	mov	r7, r3
 8011d9c:	42be      	cmp	r6, r7
 8011d9e:	680b      	ldr	r3, [r1, #0]
 8011da0:	4682      	mov	sl, r0
 8011da2:	460c      	mov	r4, r1
 8011da4:	4690      	mov	r8, r2
 8011da6:	d82d      	bhi.n	8011e04 <__ssputs_r+0x70>
 8011da8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011dac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011db0:	d026      	beq.n	8011e00 <__ssputs_r+0x6c>
 8011db2:	6965      	ldr	r5, [r4, #20]
 8011db4:	6909      	ldr	r1, [r1, #16]
 8011db6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011dba:	eba3 0901 	sub.w	r9, r3, r1
 8011dbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011dc2:	1c7b      	adds	r3, r7, #1
 8011dc4:	444b      	add	r3, r9
 8011dc6:	106d      	asrs	r5, r5, #1
 8011dc8:	429d      	cmp	r5, r3
 8011dca:	bf38      	it	cc
 8011dcc:	461d      	movcc	r5, r3
 8011dce:	0553      	lsls	r3, r2, #21
 8011dd0:	d527      	bpl.n	8011e22 <__ssputs_r+0x8e>
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	f7fe fc1c 	bl	8010610 <_malloc_r>
 8011dd8:	4606      	mov	r6, r0
 8011dda:	b360      	cbz	r0, 8011e36 <__ssputs_r+0xa2>
 8011ddc:	6921      	ldr	r1, [r4, #16]
 8011dde:	464a      	mov	r2, r9
 8011de0:	f000 fbde 	bl	80125a0 <memcpy>
 8011de4:	89a3      	ldrh	r3, [r4, #12]
 8011de6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dee:	81a3      	strh	r3, [r4, #12]
 8011df0:	6126      	str	r6, [r4, #16]
 8011df2:	6165      	str	r5, [r4, #20]
 8011df4:	444e      	add	r6, r9
 8011df6:	eba5 0509 	sub.w	r5, r5, r9
 8011dfa:	6026      	str	r6, [r4, #0]
 8011dfc:	60a5      	str	r5, [r4, #8]
 8011dfe:	463e      	mov	r6, r7
 8011e00:	42be      	cmp	r6, r7
 8011e02:	d900      	bls.n	8011e06 <__ssputs_r+0x72>
 8011e04:	463e      	mov	r6, r7
 8011e06:	6820      	ldr	r0, [r4, #0]
 8011e08:	4632      	mov	r2, r6
 8011e0a:	4641      	mov	r1, r8
 8011e0c:	f000 fb6a 	bl	80124e4 <memmove>
 8011e10:	68a3      	ldr	r3, [r4, #8]
 8011e12:	1b9b      	subs	r3, r3, r6
 8011e14:	60a3      	str	r3, [r4, #8]
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	4433      	add	r3, r6
 8011e1a:	6023      	str	r3, [r4, #0]
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e22:	462a      	mov	r2, r5
 8011e24:	f000 ff51 	bl	8012cca <_realloc_r>
 8011e28:	4606      	mov	r6, r0
 8011e2a:	2800      	cmp	r0, #0
 8011e2c:	d1e0      	bne.n	8011df0 <__ssputs_r+0x5c>
 8011e2e:	6921      	ldr	r1, [r4, #16]
 8011e30:	4650      	mov	r0, sl
 8011e32:	f7fe fb79 	bl	8010528 <_free_r>
 8011e36:	230c      	movs	r3, #12
 8011e38:	f8ca 3000 	str.w	r3, [sl]
 8011e3c:	89a3      	ldrh	r3, [r4, #12]
 8011e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e42:	81a3      	strh	r3, [r4, #12]
 8011e44:	f04f 30ff 	mov.w	r0, #4294967295
 8011e48:	e7e9      	b.n	8011e1e <__ssputs_r+0x8a>
	...

08011e4c <_svfiprintf_r>:
 8011e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e50:	4698      	mov	r8, r3
 8011e52:	898b      	ldrh	r3, [r1, #12]
 8011e54:	061b      	lsls	r3, r3, #24
 8011e56:	b09d      	sub	sp, #116	@ 0x74
 8011e58:	4607      	mov	r7, r0
 8011e5a:	460d      	mov	r5, r1
 8011e5c:	4614      	mov	r4, r2
 8011e5e:	d510      	bpl.n	8011e82 <_svfiprintf_r+0x36>
 8011e60:	690b      	ldr	r3, [r1, #16]
 8011e62:	b973      	cbnz	r3, 8011e82 <_svfiprintf_r+0x36>
 8011e64:	2140      	movs	r1, #64	@ 0x40
 8011e66:	f7fe fbd3 	bl	8010610 <_malloc_r>
 8011e6a:	6028      	str	r0, [r5, #0]
 8011e6c:	6128      	str	r0, [r5, #16]
 8011e6e:	b930      	cbnz	r0, 8011e7e <_svfiprintf_r+0x32>
 8011e70:	230c      	movs	r3, #12
 8011e72:	603b      	str	r3, [r7, #0]
 8011e74:	f04f 30ff 	mov.w	r0, #4294967295
 8011e78:	b01d      	add	sp, #116	@ 0x74
 8011e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e7e:	2340      	movs	r3, #64	@ 0x40
 8011e80:	616b      	str	r3, [r5, #20]
 8011e82:	2300      	movs	r3, #0
 8011e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e86:	2320      	movs	r3, #32
 8011e88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e90:	2330      	movs	r3, #48	@ 0x30
 8011e92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012030 <_svfiprintf_r+0x1e4>
 8011e96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e9a:	f04f 0901 	mov.w	r9, #1
 8011e9e:	4623      	mov	r3, r4
 8011ea0:	469a      	mov	sl, r3
 8011ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ea6:	b10a      	cbz	r2, 8011eac <_svfiprintf_r+0x60>
 8011ea8:	2a25      	cmp	r2, #37	@ 0x25
 8011eaa:	d1f9      	bne.n	8011ea0 <_svfiprintf_r+0x54>
 8011eac:	ebba 0b04 	subs.w	fp, sl, r4
 8011eb0:	d00b      	beq.n	8011eca <_svfiprintf_r+0x7e>
 8011eb2:	465b      	mov	r3, fp
 8011eb4:	4622      	mov	r2, r4
 8011eb6:	4629      	mov	r1, r5
 8011eb8:	4638      	mov	r0, r7
 8011eba:	f7ff ff6b 	bl	8011d94 <__ssputs_r>
 8011ebe:	3001      	adds	r0, #1
 8011ec0:	f000 80a7 	beq.w	8012012 <_svfiprintf_r+0x1c6>
 8011ec4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ec6:	445a      	add	r2, fp
 8011ec8:	9209      	str	r2, [sp, #36]	@ 0x24
 8011eca:	f89a 3000 	ldrb.w	r3, [sl]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	f000 809f 	beq.w	8012012 <_svfiprintf_r+0x1c6>
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8011eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ede:	f10a 0a01 	add.w	sl, sl, #1
 8011ee2:	9304      	str	r3, [sp, #16]
 8011ee4:	9307      	str	r3, [sp, #28]
 8011ee6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011eea:	931a      	str	r3, [sp, #104]	@ 0x68
 8011eec:	4654      	mov	r4, sl
 8011eee:	2205      	movs	r2, #5
 8011ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ef4:	484e      	ldr	r0, [pc, #312]	@ (8012030 <_svfiprintf_r+0x1e4>)
 8011ef6:	f7ee f98b 	bl	8000210 <memchr>
 8011efa:	9a04      	ldr	r2, [sp, #16]
 8011efc:	b9d8      	cbnz	r0, 8011f36 <_svfiprintf_r+0xea>
 8011efe:	06d0      	lsls	r0, r2, #27
 8011f00:	bf44      	itt	mi
 8011f02:	2320      	movmi	r3, #32
 8011f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f08:	0711      	lsls	r1, r2, #28
 8011f0a:	bf44      	itt	mi
 8011f0c:	232b      	movmi	r3, #43	@ 0x2b
 8011f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f12:	f89a 3000 	ldrb.w	r3, [sl]
 8011f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f18:	d015      	beq.n	8011f46 <_svfiprintf_r+0xfa>
 8011f1a:	9a07      	ldr	r2, [sp, #28]
 8011f1c:	4654      	mov	r4, sl
 8011f1e:	2000      	movs	r0, #0
 8011f20:	f04f 0c0a 	mov.w	ip, #10
 8011f24:	4621      	mov	r1, r4
 8011f26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f2a:	3b30      	subs	r3, #48	@ 0x30
 8011f2c:	2b09      	cmp	r3, #9
 8011f2e:	d94b      	bls.n	8011fc8 <_svfiprintf_r+0x17c>
 8011f30:	b1b0      	cbz	r0, 8011f60 <_svfiprintf_r+0x114>
 8011f32:	9207      	str	r2, [sp, #28]
 8011f34:	e014      	b.n	8011f60 <_svfiprintf_r+0x114>
 8011f36:	eba0 0308 	sub.w	r3, r0, r8
 8011f3a:	fa09 f303 	lsl.w	r3, r9, r3
 8011f3e:	4313      	orrs	r3, r2
 8011f40:	9304      	str	r3, [sp, #16]
 8011f42:	46a2      	mov	sl, r4
 8011f44:	e7d2      	b.n	8011eec <_svfiprintf_r+0xa0>
 8011f46:	9b03      	ldr	r3, [sp, #12]
 8011f48:	1d19      	adds	r1, r3, #4
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	9103      	str	r1, [sp, #12]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	bfbb      	ittet	lt
 8011f52:	425b      	neglt	r3, r3
 8011f54:	f042 0202 	orrlt.w	r2, r2, #2
 8011f58:	9307      	strge	r3, [sp, #28]
 8011f5a:	9307      	strlt	r3, [sp, #28]
 8011f5c:	bfb8      	it	lt
 8011f5e:	9204      	strlt	r2, [sp, #16]
 8011f60:	7823      	ldrb	r3, [r4, #0]
 8011f62:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f64:	d10a      	bne.n	8011f7c <_svfiprintf_r+0x130>
 8011f66:	7863      	ldrb	r3, [r4, #1]
 8011f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f6a:	d132      	bne.n	8011fd2 <_svfiprintf_r+0x186>
 8011f6c:	9b03      	ldr	r3, [sp, #12]
 8011f6e:	1d1a      	adds	r2, r3, #4
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	9203      	str	r2, [sp, #12]
 8011f74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f78:	3402      	adds	r4, #2
 8011f7a:	9305      	str	r3, [sp, #20]
 8011f7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012040 <_svfiprintf_r+0x1f4>
 8011f80:	7821      	ldrb	r1, [r4, #0]
 8011f82:	2203      	movs	r2, #3
 8011f84:	4650      	mov	r0, sl
 8011f86:	f7ee f943 	bl	8000210 <memchr>
 8011f8a:	b138      	cbz	r0, 8011f9c <_svfiprintf_r+0x150>
 8011f8c:	9b04      	ldr	r3, [sp, #16]
 8011f8e:	eba0 000a 	sub.w	r0, r0, sl
 8011f92:	2240      	movs	r2, #64	@ 0x40
 8011f94:	4082      	lsls	r2, r0
 8011f96:	4313      	orrs	r3, r2
 8011f98:	3401      	adds	r4, #1
 8011f9a:	9304      	str	r3, [sp, #16]
 8011f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fa0:	4824      	ldr	r0, [pc, #144]	@ (8012034 <_svfiprintf_r+0x1e8>)
 8011fa2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fa6:	2206      	movs	r2, #6
 8011fa8:	f7ee f932 	bl	8000210 <memchr>
 8011fac:	2800      	cmp	r0, #0
 8011fae:	d036      	beq.n	801201e <_svfiprintf_r+0x1d2>
 8011fb0:	4b21      	ldr	r3, [pc, #132]	@ (8012038 <_svfiprintf_r+0x1ec>)
 8011fb2:	bb1b      	cbnz	r3, 8011ffc <_svfiprintf_r+0x1b0>
 8011fb4:	9b03      	ldr	r3, [sp, #12]
 8011fb6:	3307      	adds	r3, #7
 8011fb8:	f023 0307 	bic.w	r3, r3, #7
 8011fbc:	3308      	adds	r3, #8
 8011fbe:	9303      	str	r3, [sp, #12]
 8011fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fc2:	4433      	add	r3, r6
 8011fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fc6:	e76a      	b.n	8011e9e <_svfiprintf_r+0x52>
 8011fc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fcc:	460c      	mov	r4, r1
 8011fce:	2001      	movs	r0, #1
 8011fd0:	e7a8      	b.n	8011f24 <_svfiprintf_r+0xd8>
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	3401      	adds	r4, #1
 8011fd6:	9305      	str	r3, [sp, #20]
 8011fd8:	4619      	mov	r1, r3
 8011fda:	f04f 0c0a 	mov.w	ip, #10
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fe4:	3a30      	subs	r2, #48	@ 0x30
 8011fe6:	2a09      	cmp	r2, #9
 8011fe8:	d903      	bls.n	8011ff2 <_svfiprintf_r+0x1a6>
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d0c6      	beq.n	8011f7c <_svfiprintf_r+0x130>
 8011fee:	9105      	str	r1, [sp, #20]
 8011ff0:	e7c4      	b.n	8011f7c <_svfiprintf_r+0x130>
 8011ff2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ff6:	4604      	mov	r4, r0
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e7f0      	b.n	8011fde <_svfiprintf_r+0x192>
 8011ffc:	ab03      	add	r3, sp, #12
 8011ffe:	9300      	str	r3, [sp, #0]
 8012000:	462a      	mov	r2, r5
 8012002:	4b0e      	ldr	r3, [pc, #56]	@ (801203c <_svfiprintf_r+0x1f0>)
 8012004:	a904      	add	r1, sp, #16
 8012006:	4638      	mov	r0, r7
 8012008:	f7fc fb12 	bl	800e630 <_printf_float>
 801200c:	1c42      	adds	r2, r0, #1
 801200e:	4606      	mov	r6, r0
 8012010:	d1d6      	bne.n	8011fc0 <_svfiprintf_r+0x174>
 8012012:	89ab      	ldrh	r3, [r5, #12]
 8012014:	065b      	lsls	r3, r3, #25
 8012016:	f53f af2d 	bmi.w	8011e74 <_svfiprintf_r+0x28>
 801201a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801201c:	e72c      	b.n	8011e78 <_svfiprintf_r+0x2c>
 801201e:	ab03      	add	r3, sp, #12
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	462a      	mov	r2, r5
 8012024:	4b05      	ldr	r3, [pc, #20]	@ (801203c <_svfiprintf_r+0x1f0>)
 8012026:	a904      	add	r1, sp, #16
 8012028:	4638      	mov	r0, r7
 801202a:	f7fc fd99 	bl	800eb60 <_printf_i>
 801202e:	e7ed      	b.n	801200c <_svfiprintf_r+0x1c0>
 8012030:	08014531 	.word	0x08014531
 8012034:	0801453b 	.word	0x0801453b
 8012038:	0800e631 	.word	0x0800e631
 801203c:	08011d95 	.word	0x08011d95
 8012040:	08014537 	.word	0x08014537

08012044 <__sfputc_r>:
 8012044:	6893      	ldr	r3, [r2, #8]
 8012046:	3b01      	subs	r3, #1
 8012048:	2b00      	cmp	r3, #0
 801204a:	b410      	push	{r4}
 801204c:	6093      	str	r3, [r2, #8]
 801204e:	da08      	bge.n	8012062 <__sfputc_r+0x1e>
 8012050:	6994      	ldr	r4, [r2, #24]
 8012052:	42a3      	cmp	r3, r4
 8012054:	db01      	blt.n	801205a <__sfputc_r+0x16>
 8012056:	290a      	cmp	r1, #10
 8012058:	d103      	bne.n	8012062 <__sfputc_r+0x1e>
 801205a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801205e:	f7fd bafc 	b.w	800f65a <__swbuf_r>
 8012062:	6813      	ldr	r3, [r2, #0]
 8012064:	1c58      	adds	r0, r3, #1
 8012066:	6010      	str	r0, [r2, #0]
 8012068:	7019      	strb	r1, [r3, #0]
 801206a:	4608      	mov	r0, r1
 801206c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012070:	4770      	bx	lr

08012072 <__sfputs_r>:
 8012072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012074:	4606      	mov	r6, r0
 8012076:	460f      	mov	r7, r1
 8012078:	4614      	mov	r4, r2
 801207a:	18d5      	adds	r5, r2, r3
 801207c:	42ac      	cmp	r4, r5
 801207e:	d101      	bne.n	8012084 <__sfputs_r+0x12>
 8012080:	2000      	movs	r0, #0
 8012082:	e007      	b.n	8012094 <__sfputs_r+0x22>
 8012084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012088:	463a      	mov	r2, r7
 801208a:	4630      	mov	r0, r6
 801208c:	f7ff ffda 	bl	8012044 <__sfputc_r>
 8012090:	1c43      	adds	r3, r0, #1
 8012092:	d1f3      	bne.n	801207c <__sfputs_r+0xa>
 8012094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012098 <_vfiprintf_r>:
 8012098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801209c:	460d      	mov	r5, r1
 801209e:	b09d      	sub	sp, #116	@ 0x74
 80120a0:	4614      	mov	r4, r2
 80120a2:	4698      	mov	r8, r3
 80120a4:	4606      	mov	r6, r0
 80120a6:	b118      	cbz	r0, 80120b0 <_vfiprintf_r+0x18>
 80120a8:	6a03      	ldr	r3, [r0, #32]
 80120aa:	b90b      	cbnz	r3, 80120b0 <_vfiprintf_r+0x18>
 80120ac:	f7fd f918 	bl	800f2e0 <__sinit>
 80120b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120b2:	07d9      	lsls	r1, r3, #31
 80120b4:	d405      	bmi.n	80120c2 <_vfiprintf_r+0x2a>
 80120b6:	89ab      	ldrh	r3, [r5, #12]
 80120b8:	059a      	lsls	r2, r3, #22
 80120ba:	d402      	bmi.n	80120c2 <_vfiprintf_r+0x2a>
 80120bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120be:	f7fd fbde 	bl	800f87e <__retarget_lock_acquire_recursive>
 80120c2:	89ab      	ldrh	r3, [r5, #12]
 80120c4:	071b      	lsls	r3, r3, #28
 80120c6:	d501      	bpl.n	80120cc <_vfiprintf_r+0x34>
 80120c8:	692b      	ldr	r3, [r5, #16]
 80120ca:	b99b      	cbnz	r3, 80120f4 <_vfiprintf_r+0x5c>
 80120cc:	4629      	mov	r1, r5
 80120ce:	4630      	mov	r0, r6
 80120d0:	f7fd fb02 	bl	800f6d8 <__swsetup_r>
 80120d4:	b170      	cbz	r0, 80120f4 <_vfiprintf_r+0x5c>
 80120d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120d8:	07dc      	lsls	r4, r3, #31
 80120da:	d504      	bpl.n	80120e6 <_vfiprintf_r+0x4e>
 80120dc:	f04f 30ff 	mov.w	r0, #4294967295
 80120e0:	b01d      	add	sp, #116	@ 0x74
 80120e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e6:	89ab      	ldrh	r3, [r5, #12]
 80120e8:	0598      	lsls	r0, r3, #22
 80120ea:	d4f7      	bmi.n	80120dc <_vfiprintf_r+0x44>
 80120ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120ee:	f7fd fbc7 	bl	800f880 <__retarget_lock_release_recursive>
 80120f2:	e7f3      	b.n	80120dc <_vfiprintf_r+0x44>
 80120f4:	2300      	movs	r3, #0
 80120f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80120f8:	2320      	movs	r3, #32
 80120fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8012102:	2330      	movs	r3, #48	@ 0x30
 8012104:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80122b4 <_vfiprintf_r+0x21c>
 8012108:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801210c:	f04f 0901 	mov.w	r9, #1
 8012110:	4623      	mov	r3, r4
 8012112:	469a      	mov	sl, r3
 8012114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012118:	b10a      	cbz	r2, 801211e <_vfiprintf_r+0x86>
 801211a:	2a25      	cmp	r2, #37	@ 0x25
 801211c:	d1f9      	bne.n	8012112 <_vfiprintf_r+0x7a>
 801211e:	ebba 0b04 	subs.w	fp, sl, r4
 8012122:	d00b      	beq.n	801213c <_vfiprintf_r+0xa4>
 8012124:	465b      	mov	r3, fp
 8012126:	4622      	mov	r2, r4
 8012128:	4629      	mov	r1, r5
 801212a:	4630      	mov	r0, r6
 801212c:	f7ff ffa1 	bl	8012072 <__sfputs_r>
 8012130:	3001      	adds	r0, #1
 8012132:	f000 80a7 	beq.w	8012284 <_vfiprintf_r+0x1ec>
 8012136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012138:	445a      	add	r2, fp
 801213a:	9209      	str	r2, [sp, #36]	@ 0x24
 801213c:	f89a 3000 	ldrb.w	r3, [sl]
 8012140:	2b00      	cmp	r3, #0
 8012142:	f000 809f 	beq.w	8012284 <_vfiprintf_r+0x1ec>
 8012146:	2300      	movs	r3, #0
 8012148:	f04f 32ff 	mov.w	r2, #4294967295
 801214c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012150:	f10a 0a01 	add.w	sl, sl, #1
 8012154:	9304      	str	r3, [sp, #16]
 8012156:	9307      	str	r3, [sp, #28]
 8012158:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801215c:	931a      	str	r3, [sp, #104]	@ 0x68
 801215e:	4654      	mov	r4, sl
 8012160:	2205      	movs	r2, #5
 8012162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012166:	4853      	ldr	r0, [pc, #332]	@ (80122b4 <_vfiprintf_r+0x21c>)
 8012168:	f7ee f852 	bl	8000210 <memchr>
 801216c:	9a04      	ldr	r2, [sp, #16]
 801216e:	b9d8      	cbnz	r0, 80121a8 <_vfiprintf_r+0x110>
 8012170:	06d1      	lsls	r1, r2, #27
 8012172:	bf44      	itt	mi
 8012174:	2320      	movmi	r3, #32
 8012176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801217a:	0713      	lsls	r3, r2, #28
 801217c:	bf44      	itt	mi
 801217e:	232b      	movmi	r3, #43	@ 0x2b
 8012180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012184:	f89a 3000 	ldrb.w	r3, [sl]
 8012188:	2b2a      	cmp	r3, #42	@ 0x2a
 801218a:	d015      	beq.n	80121b8 <_vfiprintf_r+0x120>
 801218c:	9a07      	ldr	r2, [sp, #28]
 801218e:	4654      	mov	r4, sl
 8012190:	2000      	movs	r0, #0
 8012192:	f04f 0c0a 	mov.w	ip, #10
 8012196:	4621      	mov	r1, r4
 8012198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801219c:	3b30      	subs	r3, #48	@ 0x30
 801219e:	2b09      	cmp	r3, #9
 80121a0:	d94b      	bls.n	801223a <_vfiprintf_r+0x1a2>
 80121a2:	b1b0      	cbz	r0, 80121d2 <_vfiprintf_r+0x13a>
 80121a4:	9207      	str	r2, [sp, #28]
 80121a6:	e014      	b.n	80121d2 <_vfiprintf_r+0x13a>
 80121a8:	eba0 0308 	sub.w	r3, r0, r8
 80121ac:	fa09 f303 	lsl.w	r3, r9, r3
 80121b0:	4313      	orrs	r3, r2
 80121b2:	9304      	str	r3, [sp, #16]
 80121b4:	46a2      	mov	sl, r4
 80121b6:	e7d2      	b.n	801215e <_vfiprintf_r+0xc6>
 80121b8:	9b03      	ldr	r3, [sp, #12]
 80121ba:	1d19      	adds	r1, r3, #4
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	9103      	str	r1, [sp, #12]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	bfbb      	ittet	lt
 80121c4:	425b      	neglt	r3, r3
 80121c6:	f042 0202 	orrlt.w	r2, r2, #2
 80121ca:	9307      	strge	r3, [sp, #28]
 80121cc:	9307      	strlt	r3, [sp, #28]
 80121ce:	bfb8      	it	lt
 80121d0:	9204      	strlt	r2, [sp, #16]
 80121d2:	7823      	ldrb	r3, [r4, #0]
 80121d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80121d6:	d10a      	bne.n	80121ee <_vfiprintf_r+0x156>
 80121d8:	7863      	ldrb	r3, [r4, #1]
 80121da:	2b2a      	cmp	r3, #42	@ 0x2a
 80121dc:	d132      	bne.n	8012244 <_vfiprintf_r+0x1ac>
 80121de:	9b03      	ldr	r3, [sp, #12]
 80121e0:	1d1a      	adds	r2, r3, #4
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	9203      	str	r2, [sp, #12]
 80121e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121ea:	3402      	adds	r4, #2
 80121ec:	9305      	str	r3, [sp, #20]
 80121ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80122c4 <_vfiprintf_r+0x22c>
 80121f2:	7821      	ldrb	r1, [r4, #0]
 80121f4:	2203      	movs	r2, #3
 80121f6:	4650      	mov	r0, sl
 80121f8:	f7ee f80a 	bl	8000210 <memchr>
 80121fc:	b138      	cbz	r0, 801220e <_vfiprintf_r+0x176>
 80121fe:	9b04      	ldr	r3, [sp, #16]
 8012200:	eba0 000a 	sub.w	r0, r0, sl
 8012204:	2240      	movs	r2, #64	@ 0x40
 8012206:	4082      	lsls	r2, r0
 8012208:	4313      	orrs	r3, r2
 801220a:	3401      	adds	r4, #1
 801220c:	9304      	str	r3, [sp, #16]
 801220e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012212:	4829      	ldr	r0, [pc, #164]	@ (80122b8 <_vfiprintf_r+0x220>)
 8012214:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012218:	2206      	movs	r2, #6
 801221a:	f7ed fff9 	bl	8000210 <memchr>
 801221e:	2800      	cmp	r0, #0
 8012220:	d03f      	beq.n	80122a2 <_vfiprintf_r+0x20a>
 8012222:	4b26      	ldr	r3, [pc, #152]	@ (80122bc <_vfiprintf_r+0x224>)
 8012224:	bb1b      	cbnz	r3, 801226e <_vfiprintf_r+0x1d6>
 8012226:	9b03      	ldr	r3, [sp, #12]
 8012228:	3307      	adds	r3, #7
 801222a:	f023 0307 	bic.w	r3, r3, #7
 801222e:	3308      	adds	r3, #8
 8012230:	9303      	str	r3, [sp, #12]
 8012232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012234:	443b      	add	r3, r7
 8012236:	9309      	str	r3, [sp, #36]	@ 0x24
 8012238:	e76a      	b.n	8012110 <_vfiprintf_r+0x78>
 801223a:	fb0c 3202 	mla	r2, ip, r2, r3
 801223e:	460c      	mov	r4, r1
 8012240:	2001      	movs	r0, #1
 8012242:	e7a8      	b.n	8012196 <_vfiprintf_r+0xfe>
 8012244:	2300      	movs	r3, #0
 8012246:	3401      	adds	r4, #1
 8012248:	9305      	str	r3, [sp, #20]
 801224a:	4619      	mov	r1, r3
 801224c:	f04f 0c0a 	mov.w	ip, #10
 8012250:	4620      	mov	r0, r4
 8012252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012256:	3a30      	subs	r2, #48	@ 0x30
 8012258:	2a09      	cmp	r2, #9
 801225a:	d903      	bls.n	8012264 <_vfiprintf_r+0x1cc>
 801225c:	2b00      	cmp	r3, #0
 801225e:	d0c6      	beq.n	80121ee <_vfiprintf_r+0x156>
 8012260:	9105      	str	r1, [sp, #20]
 8012262:	e7c4      	b.n	80121ee <_vfiprintf_r+0x156>
 8012264:	fb0c 2101 	mla	r1, ip, r1, r2
 8012268:	4604      	mov	r4, r0
 801226a:	2301      	movs	r3, #1
 801226c:	e7f0      	b.n	8012250 <_vfiprintf_r+0x1b8>
 801226e:	ab03      	add	r3, sp, #12
 8012270:	9300      	str	r3, [sp, #0]
 8012272:	462a      	mov	r2, r5
 8012274:	4b12      	ldr	r3, [pc, #72]	@ (80122c0 <_vfiprintf_r+0x228>)
 8012276:	a904      	add	r1, sp, #16
 8012278:	4630      	mov	r0, r6
 801227a:	f7fc f9d9 	bl	800e630 <_printf_float>
 801227e:	4607      	mov	r7, r0
 8012280:	1c78      	adds	r0, r7, #1
 8012282:	d1d6      	bne.n	8012232 <_vfiprintf_r+0x19a>
 8012284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012286:	07d9      	lsls	r1, r3, #31
 8012288:	d405      	bmi.n	8012296 <_vfiprintf_r+0x1fe>
 801228a:	89ab      	ldrh	r3, [r5, #12]
 801228c:	059a      	lsls	r2, r3, #22
 801228e:	d402      	bmi.n	8012296 <_vfiprintf_r+0x1fe>
 8012290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012292:	f7fd faf5 	bl	800f880 <__retarget_lock_release_recursive>
 8012296:	89ab      	ldrh	r3, [r5, #12]
 8012298:	065b      	lsls	r3, r3, #25
 801229a:	f53f af1f 	bmi.w	80120dc <_vfiprintf_r+0x44>
 801229e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122a0:	e71e      	b.n	80120e0 <_vfiprintf_r+0x48>
 80122a2:	ab03      	add	r3, sp, #12
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	462a      	mov	r2, r5
 80122a8:	4b05      	ldr	r3, [pc, #20]	@ (80122c0 <_vfiprintf_r+0x228>)
 80122aa:	a904      	add	r1, sp, #16
 80122ac:	4630      	mov	r0, r6
 80122ae:	f7fc fc57 	bl	800eb60 <_printf_i>
 80122b2:	e7e4      	b.n	801227e <_vfiprintf_r+0x1e6>
 80122b4:	08014531 	.word	0x08014531
 80122b8:	0801453b 	.word	0x0801453b
 80122bc:	0800e631 	.word	0x0800e631
 80122c0:	08012073 	.word	0x08012073
 80122c4:	08014537 	.word	0x08014537

080122c8 <__sflush_r>:
 80122c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122d0:	0716      	lsls	r6, r2, #28
 80122d2:	4605      	mov	r5, r0
 80122d4:	460c      	mov	r4, r1
 80122d6:	d454      	bmi.n	8012382 <__sflush_r+0xba>
 80122d8:	684b      	ldr	r3, [r1, #4]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	dc02      	bgt.n	80122e4 <__sflush_r+0x1c>
 80122de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	dd48      	ble.n	8012376 <__sflush_r+0xae>
 80122e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80122e6:	2e00      	cmp	r6, #0
 80122e8:	d045      	beq.n	8012376 <__sflush_r+0xae>
 80122ea:	2300      	movs	r3, #0
 80122ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80122f0:	682f      	ldr	r7, [r5, #0]
 80122f2:	6a21      	ldr	r1, [r4, #32]
 80122f4:	602b      	str	r3, [r5, #0]
 80122f6:	d030      	beq.n	801235a <__sflush_r+0x92>
 80122f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80122fa:	89a3      	ldrh	r3, [r4, #12]
 80122fc:	0759      	lsls	r1, r3, #29
 80122fe:	d505      	bpl.n	801230c <__sflush_r+0x44>
 8012300:	6863      	ldr	r3, [r4, #4]
 8012302:	1ad2      	subs	r2, r2, r3
 8012304:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012306:	b10b      	cbz	r3, 801230c <__sflush_r+0x44>
 8012308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801230a:	1ad2      	subs	r2, r2, r3
 801230c:	2300      	movs	r3, #0
 801230e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012310:	6a21      	ldr	r1, [r4, #32]
 8012312:	4628      	mov	r0, r5
 8012314:	47b0      	blx	r6
 8012316:	1c43      	adds	r3, r0, #1
 8012318:	89a3      	ldrh	r3, [r4, #12]
 801231a:	d106      	bne.n	801232a <__sflush_r+0x62>
 801231c:	6829      	ldr	r1, [r5, #0]
 801231e:	291d      	cmp	r1, #29
 8012320:	d82b      	bhi.n	801237a <__sflush_r+0xb2>
 8012322:	4a2a      	ldr	r2, [pc, #168]	@ (80123cc <__sflush_r+0x104>)
 8012324:	410a      	asrs	r2, r1
 8012326:	07d6      	lsls	r6, r2, #31
 8012328:	d427      	bmi.n	801237a <__sflush_r+0xb2>
 801232a:	2200      	movs	r2, #0
 801232c:	6062      	str	r2, [r4, #4]
 801232e:	04d9      	lsls	r1, r3, #19
 8012330:	6922      	ldr	r2, [r4, #16]
 8012332:	6022      	str	r2, [r4, #0]
 8012334:	d504      	bpl.n	8012340 <__sflush_r+0x78>
 8012336:	1c42      	adds	r2, r0, #1
 8012338:	d101      	bne.n	801233e <__sflush_r+0x76>
 801233a:	682b      	ldr	r3, [r5, #0]
 801233c:	b903      	cbnz	r3, 8012340 <__sflush_r+0x78>
 801233e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012342:	602f      	str	r7, [r5, #0]
 8012344:	b1b9      	cbz	r1, 8012376 <__sflush_r+0xae>
 8012346:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801234a:	4299      	cmp	r1, r3
 801234c:	d002      	beq.n	8012354 <__sflush_r+0x8c>
 801234e:	4628      	mov	r0, r5
 8012350:	f7fe f8ea 	bl	8010528 <_free_r>
 8012354:	2300      	movs	r3, #0
 8012356:	6363      	str	r3, [r4, #52]	@ 0x34
 8012358:	e00d      	b.n	8012376 <__sflush_r+0xae>
 801235a:	2301      	movs	r3, #1
 801235c:	4628      	mov	r0, r5
 801235e:	47b0      	blx	r6
 8012360:	4602      	mov	r2, r0
 8012362:	1c50      	adds	r0, r2, #1
 8012364:	d1c9      	bne.n	80122fa <__sflush_r+0x32>
 8012366:	682b      	ldr	r3, [r5, #0]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d0c6      	beq.n	80122fa <__sflush_r+0x32>
 801236c:	2b1d      	cmp	r3, #29
 801236e:	d001      	beq.n	8012374 <__sflush_r+0xac>
 8012370:	2b16      	cmp	r3, #22
 8012372:	d11e      	bne.n	80123b2 <__sflush_r+0xea>
 8012374:	602f      	str	r7, [r5, #0]
 8012376:	2000      	movs	r0, #0
 8012378:	e022      	b.n	80123c0 <__sflush_r+0xf8>
 801237a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801237e:	b21b      	sxth	r3, r3
 8012380:	e01b      	b.n	80123ba <__sflush_r+0xf2>
 8012382:	690f      	ldr	r7, [r1, #16]
 8012384:	2f00      	cmp	r7, #0
 8012386:	d0f6      	beq.n	8012376 <__sflush_r+0xae>
 8012388:	0793      	lsls	r3, r2, #30
 801238a:	680e      	ldr	r6, [r1, #0]
 801238c:	bf08      	it	eq
 801238e:	694b      	ldreq	r3, [r1, #20]
 8012390:	600f      	str	r7, [r1, #0]
 8012392:	bf18      	it	ne
 8012394:	2300      	movne	r3, #0
 8012396:	eba6 0807 	sub.w	r8, r6, r7
 801239a:	608b      	str	r3, [r1, #8]
 801239c:	f1b8 0f00 	cmp.w	r8, #0
 80123a0:	dde9      	ble.n	8012376 <__sflush_r+0xae>
 80123a2:	6a21      	ldr	r1, [r4, #32]
 80123a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80123a6:	4643      	mov	r3, r8
 80123a8:	463a      	mov	r2, r7
 80123aa:	4628      	mov	r0, r5
 80123ac:	47b0      	blx	r6
 80123ae:	2800      	cmp	r0, #0
 80123b0:	dc08      	bgt.n	80123c4 <__sflush_r+0xfc>
 80123b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123ba:	81a3      	strh	r3, [r4, #12]
 80123bc:	f04f 30ff 	mov.w	r0, #4294967295
 80123c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123c4:	4407      	add	r7, r0
 80123c6:	eba8 0800 	sub.w	r8, r8, r0
 80123ca:	e7e7      	b.n	801239c <__sflush_r+0xd4>
 80123cc:	dfbffffe 	.word	0xdfbffffe

080123d0 <_fflush_r>:
 80123d0:	b538      	push	{r3, r4, r5, lr}
 80123d2:	690b      	ldr	r3, [r1, #16]
 80123d4:	4605      	mov	r5, r0
 80123d6:	460c      	mov	r4, r1
 80123d8:	b913      	cbnz	r3, 80123e0 <_fflush_r+0x10>
 80123da:	2500      	movs	r5, #0
 80123dc:	4628      	mov	r0, r5
 80123de:	bd38      	pop	{r3, r4, r5, pc}
 80123e0:	b118      	cbz	r0, 80123ea <_fflush_r+0x1a>
 80123e2:	6a03      	ldr	r3, [r0, #32]
 80123e4:	b90b      	cbnz	r3, 80123ea <_fflush_r+0x1a>
 80123e6:	f7fc ff7b 	bl	800f2e0 <__sinit>
 80123ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d0f3      	beq.n	80123da <_fflush_r+0xa>
 80123f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80123f4:	07d0      	lsls	r0, r2, #31
 80123f6:	d404      	bmi.n	8012402 <_fflush_r+0x32>
 80123f8:	0599      	lsls	r1, r3, #22
 80123fa:	d402      	bmi.n	8012402 <_fflush_r+0x32>
 80123fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123fe:	f7fd fa3e 	bl	800f87e <__retarget_lock_acquire_recursive>
 8012402:	4628      	mov	r0, r5
 8012404:	4621      	mov	r1, r4
 8012406:	f7ff ff5f 	bl	80122c8 <__sflush_r>
 801240a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801240c:	07da      	lsls	r2, r3, #31
 801240e:	4605      	mov	r5, r0
 8012410:	d4e4      	bmi.n	80123dc <_fflush_r+0xc>
 8012412:	89a3      	ldrh	r3, [r4, #12]
 8012414:	059b      	lsls	r3, r3, #22
 8012416:	d4e1      	bmi.n	80123dc <_fflush_r+0xc>
 8012418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801241a:	f7fd fa31 	bl	800f880 <__retarget_lock_release_recursive>
 801241e:	e7dd      	b.n	80123dc <_fflush_r+0xc>

08012420 <__swhatbuf_r>:
 8012420:	b570      	push	{r4, r5, r6, lr}
 8012422:	460c      	mov	r4, r1
 8012424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012428:	2900      	cmp	r1, #0
 801242a:	b096      	sub	sp, #88	@ 0x58
 801242c:	4615      	mov	r5, r2
 801242e:	461e      	mov	r6, r3
 8012430:	da0d      	bge.n	801244e <__swhatbuf_r+0x2e>
 8012432:	89a3      	ldrh	r3, [r4, #12]
 8012434:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012438:	f04f 0100 	mov.w	r1, #0
 801243c:	bf14      	ite	ne
 801243e:	2340      	movne	r3, #64	@ 0x40
 8012440:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012444:	2000      	movs	r0, #0
 8012446:	6031      	str	r1, [r6, #0]
 8012448:	602b      	str	r3, [r5, #0]
 801244a:	b016      	add	sp, #88	@ 0x58
 801244c:	bd70      	pop	{r4, r5, r6, pc}
 801244e:	466a      	mov	r2, sp
 8012450:	f000 f874 	bl	801253c <_fstat_r>
 8012454:	2800      	cmp	r0, #0
 8012456:	dbec      	blt.n	8012432 <__swhatbuf_r+0x12>
 8012458:	9901      	ldr	r1, [sp, #4]
 801245a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801245e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012462:	4259      	negs	r1, r3
 8012464:	4159      	adcs	r1, r3
 8012466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801246a:	e7eb      	b.n	8012444 <__swhatbuf_r+0x24>

0801246c <__smakebuf_r>:
 801246c:	898b      	ldrh	r3, [r1, #12]
 801246e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012470:	079d      	lsls	r5, r3, #30
 8012472:	4606      	mov	r6, r0
 8012474:	460c      	mov	r4, r1
 8012476:	d507      	bpl.n	8012488 <__smakebuf_r+0x1c>
 8012478:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801247c:	6023      	str	r3, [r4, #0]
 801247e:	6123      	str	r3, [r4, #16]
 8012480:	2301      	movs	r3, #1
 8012482:	6163      	str	r3, [r4, #20]
 8012484:	b003      	add	sp, #12
 8012486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012488:	ab01      	add	r3, sp, #4
 801248a:	466a      	mov	r2, sp
 801248c:	f7ff ffc8 	bl	8012420 <__swhatbuf_r>
 8012490:	9f00      	ldr	r7, [sp, #0]
 8012492:	4605      	mov	r5, r0
 8012494:	4639      	mov	r1, r7
 8012496:	4630      	mov	r0, r6
 8012498:	f7fe f8ba 	bl	8010610 <_malloc_r>
 801249c:	b948      	cbnz	r0, 80124b2 <__smakebuf_r+0x46>
 801249e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124a2:	059a      	lsls	r2, r3, #22
 80124a4:	d4ee      	bmi.n	8012484 <__smakebuf_r+0x18>
 80124a6:	f023 0303 	bic.w	r3, r3, #3
 80124aa:	f043 0302 	orr.w	r3, r3, #2
 80124ae:	81a3      	strh	r3, [r4, #12]
 80124b0:	e7e2      	b.n	8012478 <__smakebuf_r+0xc>
 80124b2:	89a3      	ldrh	r3, [r4, #12]
 80124b4:	6020      	str	r0, [r4, #0]
 80124b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124ba:	81a3      	strh	r3, [r4, #12]
 80124bc:	9b01      	ldr	r3, [sp, #4]
 80124be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80124c2:	b15b      	cbz	r3, 80124dc <__smakebuf_r+0x70>
 80124c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124c8:	4630      	mov	r0, r6
 80124ca:	f000 f849 	bl	8012560 <_isatty_r>
 80124ce:	b128      	cbz	r0, 80124dc <__smakebuf_r+0x70>
 80124d0:	89a3      	ldrh	r3, [r4, #12]
 80124d2:	f023 0303 	bic.w	r3, r3, #3
 80124d6:	f043 0301 	orr.w	r3, r3, #1
 80124da:	81a3      	strh	r3, [r4, #12]
 80124dc:	89a3      	ldrh	r3, [r4, #12]
 80124de:	431d      	orrs	r5, r3
 80124e0:	81a5      	strh	r5, [r4, #12]
 80124e2:	e7cf      	b.n	8012484 <__smakebuf_r+0x18>

080124e4 <memmove>:
 80124e4:	4288      	cmp	r0, r1
 80124e6:	b510      	push	{r4, lr}
 80124e8:	eb01 0402 	add.w	r4, r1, r2
 80124ec:	d902      	bls.n	80124f4 <memmove+0x10>
 80124ee:	4284      	cmp	r4, r0
 80124f0:	4623      	mov	r3, r4
 80124f2:	d807      	bhi.n	8012504 <memmove+0x20>
 80124f4:	1e43      	subs	r3, r0, #1
 80124f6:	42a1      	cmp	r1, r4
 80124f8:	d008      	beq.n	801250c <memmove+0x28>
 80124fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012502:	e7f8      	b.n	80124f6 <memmove+0x12>
 8012504:	4402      	add	r2, r0
 8012506:	4601      	mov	r1, r0
 8012508:	428a      	cmp	r2, r1
 801250a:	d100      	bne.n	801250e <memmove+0x2a>
 801250c:	bd10      	pop	{r4, pc}
 801250e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012516:	e7f7      	b.n	8012508 <memmove+0x24>

08012518 <strncmp>:
 8012518:	b510      	push	{r4, lr}
 801251a:	b16a      	cbz	r2, 8012538 <strncmp+0x20>
 801251c:	3901      	subs	r1, #1
 801251e:	1884      	adds	r4, r0, r2
 8012520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012524:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012528:	429a      	cmp	r2, r3
 801252a:	d103      	bne.n	8012534 <strncmp+0x1c>
 801252c:	42a0      	cmp	r0, r4
 801252e:	d001      	beq.n	8012534 <strncmp+0x1c>
 8012530:	2a00      	cmp	r2, #0
 8012532:	d1f5      	bne.n	8012520 <strncmp+0x8>
 8012534:	1ad0      	subs	r0, r2, r3
 8012536:	bd10      	pop	{r4, pc}
 8012538:	4610      	mov	r0, r2
 801253a:	e7fc      	b.n	8012536 <strncmp+0x1e>

0801253c <_fstat_r>:
 801253c:	b538      	push	{r3, r4, r5, lr}
 801253e:	4d07      	ldr	r5, [pc, #28]	@ (801255c <_fstat_r+0x20>)
 8012540:	2300      	movs	r3, #0
 8012542:	4604      	mov	r4, r0
 8012544:	4608      	mov	r0, r1
 8012546:	4611      	mov	r1, r2
 8012548:	602b      	str	r3, [r5, #0]
 801254a:	f7f5 fe91 	bl	8008270 <_fstat>
 801254e:	1c43      	adds	r3, r0, #1
 8012550:	d102      	bne.n	8012558 <_fstat_r+0x1c>
 8012552:	682b      	ldr	r3, [r5, #0]
 8012554:	b103      	cbz	r3, 8012558 <_fstat_r+0x1c>
 8012556:	6023      	str	r3, [r4, #0]
 8012558:	bd38      	pop	{r3, r4, r5, pc}
 801255a:	bf00      	nop
 801255c:	20004474 	.word	0x20004474

08012560 <_isatty_r>:
 8012560:	b538      	push	{r3, r4, r5, lr}
 8012562:	4d06      	ldr	r5, [pc, #24]	@ (801257c <_isatty_r+0x1c>)
 8012564:	2300      	movs	r3, #0
 8012566:	4604      	mov	r4, r0
 8012568:	4608      	mov	r0, r1
 801256a:	602b      	str	r3, [r5, #0]
 801256c:	f7f5 fe90 	bl	8008290 <_isatty>
 8012570:	1c43      	adds	r3, r0, #1
 8012572:	d102      	bne.n	801257a <_isatty_r+0x1a>
 8012574:	682b      	ldr	r3, [r5, #0]
 8012576:	b103      	cbz	r3, 801257a <_isatty_r+0x1a>
 8012578:	6023      	str	r3, [r4, #0]
 801257a:	bd38      	pop	{r3, r4, r5, pc}
 801257c:	20004474 	.word	0x20004474

08012580 <_sbrk_r>:
 8012580:	b538      	push	{r3, r4, r5, lr}
 8012582:	4d06      	ldr	r5, [pc, #24]	@ (801259c <_sbrk_r+0x1c>)
 8012584:	2300      	movs	r3, #0
 8012586:	4604      	mov	r4, r0
 8012588:	4608      	mov	r0, r1
 801258a:	602b      	str	r3, [r5, #0]
 801258c:	f7f5 fe98 	bl	80082c0 <_sbrk>
 8012590:	1c43      	adds	r3, r0, #1
 8012592:	d102      	bne.n	801259a <_sbrk_r+0x1a>
 8012594:	682b      	ldr	r3, [r5, #0]
 8012596:	b103      	cbz	r3, 801259a <_sbrk_r+0x1a>
 8012598:	6023      	str	r3, [r4, #0]
 801259a:	bd38      	pop	{r3, r4, r5, pc}
 801259c:	20004474 	.word	0x20004474

080125a0 <memcpy>:
 80125a0:	440a      	add	r2, r1
 80125a2:	4291      	cmp	r1, r2
 80125a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80125a8:	d100      	bne.n	80125ac <memcpy+0xc>
 80125aa:	4770      	bx	lr
 80125ac:	b510      	push	{r4, lr}
 80125ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125b6:	4291      	cmp	r1, r2
 80125b8:	d1f9      	bne.n	80125ae <memcpy+0xe>
 80125ba:	bd10      	pop	{r4, pc}
 80125bc:	0000      	movs	r0, r0
	...

080125c0 <nan>:
 80125c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80125c8 <nan+0x8>
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	00000000 	.word	0x00000000
 80125cc:	7ff80000 	.word	0x7ff80000

080125d0 <__assert_func>:
 80125d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125d2:	4614      	mov	r4, r2
 80125d4:	461a      	mov	r2, r3
 80125d6:	4b09      	ldr	r3, [pc, #36]	@ (80125fc <__assert_func+0x2c>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	4605      	mov	r5, r0
 80125dc:	68d8      	ldr	r0, [r3, #12]
 80125de:	b954      	cbnz	r4, 80125f6 <__assert_func+0x26>
 80125e0:	4b07      	ldr	r3, [pc, #28]	@ (8012600 <__assert_func+0x30>)
 80125e2:	461c      	mov	r4, r3
 80125e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80125e8:	9100      	str	r1, [sp, #0]
 80125ea:	462b      	mov	r3, r5
 80125ec:	4905      	ldr	r1, [pc, #20]	@ (8012604 <__assert_func+0x34>)
 80125ee:	f000 fba7 	bl	8012d40 <fiprintf>
 80125f2:	f000 fbb7 	bl	8012d64 <abort>
 80125f6:	4b04      	ldr	r3, [pc, #16]	@ (8012608 <__assert_func+0x38>)
 80125f8:	e7f4      	b.n	80125e4 <__assert_func+0x14>
 80125fa:	bf00      	nop
 80125fc:	2000052c 	.word	0x2000052c
 8012600:	08014585 	.word	0x08014585
 8012604:	08014557 	.word	0x08014557
 8012608:	0801454a 	.word	0x0801454a

0801260c <_calloc_r>:
 801260c:	b570      	push	{r4, r5, r6, lr}
 801260e:	fba1 5402 	umull	r5, r4, r1, r2
 8012612:	b93c      	cbnz	r4, 8012624 <_calloc_r+0x18>
 8012614:	4629      	mov	r1, r5
 8012616:	f7fd fffb 	bl	8010610 <_malloc_r>
 801261a:	4606      	mov	r6, r0
 801261c:	b928      	cbnz	r0, 801262a <_calloc_r+0x1e>
 801261e:	2600      	movs	r6, #0
 8012620:	4630      	mov	r0, r6
 8012622:	bd70      	pop	{r4, r5, r6, pc}
 8012624:	220c      	movs	r2, #12
 8012626:	6002      	str	r2, [r0, #0]
 8012628:	e7f9      	b.n	801261e <_calloc_r+0x12>
 801262a:	462a      	mov	r2, r5
 801262c:	4621      	mov	r1, r4
 801262e:	f7fd f8a9 	bl	800f784 <memset>
 8012632:	e7f5      	b.n	8012620 <_calloc_r+0x14>

08012634 <rshift>:
 8012634:	6903      	ldr	r3, [r0, #16]
 8012636:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801263a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801263e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012642:	f100 0414 	add.w	r4, r0, #20
 8012646:	dd45      	ble.n	80126d4 <rshift+0xa0>
 8012648:	f011 011f 	ands.w	r1, r1, #31
 801264c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012650:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012654:	d10c      	bne.n	8012670 <rshift+0x3c>
 8012656:	f100 0710 	add.w	r7, r0, #16
 801265a:	4629      	mov	r1, r5
 801265c:	42b1      	cmp	r1, r6
 801265e:	d334      	bcc.n	80126ca <rshift+0x96>
 8012660:	1a9b      	subs	r3, r3, r2
 8012662:	009b      	lsls	r3, r3, #2
 8012664:	1eea      	subs	r2, r5, #3
 8012666:	4296      	cmp	r6, r2
 8012668:	bf38      	it	cc
 801266a:	2300      	movcc	r3, #0
 801266c:	4423      	add	r3, r4
 801266e:	e015      	b.n	801269c <rshift+0x68>
 8012670:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012674:	f1c1 0820 	rsb	r8, r1, #32
 8012678:	40cf      	lsrs	r7, r1
 801267a:	f105 0e04 	add.w	lr, r5, #4
 801267e:	46a1      	mov	r9, r4
 8012680:	4576      	cmp	r6, lr
 8012682:	46f4      	mov	ip, lr
 8012684:	d815      	bhi.n	80126b2 <rshift+0x7e>
 8012686:	1a9a      	subs	r2, r3, r2
 8012688:	0092      	lsls	r2, r2, #2
 801268a:	3a04      	subs	r2, #4
 801268c:	3501      	adds	r5, #1
 801268e:	42ae      	cmp	r6, r5
 8012690:	bf38      	it	cc
 8012692:	2200      	movcc	r2, #0
 8012694:	18a3      	adds	r3, r4, r2
 8012696:	50a7      	str	r7, [r4, r2]
 8012698:	b107      	cbz	r7, 801269c <rshift+0x68>
 801269a:	3304      	adds	r3, #4
 801269c:	1b1a      	subs	r2, r3, r4
 801269e:	42a3      	cmp	r3, r4
 80126a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80126a4:	bf08      	it	eq
 80126a6:	2300      	moveq	r3, #0
 80126a8:	6102      	str	r2, [r0, #16]
 80126aa:	bf08      	it	eq
 80126ac:	6143      	streq	r3, [r0, #20]
 80126ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126b2:	f8dc c000 	ldr.w	ip, [ip]
 80126b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80126ba:	ea4c 0707 	orr.w	r7, ip, r7
 80126be:	f849 7b04 	str.w	r7, [r9], #4
 80126c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80126c6:	40cf      	lsrs	r7, r1
 80126c8:	e7da      	b.n	8012680 <rshift+0x4c>
 80126ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80126ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80126d2:	e7c3      	b.n	801265c <rshift+0x28>
 80126d4:	4623      	mov	r3, r4
 80126d6:	e7e1      	b.n	801269c <rshift+0x68>

080126d8 <__hexdig_fun>:
 80126d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80126dc:	2b09      	cmp	r3, #9
 80126de:	d802      	bhi.n	80126e6 <__hexdig_fun+0xe>
 80126e0:	3820      	subs	r0, #32
 80126e2:	b2c0      	uxtb	r0, r0
 80126e4:	4770      	bx	lr
 80126e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80126ea:	2b05      	cmp	r3, #5
 80126ec:	d801      	bhi.n	80126f2 <__hexdig_fun+0x1a>
 80126ee:	3847      	subs	r0, #71	@ 0x47
 80126f0:	e7f7      	b.n	80126e2 <__hexdig_fun+0xa>
 80126f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80126f6:	2b05      	cmp	r3, #5
 80126f8:	d801      	bhi.n	80126fe <__hexdig_fun+0x26>
 80126fa:	3827      	subs	r0, #39	@ 0x27
 80126fc:	e7f1      	b.n	80126e2 <__hexdig_fun+0xa>
 80126fe:	2000      	movs	r0, #0
 8012700:	4770      	bx	lr
	...

08012704 <__gethex>:
 8012704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012708:	b085      	sub	sp, #20
 801270a:	468a      	mov	sl, r1
 801270c:	9302      	str	r3, [sp, #8]
 801270e:	680b      	ldr	r3, [r1, #0]
 8012710:	9001      	str	r0, [sp, #4]
 8012712:	4690      	mov	r8, r2
 8012714:	1c9c      	adds	r4, r3, #2
 8012716:	46a1      	mov	r9, r4
 8012718:	f814 0b01 	ldrb.w	r0, [r4], #1
 801271c:	2830      	cmp	r0, #48	@ 0x30
 801271e:	d0fa      	beq.n	8012716 <__gethex+0x12>
 8012720:	eba9 0303 	sub.w	r3, r9, r3
 8012724:	f1a3 0b02 	sub.w	fp, r3, #2
 8012728:	f7ff ffd6 	bl	80126d8 <__hexdig_fun>
 801272c:	4605      	mov	r5, r0
 801272e:	2800      	cmp	r0, #0
 8012730:	d168      	bne.n	8012804 <__gethex+0x100>
 8012732:	49a0      	ldr	r1, [pc, #640]	@ (80129b4 <__gethex+0x2b0>)
 8012734:	2201      	movs	r2, #1
 8012736:	4648      	mov	r0, r9
 8012738:	f7ff feee 	bl	8012518 <strncmp>
 801273c:	4607      	mov	r7, r0
 801273e:	2800      	cmp	r0, #0
 8012740:	d167      	bne.n	8012812 <__gethex+0x10e>
 8012742:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012746:	4626      	mov	r6, r4
 8012748:	f7ff ffc6 	bl	80126d8 <__hexdig_fun>
 801274c:	2800      	cmp	r0, #0
 801274e:	d062      	beq.n	8012816 <__gethex+0x112>
 8012750:	4623      	mov	r3, r4
 8012752:	7818      	ldrb	r0, [r3, #0]
 8012754:	2830      	cmp	r0, #48	@ 0x30
 8012756:	4699      	mov	r9, r3
 8012758:	f103 0301 	add.w	r3, r3, #1
 801275c:	d0f9      	beq.n	8012752 <__gethex+0x4e>
 801275e:	f7ff ffbb 	bl	80126d8 <__hexdig_fun>
 8012762:	fab0 f580 	clz	r5, r0
 8012766:	096d      	lsrs	r5, r5, #5
 8012768:	f04f 0b01 	mov.w	fp, #1
 801276c:	464a      	mov	r2, r9
 801276e:	4616      	mov	r6, r2
 8012770:	3201      	adds	r2, #1
 8012772:	7830      	ldrb	r0, [r6, #0]
 8012774:	f7ff ffb0 	bl	80126d8 <__hexdig_fun>
 8012778:	2800      	cmp	r0, #0
 801277a:	d1f8      	bne.n	801276e <__gethex+0x6a>
 801277c:	498d      	ldr	r1, [pc, #564]	@ (80129b4 <__gethex+0x2b0>)
 801277e:	2201      	movs	r2, #1
 8012780:	4630      	mov	r0, r6
 8012782:	f7ff fec9 	bl	8012518 <strncmp>
 8012786:	2800      	cmp	r0, #0
 8012788:	d13f      	bne.n	801280a <__gethex+0x106>
 801278a:	b944      	cbnz	r4, 801279e <__gethex+0x9a>
 801278c:	1c74      	adds	r4, r6, #1
 801278e:	4622      	mov	r2, r4
 8012790:	4616      	mov	r6, r2
 8012792:	3201      	adds	r2, #1
 8012794:	7830      	ldrb	r0, [r6, #0]
 8012796:	f7ff ff9f 	bl	80126d8 <__hexdig_fun>
 801279a:	2800      	cmp	r0, #0
 801279c:	d1f8      	bne.n	8012790 <__gethex+0x8c>
 801279e:	1ba4      	subs	r4, r4, r6
 80127a0:	00a7      	lsls	r7, r4, #2
 80127a2:	7833      	ldrb	r3, [r6, #0]
 80127a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80127a8:	2b50      	cmp	r3, #80	@ 0x50
 80127aa:	d13e      	bne.n	801282a <__gethex+0x126>
 80127ac:	7873      	ldrb	r3, [r6, #1]
 80127ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80127b0:	d033      	beq.n	801281a <__gethex+0x116>
 80127b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80127b4:	d034      	beq.n	8012820 <__gethex+0x11c>
 80127b6:	1c71      	adds	r1, r6, #1
 80127b8:	2400      	movs	r4, #0
 80127ba:	7808      	ldrb	r0, [r1, #0]
 80127bc:	f7ff ff8c 	bl	80126d8 <__hexdig_fun>
 80127c0:	1e43      	subs	r3, r0, #1
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	2b18      	cmp	r3, #24
 80127c6:	d830      	bhi.n	801282a <__gethex+0x126>
 80127c8:	f1a0 0210 	sub.w	r2, r0, #16
 80127cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80127d0:	f7ff ff82 	bl	80126d8 <__hexdig_fun>
 80127d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80127d8:	fa5f fc8c 	uxtb.w	ip, ip
 80127dc:	f1bc 0f18 	cmp.w	ip, #24
 80127e0:	f04f 030a 	mov.w	r3, #10
 80127e4:	d91e      	bls.n	8012824 <__gethex+0x120>
 80127e6:	b104      	cbz	r4, 80127ea <__gethex+0xe6>
 80127e8:	4252      	negs	r2, r2
 80127ea:	4417      	add	r7, r2
 80127ec:	f8ca 1000 	str.w	r1, [sl]
 80127f0:	b1ed      	cbz	r5, 801282e <__gethex+0x12a>
 80127f2:	f1bb 0f00 	cmp.w	fp, #0
 80127f6:	bf0c      	ite	eq
 80127f8:	2506      	moveq	r5, #6
 80127fa:	2500      	movne	r5, #0
 80127fc:	4628      	mov	r0, r5
 80127fe:	b005      	add	sp, #20
 8012800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012804:	2500      	movs	r5, #0
 8012806:	462c      	mov	r4, r5
 8012808:	e7b0      	b.n	801276c <__gethex+0x68>
 801280a:	2c00      	cmp	r4, #0
 801280c:	d1c7      	bne.n	801279e <__gethex+0x9a>
 801280e:	4627      	mov	r7, r4
 8012810:	e7c7      	b.n	80127a2 <__gethex+0x9e>
 8012812:	464e      	mov	r6, r9
 8012814:	462f      	mov	r7, r5
 8012816:	2501      	movs	r5, #1
 8012818:	e7c3      	b.n	80127a2 <__gethex+0x9e>
 801281a:	2400      	movs	r4, #0
 801281c:	1cb1      	adds	r1, r6, #2
 801281e:	e7cc      	b.n	80127ba <__gethex+0xb6>
 8012820:	2401      	movs	r4, #1
 8012822:	e7fb      	b.n	801281c <__gethex+0x118>
 8012824:	fb03 0002 	mla	r0, r3, r2, r0
 8012828:	e7ce      	b.n	80127c8 <__gethex+0xc4>
 801282a:	4631      	mov	r1, r6
 801282c:	e7de      	b.n	80127ec <__gethex+0xe8>
 801282e:	eba6 0309 	sub.w	r3, r6, r9
 8012832:	3b01      	subs	r3, #1
 8012834:	4629      	mov	r1, r5
 8012836:	2b07      	cmp	r3, #7
 8012838:	dc0a      	bgt.n	8012850 <__gethex+0x14c>
 801283a:	9801      	ldr	r0, [sp, #4]
 801283c:	f7fd ff74 	bl	8010728 <_Balloc>
 8012840:	4604      	mov	r4, r0
 8012842:	b940      	cbnz	r0, 8012856 <__gethex+0x152>
 8012844:	4b5c      	ldr	r3, [pc, #368]	@ (80129b8 <__gethex+0x2b4>)
 8012846:	4602      	mov	r2, r0
 8012848:	21e4      	movs	r1, #228	@ 0xe4
 801284a:	485c      	ldr	r0, [pc, #368]	@ (80129bc <__gethex+0x2b8>)
 801284c:	f7ff fec0 	bl	80125d0 <__assert_func>
 8012850:	3101      	adds	r1, #1
 8012852:	105b      	asrs	r3, r3, #1
 8012854:	e7ef      	b.n	8012836 <__gethex+0x132>
 8012856:	f100 0a14 	add.w	sl, r0, #20
 801285a:	2300      	movs	r3, #0
 801285c:	4655      	mov	r5, sl
 801285e:	469b      	mov	fp, r3
 8012860:	45b1      	cmp	r9, r6
 8012862:	d337      	bcc.n	80128d4 <__gethex+0x1d0>
 8012864:	f845 bb04 	str.w	fp, [r5], #4
 8012868:	eba5 050a 	sub.w	r5, r5, sl
 801286c:	10ad      	asrs	r5, r5, #2
 801286e:	6125      	str	r5, [r4, #16]
 8012870:	4658      	mov	r0, fp
 8012872:	f7fe f84b 	bl	801090c <__hi0bits>
 8012876:	016d      	lsls	r5, r5, #5
 8012878:	f8d8 6000 	ldr.w	r6, [r8]
 801287c:	1a2d      	subs	r5, r5, r0
 801287e:	42b5      	cmp	r5, r6
 8012880:	dd54      	ble.n	801292c <__gethex+0x228>
 8012882:	1bad      	subs	r5, r5, r6
 8012884:	4629      	mov	r1, r5
 8012886:	4620      	mov	r0, r4
 8012888:	f7fe fbdf 	bl	801104a <__any_on>
 801288c:	4681      	mov	r9, r0
 801288e:	b178      	cbz	r0, 80128b0 <__gethex+0x1ac>
 8012890:	1e6b      	subs	r3, r5, #1
 8012892:	1159      	asrs	r1, r3, #5
 8012894:	f003 021f 	and.w	r2, r3, #31
 8012898:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801289c:	f04f 0901 	mov.w	r9, #1
 80128a0:	fa09 f202 	lsl.w	r2, r9, r2
 80128a4:	420a      	tst	r2, r1
 80128a6:	d003      	beq.n	80128b0 <__gethex+0x1ac>
 80128a8:	454b      	cmp	r3, r9
 80128aa:	dc36      	bgt.n	801291a <__gethex+0x216>
 80128ac:	f04f 0902 	mov.w	r9, #2
 80128b0:	4629      	mov	r1, r5
 80128b2:	4620      	mov	r0, r4
 80128b4:	f7ff febe 	bl	8012634 <rshift>
 80128b8:	442f      	add	r7, r5
 80128ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80128be:	42bb      	cmp	r3, r7
 80128c0:	da42      	bge.n	8012948 <__gethex+0x244>
 80128c2:	9801      	ldr	r0, [sp, #4]
 80128c4:	4621      	mov	r1, r4
 80128c6:	f7fd ff6f 	bl	80107a8 <_Bfree>
 80128ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128cc:	2300      	movs	r3, #0
 80128ce:	6013      	str	r3, [r2, #0]
 80128d0:	25a3      	movs	r5, #163	@ 0xa3
 80128d2:	e793      	b.n	80127fc <__gethex+0xf8>
 80128d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80128d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80128da:	d012      	beq.n	8012902 <__gethex+0x1fe>
 80128dc:	2b20      	cmp	r3, #32
 80128de:	d104      	bne.n	80128ea <__gethex+0x1e6>
 80128e0:	f845 bb04 	str.w	fp, [r5], #4
 80128e4:	f04f 0b00 	mov.w	fp, #0
 80128e8:	465b      	mov	r3, fp
 80128ea:	7830      	ldrb	r0, [r6, #0]
 80128ec:	9303      	str	r3, [sp, #12]
 80128ee:	f7ff fef3 	bl	80126d8 <__hexdig_fun>
 80128f2:	9b03      	ldr	r3, [sp, #12]
 80128f4:	f000 000f 	and.w	r0, r0, #15
 80128f8:	4098      	lsls	r0, r3
 80128fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80128fe:	3304      	adds	r3, #4
 8012900:	e7ae      	b.n	8012860 <__gethex+0x15c>
 8012902:	45b1      	cmp	r9, r6
 8012904:	d8ea      	bhi.n	80128dc <__gethex+0x1d8>
 8012906:	492b      	ldr	r1, [pc, #172]	@ (80129b4 <__gethex+0x2b0>)
 8012908:	9303      	str	r3, [sp, #12]
 801290a:	2201      	movs	r2, #1
 801290c:	4630      	mov	r0, r6
 801290e:	f7ff fe03 	bl	8012518 <strncmp>
 8012912:	9b03      	ldr	r3, [sp, #12]
 8012914:	2800      	cmp	r0, #0
 8012916:	d1e1      	bne.n	80128dc <__gethex+0x1d8>
 8012918:	e7a2      	b.n	8012860 <__gethex+0x15c>
 801291a:	1ea9      	subs	r1, r5, #2
 801291c:	4620      	mov	r0, r4
 801291e:	f7fe fb94 	bl	801104a <__any_on>
 8012922:	2800      	cmp	r0, #0
 8012924:	d0c2      	beq.n	80128ac <__gethex+0x1a8>
 8012926:	f04f 0903 	mov.w	r9, #3
 801292a:	e7c1      	b.n	80128b0 <__gethex+0x1ac>
 801292c:	da09      	bge.n	8012942 <__gethex+0x23e>
 801292e:	1b75      	subs	r5, r6, r5
 8012930:	4621      	mov	r1, r4
 8012932:	9801      	ldr	r0, [sp, #4]
 8012934:	462a      	mov	r2, r5
 8012936:	f7fe f94f 	bl	8010bd8 <__lshift>
 801293a:	1b7f      	subs	r7, r7, r5
 801293c:	4604      	mov	r4, r0
 801293e:	f100 0a14 	add.w	sl, r0, #20
 8012942:	f04f 0900 	mov.w	r9, #0
 8012946:	e7b8      	b.n	80128ba <__gethex+0x1b6>
 8012948:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801294c:	42bd      	cmp	r5, r7
 801294e:	dd6f      	ble.n	8012a30 <__gethex+0x32c>
 8012950:	1bed      	subs	r5, r5, r7
 8012952:	42ae      	cmp	r6, r5
 8012954:	dc34      	bgt.n	80129c0 <__gethex+0x2bc>
 8012956:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801295a:	2b02      	cmp	r3, #2
 801295c:	d022      	beq.n	80129a4 <__gethex+0x2a0>
 801295e:	2b03      	cmp	r3, #3
 8012960:	d024      	beq.n	80129ac <__gethex+0x2a8>
 8012962:	2b01      	cmp	r3, #1
 8012964:	d115      	bne.n	8012992 <__gethex+0x28e>
 8012966:	42ae      	cmp	r6, r5
 8012968:	d113      	bne.n	8012992 <__gethex+0x28e>
 801296a:	2e01      	cmp	r6, #1
 801296c:	d10b      	bne.n	8012986 <__gethex+0x282>
 801296e:	9a02      	ldr	r2, [sp, #8]
 8012970:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012974:	6013      	str	r3, [r2, #0]
 8012976:	2301      	movs	r3, #1
 8012978:	6123      	str	r3, [r4, #16]
 801297a:	f8ca 3000 	str.w	r3, [sl]
 801297e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012980:	2562      	movs	r5, #98	@ 0x62
 8012982:	601c      	str	r4, [r3, #0]
 8012984:	e73a      	b.n	80127fc <__gethex+0xf8>
 8012986:	1e71      	subs	r1, r6, #1
 8012988:	4620      	mov	r0, r4
 801298a:	f7fe fb5e 	bl	801104a <__any_on>
 801298e:	2800      	cmp	r0, #0
 8012990:	d1ed      	bne.n	801296e <__gethex+0x26a>
 8012992:	9801      	ldr	r0, [sp, #4]
 8012994:	4621      	mov	r1, r4
 8012996:	f7fd ff07 	bl	80107a8 <_Bfree>
 801299a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801299c:	2300      	movs	r3, #0
 801299e:	6013      	str	r3, [r2, #0]
 80129a0:	2550      	movs	r5, #80	@ 0x50
 80129a2:	e72b      	b.n	80127fc <__gethex+0xf8>
 80129a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d1f3      	bne.n	8012992 <__gethex+0x28e>
 80129aa:	e7e0      	b.n	801296e <__gethex+0x26a>
 80129ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d1dd      	bne.n	801296e <__gethex+0x26a>
 80129b2:	e7ee      	b.n	8012992 <__gethex+0x28e>
 80129b4:	080143d8 	.word	0x080143d8
 80129b8:	0801426d 	.word	0x0801426d
 80129bc:	08014586 	.word	0x08014586
 80129c0:	1e6f      	subs	r7, r5, #1
 80129c2:	f1b9 0f00 	cmp.w	r9, #0
 80129c6:	d130      	bne.n	8012a2a <__gethex+0x326>
 80129c8:	b127      	cbz	r7, 80129d4 <__gethex+0x2d0>
 80129ca:	4639      	mov	r1, r7
 80129cc:	4620      	mov	r0, r4
 80129ce:	f7fe fb3c 	bl	801104a <__any_on>
 80129d2:	4681      	mov	r9, r0
 80129d4:	117a      	asrs	r2, r7, #5
 80129d6:	2301      	movs	r3, #1
 80129d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80129dc:	f007 071f 	and.w	r7, r7, #31
 80129e0:	40bb      	lsls	r3, r7
 80129e2:	4213      	tst	r3, r2
 80129e4:	4629      	mov	r1, r5
 80129e6:	4620      	mov	r0, r4
 80129e8:	bf18      	it	ne
 80129ea:	f049 0902 	orrne.w	r9, r9, #2
 80129ee:	f7ff fe21 	bl	8012634 <rshift>
 80129f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80129f6:	1b76      	subs	r6, r6, r5
 80129f8:	2502      	movs	r5, #2
 80129fa:	f1b9 0f00 	cmp.w	r9, #0
 80129fe:	d047      	beq.n	8012a90 <__gethex+0x38c>
 8012a00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	d015      	beq.n	8012a34 <__gethex+0x330>
 8012a08:	2b03      	cmp	r3, #3
 8012a0a:	d017      	beq.n	8012a3c <__gethex+0x338>
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d109      	bne.n	8012a24 <__gethex+0x320>
 8012a10:	f019 0f02 	tst.w	r9, #2
 8012a14:	d006      	beq.n	8012a24 <__gethex+0x320>
 8012a16:	f8da 3000 	ldr.w	r3, [sl]
 8012a1a:	ea49 0903 	orr.w	r9, r9, r3
 8012a1e:	f019 0f01 	tst.w	r9, #1
 8012a22:	d10e      	bne.n	8012a42 <__gethex+0x33e>
 8012a24:	f045 0510 	orr.w	r5, r5, #16
 8012a28:	e032      	b.n	8012a90 <__gethex+0x38c>
 8012a2a:	f04f 0901 	mov.w	r9, #1
 8012a2e:	e7d1      	b.n	80129d4 <__gethex+0x2d0>
 8012a30:	2501      	movs	r5, #1
 8012a32:	e7e2      	b.n	80129fa <__gethex+0x2f6>
 8012a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a36:	f1c3 0301 	rsb	r3, r3, #1
 8012a3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d0f0      	beq.n	8012a24 <__gethex+0x320>
 8012a42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012a46:	f104 0314 	add.w	r3, r4, #20
 8012a4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012a4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012a52:	f04f 0c00 	mov.w	ip, #0
 8012a56:	4618      	mov	r0, r3
 8012a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012a60:	d01b      	beq.n	8012a9a <__gethex+0x396>
 8012a62:	3201      	adds	r2, #1
 8012a64:	6002      	str	r2, [r0, #0]
 8012a66:	2d02      	cmp	r5, #2
 8012a68:	f104 0314 	add.w	r3, r4, #20
 8012a6c:	d13c      	bne.n	8012ae8 <__gethex+0x3e4>
 8012a6e:	f8d8 2000 	ldr.w	r2, [r8]
 8012a72:	3a01      	subs	r2, #1
 8012a74:	42b2      	cmp	r2, r6
 8012a76:	d109      	bne.n	8012a8c <__gethex+0x388>
 8012a78:	1171      	asrs	r1, r6, #5
 8012a7a:	2201      	movs	r2, #1
 8012a7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a80:	f006 061f 	and.w	r6, r6, #31
 8012a84:	fa02 f606 	lsl.w	r6, r2, r6
 8012a88:	421e      	tst	r6, r3
 8012a8a:	d13a      	bne.n	8012b02 <__gethex+0x3fe>
 8012a8c:	f045 0520 	orr.w	r5, r5, #32
 8012a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a92:	601c      	str	r4, [r3, #0]
 8012a94:	9b02      	ldr	r3, [sp, #8]
 8012a96:	601f      	str	r7, [r3, #0]
 8012a98:	e6b0      	b.n	80127fc <__gethex+0xf8>
 8012a9a:	4299      	cmp	r1, r3
 8012a9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012aa0:	d8d9      	bhi.n	8012a56 <__gethex+0x352>
 8012aa2:	68a3      	ldr	r3, [r4, #8]
 8012aa4:	459b      	cmp	fp, r3
 8012aa6:	db17      	blt.n	8012ad8 <__gethex+0x3d4>
 8012aa8:	6861      	ldr	r1, [r4, #4]
 8012aaa:	9801      	ldr	r0, [sp, #4]
 8012aac:	3101      	adds	r1, #1
 8012aae:	f7fd fe3b 	bl	8010728 <_Balloc>
 8012ab2:	4681      	mov	r9, r0
 8012ab4:	b918      	cbnz	r0, 8012abe <__gethex+0x3ba>
 8012ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8012b20 <__gethex+0x41c>)
 8012ab8:	4602      	mov	r2, r0
 8012aba:	2184      	movs	r1, #132	@ 0x84
 8012abc:	e6c5      	b.n	801284a <__gethex+0x146>
 8012abe:	6922      	ldr	r2, [r4, #16]
 8012ac0:	3202      	adds	r2, #2
 8012ac2:	f104 010c 	add.w	r1, r4, #12
 8012ac6:	0092      	lsls	r2, r2, #2
 8012ac8:	300c      	adds	r0, #12
 8012aca:	f7ff fd69 	bl	80125a0 <memcpy>
 8012ace:	4621      	mov	r1, r4
 8012ad0:	9801      	ldr	r0, [sp, #4]
 8012ad2:	f7fd fe69 	bl	80107a8 <_Bfree>
 8012ad6:	464c      	mov	r4, r9
 8012ad8:	6923      	ldr	r3, [r4, #16]
 8012ada:	1c5a      	adds	r2, r3, #1
 8012adc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012ae0:	6122      	str	r2, [r4, #16]
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	615a      	str	r2, [r3, #20]
 8012ae6:	e7be      	b.n	8012a66 <__gethex+0x362>
 8012ae8:	6922      	ldr	r2, [r4, #16]
 8012aea:	455a      	cmp	r2, fp
 8012aec:	dd0b      	ble.n	8012b06 <__gethex+0x402>
 8012aee:	2101      	movs	r1, #1
 8012af0:	4620      	mov	r0, r4
 8012af2:	f7ff fd9f 	bl	8012634 <rshift>
 8012af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012afa:	3701      	adds	r7, #1
 8012afc:	42bb      	cmp	r3, r7
 8012afe:	f6ff aee0 	blt.w	80128c2 <__gethex+0x1be>
 8012b02:	2501      	movs	r5, #1
 8012b04:	e7c2      	b.n	8012a8c <__gethex+0x388>
 8012b06:	f016 061f 	ands.w	r6, r6, #31
 8012b0a:	d0fa      	beq.n	8012b02 <__gethex+0x3fe>
 8012b0c:	4453      	add	r3, sl
 8012b0e:	f1c6 0620 	rsb	r6, r6, #32
 8012b12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012b16:	f7fd fef9 	bl	801090c <__hi0bits>
 8012b1a:	42b0      	cmp	r0, r6
 8012b1c:	dbe7      	blt.n	8012aee <__gethex+0x3ea>
 8012b1e:	e7f0      	b.n	8012b02 <__gethex+0x3fe>
 8012b20:	0801426d 	.word	0x0801426d

08012b24 <L_shift>:
 8012b24:	f1c2 0208 	rsb	r2, r2, #8
 8012b28:	0092      	lsls	r2, r2, #2
 8012b2a:	b570      	push	{r4, r5, r6, lr}
 8012b2c:	f1c2 0620 	rsb	r6, r2, #32
 8012b30:	6843      	ldr	r3, [r0, #4]
 8012b32:	6804      	ldr	r4, [r0, #0]
 8012b34:	fa03 f506 	lsl.w	r5, r3, r6
 8012b38:	432c      	orrs	r4, r5
 8012b3a:	40d3      	lsrs	r3, r2
 8012b3c:	6004      	str	r4, [r0, #0]
 8012b3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012b42:	4288      	cmp	r0, r1
 8012b44:	d3f4      	bcc.n	8012b30 <L_shift+0xc>
 8012b46:	bd70      	pop	{r4, r5, r6, pc}

08012b48 <__match>:
 8012b48:	b530      	push	{r4, r5, lr}
 8012b4a:	6803      	ldr	r3, [r0, #0]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b52:	b914      	cbnz	r4, 8012b5a <__match+0x12>
 8012b54:	6003      	str	r3, [r0, #0]
 8012b56:	2001      	movs	r0, #1
 8012b58:	bd30      	pop	{r4, r5, pc}
 8012b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012b62:	2d19      	cmp	r5, #25
 8012b64:	bf98      	it	ls
 8012b66:	3220      	addls	r2, #32
 8012b68:	42a2      	cmp	r2, r4
 8012b6a:	d0f0      	beq.n	8012b4e <__match+0x6>
 8012b6c:	2000      	movs	r0, #0
 8012b6e:	e7f3      	b.n	8012b58 <__match+0x10>

08012b70 <__hexnan>:
 8012b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b74:	680b      	ldr	r3, [r1, #0]
 8012b76:	6801      	ldr	r1, [r0, #0]
 8012b78:	115e      	asrs	r6, r3, #5
 8012b7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012b7e:	f013 031f 	ands.w	r3, r3, #31
 8012b82:	b087      	sub	sp, #28
 8012b84:	bf18      	it	ne
 8012b86:	3604      	addne	r6, #4
 8012b88:	2500      	movs	r5, #0
 8012b8a:	1f37      	subs	r7, r6, #4
 8012b8c:	4682      	mov	sl, r0
 8012b8e:	4690      	mov	r8, r2
 8012b90:	9301      	str	r3, [sp, #4]
 8012b92:	f846 5c04 	str.w	r5, [r6, #-4]
 8012b96:	46b9      	mov	r9, r7
 8012b98:	463c      	mov	r4, r7
 8012b9a:	9502      	str	r5, [sp, #8]
 8012b9c:	46ab      	mov	fp, r5
 8012b9e:	784a      	ldrb	r2, [r1, #1]
 8012ba0:	1c4b      	adds	r3, r1, #1
 8012ba2:	9303      	str	r3, [sp, #12]
 8012ba4:	b342      	cbz	r2, 8012bf8 <__hexnan+0x88>
 8012ba6:	4610      	mov	r0, r2
 8012ba8:	9105      	str	r1, [sp, #20]
 8012baa:	9204      	str	r2, [sp, #16]
 8012bac:	f7ff fd94 	bl	80126d8 <__hexdig_fun>
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	d151      	bne.n	8012c58 <__hexnan+0xe8>
 8012bb4:	9a04      	ldr	r2, [sp, #16]
 8012bb6:	9905      	ldr	r1, [sp, #20]
 8012bb8:	2a20      	cmp	r2, #32
 8012bba:	d818      	bhi.n	8012bee <__hexnan+0x7e>
 8012bbc:	9b02      	ldr	r3, [sp, #8]
 8012bbe:	459b      	cmp	fp, r3
 8012bc0:	dd13      	ble.n	8012bea <__hexnan+0x7a>
 8012bc2:	454c      	cmp	r4, r9
 8012bc4:	d206      	bcs.n	8012bd4 <__hexnan+0x64>
 8012bc6:	2d07      	cmp	r5, #7
 8012bc8:	dc04      	bgt.n	8012bd4 <__hexnan+0x64>
 8012bca:	462a      	mov	r2, r5
 8012bcc:	4649      	mov	r1, r9
 8012bce:	4620      	mov	r0, r4
 8012bd0:	f7ff ffa8 	bl	8012b24 <L_shift>
 8012bd4:	4544      	cmp	r4, r8
 8012bd6:	d952      	bls.n	8012c7e <__hexnan+0x10e>
 8012bd8:	2300      	movs	r3, #0
 8012bda:	f1a4 0904 	sub.w	r9, r4, #4
 8012bde:	f844 3c04 	str.w	r3, [r4, #-4]
 8012be2:	f8cd b008 	str.w	fp, [sp, #8]
 8012be6:	464c      	mov	r4, r9
 8012be8:	461d      	mov	r5, r3
 8012bea:	9903      	ldr	r1, [sp, #12]
 8012bec:	e7d7      	b.n	8012b9e <__hexnan+0x2e>
 8012bee:	2a29      	cmp	r2, #41	@ 0x29
 8012bf0:	d157      	bne.n	8012ca2 <__hexnan+0x132>
 8012bf2:	3102      	adds	r1, #2
 8012bf4:	f8ca 1000 	str.w	r1, [sl]
 8012bf8:	f1bb 0f00 	cmp.w	fp, #0
 8012bfc:	d051      	beq.n	8012ca2 <__hexnan+0x132>
 8012bfe:	454c      	cmp	r4, r9
 8012c00:	d206      	bcs.n	8012c10 <__hexnan+0xa0>
 8012c02:	2d07      	cmp	r5, #7
 8012c04:	dc04      	bgt.n	8012c10 <__hexnan+0xa0>
 8012c06:	462a      	mov	r2, r5
 8012c08:	4649      	mov	r1, r9
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f7ff ff8a 	bl	8012b24 <L_shift>
 8012c10:	4544      	cmp	r4, r8
 8012c12:	d936      	bls.n	8012c82 <__hexnan+0x112>
 8012c14:	f1a8 0204 	sub.w	r2, r8, #4
 8012c18:	4623      	mov	r3, r4
 8012c1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8012c1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012c22:	429f      	cmp	r7, r3
 8012c24:	d2f9      	bcs.n	8012c1a <__hexnan+0xaa>
 8012c26:	1b3b      	subs	r3, r7, r4
 8012c28:	f023 0303 	bic.w	r3, r3, #3
 8012c2c:	3304      	adds	r3, #4
 8012c2e:	3401      	adds	r4, #1
 8012c30:	3e03      	subs	r6, #3
 8012c32:	42b4      	cmp	r4, r6
 8012c34:	bf88      	it	hi
 8012c36:	2304      	movhi	r3, #4
 8012c38:	4443      	add	r3, r8
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	f843 2b04 	str.w	r2, [r3], #4
 8012c40:	429f      	cmp	r7, r3
 8012c42:	d2fb      	bcs.n	8012c3c <__hexnan+0xcc>
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	b91b      	cbnz	r3, 8012c50 <__hexnan+0xe0>
 8012c48:	4547      	cmp	r7, r8
 8012c4a:	d128      	bne.n	8012c9e <__hexnan+0x12e>
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	603b      	str	r3, [r7, #0]
 8012c50:	2005      	movs	r0, #5
 8012c52:	b007      	add	sp, #28
 8012c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c58:	3501      	adds	r5, #1
 8012c5a:	2d08      	cmp	r5, #8
 8012c5c:	f10b 0b01 	add.w	fp, fp, #1
 8012c60:	dd06      	ble.n	8012c70 <__hexnan+0x100>
 8012c62:	4544      	cmp	r4, r8
 8012c64:	d9c1      	bls.n	8012bea <__hexnan+0x7a>
 8012c66:	2300      	movs	r3, #0
 8012c68:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c6c:	2501      	movs	r5, #1
 8012c6e:	3c04      	subs	r4, #4
 8012c70:	6822      	ldr	r2, [r4, #0]
 8012c72:	f000 000f 	and.w	r0, r0, #15
 8012c76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012c7a:	6020      	str	r0, [r4, #0]
 8012c7c:	e7b5      	b.n	8012bea <__hexnan+0x7a>
 8012c7e:	2508      	movs	r5, #8
 8012c80:	e7b3      	b.n	8012bea <__hexnan+0x7a>
 8012c82:	9b01      	ldr	r3, [sp, #4]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d0dd      	beq.n	8012c44 <__hexnan+0xd4>
 8012c88:	f1c3 0320 	rsb	r3, r3, #32
 8012c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8012c90:	40da      	lsrs	r2, r3
 8012c92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012c96:	4013      	ands	r3, r2
 8012c98:	f846 3c04 	str.w	r3, [r6, #-4]
 8012c9c:	e7d2      	b.n	8012c44 <__hexnan+0xd4>
 8012c9e:	3f04      	subs	r7, #4
 8012ca0:	e7d0      	b.n	8012c44 <__hexnan+0xd4>
 8012ca2:	2004      	movs	r0, #4
 8012ca4:	e7d5      	b.n	8012c52 <__hexnan+0xe2>

08012ca6 <__ascii_mbtowc>:
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	b901      	cbnz	r1, 8012cac <__ascii_mbtowc+0x6>
 8012caa:	a901      	add	r1, sp, #4
 8012cac:	b142      	cbz	r2, 8012cc0 <__ascii_mbtowc+0x1a>
 8012cae:	b14b      	cbz	r3, 8012cc4 <__ascii_mbtowc+0x1e>
 8012cb0:	7813      	ldrb	r3, [r2, #0]
 8012cb2:	600b      	str	r3, [r1, #0]
 8012cb4:	7812      	ldrb	r2, [r2, #0]
 8012cb6:	1e10      	subs	r0, r2, #0
 8012cb8:	bf18      	it	ne
 8012cba:	2001      	movne	r0, #1
 8012cbc:	b002      	add	sp, #8
 8012cbe:	4770      	bx	lr
 8012cc0:	4610      	mov	r0, r2
 8012cc2:	e7fb      	b.n	8012cbc <__ascii_mbtowc+0x16>
 8012cc4:	f06f 0001 	mvn.w	r0, #1
 8012cc8:	e7f8      	b.n	8012cbc <__ascii_mbtowc+0x16>

08012cca <_realloc_r>:
 8012cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cce:	4680      	mov	r8, r0
 8012cd0:	4615      	mov	r5, r2
 8012cd2:	460c      	mov	r4, r1
 8012cd4:	b921      	cbnz	r1, 8012ce0 <_realloc_r+0x16>
 8012cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cda:	4611      	mov	r1, r2
 8012cdc:	f7fd bc98 	b.w	8010610 <_malloc_r>
 8012ce0:	b92a      	cbnz	r2, 8012cee <_realloc_r+0x24>
 8012ce2:	f7fd fc21 	bl	8010528 <_free_r>
 8012ce6:	2400      	movs	r4, #0
 8012ce8:	4620      	mov	r0, r4
 8012cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cee:	f000 f840 	bl	8012d72 <_malloc_usable_size_r>
 8012cf2:	4285      	cmp	r5, r0
 8012cf4:	4606      	mov	r6, r0
 8012cf6:	d802      	bhi.n	8012cfe <_realloc_r+0x34>
 8012cf8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012cfc:	d8f4      	bhi.n	8012ce8 <_realloc_r+0x1e>
 8012cfe:	4629      	mov	r1, r5
 8012d00:	4640      	mov	r0, r8
 8012d02:	f7fd fc85 	bl	8010610 <_malloc_r>
 8012d06:	4607      	mov	r7, r0
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	d0ec      	beq.n	8012ce6 <_realloc_r+0x1c>
 8012d0c:	42b5      	cmp	r5, r6
 8012d0e:	462a      	mov	r2, r5
 8012d10:	4621      	mov	r1, r4
 8012d12:	bf28      	it	cs
 8012d14:	4632      	movcs	r2, r6
 8012d16:	f7ff fc43 	bl	80125a0 <memcpy>
 8012d1a:	4621      	mov	r1, r4
 8012d1c:	4640      	mov	r0, r8
 8012d1e:	f7fd fc03 	bl	8010528 <_free_r>
 8012d22:	463c      	mov	r4, r7
 8012d24:	e7e0      	b.n	8012ce8 <_realloc_r+0x1e>

08012d26 <__ascii_wctomb>:
 8012d26:	4603      	mov	r3, r0
 8012d28:	4608      	mov	r0, r1
 8012d2a:	b141      	cbz	r1, 8012d3e <__ascii_wctomb+0x18>
 8012d2c:	2aff      	cmp	r2, #255	@ 0xff
 8012d2e:	d904      	bls.n	8012d3a <__ascii_wctomb+0x14>
 8012d30:	228a      	movs	r2, #138	@ 0x8a
 8012d32:	601a      	str	r2, [r3, #0]
 8012d34:	f04f 30ff 	mov.w	r0, #4294967295
 8012d38:	4770      	bx	lr
 8012d3a:	700a      	strb	r2, [r1, #0]
 8012d3c:	2001      	movs	r0, #1
 8012d3e:	4770      	bx	lr

08012d40 <fiprintf>:
 8012d40:	b40e      	push	{r1, r2, r3}
 8012d42:	b503      	push	{r0, r1, lr}
 8012d44:	4601      	mov	r1, r0
 8012d46:	ab03      	add	r3, sp, #12
 8012d48:	4805      	ldr	r0, [pc, #20]	@ (8012d60 <fiprintf+0x20>)
 8012d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d4e:	6800      	ldr	r0, [r0, #0]
 8012d50:	9301      	str	r3, [sp, #4]
 8012d52:	f7ff f9a1 	bl	8012098 <_vfiprintf_r>
 8012d56:	b002      	add	sp, #8
 8012d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d5c:	b003      	add	sp, #12
 8012d5e:	4770      	bx	lr
 8012d60:	2000052c 	.word	0x2000052c

08012d64 <abort>:
 8012d64:	b508      	push	{r3, lr}
 8012d66:	2006      	movs	r0, #6
 8012d68:	f000 f834 	bl	8012dd4 <raise>
 8012d6c:	2001      	movs	r0, #1
 8012d6e:	f7f5 fa2f 	bl	80081d0 <_exit>

08012d72 <_malloc_usable_size_r>:
 8012d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d76:	1f18      	subs	r0, r3, #4
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	bfbc      	itt	lt
 8012d7c:	580b      	ldrlt	r3, [r1, r0]
 8012d7e:	18c0      	addlt	r0, r0, r3
 8012d80:	4770      	bx	lr

08012d82 <_raise_r>:
 8012d82:	291f      	cmp	r1, #31
 8012d84:	b538      	push	{r3, r4, r5, lr}
 8012d86:	4605      	mov	r5, r0
 8012d88:	460c      	mov	r4, r1
 8012d8a:	d904      	bls.n	8012d96 <_raise_r+0x14>
 8012d8c:	2316      	movs	r3, #22
 8012d8e:	6003      	str	r3, [r0, #0]
 8012d90:	f04f 30ff 	mov.w	r0, #4294967295
 8012d94:	bd38      	pop	{r3, r4, r5, pc}
 8012d96:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012d98:	b112      	cbz	r2, 8012da0 <_raise_r+0x1e>
 8012d9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d9e:	b94b      	cbnz	r3, 8012db4 <_raise_r+0x32>
 8012da0:	4628      	mov	r0, r5
 8012da2:	f000 f831 	bl	8012e08 <_getpid_r>
 8012da6:	4622      	mov	r2, r4
 8012da8:	4601      	mov	r1, r0
 8012daa:	4628      	mov	r0, r5
 8012dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012db0:	f000 b818 	b.w	8012de4 <_kill_r>
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	d00a      	beq.n	8012dce <_raise_r+0x4c>
 8012db8:	1c59      	adds	r1, r3, #1
 8012dba:	d103      	bne.n	8012dc4 <_raise_r+0x42>
 8012dbc:	2316      	movs	r3, #22
 8012dbe:	6003      	str	r3, [r0, #0]
 8012dc0:	2001      	movs	r0, #1
 8012dc2:	e7e7      	b.n	8012d94 <_raise_r+0x12>
 8012dc4:	2100      	movs	r1, #0
 8012dc6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012dca:	4620      	mov	r0, r4
 8012dcc:	4798      	blx	r3
 8012dce:	2000      	movs	r0, #0
 8012dd0:	e7e0      	b.n	8012d94 <_raise_r+0x12>
	...

08012dd4 <raise>:
 8012dd4:	4b02      	ldr	r3, [pc, #8]	@ (8012de0 <raise+0xc>)
 8012dd6:	4601      	mov	r1, r0
 8012dd8:	6818      	ldr	r0, [r3, #0]
 8012dda:	f7ff bfd2 	b.w	8012d82 <_raise_r>
 8012dde:	bf00      	nop
 8012de0:	2000052c 	.word	0x2000052c

08012de4 <_kill_r>:
 8012de4:	b538      	push	{r3, r4, r5, lr}
 8012de6:	4d07      	ldr	r5, [pc, #28]	@ (8012e04 <_kill_r+0x20>)
 8012de8:	2300      	movs	r3, #0
 8012dea:	4604      	mov	r4, r0
 8012dec:	4608      	mov	r0, r1
 8012dee:	4611      	mov	r1, r2
 8012df0:	602b      	str	r3, [r5, #0]
 8012df2:	f7f5 f9dd 	bl	80081b0 <_kill>
 8012df6:	1c43      	adds	r3, r0, #1
 8012df8:	d102      	bne.n	8012e00 <_kill_r+0x1c>
 8012dfa:	682b      	ldr	r3, [r5, #0]
 8012dfc:	b103      	cbz	r3, 8012e00 <_kill_r+0x1c>
 8012dfe:	6023      	str	r3, [r4, #0]
 8012e00:	bd38      	pop	{r3, r4, r5, pc}
 8012e02:	bf00      	nop
 8012e04:	20004474 	.word	0x20004474

08012e08 <_getpid_r>:
 8012e08:	f7f5 b9ca 	b.w	80081a0 <_getpid>
 8012e0c:	0000      	movs	r0, r0
	...

08012e10 <exp>:
 8012e10:	b538      	push	{r3, r4, r5, lr}
 8012e12:	ed2d 8b02 	vpush	{d8}
 8012e16:	ec55 4b10 	vmov	r4, r5, d0
 8012e1a:	f000 f9c5 	bl	80131a8 <__ieee754_exp>
 8012e1e:	eeb0 8a40 	vmov.f32	s16, s0
 8012e22:	eef0 8a60 	vmov.f32	s17, s1
 8012e26:	ec45 4b10 	vmov	d0, r4, r5
 8012e2a:	f000 f8d5 	bl	8012fd8 <finite>
 8012e2e:	b168      	cbz	r0, 8012e4c <exp+0x3c>
 8012e30:	a317      	add	r3, pc, #92	@ (adr r3, 8012e90 <exp+0x80>)
 8012e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e36:	4620      	mov	r0, r4
 8012e38:	4629      	mov	r1, r5
 8012e3a:	f7ed fe8d 	bl	8000b58 <__aeabi_dcmpgt>
 8012e3e:	b160      	cbz	r0, 8012e5a <exp+0x4a>
 8012e40:	f7fc fcf2 	bl	800f828 <__errno>
 8012e44:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8012e80 <exp+0x70>
 8012e48:	2322      	movs	r3, #34	@ 0x22
 8012e4a:	6003      	str	r3, [r0, #0]
 8012e4c:	eeb0 0a48 	vmov.f32	s0, s16
 8012e50:	eef0 0a68 	vmov.f32	s1, s17
 8012e54:	ecbd 8b02 	vpop	{d8}
 8012e58:	bd38      	pop	{r3, r4, r5, pc}
 8012e5a:	a30f      	add	r3, pc, #60	@ (adr r3, 8012e98 <exp+0x88>)
 8012e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e60:	4620      	mov	r0, r4
 8012e62:	4629      	mov	r1, r5
 8012e64:	f7ed fe5a 	bl	8000b1c <__aeabi_dcmplt>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d0ef      	beq.n	8012e4c <exp+0x3c>
 8012e6c:	f7fc fcdc 	bl	800f828 <__errno>
 8012e70:	2322      	movs	r3, #34	@ 0x22
 8012e72:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8012e88 <exp+0x78>
 8012e76:	6003      	str	r3, [r0, #0]
 8012e78:	e7e8      	b.n	8012e4c <exp+0x3c>
 8012e7a:	bf00      	nop
 8012e7c:	f3af 8000 	nop.w
 8012e80:	00000000 	.word	0x00000000
 8012e84:	7ff00000 	.word	0x7ff00000
	...
 8012e90:	fefa39ef 	.word	0xfefa39ef
 8012e94:	40862e42 	.word	0x40862e42
 8012e98:	d52d3051 	.word	0xd52d3051
 8012e9c:	c0874910 	.word	0xc0874910

08012ea0 <pow>:
 8012ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea2:	ed2d 8b02 	vpush	{d8}
 8012ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8012eaa:	eef0 8a60 	vmov.f32	s17, s1
 8012eae:	ec55 4b11 	vmov	r4, r5, d1
 8012eb2:	f000 faf5 	bl	80134a0 <__ieee754_pow>
 8012eb6:	4622      	mov	r2, r4
 8012eb8:	462b      	mov	r3, r5
 8012eba:	4620      	mov	r0, r4
 8012ebc:	4629      	mov	r1, r5
 8012ebe:	ec57 6b10 	vmov	r6, r7, d0
 8012ec2:	f7ed fe53 	bl	8000b6c <__aeabi_dcmpun>
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	d13b      	bne.n	8012f42 <pow+0xa2>
 8012eca:	ec51 0b18 	vmov	r0, r1, d8
 8012ece:	2200      	movs	r2, #0
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	f7ed fe19 	bl	8000b08 <__aeabi_dcmpeq>
 8012ed6:	b1b8      	cbz	r0, 8012f08 <pow+0x68>
 8012ed8:	2200      	movs	r2, #0
 8012eda:	2300      	movs	r3, #0
 8012edc:	4620      	mov	r0, r4
 8012ede:	4629      	mov	r1, r5
 8012ee0:	f7ed fe12 	bl	8000b08 <__aeabi_dcmpeq>
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d146      	bne.n	8012f76 <pow+0xd6>
 8012ee8:	ec45 4b10 	vmov	d0, r4, r5
 8012eec:	f000 f874 	bl	8012fd8 <finite>
 8012ef0:	b338      	cbz	r0, 8012f42 <pow+0xa2>
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	4629      	mov	r1, r5
 8012efa:	f7ed fe0f 	bl	8000b1c <__aeabi_dcmplt>
 8012efe:	b300      	cbz	r0, 8012f42 <pow+0xa2>
 8012f00:	f7fc fc92 	bl	800f828 <__errno>
 8012f04:	2322      	movs	r3, #34	@ 0x22
 8012f06:	e01b      	b.n	8012f40 <pow+0xa0>
 8012f08:	ec47 6b10 	vmov	d0, r6, r7
 8012f0c:	f000 f864 	bl	8012fd8 <finite>
 8012f10:	b9e0      	cbnz	r0, 8012f4c <pow+0xac>
 8012f12:	eeb0 0a48 	vmov.f32	s0, s16
 8012f16:	eef0 0a68 	vmov.f32	s1, s17
 8012f1a:	f000 f85d 	bl	8012fd8 <finite>
 8012f1e:	b1a8      	cbz	r0, 8012f4c <pow+0xac>
 8012f20:	ec45 4b10 	vmov	d0, r4, r5
 8012f24:	f000 f858 	bl	8012fd8 <finite>
 8012f28:	b180      	cbz	r0, 8012f4c <pow+0xac>
 8012f2a:	4632      	mov	r2, r6
 8012f2c:	463b      	mov	r3, r7
 8012f2e:	4630      	mov	r0, r6
 8012f30:	4639      	mov	r1, r7
 8012f32:	f7ed fe1b 	bl	8000b6c <__aeabi_dcmpun>
 8012f36:	2800      	cmp	r0, #0
 8012f38:	d0e2      	beq.n	8012f00 <pow+0x60>
 8012f3a:	f7fc fc75 	bl	800f828 <__errno>
 8012f3e:	2321      	movs	r3, #33	@ 0x21
 8012f40:	6003      	str	r3, [r0, #0]
 8012f42:	ecbd 8b02 	vpop	{d8}
 8012f46:	ec47 6b10 	vmov	d0, r6, r7
 8012f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	2300      	movs	r3, #0
 8012f50:	4630      	mov	r0, r6
 8012f52:	4639      	mov	r1, r7
 8012f54:	f7ed fdd8 	bl	8000b08 <__aeabi_dcmpeq>
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	d0f2      	beq.n	8012f42 <pow+0xa2>
 8012f5c:	eeb0 0a48 	vmov.f32	s0, s16
 8012f60:	eef0 0a68 	vmov.f32	s1, s17
 8012f64:	f000 f838 	bl	8012fd8 <finite>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	d0ea      	beq.n	8012f42 <pow+0xa2>
 8012f6c:	ec45 4b10 	vmov	d0, r4, r5
 8012f70:	f000 f832 	bl	8012fd8 <finite>
 8012f74:	e7c3      	b.n	8012efe <pow+0x5e>
 8012f76:	4f01      	ldr	r7, [pc, #4]	@ (8012f7c <pow+0xdc>)
 8012f78:	2600      	movs	r6, #0
 8012f7a:	e7e2      	b.n	8012f42 <pow+0xa2>
 8012f7c:	3ff00000 	.word	0x3ff00000

08012f80 <sqrt>:
 8012f80:	b538      	push	{r3, r4, r5, lr}
 8012f82:	ed2d 8b02 	vpush	{d8}
 8012f86:	ec55 4b10 	vmov	r4, r5, d0
 8012f8a:	f000 f831 	bl	8012ff0 <__ieee754_sqrt>
 8012f8e:	4622      	mov	r2, r4
 8012f90:	462b      	mov	r3, r5
 8012f92:	4620      	mov	r0, r4
 8012f94:	4629      	mov	r1, r5
 8012f96:	eeb0 8a40 	vmov.f32	s16, s0
 8012f9a:	eef0 8a60 	vmov.f32	s17, s1
 8012f9e:	f7ed fde5 	bl	8000b6c <__aeabi_dcmpun>
 8012fa2:	b990      	cbnz	r0, 8012fca <sqrt+0x4a>
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	4620      	mov	r0, r4
 8012faa:	4629      	mov	r1, r5
 8012fac:	f7ed fdb6 	bl	8000b1c <__aeabi_dcmplt>
 8012fb0:	b158      	cbz	r0, 8012fca <sqrt+0x4a>
 8012fb2:	f7fc fc39 	bl	800f828 <__errno>
 8012fb6:	2321      	movs	r3, #33	@ 0x21
 8012fb8:	6003      	str	r3, [r0, #0]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	4610      	mov	r0, r2
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	f7ed fc63 	bl	800088c <__aeabi_ddiv>
 8012fc6:	ec41 0b18 	vmov	d8, r0, r1
 8012fca:	eeb0 0a48 	vmov.f32	s0, s16
 8012fce:	eef0 0a68 	vmov.f32	s1, s17
 8012fd2:	ecbd 8b02 	vpop	{d8}
 8012fd6:	bd38      	pop	{r3, r4, r5, pc}

08012fd8 <finite>:
 8012fd8:	b082      	sub	sp, #8
 8012fda:	ed8d 0b00 	vstr	d0, [sp]
 8012fde:	9801      	ldr	r0, [sp, #4]
 8012fe0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012fe4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012fe8:	0fc0      	lsrs	r0, r0, #31
 8012fea:	b002      	add	sp, #8
 8012fec:	4770      	bx	lr
	...

08012ff0 <__ieee754_sqrt>:
 8012ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff4:	4a68      	ldr	r2, [pc, #416]	@ (8013198 <__ieee754_sqrt+0x1a8>)
 8012ff6:	ec55 4b10 	vmov	r4, r5, d0
 8012ffa:	43aa      	bics	r2, r5
 8012ffc:	462b      	mov	r3, r5
 8012ffe:	4621      	mov	r1, r4
 8013000:	d110      	bne.n	8013024 <__ieee754_sqrt+0x34>
 8013002:	4622      	mov	r2, r4
 8013004:	4620      	mov	r0, r4
 8013006:	4629      	mov	r1, r5
 8013008:	f7ed fb16 	bl	8000638 <__aeabi_dmul>
 801300c:	4602      	mov	r2, r0
 801300e:	460b      	mov	r3, r1
 8013010:	4620      	mov	r0, r4
 8013012:	4629      	mov	r1, r5
 8013014:	f7ed f95a 	bl	80002cc <__adddf3>
 8013018:	4604      	mov	r4, r0
 801301a:	460d      	mov	r5, r1
 801301c:	ec45 4b10 	vmov	d0, r4, r5
 8013020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013024:	2d00      	cmp	r5, #0
 8013026:	dc0e      	bgt.n	8013046 <__ieee754_sqrt+0x56>
 8013028:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801302c:	4322      	orrs	r2, r4
 801302e:	d0f5      	beq.n	801301c <__ieee754_sqrt+0x2c>
 8013030:	b19d      	cbz	r5, 801305a <__ieee754_sqrt+0x6a>
 8013032:	4622      	mov	r2, r4
 8013034:	4620      	mov	r0, r4
 8013036:	4629      	mov	r1, r5
 8013038:	f7ed f946 	bl	80002c8 <__aeabi_dsub>
 801303c:	4602      	mov	r2, r0
 801303e:	460b      	mov	r3, r1
 8013040:	f7ed fc24 	bl	800088c <__aeabi_ddiv>
 8013044:	e7e8      	b.n	8013018 <__ieee754_sqrt+0x28>
 8013046:	152a      	asrs	r2, r5, #20
 8013048:	d115      	bne.n	8013076 <__ieee754_sqrt+0x86>
 801304a:	2000      	movs	r0, #0
 801304c:	e009      	b.n	8013062 <__ieee754_sqrt+0x72>
 801304e:	0acb      	lsrs	r3, r1, #11
 8013050:	3a15      	subs	r2, #21
 8013052:	0549      	lsls	r1, r1, #21
 8013054:	2b00      	cmp	r3, #0
 8013056:	d0fa      	beq.n	801304e <__ieee754_sqrt+0x5e>
 8013058:	e7f7      	b.n	801304a <__ieee754_sqrt+0x5a>
 801305a:	462a      	mov	r2, r5
 801305c:	e7fa      	b.n	8013054 <__ieee754_sqrt+0x64>
 801305e:	005b      	lsls	r3, r3, #1
 8013060:	3001      	adds	r0, #1
 8013062:	02dc      	lsls	r4, r3, #11
 8013064:	d5fb      	bpl.n	801305e <__ieee754_sqrt+0x6e>
 8013066:	1e44      	subs	r4, r0, #1
 8013068:	1b12      	subs	r2, r2, r4
 801306a:	f1c0 0420 	rsb	r4, r0, #32
 801306e:	fa21 f404 	lsr.w	r4, r1, r4
 8013072:	4323      	orrs	r3, r4
 8013074:	4081      	lsls	r1, r0
 8013076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801307a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801307e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013082:	07d2      	lsls	r2, r2, #31
 8013084:	bf5c      	itt	pl
 8013086:	005b      	lslpl	r3, r3, #1
 8013088:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801308c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013090:	bf58      	it	pl
 8013092:	0049      	lslpl	r1, r1, #1
 8013094:	2600      	movs	r6, #0
 8013096:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801309a:	106d      	asrs	r5, r5, #1
 801309c:	0049      	lsls	r1, r1, #1
 801309e:	2016      	movs	r0, #22
 80130a0:	4632      	mov	r2, r6
 80130a2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80130a6:	1917      	adds	r7, r2, r4
 80130a8:	429f      	cmp	r7, r3
 80130aa:	bfde      	ittt	le
 80130ac:	193a      	addle	r2, r7, r4
 80130ae:	1bdb      	suble	r3, r3, r7
 80130b0:	1936      	addle	r6, r6, r4
 80130b2:	0fcf      	lsrs	r7, r1, #31
 80130b4:	3801      	subs	r0, #1
 80130b6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80130ba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80130be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80130c2:	d1f0      	bne.n	80130a6 <__ieee754_sqrt+0xb6>
 80130c4:	4604      	mov	r4, r0
 80130c6:	2720      	movs	r7, #32
 80130c8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80130cc:	429a      	cmp	r2, r3
 80130ce:	eb00 0e0c 	add.w	lr, r0, ip
 80130d2:	db02      	blt.n	80130da <__ieee754_sqrt+0xea>
 80130d4:	d113      	bne.n	80130fe <__ieee754_sqrt+0x10e>
 80130d6:	458e      	cmp	lr, r1
 80130d8:	d811      	bhi.n	80130fe <__ieee754_sqrt+0x10e>
 80130da:	f1be 0f00 	cmp.w	lr, #0
 80130de:	eb0e 000c 	add.w	r0, lr, ip
 80130e2:	da42      	bge.n	801316a <__ieee754_sqrt+0x17a>
 80130e4:	2800      	cmp	r0, #0
 80130e6:	db40      	blt.n	801316a <__ieee754_sqrt+0x17a>
 80130e8:	f102 0801 	add.w	r8, r2, #1
 80130ec:	1a9b      	subs	r3, r3, r2
 80130ee:	458e      	cmp	lr, r1
 80130f0:	bf88      	it	hi
 80130f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80130f6:	eba1 010e 	sub.w	r1, r1, lr
 80130fa:	4464      	add	r4, ip
 80130fc:	4642      	mov	r2, r8
 80130fe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013102:	3f01      	subs	r7, #1
 8013104:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013108:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801310c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013110:	d1dc      	bne.n	80130cc <__ieee754_sqrt+0xdc>
 8013112:	4319      	orrs	r1, r3
 8013114:	d01b      	beq.n	801314e <__ieee754_sqrt+0x15e>
 8013116:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801319c <__ieee754_sqrt+0x1ac>
 801311a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80131a0 <__ieee754_sqrt+0x1b0>
 801311e:	e9da 0100 	ldrd	r0, r1, [sl]
 8013122:	e9db 2300 	ldrd	r2, r3, [fp]
 8013126:	f7ed f8cf 	bl	80002c8 <__aeabi_dsub>
 801312a:	e9da 8900 	ldrd	r8, r9, [sl]
 801312e:	4602      	mov	r2, r0
 8013130:	460b      	mov	r3, r1
 8013132:	4640      	mov	r0, r8
 8013134:	4649      	mov	r1, r9
 8013136:	f7ed fcfb 	bl	8000b30 <__aeabi_dcmple>
 801313a:	b140      	cbz	r0, 801314e <__ieee754_sqrt+0x15e>
 801313c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013140:	e9da 0100 	ldrd	r0, r1, [sl]
 8013144:	e9db 2300 	ldrd	r2, r3, [fp]
 8013148:	d111      	bne.n	801316e <__ieee754_sqrt+0x17e>
 801314a:	3601      	adds	r6, #1
 801314c:	463c      	mov	r4, r7
 801314e:	1072      	asrs	r2, r6, #1
 8013150:	0863      	lsrs	r3, r4, #1
 8013152:	07f1      	lsls	r1, r6, #31
 8013154:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013158:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801315c:	bf48      	it	mi
 801315e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013162:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8013166:	4618      	mov	r0, r3
 8013168:	e756      	b.n	8013018 <__ieee754_sqrt+0x28>
 801316a:	4690      	mov	r8, r2
 801316c:	e7be      	b.n	80130ec <__ieee754_sqrt+0xfc>
 801316e:	f7ed f8ad 	bl	80002cc <__adddf3>
 8013172:	e9da 8900 	ldrd	r8, r9, [sl]
 8013176:	4602      	mov	r2, r0
 8013178:	460b      	mov	r3, r1
 801317a:	4640      	mov	r0, r8
 801317c:	4649      	mov	r1, r9
 801317e:	f7ed fccd 	bl	8000b1c <__aeabi_dcmplt>
 8013182:	b120      	cbz	r0, 801318e <__ieee754_sqrt+0x19e>
 8013184:	1ca0      	adds	r0, r4, #2
 8013186:	bf08      	it	eq
 8013188:	3601      	addeq	r6, #1
 801318a:	3402      	adds	r4, #2
 801318c:	e7df      	b.n	801314e <__ieee754_sqrt+0x15e>
 801318e:	1c63      	adds	r3, r4, #1
 8013190:	f023 0401 	bic.w	r4, r3, #1
 8013194:	e7db      	b.n	801314e <__ieee754_sqrt+0x15e>
 8013196:	bf00      	nop
 8013198:	7ff00000 	.word	0x7ff00000
 801319c:	200006f0 	.word	0x200006f0
 80131a0:	200006e8 	.word	0x200006e8
 80131a4:	00000000 	.word	0x00000000

080131a8 <__ieee754_exp>:
 80131a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131ac:	ec55 4b10 	vmov	r4, r5, d0
 80131b0:	49b1      	ldr	r1, [pc, #708]	@ (8013478 <__ieee754_exp+0x2d0>)
 80131b2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80131b6:	428a      	cmp	r2, r1
 80131b8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80131bc:	d936      	bls.n	801322c <__ieee754_exp+0x84>
 80131be:	49af      	ldr	r1, [pc, #700]	@ (801347c <__ieee754_exp+0x2d4>)
 80131c0:	428a      	cmp	r2, r1
 80131c2:	d914      	bls.n	80131ee <__ieee754_exp+0x46>
 80131c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80131c8:	4323      	orrs	r3, r4
 80131ca:	4622      	mov	r2, r4
 80131cc:	d007      	beq.n	80131de <__ieee754_exp+0x36>
 80131ce:	462b      	mov	r3, r5
 80131d0:	4620      	mov	r0, r4
 80131d2:	4629      	mov	r1, r5
 80131d4:	f7ed f87a 	bl	80002cc <__adddf3>
 80131d8:	4604      	mov	r4, r0
 80131da:	460d      	mov	r5, r1
 80131dc:	e002      	b.n	80131e4 <__ieee754_exp+0x3c>
 80131de:	2e00      	cmp	r6, #0
 80131e0:	f040 8118 	bne.w	8013414 <__ieee754_exp+0x26c>
 80131e4:	ec45 4b10 	vmov	d0, r4, r5
 80131e8:	b004      	add	sp, #16
 80131ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ee:	a38c      	add	r3, pc, #560	@ (adr r3, 8013420 <__ieee754_exp+0x278>)
 80131f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f4:	4620      	mov	r0, r4
 80131f6:	4629      	mov	r1, r5
 80131f8:	f7ed fcae 	bl	8000b58 <__aeabi_dcmpgt>
 80131fc:	4607      	mov	r7, r0
 80131fe:	b128      	cbz	r0, 801320c <__ieee754_exp+0x64>
 8013200:	2000      	movs	r0, #0
 8013202:	b004      	add	sp, #16
 8013204:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013208:	f000 bf4a 	b.w	80140a0 <__math_oflow>
 801320c:	a386      	add	r3, pc, #536	@ (adr r3, 8013428 <__ieee754_exp+0x280>)
 801320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013212:	4620      	mov	r0, r4
 8013214:	4629      	mov	r1, r5
 8013216:	f7ed fc81 	bl	8000b1c <__aeabi_dcmplt>
 801321a:	2800      	cmp	r0, #0
 801321c:	f000 8087 	beq.w	801332e <__ieee754_exp+0x186>
 8013220:	4638      	mov	r0, r7
 8013222:	b004      	add	sp, #16
 8013224:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013228:	f000 bf32 	b.w	8014090 <__math_uflow>
 801322c:	4b94      	ldr	r3, [pc, #592]	@ (8013480 <__ieee754_exp+0x2d8>)
 801322e:	429a      	cmp	r2, r3
 8013230:	f240 80a9 	bls.w	8013386 <__ieee754_exp+0x1de>
 8013234:	4b93      	ldr	r3, [pc, #588]	@ (8013484 <__ieee754_exp+0x2dc>)
 8013236:	429a      	cmp	r2, r3
 8013238:	d879      	bhi.n	801332e <__ieee754_exp+0x186>
 801323a:	4b93      	ldr	r3, [pc, #588]	@ (8013488 <__ieee754_exp+0x2e0>)
 801323c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013244:	4620      	mov	r0, r4
 8013246:	4629      	mov	r1, r5
 8013248:	f7ed f83e 	bl	80002c8 <__aeabi_dsub>
 801324c:	4b8f      	ldr	r3, [pc, #572]	@ (801348c <__ieee754_exp+0x2e4>)
 801324e:	00f7      	lsls	r7, r6, #3
 8013250:	443b      	add	r3, r7
 8013252:	ed93 7b00 	vldr	d7, [r3]
 8013256:	ed8d 7b00 	vstr	d7, [sp]
 801325a:	f1c6 0a01 	rsb	sl, r6, #1
 801325e:	4680      	mov	r8, r0
 8013260:	4689      	mov	r9, r1
 8013262:	ebaa 0a06 	sub.w	sl, sl, r6
 8013266:	e9dd 2300 	ldrd	r2, r3, [sp]
 801326a:	4640      	mov	r0, r8
 801326c:	4649      	mov	r1, r9
 801326e:	f7ed f82b 	bl	80002c8 <__aeabi_dsub>
 8013272:	4604      	mov	r4, r0
 8013274:	460d      	mov	r5, r1
 8013276:	4622      	mov	r2, r4
 8013278:	462b      	mov	r3, r5
 801327a:	4620      	mov	r0, r4
 801327c:	4629      	mov	r1, r5
 801327e:	f7ed f9db 	bl	8000638 <__aeabi_dmul>
 8013282:	a36b      	add	r3, pc, #428	@ (adr r3, 8013430 <__ieee754_exp+0x288>)
 8013284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013288:	4606      	mov	r6, r0
 801328a:	460f      	mov	r7, r1
 801328c:	f7ed f9d4 	bl	8000638 <__aeabi_dmul>
 8013290:	a369      	add	r3, pc, #420	@ (adr r3, 8013438 <__ieee754_exp+0x290>)
 8013292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013296:	f7ed f817 	bl	80002c8 <__aeabi_dsub>
 801329a:	4632      	mov	r2, r6
 801329c:	463b      	mov	r3, r7
 801329e:	f7ed f9cb 	bl	8000638 <__aeabi_dmul>
 80132a2:	a367      	add	r3, pc, #412	@ (adr r3, 8013440 <__ieee754_exp+0x298>)
 80132a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a8:	f7ed f810 	bl	80002cc <__adddf3>
 80132ac:	4632      	mov	r2, r6
 80132ae:	463b      	mov	r3, r7
 80132b0:	f7ed f9c2 	bl	8000638 <__aeabi_dmul>
 80132b4:	a364      	add	r3, pc, #400	@ (adr r3, 8013448 <__ieee754_exp+0x2a0>)
 80132b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ba:	f7ed f805 	bl	80002c8 <__aeabi_dsub>
 80132be:	4632      	mov	r2, r6
 80132c0:	463b      	mov	r3, r7
 80132c2:	f7ed f9b9 	bl	8000638 <__aeabi_dmul>
 80132c6:	a362      	add	r3, pc, #392	@ (adr r3, 8013450 <__ieee754_exp+0x2a8>)
 80132c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132cc:	f7ec fffe 	bl	80002cc <__adddf3>
 80132d0:	4632      	mov	r2, r6
 80132d2:	463b      	mov	r3, r7
 80132d4:	f7ed f9b0 	bl	8000638 <__aeabi_dmul>
 80132d8:	4602      	mov	r2, r0
 80132da:	460b      	mov	r3, r1
 80132dc:	4620      	mov	r0, r4
 80132de:	4629      	mov	r1, r5
 80132e0:	f7ec fff2 	bl	80002c8 <__aeabi_dsub>
 80132e4:	4602      	mov	r2, r0
 80132e6:	460b      	mov	r3, r1
 80132e8:	4606      	mov	r6, r0
 80132ea:	460f      	mov	r7, r1
 80132ec:	4620      	mov	r0, r4
 80132ee:	4629      	mov	r1, r5
 80132f0:	f7ed f9a2 	bl	8000638 <__aeabi_dmul>
 80132f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132f8:	f1ba 0f00 	cmp.w	sl, #0
 80132fc:	d15c      	bne.n	80133b8 <__ieee754_exp+0x210>
 80132fe:	2200      	movs	r2, #0
 8013300:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013304:	4630      	mov	r0, r6
 8013306:	4639      	mov	r1, r7
 8013308:	f7ec ffde 	bl	80002c8 <__aeabi_dsub>
 801330c:	4602      	mov	r2, r0
 801330e:	460b      	mov	r3, r1
 8013310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013314:	f7ed faba 	bl	800088c <__aeabi_ddiv>
 8013318:	4622      	mov	r2, r4
 801331a:	462b      	mov	r3, r5
 801331c:	f7ec ffd4 	bl	80002c8 <__aeabi_dsub>
 8013320:	4602      	mov	r2, r0
 8013322:	460b      	mov	r3, r1
 8013324:	2000      	movs	r0, #0
 8013326:	495a      	ldr	r1, [pc, #360]	@ (8013490 <__ieee754_exp+0x2e8>)
 8013328:	f7ec ffce 	bl	80002c8 <__aeabi_dsub>
 801332c:	e754      	b.n	80131d8 <__ieee754_exp+0x30>
 801332e:	4b59      	ldr	r3, [pc, #356]	@ (8013494 <__ieee754_exp+0x2ec>)
 8013330:	4620      	mov	r0, r4
 8013332:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8013336:	4629      	mov	r1, r5
 8013338:	a347      	add	r3, pc, #284	@ (adr r3, 8013458 <__ieee754_exp+0x2b0>)
 801333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333e:	f7ed f97b 	bl	8000638 <__aeabi_dmul>
 8013342:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013346:	f7ec ffc1 	bl	80002cc <__adddf3>
 801334a:	f7ed fc25 	bl	8000b98 <__aeabi_d2iz>
 801334e:	4682      	mov	sl, r0
 8013350:	f7ed f908 	bl	8000564 <__aeabi_i2d>
 8013354:	a342      	add	r3, pc, #264	@ (adr r3, 8013460 <__ieee754_exp+0x2b8>)
 8013356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335a:	4606      	mov	r6, r0
 801335c:	460f      	mov	r7, r1
 801335e:	f7ed f96b 	bl	8000638 <__aeabi_dmul>
 8013362:	4602      	mov	r2, r0
 8013364:	460b      	mov	r3, r1
 8013366:	4620      	mov	r0, r4
 8013368:	4629      	mov	r1, r5
 801336a:	f7ec ffad 	bl	80002c8 <__aeabi_dsub>
 801336e:	a33e      	add	r3, pc, #248	@ (adr r3, 8013468 <__ieee754_exp+0x2c0>)
 8013370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013374:	4680      	mov	r8, r0
 8013376:	4689      	mov	r9, r1
 8013378:	4630      	mov	r0, r6
 801337a:	4639      	mov	r1, r7
 801337c:	f7ed f95c 	bl	8000638 <__aeabi_dmul>
 8013380:	e9cd 0100 	strd	r0, r1, [sp]
 8013384:	e76f      	b.n	8013266 <__ieee754_exp+0xbe>
 8013386:	4b44      	ldr	r3, [pc, #272]	@ (8013498 <__ieee754_exp+0x2f0>)
 8013388:	429a      	cmp	r2, r3
 801338a:	d810      	bhi.n	80133ae <__ieee754_exp+0x206>
 801338c:	a338      	add	r3, pc, #224	@ (adr r3, 8013470 <__ieee754_exp+0x2c8>)
 801338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013392:	4620      	mov	r0, r4
 8013394:	4629      	mov	r1, r5
 8013396:	f7ec ff99 	bl	80002cc <__adddf3>
 801339a:	4b3d      	ldr	r3, [pc, #244]	@ (8013490 <__ieee754_exp+0x2e8>)
 801339c:	2200      	movs	r2, #0
 801339e:	f7ed fbdb 	bl	8000b58 <__aeabi_dcmpgt>
 80133a2:	b138      	cbz	r0, 80133b4 <__ieee754_exp+0x20c>
 80133a4:	4b3a      	ldr	r3, [pc, #232]	@ (8013490 <__ieee754_exp+0x2e8>)
 80133a6:	2200      	movs	r2, #0
 80133a8:	4620      	mov	r0, r4
 80133aa:	4629      	mov	r1, r5
 80133ac:	e712      	b.n	80131d4 <__ieee754_exp+0x2c>
 80133ae:	f04f 0a00 	mov.w	sl, #0
 80133b2:	e760      	b.n	8013276 <__ieee754_exp+0xce>
 80133b4:	4682      	mov	sl, r0
 80133b6:	e75e      	b.n	8013276 <__ieee754_exp+0xce>
 80133b8:	4632      	mov	r2, r6
 80133ba:	463b      	mov	r3, r7
 80133bc:	2000      	movs	r0, #0
 80133be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80133c2:	f7ec ff81 	bl	80002c8 <__aeabi_dsub>
 80133c6:	4602      	mov	r2, r0
 80133c8:	460b      	mov	r3, r1
 80133ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133ce:	f7ed fa5d 	bl	800088c <__aeabi_ddiv>
 80133d2:	4602      	mov	r2, r0
 80133d4:	460b      	mov	r3, r1
 80133d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133da:	f7ec ff75 	bl	80002c8 <__aeabi_dsub>
 80133de:	4642      	mov	r2, r8
 80133e0:	464b      	mov	r3, r9
 80133e2:	f7ec ff71 	bl	80002c8 <__aeabi_dsub>
 80133e6:	4602      	mov	r2, r0
 80133e8:	460b      	mov	r3, r1
 80133ea:	2000      	movs	r0, #0
 80133ec:	4928      	ldr	r1, [pc, #160]	@ (8013490 <__ieee754_exp+0x2e8>)
 80133ee:	f7ec ff6b 	bl	80002c8 <__aeabi_dsub>
 80133f2:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 80133f6:	4592      	cmp	sl, r2
 80133f8:	db02      	blt.n	8013400 <__ieee754_exp+0x258>
 80133fa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80133fe:	e6eb      	b.n	80131d8 <__ieee754_exp+0x30>
 8013400:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8013404:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8013408:	2200      	movs	r2, #0
 801340a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 801340e:	f7ed f913 	bl	8000638 <__aeabi_dmul>
 8013412:	e6e1      	b.n	80131d8 <__ieee754_exp+0x30>
 8013414:	2400      	movs	r4, #0
 8013416:	2500      	movs	r5, #0
 8013418:	e6e4      	b.n	80131e4 <__ieee754_exp+0x3c>
 801341a:	bf00      	nop
 801341c:	f3af 8000 	nop.w
 8013420:	fefa39ef 	.word	0xfefa39ef
 8013424:	40862e42 	.word	0x40862e42
 8013428:	d52d3051 	.word	0xd52d3051
 801342c:	c0874910 	.word	0xc0874910
 8013430:	72bea4d0 	.word	0x72bea4d0
 8013434:	3e663769 	.word	0x3e663769
 8013438:	c5d26bf1 	.word	0xc5d26bf1
 801343c:	3ebbbd41 	.word	0x3ebbbd41
 8013440:	af25de2c 	.word	0xaf25de2c
 8013444:	3f11566a 	.word	0x3f11566a
 8013448:	16bebd93 	.word	0x16bebd93
 801344c:	3f66c16c 	.word	0x3f66c16c
 8013450:	5555553e 	.word	0x5555553e
 8013454:	3fc55555 	.word	0x3fc55555
 8013458:	652b82fe 	.word	0x652b82fe
 801345c:	3ff71547 	.word	0x3ff71547
 8013460:	fee00000 	.word	0xfee00000
 8013464:	3fe62e42 	.word	0x3fe62e42
 8013468:	35793c76 	.word	0x35793c76
 801346c:	3dea39ef 	.word	0x3dea39ef
 8013470:	8800759c 	.word	0x8800759c
 8013474:	7e37e43c 	.word	0x7e37e43c
 8013478:	40862e41 	.word	0x40862e41
 801347c:	7fefffff 	.word	0x7fefffff
 8013480:	3fd62e42 	.word	0x3fd62e42
 8013484:	3ff0a2b1 	.word	0x3ff0a2b1
 8013488:	080145f8 	.word	0x080145f8
 801348c:	080145e8 	.word	0x080145e8
 8013490:	3ff00000 	.word	0x3ff00000
 8013494:	08014608 	.word	0x08014608
 8013498:	3defffff 	.word	0x3defffff
 801349c:	00000000 	.word	0x00000000

080134a0 <__ieee754_pow>:
 80134a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a4:	b091      	sub	sp, #68	@ 0x44
 80134a6:	ed8d 1b00 	vstr	d1, [sp]
 80134aa:	e9dd 1900 	ldrd	r1, r9, [sp]
 80134ae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80134b2:	ea5a 0001 	orrs.w	r0, sl, r1
 80134b6:	ec57 6b10 	vmov	r6, r7, d0
 80134ba:	d113      	bne.n	80134e4 <__ieee754_pow+0x44>
 80134bc:	19b3      	adds	r3, r6, r6
 80134be:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80134c2:	4152      	adcs	r2, r2
 80134c4:	4298      	cmp	r0, r3
 80134c6:	4b98      	ldr	r3, [pc, #608]	@ (8013728 <__ieee754_pow+0x288>)
 80134c8:	4193      	sbcs	r3, r2
 80134ca:	f080 84ea 	bcs.w	8013ea2 <__ieee754_pow+0xa02>
 80134ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134d2:	4630      	mov	r0, r6
 80134d4:	4639      	mov	r1, r7
 80134d6:	f7ec fef9 	bl	80002cc <__adddf3>
 80134da:	ec41 0b10 	vmov	d0, r0, r1
 80134de:	b011      	add	sp, #68	@ 0x44
 80134e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e4:	4a91      	ldr	r2, [pc, #580]	@ (801372c <__ieee754_pow+0x28c>)
 80134e6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80134ea:	4590      	cmp	r8, r2
 80134ec:	463d      	mov	r5, r7
 80134ee:	4633      	mov	r3, r6
 80134f0:	d806      	bhi.n	8013500 <__ieee754_pow+0x60>
 80134f2:	d101      	bne.n	80134f8 <__ieee754_pow+0x58>
 80134f4:	2e00      	cmp	r6, #0
 80134f6:	d1ea      	bne.n	80134ce <__ieee754_pow+0x2e>
 80134f8:	4592      	cmp	sl, r2
 80134fa:	d801      	bhi.n	8013500 <__ieee754_pow+0x60>
 80134fc:	d10e      	bne.n	801351c <__ieee754_pow+0x7c>
 80134fe:	b169      	cbz	r1, 801351c <__ieee754_pow+0x7c>
 8013500:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8013504:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013508:	431d      	orrs	r5, r3
 801350a:	d1e0      	bne.n	80134ce <__ieee754_pow+0x2e>
 801350c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013510:	18db      	adds	r3, r3, r3
 8013512:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8013516:	4152      	adcs	r2, r2
 8013518:	429d      	cmp	r5, r3
 801351a:	e7d4      	b.n	80134c6 <__ieee754_pow+0x26>
 801351c:	2d00      	cmp	r5, #0
 801351e:	46c3      	mov	fp, r8
 8013520:	da3a      	bge.n	8013598 <__ieee754_pow+0xf8>
 8013522:	4a83      	ldr	r2, [pc, #524]	@ (8013730 <__ieee754_pow+0x290>)
 8013524:	4592      	cmp	sl, r2
 8013526:	d84d      	bhi.n	80135c4 <__ieee754_pow+0x124>
 8013528:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801352c:	4592      	cmp	sl, r2
 801352e:	f240 84c7 	bls.w	8013ec0 <__ieee754_pow+0xa20>
 8013532:	ea4f 522a 	mov.w	r2, sl, asr #20
 8013536:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801353a:	2a14      	cmp	r2, #20
 801353c:	dd0f      	ble.n	801355e <__ieee754_pow+0xbe>
 801353e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013542:	fa21 f402 	lsr.w	r4, r1, r2
 8013546:	fa04 f202 	lsl.w	r2, r4, r2
 801354a:	428a      	cmp	r2, r1
 801354c:	f040 84b8 	bne.w	8013ec0 <__ieee754_pow+0xa20>
 8013550:	f004 0401 	and.w	r4, r4, #1
 8013554:	f1c4 0402 	rsb	r4, r4, #2
 8013558:	2900      	cmp	r1, #0
 801355a:	d158      	bne.n	801360e <__ieee754_pow+0x16e>
 801355c:	e00e      	b.n	801357c <__ieee754_pow+0xdc>
 801355e:	2900      	cmp	r1, #0
 8013560:	d154      	bne.n	801360c <__ieee754_pow+0x16c>
 8013562:	f1c2 0214 	rsb	r2, r2, #20
 8013566:	fa4a f402 	asr.w	r4, sl, r2
 801356a:	fa04 f202 	lsl.w	r2, r4, r2
 801356e:	4552      	cmp	r2, sl
 8013570:	f040 84a3 	bne.w	8013eba <__ieee754_pow+0xa1a>
 8013574:	f004 0401 	and.w	r4, r4, #1
 8013578:	f1c4 0402 	rsb	r4, r4, #2
 801357c:	4a6d      	ldr	r2, [pc, #436]	@ (8013734 <__ieee754_pow+0x294>)
 801357e:	4592      	cmp	sl, r2
 8013580:	d12e      	bne.n	80135e0 <__ieee754_pow+0x140>
 8013582:	f1b9 0f00 	cmp.w	r9, #0
 8013586:	f280 8494 	bge.w	8013eb2 <__ieee754_pow+0xa12>
 801358a:	496a      	ldr	r1, [pc, #424]	@ (8013734 <__ieee754_pow+0x294>)
 801358c:	4632      	mov	r2, r6
 801358e:	463b      	mov	r3, r7
 8013590:	2000      	movs	r0, #0
 8013592:	f7ed f97b 	bl	800088c <__aeabi_ddiv>
 8013596:	e7a0      	b.n	80134da <__ieee754_pow+0x3a>
 8013598:	2400      	movs	r4, #0
 801359a:	bbc1      	cbnz	r1, 801360e <__ieee754_pow+0x16e>
 801359c:	4a63      	ldr	r2, [pc, #396]	@ (801372c <__ieee754_pow+0x28c>)
 801359e:	4592      	cmp	sl, r2
 80135a0:	d1ec      	bne.n	801357c <__ieee754_pow+0xdc>
 80135a2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80135a6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80135aa:	431a      	orrs	r2, r3
 80135ac:	f000 8479 	beq.w	8013ea2 <__ieee754_pow+0xa02>
 80135b0:	4b61      	ldr	r3, [pc, #388]	@ (8013738 <__ieee754_pow+0x298>)
 80135b2:	4598      	cmp	r8, r3
 80135b4:	d908      	bls.n	80135c8 <__ieee754_pow+0x128>
 80135b6:	f1b9 0f00 	cmp.w	r9, #0
 80135ba:	f2c0 8476 	blt.w	8013eaa <__ieee754_pow+0xa0a>
 80135be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135c2:	e78a      	b.n	80134da <__ieee754_pow+0x3a>
 80135c4:	2402      	movs	r4, #2
 80135c6:	e7e8      	b.n	801359a <__ieee754_pow+0xfa>
 80135c8:	f1b9 0f00 	cmp.w	r9, #0
 80135cc:	f04f 0000 	mov.w	r0, #0
 80135d0:	f04f 0100 	mov.w	r1, #0
 80135d4:	da81      	bge.n	80134da <__ieee754_pow+0x3a>
 80135d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80135da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80135de:	e77c      	b.n	80134da <__ieee754_pow+0x3a>
 80135e0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80135e4:	d106      	bne.n	80135f4 <__ieee754_pow+0x154>
 80135e6:	4632      	mov	r2, r6
 80135e8:	463b      	mov	r3, r7
 80135ea:	4630      	mov	r0, r6
 80135ec:	4639      	mov	r1, r7
 80135ee:	f7ed f823 	bl	8000638 <__aeabi_dmul>
 80135f2:	e772      	b.n	80134da <__ieee754_pow+0x3a>
 80135f4:	4a51      	ldr	r2, [pc, #324]	@ (801373c <__ieee754_pow+0x29c>)
 80135f6:	4591      	cmp	r9, r2
 80135f8:	d109      	bne.n	801360e <__ieee754_pow+0x16e>
 80135fa:	2d00      	cmp	r5, #0
 80135fc:	db07      	blt.n	801360e <__ieee754_pow+0x16e>
 80135fe:	ec47 6b10 	vmov	d0, r6, r7
 8013602:	b011      	add	sp, #68	@ 0x44
 8013604:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013608:	f7ff bcf2 	b.w	8012ff0 <__ieee754_sqrt>
 801360c:	2400      	movs	r4, #0
 801360e:	ec47 6b10 	vmov	d0, r6, r7
 8013612:	9302      	str	r3, [sp, #8]
 8013614:	f000 fc88 	bl	8013f28 <fabs>
 8013618:	9b02      	ldr	r3, [sp, #8]
 801361a:	ec51 0b10 	vmov	r0, r1, d0
 801361e:	bb53      	cbnz	r3, 8013676 <__ieee754_pow+0x1d6>
 8013620:	4b44      	ldr	r3, [pc, #272]	@ (8013734 <__ieee754_pow+0x294>)
 8013622:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8013626:	429a      	cmp	r2, r3
 8013628:	d002      	beq.n	8013630 <__ieee754_pow+0x190>
 801362a:	f1b8 0f00 	cmp.w	r8, #0
 801362e:	d122      	bne.n	8013676 <__ieee754_pow+0x1d6>
 8013630:	f1b9 0f00 	cmp.w	r9, #0
 8013634:	da05      	bge.n	8013642 <__ieee754_pow+0x1a2>
 8013636:	4602      	mov	r2, r0
 8013638:	460b      	mov	r3, r1
 801363a:	2000      	movs	r0, #0
 801363c:	493d      	ldr	r1, [pc, #244]	@ (8013734 <__ieee754_pow+0x294>)
 801363e:	f7ed f925 	bl	800088c <__aeabi_ddiv>
 8013642:	2d00      	cmp	r5, #0
 8013644:	f6bf af49 	bge.w	80134da <__ieee754_pow+0x3a>
 8013648:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801364c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013650:	ea58 0804 	orrs.w	r8, r8, r4
 8013654:	d108      	bne.n	8013668 <__ieee754_pow+0x1c8>
 8013656:	4602      	mov	r2, r0
 8013658:	460b      	mov	r3, r1
 801365a:	4610      	mov	r0, r2
 801365c:	4619      	mov	r1, r3
 801365e:	f7ec fe33 	bl	80002c8 <__aeabi_dsub>
 8013662:	4602      	mov	r2, r0
 8013664:	460b      	mov	r3, r1
 8013666:	e794      	b.n	8013592 <__ieee754_pow+0xf2>
 8013668:	2c01      	cmp	r4, #1
 801366a:	f47f af36 	bne.w	80134da <__ieee754_pow+0x3a>
 801366e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013672:	4619      	mov	r1, r3
 8013674:	e731      	b.n	80134da <__ieee754_pow+0x3a>
 8013676:	0feb      	lsrs	r3, r5, #31
 8013678:	3b01      	subs	r3, #1
 801367a:	ea53 0204 	orrs.w	r2, r3, r4
 801367e:	d102      	bne.n	8013686 <__ieee754_pow+0x1e6>
 8013680:	4632      	mov	r2, r6
 8013682:	463b      	mov	r3, r7
 8013684:	e7e9      	b.n	801365a <__ieee754_pow+0x1ba>
 8013686:	3c01      	subs	r4, #1
 8013688:	431c      	orrs	r4, r3
 801368a:	d016      	beq.n	80136ba <__ieee754_pow+0x21a>
 801368c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013718 <__ieee754_pow+0x278>
 8013690:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8013694:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013698:	f240 8112 	bls.w	80138c0 <__ieee754_pow+0x420>
 801369c:	4b28      	ldr	r3, [pc, #160]	@ (8013740 <__ieee754_pow+0x2a0>)
 801369e:	459a      	cmp	sl, r3
 80136a0:	4b25      	ldr	r3, [pc, #148]	@ (8013738 <__ieee754_pow+0x298>)
 80136a2:	d916      	bls.n	80136d2 <__ieee754_pow+0x232>
 80136a4:	4598      	cmp	r8, r3
 80136a6:	d80b      	bhi.n	80136c0 <__ieee754_pow+0x220>
 80136a8:	f1b9 0f00 	cmp.w	r9, #0
 80136ac:	da0b      	bge.n	80136c6 <__ieee754_pow+0x226>
 80136ae:	2000      	movs	r0, #0
 80136b0:	b011      	add	sp, #68	@ 0x44
 80136b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b6:	f000 bcf3 	b.w	80140a0 <__math_oflow>
 80136ba:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8013720 <__ieee754_pow+0x280>
 80136be:	e7e7      	b.n	8013690 <__ieee754_pow+0x1f0>
 80136c0:	f1b9 0f00 	cmp.w	r9, #0
 80136c4:	dcf3      	bgt.n	80136ae <__ieee754_pow+0x20e>
 80136c6:	2000      	movs	r0, #0
 80136c8:	b011      	add	sp, #68	@ 0x44
 80136ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ce:	f000 bcdf 	b.w	8014090 <__math_uflow>
 80136d2:	4598      	cmp	r8, r3
 80136d4:	d20c      	bcs.n	80136f0 <__ieee754_pow+0x250>
 80136d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136da:	2200      	movs	r2, #0
 80136dc:	2300      	movs	r3, #0
 80136de:	f7ed fa1d 	bl	8000b1c <__aeabi_dcmplt>
 80136e2:	3800      	subs	r0, #0
 80136e4:	bf18      	it	ne
 80136e6:	2001      	movne	r0, #1
 80136e8:	f1b9 0f00 	cmp.w	r9, #0
 80136ec:	daec      	bge.n	80136c8 <__ieee754_pow+0x228>
 80136ee:	e7df      	b.n	80136b0 <__ieee754_pow+0x210>
 80136f0:	4b10      	ldr	r3, [pc, #64]	@ (8013734 <__ieee754_pow+0x294>)
 80136f2:	4598      	cmp	r8, r3
 80136f4:	f04f 0200 	mov.w	r2, #0
 80136f8:	d924      	bls.n	8013744 <__ieee754_pow+0x2a4>
 80136fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136fe:	2300      	movs	r3, #0
 8013700:	f7ed fa0c 	bl	8000b1c <__aeabi_dcmplt>
 8013704:	3800      	subs	r0, #0
 8013706:	bf18      	it	ne
 8013708:	2001      	movne	r0, #1
 801370a:	f1b9 0f00 	cmp.w	r9, #0
 801370e:	dccf      	bgt.n	80136b0 <__ieee754_pow+0x210>
 8013710:	e7da      	b.n	80136c8 <__ieee754_pow+0x228>
 8013712:	bf00      	nop
 8013714:	f3af 8000 	nop.w
 8013718:	00000000 	.word	0x00000000
 801371c:	3ff00000 	.word	0x3ff00000
 8013720:	00000000 	.word	0x00000000
 8013724:	bff00000 	.word	0xbff00000
 8013728:	fff00000 	.word	0xfff00000
 801372c:	7ff00000 	.word	0x7ff00000
 8013730:	433fffff 	.word	0x433fffff
 8013734:	3ff00000 	.word	0x3ff00000
 8013738:	3fefffff 	.word	0x3fefffff
 801373c:	3fe00000 	.word	0x3fe00000
 8013740:	43f00000 	.word	0x43f00000
 8013744:	4b5a      	ldr	r3, [pc, #360]	@ (80138b0 <__ieee754_pow+0x410>)
 8013746:	f7ec fdbf 	bl	80002c8 <__aeabi_dsub>
 801374a:	a351      	add	r3, pc, #324	@ (adr r3, 8013890 <__ieee754_pow+0x3f0>)
 801374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013750:	4604      	mov	r4, r0
 8013752:	460d      	mov	r5, r1
 8013754:	f7ec ff70 	bl	8000638 <__aeabi_dmul>
 8013758:	a34f      	add	r3, pc, #316	@ (adr r3, 8013898 <__ieee754_pow+0x3f8>)
 801375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801375e:	4606      	mov	r6, r0
 8013760:	460f      	mov	r7, r1
 8013762:	4620      	mov	r0, r4
 8013764:	4629      	mov	r1, r5
 8013766:	f7ec ff67 	bl	8000638 <__aeabi_dmul>
 801376a:	4b52      	ldr	r3, [pc, #328]	@ (80138b4 <__ieee754_pow+0x414>)
 801376c:	4682      	mov	sl, r0
 801376e:	468b      	mov	fp, r1
 8013770:	2200      	movs	r2, #0
 8013772:	4620      	mov	r0, r4
 8013774:	4629      	mov	r1, r5
 8013776:	f7ec ff5f 	bl	8000638 <__aeabi_dmul>
 801377a:	4602      	mov	r2, r0
 801377c:	460b      	mov	r3, r1
 801377e:	a148      	add	r1, pc, #288	@ (adr r1, 80138a0 <__ieee754_pow+0x400>)
 8013780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013784:	f7ec fda0 	bl	80002c8 <__aeabi_dsub>
 8013788:	4622      	mov	r2, r4
 801378a:	462b      	mov	r3, r5
 801378c:	f7ec ff54 	bl	8000638 <__aeabi_dmul>
 8013790:	4602      	mov	r2, r0
 8013792:	460b      	mov	r3, r1
 8013794:	2000      	movs	r0, #0
 8013796:	4948      	ldr	r1, [pc, #288]	@ (80138b8 <__ieee754_pow+0x418>)
 8013798:	f7ec fd96 	bl	80002c8 <__aeabi_dsub>
 801379c:	4622      	mov	r2, r4
 801379e:	4680      	mov	r8, r0
 80137a0:	4689      	mov	r9, r1
 80137a2:	462b      	mov	r3, r5
 80137a4:	4620      	mov	r0, r4
 80137a6:	4629      	mov	r1, r5
 80137a8:	f7ec ff46 	bl	8000638 <__aeabi_dmul>
 80137ac:	4602      	mov	r2, r0
 80137ae:	460b      	mov	r3, r1
 80137b0:	4640      	mov	r0, r8
 80137b2:	4649      	mov	r1, r9
 80137b4:	f7ec ff40 	bl	8000638 <__aeabi_dmul>
 80137b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80138a8 <__ieee754_pow+0x408>)
 80137ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137be:	f7ec ff3b 	bl	8000638 <__aeabi_dmul>
 80137c2:	4602      	mov	r2, r0
 80137c4:	460b      	mov	r3, r1
 80137c6:	4650      	mov	r0, sl
 80137c8:	4659      	mov	r1, fp
 80137ca:	f7ec fd7d 	bl	80002c8 <__aeabi_dsub>
 80137ce:	4602      	mov	r2, r0
 80137d0:	460b      	mov	r3, r1
 80137d2:	4680      	mov	r8, r0
 80137d4:	4689      	mov	r9, r1
 80137d6:	4630      	mov	r0, r6
 80137d8:	4639      	mov	r1, r7
 80137da:	f7ec fd77 	bl	80002cc <__adddf3>
 80137de:	2400      	movs	r4, #0
 80137e0:	4632      	mov	r2, r6
 80137e2:	463b      	mov	r3, r7
 80137e4:	4620      	mov	r0, r4
 80137e6:	460d      	mov	r5, r1
 80137e8:	f7ec fd6e 	bl	80002c8 <__aeabi_dsub>
 80137ec:	4602      	mov	r2, r0
 80137ee:	460b      	mov	r3, r1
 80137f0:	4640      	mov	r0, r8
 80137f2:	4649      	mov	r1, r9
 80137f4:	f7ec fd68 	bl	80002c8 <__aeabi_dsub>
 80137f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80137fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013800:	2300      	movs	r3, #0
 8013802:	9304      	str	r3, [sp, #16]
 8013804:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013808:	4606      	mov	r6, r0
 801380a:	460f      	mov	r7, r1
 801380c:	4652      	mov	r2, sl
 801380e:	465b      	mov	r3, fp
 8013810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013814:	f7ec fd58 	bl	80002c8 <__aeabi_dsub>
 8013818:	4622      	mov	r2, r4
 801381a:	462b      	mov	r3, r5
 801381c:	f7ec ff0c 	bl	8000638 <__aeabi_dmul>
 8013820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013824:	4680      	mov	r8, r0
 8013826:	4689      	mov	r9, r1
 8013828:	4630      	mov	r0, r6
 801382a:	4639      	mov	r1, r7
 801382c:	f7ec ff04 	bl	8000638 <__aeabi_dmul>
 8013830:	4602      	mov	r2, r0
 8013832:	460b      	mov	r3, r1
 8013834:	4640      	mov	r0, r8
 8013836:	4649      	mov	r1, r9
 8013838:	f7ec fd48 	bl	80002cc <__adddf3>
 801383c:	4652      	mov	r2, sl
 801383e:	465b      	mov	r3, fp
 8013840:	4606      	mov	r6, r0
 8013842:	460f      	mov	r7, r1
 8013844:	4620      	mov	r0, r4
 8013846:	4629      	mov	r1, r5
 8013848:	f7ec fef6 	bl	8000638 <__aeabi_dmul>
 801384c:	460b      	mov	r3, r1
 801384e:	4602      	mov	r2, r0
 8013850:	4680      	mov	r8, r0
 8013852:	4689      	mov	r9, r1
 8013854:	4630      	mov	r0, r6
 8013856:	4639      	mov	r1, r7
 8013858:	f7ec fd38 	bl	80002cc <__adddf3>
 801385c:	4b17      	ldr	r3, [pc, #92]	@ (80138bc <__ieee754_pow+0x41c>)
 801385e:	4299      	cmp	r1, r3
 8013860:	4604      	mov	r4, r0
 8013862:	460d      	mov	r5, r1
 8013864:	468a      	mov	sl, r1
 8013866:	468b      	mov	fp, r1
 8013868:	f340 82ef 	ble.w	8013e4a <__ieee754_pow+0x9aa>
 801386c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013870:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013874:	4303      	orrs	r3, r0
 8013876:	f000 81e8 	beq.w	8013c4a <__ieee754_pow+0x7aa>
 801387a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801387e:	2200      	movs	r2, #0
 8013880:	2300      	movs	r3, #0
 8013882:	f7ed f94b 	bl	8000b1c <__aeabi_dcmplt>
 8013886:	3800      	subs	r0, #0
 8013888:	bf18      	it	ne
 801388a:	2001      	movne	r0, #1
 801388c:	e710      	b.n	80136b0 <__ieee754_pow+0x210>
 801388e:	bf00      	nop
 8013890:	60000000 	.word	0x60000000
 8013894:	3ff71547 	.word	0x3ff71547
 8013898:	f85ddf44 	.word	0xf85ddf44
 801389c:	3e54ae0b 	.word	0x3e54ae0b
 80138a0:	55555555 	.word	0x55555555
 80138a4:	3fd55555 	.word	0x3fd55555
 80138a8:	652b82fe 	.word	0x652b82fe
 80138ac:	3ff71547 	.word	0x3ff71547
 80138b0:	3ff00000 	.word	0x3ff00000
 80138b4:	3fd00000 	.word	0x3fd00000
 80138b8:	3fe00000 	.word	0x3fe00000
 80138bc:	408fffff 	.word	0x408fffff
 80138c0:	4bd5      	ldr	r3, [pc, #852]	@ (8013c18 <__ieee754_pow+0x778>)
 80138c2:	402b      	ands	r3, r5
 80138c4:	2200      	movs	r2, #0
 80138c6:	b92b      	cbnz	r3, 80138d4 <__ieee754_pow+0x434>
 80138c8:	4bd4      	ldr	r3, [pc, #848]	@ (8013c1c <__ieee754_pow+0x77c>)
 80138ca:	f7ec feb5 	bl	8000638 <__aeabi_dmul>
 80138ce:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80138d2:	468b      	mov	fp, r1
 80138d4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80138d8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80138dc:	4413      	add	r3, r2
 80138de:	930a      	str	r3, [sp, #40]	@ 0x28
 80138e0:	4bcf      	ldr	r3, [pc, #828]	@ (8013c20 <__ieee754_pow+0x780>)
 80138e2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80138e6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80138ea:	459b      	cmp	fp, r3
 80138ec:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80138f0:	dd08      	ble.n	8013904 <__ieee754_pow+0x464>
 80138f2:	4bcc      	ldr	r3, [pc, #816]	@ (8013c24 <__ieee754_pow+0x784>)
 80138f4:	459b      	cmp	fp, r3
 80138f6:	f340 81a5 	ble.w	8013c44 <__ieee754_pow+0x7a4>
 80138fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138fc:	3301      	adds	r3, #1
 80138fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8013900:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013904:	f04f 0a00 	mov.w	sl, #0
 8013908:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801390c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801390e:	4bc6      	ldr	r3, [pc, #792]	@ (8013c28 <__ieee754_pow+0x788>)
 8013910:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013914:	ed93 7b00 	vldr	d7, [r3]
 8013918:	4629      	mov	r1, r5
 801391a:	ec53 2b17 	vmov	r2, r3, d7
 801391e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013922:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013926:	f7ec fccf 	bl	80002c8 <__aeabi_dsub>
 801392a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801392e:	4606      	mov	r6, r0
 8013930:	460f      	mov	r7, r1
 8013932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013936:	f7ec fcc9 	bl	80002cc <__adddf3>
 801393a:	4602      	mov	r2, r0
 801393c:	460b      	mov	r3, r1
 801393e:	2000      	movs	r0, #0
 8013940:	49ba      	ldr	r1, [pc, #744]	@ (8013c2c <__ieee754_pow+0x78c>)
 8013942:	f7ec ffa3 	bl	800088c <__aeabi_ddiv>
 8013946:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801394a:	4602      	mov	r2, r0
 801394c:	460b      	mov	r3, r1
 801394e:	4630      	mov	r0, r6
 8013950:	4639      	mov	r1, r7
 8013952:	f7ec fe71 	bl	8000638 <__aeabi_dmul>
 8013956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801395a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801395e:	106d      	asrs	r5, r5, #1
 8013960:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013964:	f04f 0b00 	mov.w	fp, #0
 8013968:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801396c:	4661      	mov	r1, ip
 801396e:	2200      	movs	r2, #0
 8013970:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013974:	4658      	mov	r0, fp
 8013976:	46e1      	mov	r9, ip
 8013978:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801397c:	4614      	mov	r4, r2
 801397e:	461d      	mov	r5, r3
 8013980:	f7ec fe5a 	bl	8000638 <__aeabi_dmul>
 8013984:	4602      	mov	r2, r0
 8013986:	460b      	mov	r3, r1
 8013988:	4630      	mov	r0, r6
 801398a:	4639      	mov	r1, r7
 801398c:	f7ec fc9c 	bl	80002c8 <__aeabi_dsub>
 8013990:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013994:	4606      	mov	r6, r0
 8013996:	460f      	mov	r7, r1
 8013998:	4620      	mov	r0, r4
 801399a:	4629      	mov	r1, r5
 801399c:	f7ec fc94 	bl	80002c8 <__aeabi_dsub>
 80139a0:	4602      	mov	r2, r0
 80139a2:	460b      	mov	r3, r1
 80139a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80139a8:	f7ec fc8e 	bl	80002c8 <__aeabi_dsub>
 80139ac:	465a      	mov	r2, fp
 80139ae:	464b      	mov	r3, r9
 80139b0:	f7ec fe42 	bl	8000638 <__aeabi_dmul>
 80139b4:	4602      	mov	r2, r0
 80139b6:	460b      	mov	r3, r1
 80139b8:	4630      	mov	r0, r6
 80139ba:	4639      	mov	r1, r7
 80139bc:	f7ec fc84 	bl	80002c8 <__aeabi_dsub>
 80139c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80139c4:	f7ec fe38 	bl	8000638 <__aeabi_dmul>
 80139c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80139d0:	4610      	mov	r0, r2
 80139d2:	4619      	mov	r1, r3
 80139d4:	f7ec fe30 	bl	8000638 <__aeabi_dmul>
 80139d8:	a37d      	add	r3, pc, #500	@ (adr r3, 8013bd0 <__ieee754_pow+0x730>)
 80139da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139de:	4604      	mov	r4, r0
 80139e0:	460d      	mov	r5, r1
 80139e2:	f7ec fe29 	bl	8000638 <__aeabi_dmul>
 80139e6:	a37c      	add	r3, pc, #496	@ (adr r3, 8013bd8 <__ieee754_pow+0x738>)
 80139e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ec:	f7ec fc6e 	bl	80002cc <__adddf3>
 80139f0:	4622      	mov	r2, r4
 80139f2:	462b      	mov	r3, r5
 80139f4:	f7ec fe20 	bl	8000638 <__aeabi_dmul>
 80139f8:	a379      	add	r3, pc, #484	@ (adr r3, 8013be0 <__ieee754_pow+0x740>)
 80139fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139fe:	f7ec fc65 	bl	80002cc <__adddf3>
 8013a02:	4622      	mov	r2, r4
 8013a04:	462b      	mov	r3, r5
 8013a06:	f7ec fe17 	bl	8000638 <__aeabi_dmul>
 8013a0a:	a377      	add	r3, pc, #476	@ (adr r3, 8013be8 <__ieee754_pow+0x748>)
 8013a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a10:	f7ec fc5c 	bl	80002cc <__adddf3>
 8013a14:	4622      	mov	r2, r4
 8013a16:	462b      	mov	r3, r5
 8013a18:	f7ec fe0e 	bl	8000638 <__aeabi_dmul>
 8013a1c:	a374      	add	r3, pc, #464	@ (adr r3, 8013bf0 <__ieee754_pow+0x750>)
 8013a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a22:	f7ec fc53 	bl	80002cc <__adddf3>
 8013a26:	4622      	mov	r2, r4
 8013a28:	462b      	mov	r3, r5
 8013a2a:	f7ec fe05 	bl	8000638 <__aeabi_dmul>
 8013a2e:	a372      	add	r3, pc, #456	@ (adr r3, 8013bf8 <__ieee754_pow+0x758>)
 8013a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a34:	f7ec fc4a 	bl	80002cc <__adddf3>
 8013a38:	4622      	mov	r2, r4
 8013a3a:	4606      	mov	r6, r0
 8013a3c:	460f      	mov	r7, r1
 8013a3e:	462b      	mov	r3, r5
 8013a40:	4620      	mov	r0, r4
 8013a42:	4629      	mov	r1, r5
 8013a44:	f7ec fdf8 	bl	8000638 <__aeabi_dmul>
 8013a48:	4602      	mov	r2, r0
 8013a4a:	460b      	mov	r3, r1
 8013a4c:	4630      	mov	r0, r6
 8013a4e:	4639      	mov	r1, r7
 8013a50:	f7ec fdf2 	bl	8000638 <__aeabi_dmul>
 8013a54:	465a      	mov	r2, fp
 8013a56:	4604      	mov	r4, r0
 8013a58:	460d      	mov	r5, r1
 8013a5a:	464b      	mov	r3, r9
 8013a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a60:	f7ec fc34 	bl	80002cc <__adddf3>
 8013a64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a68:	f7ec fde6 	bl	8000638 <__aeabi_dmul>
 8013a6c:	4622      	mov	r2, r4
 8013a6e:	462b      	mov	r3, r5
 8013a70:	f7ec fc2c 	bl	80002cc <__adddf3>
 8013a74:	465a      	mov	r2, fp
 8013a76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013a7a:	464b      	mov	r3, r9
 8013a7c:	4658      	mov	r0, fp
 8013a7e:	4649      	mov	r1, r9
 8013a80:	f7ec fdda 	bl	8000638 <__aeabi_dmul>
 8013a84:	4b6a      	ldr	r3, [pc, #424]	@ (8013c30 <__ieee754_pow+0x790>)
 8013a86:	2200      	movs	r2, #0
 8013a88:	4606      	mov	r6, r0
 8013a8a:	460f      	mov	r7, r1
 8013a8c:	f7ec fc1e 	bl	80002cc <__adddf3>
 8013a90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013a94:	f7ec fc1a 	bl	80002cc <__adddf3>
 8013a98:	46d8      	mov	r8, fp
 8013a9a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013a9e:	460d      	mov	r5, r1
 8013aa0:	465a      	mov	r2, fp
 8013aa2:	460b      	mov	r3, r1
 8013aa4:	4640      	mov	r0, r8
 8013aa6:	4649      	mov	r1, r9
 8013aa8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013aac:	f7ec fdc4 	bl	8000638 <__aeabi_dmul>
 8013ab0:	465c      	mov	r4, fp
 8013ab2:	4680      	mov	r8, r0
 8013ab4:	4689      	mov	r9, r1
 8013ab6:	4b5e      	ldr	r3, [pc, #376]	@ (8013c30 <__ieee754_pow+0x790>)
 8013ab8:	2200      	movs	r2, #0
 8013aba:	4620      	mov	r0, r4
 8013abc:	4629      	mov	r1, r5
 8013abe:	f7ec fc03 	bl	80002c8 <__aeabi_dsub>
 8013ac2:	4632      	mov	r2, r6
 8013ac4:	463b      	mov	r3, r7
 8013ac6:	f7ec fbff 	bl	80002c8 <__aeabi_dsub>
 8013aca:	4602      	mov	r2, r0
 8013acc:	460b      	mov	r3, r1
 8013ace:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013ad2:	f7ec fbf9 	bl	80002c8 <__aeabi_dsub>
 8013ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ada:	f7ec fdad 	bl	8000638 <__aeabi_dmul>
 8013ade:	4622      	mov	r2, r4
 8013ae0:	4606      	mov	r6, r0
 8013ae2:	460f      	mov	r7, r1
 8013ae4:	462b      	mov	r3, r5
 8013ae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013aea:	f7ec fda5 	bl	8000638 <__aeabi_dmul>
 8013aee:	4602      	mov	r2, r0
 8013af0:	460b      	mov	r3, r1
 8013af2:	4630      	mov	r0, r6
 8013af4:	4639      	mov	r1, r7
 8013af6:	f7ec fbe9 	bl	80002cc <__adddf3>
 8013afa:	4606      	mov	r6, r0
 8013afc:	460f      	mov	r7, r1
 8013afe:	4602      	mov	r2, r0
 8013b00:	460b      	mov	r3, r1
 8013b02:	4640      	mov	r0, r8
 8013b04:	4649      	mov	r1, r9
 8013b06:	f7ec fbe1 	bl	80002cc <__adddf3>
 8013b0a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013b0e:	a33c      	add	r3, pc, #240	@ (adr r3, 8013c00 <__ieee754_pow+0x760>)
 8013b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b14:	4658      	mov	r0, fp
 8013b16:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013b1a:	460d      	mov	r5, r1
 8013b1c:	f7ec fd8c 	bl	8000638 <__aeabi_dmul>
 8013b20:	465c      	mov	r4, fp
 8013b22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b26:	4642      	mov	r2, r8
 8013b28:	464b      	mov	r3, r9
 8013b2a:	4620      	mov	r0, r4
 8013b2c:	4629      	mov	r1, r5
 8013b2e:	f7ec fbcb 	bl	80002c8 <__aeabi_dsub>
 8013b32:	4602      	mov	r2, r0
 8013b34:	460b      	mov	r3, r1
 8013b36:	4630      	mov	r0, r6
 8013b38:	4639      	mov	r1, r7
 8013b3a:	f7ec fbc5 	bl	80002c8 <__aeabi_dsub>
 8013b3e:	a332      	add	r3, pc, #200	@ (adr r3, 8013c08 <__ieee754_pow+0x768>)
 8013b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b44:	f7ec fd78 	bl	8000638 <__aeabi_dmul>
 8013b48:	a331      	add	r3, pc, #196	@ (adr r3, 8013c10 <__ieee754_pow+0x770>)
 8013b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b4e:	4606      	mov	r6, r0
 8013b50:	460f      	mov	r7, r1
 8013b52:	4620      	mov	r0, r4
 8013b54:	4629      	mov	r1, r5
 8013b56:	f7ec fd6f 	bl	8000638 <__aeabi_dmul>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	4630      	mov	r0, r6
 8013b60:	4639      	mov	r1, r7
 8013b62:	f7ec fbb3 	bl	80002cc <__adddf3>
 8013b66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013b68:	4b32      	ldr	r3, [pc, #200]	@ (8013c34 <__ieee754_pow+0x794>)
 8013b6a:	4413      	add	r3, r2
 8013b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b70:	f7ec fbac 	bl	80002cc <__adddf3>
 8013b74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013b7a:	f7ec fcf3 	bl	8000564 <__aeabi_i2d>
 8013b7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013b80:	4b2d      	ldr	r3, [pc, #180]	@ (8013c38 <__ieee754_pow+0x798>)
 8013b82:	4413      	add	r3, r2
 8013b84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b88:	4606      	mov	r6, r0
 8013b8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b8e:	460f      	mov	r7, r1
 8013b90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b94:	f7ec fb9a 	bl	80002cc <__adddf3>
 8013b98:	4642      	mov	r2, r8
 8013b9a:	464b      	mov	r3, r9
 8013b9c:	f7ec fb96 	bl	80002cc <__adddf3>
 8013ba0:	4632      	mov	r2, r6
 8013ba2:	463b      	mov	r3, r7
 8013ba4:	f7ec fb92 	bl	80002cc <__adddf3>
 8013ba8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013bac:	4632      	mov	r2, r6
 8013bae:	463b      	mov	r3, r7
 8013bb0:	4658      	mov	r0, fp
 8013bb2:	460d      	mov	r5, r1
 8013bb4:	f7ec fb88 	bl	80002c8 <__aeabi_dsub>
 8013bb8:	4642      	mov	r2, r8
 8013bba:	464b      	mov	r3, r9
 8013bbc:	f7ec fb84 	bl	80002c8 <__aeabi_dsub>
 8013bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013bc4:	f7ec fb80 	bl	80002c8 <__aeabi_dsub>
 8013bc8:	465c      	mov	r4, fp
 8013bca:	4602      	mov	r2, r0
 8013bcc:	e036      	b.n	8013c3c <__ieee754_pow+0x79c>
 8013bce:	bf00      	nop
 8013bd0:	4a454eef 	.word	0x4a454eef
 8013bd4:	3fca7e28 	.word	0x3fca7e28
 8013bd8:	93c9db65 	.word	0x93c9db65
 8013bdc:	3fcd864a 	.word	0x3fcd864a
 8013be0:	a91d4101 	.word	0xa91d4101
 8013be4:	3fd17460 	.word	0x3fd17460
 8013be8:	518f264d 	.word	0x518f264d
 8013bec:	3fd55555 	.word	0x3fd55555
 8013bf0:	db6fabff 	.word	0xdb6fabff
 8013bf4:	3fdb6db6 	.word	0x3fdb6db6
 8013bf8:	33333303 	.word	0x33333303
 8013bfc:	3fe33333 	.word	0x3fe33333
 8013c00:	e0000000 	.word	0xe0000000
 8013c04:	3feec709 	.word	0x3feec709
 8013c08:	dc3a03fd 	.word	0xdc3a03fd
 8013c0c:	3feec709 	.word	0x3feec709
 8013c10:	145b01f5 	.word	0x145b01f5
 8013c14:	be3e2fe0 	.word	0xbe3e2fe0
 8013c18:	7ff00000 	.word	0x7ff00000
 8013c1c:	43400000 	.word	0x43400000
 8013c20:	0003988e 	.word	0x0003988e
 8013c24:	000bb679 	.word	0x000bb679
 8013c28:	08014638 	.word	0x08014638
 8013c2c:	3ff00000 	.word	0x3ff00000
 8013c30:	40080000 	.word	0x40080000
 8013c34:	08014618 	.word	0x08014618
 8013c38:	08014628 	.word	0x08014628
 8013c3c:	460b      	mov	r3, r1
 8013c3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c42:	e5d7      	b.n	80137f4 <__ieee754_pow+0x354>
 8013c44:	f04f 0a01 	mov.w	sl, #1
 8013c48:	e65e      	b.n	8013908 <__ieee754_pow+0x468>
 8013c4a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8013f1c <__ieee754_pow+0xa7c>)
 8013c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c50:	4630      	mov	r0, r6
 8013c52:	4639      	mov	r1, r7
 8013c54:	f7ec fb3a 	bl	80002cc <__adddf3>
 8013c58:	4642      	mov	r2, r8
 8013c5a:	e9cd 0100 	strd	r0, r1, [sp]
 8013c5e:	464b      	mov	r3, r9
 8013c60:	4620      	mov	r0, r4
 8013c62:	4629      	mov	r1, r5
 8013c64:	f7ec fb30 	bl	80002c8 <__aeabi_dsub>
 8013c68:	4602      	mov	r2, r0
 8013c6a:	460b      	mov	r3, r1
 8013c6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c70:	f7ec ff72 	bl	8000b58 <__aeabi_dcmpgt>
 8013c74:	2800      	cmp	r0, #0
 8013c76:	f47f ae00 	bne.w	801387a <__ieee754_pow+0x3da>
 8013c7a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013c7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013c82:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013c86:	fa43 fa0a 	asr.w	sl, r3, sl
 8013c8a:	44da      	add	sl, fp
 8013c8c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013c90:	489d      	ldr	r0, [pc, #628]	@ (8013f08 <__ieee754_pow+0xa68>)
 8013c92:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013c96:	4108      	asrs	r0, r1
 8013c98:	ea00 030a 	and.w	r3, r0, sl
 8013c9c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013ca0:	f1c1 0114 	rsb	r1, r1, #20
 8013ca4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013ca8:	fa4a fa01 	asr.w	sl, sl, r1
 8013cac:	f1bb 0f00 	cmp.w	fp, #0
 8013cb0:	4640      	mov	r0, r8
 8013cb2:	4649      	mov	r1, r9
 8013cb4:	f04f 0200 	mov.w	r2, #0
 8013cb8:	bfb8      	it	lt
 8013cba:	f1ca 0a00 	rsblt	sl, sl, #0
 8013cbe:	f7ec fb03 	bl	80002c8 <__aeabi_dsub>
 8013cc2:	4680      	mov	r8, r0
 8013cc4:	4689      	mov	r9, r1
 8013cc6:	4632      	mov	r2, r6
 8013cc8:	463b      	mov	r3, r7
 8013cca:	4640      	mov	r0, r8
 8013ccc:	4649      	mov	r1, r9
 8013cce:	f7ec fafd 	bl	80002cc <__adddf3>
 8013cd2:	2400      	movs	r4, #0
 8013cd4:	a37c      	add	r3, pc, #496	@ (adr r3, 8013ec8 <__ieee754_pow+0xa28>)
 8013cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cda:	4620      	mov	r0, r4
 8013cdc:	460d      	mov	r5, r1
 8013cde:	f7ec fcab 	bl	8000638 <__aeabi_dmul>
 8013ce2:	4642      	mov	r2, r8
 8013ce4:	e9cd 0100 	strd	r0, r1, [sp]
 8013ce8:	464b      	mov	r3, r9
 8013cea:	4620      	mov	r0, r4
 8013cec:	4629      	mov	r1, r5
 8013cee:	f7ec faeb 	bl	80002c8 <__aeabi_dsub>
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	460b      	mov	r3, r1
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	4639      	mov	r1, r7
 8013cfa:	f7ec fae5 	bl	80002c8 <__aeabi_dsub>
 8013cfe:	a374      	add	r3, pc, #464	@ (adr r3, 8013ed0 <__ieee754_pow+0xa30>)
 8013d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d04:	f7ec fc98 	bl	8000638 <__aeabi_dmul>
 8013d08:	a373      	add	r3, pc, #460	@ (adr r3, 8013ed8 <__ieee754_pow+0xa38>)
 8013d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0e:	4680      	mov	r8, r0
 8013d10:	4689      	mov	r9, r1
 8013d12:	4620      	mov	r0, r4
 8013d14:	4629      	mov	r1, r5
 8013d16:	f7ec fc8f 	bl	8000638 <__aeabi_dmul>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	4640      	mov	r0, r8
 8013d20:	4649      	mov	r1, r9
 8013d22:	f7ec fad3 	bl	80002cc <__adddf3>
 8013d26:	4604      	mov	r4, r0
 8013d28:	460d      	mov	r5, r1
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d32:	f7ec facb 	bl	80002cc <__adddf3>
 8013d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d3a:	4680      	mov	r8, r0
 8013d3c:	4689      	mov	r9, r1
 8013d3e:	f7ec fac3 	bl	80002c8 <__aeabi_dsub>
 8013d42:	4602      	mov	r2, r0
 8013d44:	460b      	mov	r3, r1
 8013d46:	4620      	mov	r0, r4
 8013d48:	4629      	mov	r1, r5
 8013d4a:	f7ec fabd 	bl	80002c8 <__aeabi_dsub>
 8013d4e:	4642      	mov	r2, r8
 8013d50:	4606      	mov	r6, r0
 8013d52:	460f      	mov	r7, r1
 8013d54:	464b      	mov	r3, r9
 8013d56:	4640      	mov	r0, r8
 8013d58:	4649      	mov	r1, r9
 8013d5a:	f7ec fc6d 	bl	8000638 <__aeabi_dmul>
 8013d5e:	a360      	add	r3, pc, #384	@ (adr r3, 8013ee0 <__ieee754_pow+0xa40>)
 8013d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d64:	4604      	mov	r4, r0
 8013d66:	460d      	mov	r5, r1
 8013d68:	f7ec fc66 	bl	8000638 <__aeabi_dmul>
 8013d6c:	a35e      	add	r3, pc, #376	@ (adr r3, 8013ee8 <__ieee754_pow+0xa48>)
 8013d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d72:	f7ec faa9 	bl	80002c8 <__aeabi_dsub>
 8013d76:	4622      	mov	r2, r4
 8013d78:	462b      	mov	r3, r5
 8013d7a:	f7ec fc5d 	bl	8000638 <__aeabi_dmul>
 8013d7e:	a35c      	add	r3, pc, #368	@ (adr r3, 8013ef0 <__ieee754_pow+0xa50>)
 8013d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d84:	f7ec faa2 	bl	80002cc <__adddf3>
 8013d88:	4622      	mov	r2, r4
 8013d8a:	462b      	mov	r3, r5
 8013d8c:	f7ec fc54 	bl	8000638 <__aeabi_dmul>
 8013d90:	a359      	add	r3, pc, #356	@ (adr r3, 8013ef8 <__ieee754_pow+0xa58>)
 8013d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d96:	f7ec fa97 	bl	80002c8 <__aeabi_dsub>
 8013d9a:	4622      	mov	r2, r4
 8013d9c:	462b      	mov	r3, r5
 8013d9e:	f7ec fc4b 	bl	8000638 <__aeabi_dmul>
 8013da2:	a357      	add	r3, pc, #348	@ (adr r3, 8013f00 <__ieee754_pow+0xa60>)
 8013da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da8:	f7ec fa90 	bl	80002cc <__adddf3>
 8013dac:	4622      	mov	r2, r4
 8013dae:	462b      	mov	r3, r5
 8013db0:	f7ec fc42 	bl	8000638 <__aeabi_dmul>
 8013db4:	4602      	mov	r2, r0
 8013db6:	460b      	mov	r3, r1
 8013db8:	4640      	mov	r0, r8
 8013dba:	4649      	mov	r1, r9
 8013dbc:	f7ec fa84 	bl	80002c8 <__aeabi_dsub>
 8013dc0:	4604      	mov	r4, r0
 8013dc2:	460d      	mov	r5, r1
 8013dc4:	4602      	mov	r2, r0
 8013dc6:	460b      	mov	r3, r1
 8013dc8:	4640      	mov	r0, r8
 8013dca:	4649      	mov	r1, r9
 8013dcc:	f7ec fc34 	bl	8000638 <__aeabi_dmul>
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	e9cd 0100 	strd	r0, r1, [sp]
 8013dd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013dda:	4620      	mov	r0, r4
 8013ddc:	4629      	mov	r1, r5
 8013dde:	f7ec fa73 	bl	80002c8 <__aeabi_dsub>
 8013de2:	4602      	mov	r2, r0
 8013de4:	460b      	mov	r3, r1
 8013de6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013dea:	f7ec fd4f 	bl	800088c <__aeabi_ddiv>
 8013dee:	4632      	mov	r2, r6
 8013df0:	4604      	mov	r4, r0
 8013df2:	460d      	mov	r5, r1
 8013df4:	463b      	mov	r3, r7
 8013df6:	4640      	mov	r0, r8
 8013df8:	4649      	mov	r1, r9
 8013dfa:	f7ec fc1d 	bl	8000638 <__aeabi_dmul>
 8013dfe:	4632      	mov	r2, r6
 8013e00:	463b      	mov	r3, r7
 8013e02:	f7ec fa63 	bl	80002cc <__adddf3>
 8013e06:	4602      	mov	r2, r0
 8013e08:	460b      	mov	r3, r1
 8013e0a:	4620      	mov	r0, r4
 8013e0c:	4629      	mov	r1, r5
 8013e0e:	f7ec fa5b 	bl	80002c8 <__aeabi_dsub>
 8013e12:	4642      	mov	r2, r8
 8013e14:	464b      	mov	r3, r9
 8013e16:	f7ec fa57 	bl	80002c8 <__aeabi_dsub>
 8013e1a:	460b      	mov	r3, r1
 8013e1c:	4602      	mov	r2, r0
 8013e1e:	493b      	ldr	r1, [pc, #236]	@ (8013f0c <__ieee754_pow+0xa6c>)
 8013e20:	2000      	movs	r0, #0
 8013e22:	f7ec fa51 	bl	80002c8 <__aeabi_dsub>
 8013e26:	ec41 0b10 	vmov	d0, r0, r1
 8013e2a:	ee10 3a90 	vmov	r3, s1
 8013e2e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013e36:	da30      	bge.n	8013e9a <__ieee754_pow+0x9fa>
 8013e38:	4650      	mov	r0, sl
 8013e3a:	f000 f87d 	bl	8013f38 <scalbn>
 8013e3e:	ec51 0b10 	vmov	r0, r1, d0
 8013e42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013e46:	f7ff bbd2 	b.w	80135ee <__ieee754_pow+0x14e>
 8013e4a:	4c31      	ldr	r4, [pc, #196]	@ (8013f10 <__ieee754_pow+0xa70>)
 8013e4c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013e50:	42a3      	cmp	r3, r4
 8013e52:	d91a      	bls.n	8013e8a <__ieee754_pow+0x9ea>
 8013e54:	4b2f      	ldr	r3, [pc, #188]	@ (8013f14 <__ieee754_pow+0xa74>)
 8013e56:	440b      	add	r3, r1
 8013e58:	4303      	orrs	r3, r0
 8013e5a:	d009      	beq.n	8013e70 <__ieee754_pow+0x9d0>
 8013e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e60:	2200      	movs	r2, #0
 8013e62:	2300      	movs	r3, #0
 8013e64:	f7ec fe5a 	bl	8000b1c <__aeabi_dcmplt>
 8013e68:	3800      	subs	r0, #0
 8013e6a:	bf18      	it	ne
 8013e6c:	2001      	movne	r0, #1
 8013e6e:	e42b      	b.n	80136c8 <__ieee754_pow+0x228>
 8013e70:	4642      	mov	r2, r8
 8013e72:	464b      	mov	r3, r9
 8013e74:	f7ec fa28 	bl	80002c8 <__aeabi_dsub>
 8013e78:	4632      	mov	r2, r6
 8013e7a:	463b      	mov	r3, r7
 8013e7c:	f7ec fe62 	bl	8000b44 <__aeabi_dcmpge>
 8013e80:	2800      	cmp	r0, #0
 8013e82:	d1eb      	bne.n	8013e5c <__ieee754_pow+0x9bc>
 8013e84:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8013f24 <__ieee754_pow+0xa84>
 8013e88:	e6f7      	b.n	8013c7a <__ieee754_pow+0x7da>
 8013e8a:	469a      	mov	sl, r3
 8013e8c:	4b22      	ldr	r3, [pc, #136]	@ (8013f18 <__ieee754_pow+0xa78>)
 8013e8e:	459a      	cmp	sl, r3
 8013e90:	f63f aef3 	bhi.w	8013c7a <__ieee754_pow+0x7da>
 8013e94:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013e98:	e715      	b.n	8013cc6 <__ieee754_pow+0x826>
 8013e9a:	ec51 0b10 	vmov	r0, r1, d0
 8013e9e:	4619      	mov	r1, r3
 8013ea0:	e7cf      	b.n	8013e42 <__ieee754_pow+0x9a2>
 8013ea2:	491a      	ldr	r1, [pc, #104]	@ (8013f0c <__ieee754_pow+0xa6c>)
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	f7ff bb18 	b.w	80134da <__ieee754_pow+0x3a>
 8013eaa:	2000      	movs	r0, #0
 8013eac:	2100      	movs	r1, #0
 8013eae:	f7ff bb14 	b.w	80134da <__ieee754_pow+0x3a>
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	4639      	mov	r1, r7
 8013eb6:	f7ff bb10 	b.w	80134da <__ieee754_pow+0x3a>
 8013eba:	460c      	mov	r4, r1
 8013ebc:	f7ff bb5e 	b.w	801357c <__ieee754_pow+0xdc>
 8013ec0:	2400      	movs	r4, #0
 8013ec2:	f7ff bb49 	b.w	8013558 <__ieee754_pow+0xb8>
 8013ec6:	bf00      	nop
 8013ec8:	00000000 	.word	0x00000000
 8013ecc:	3fe62e43 	.word	0x3fe62e43
 8013ed0:	fefa39ef 	.word	0xfefa39ef
 8013ed4:	3fe62e42 	.word	0x3fe62e42
 8013ed8:	0ca86c39 	.word	0x0ca86c39
 8013edc:	be205c61 	.word	0xbe205c61
 8013ee0:	72bea4d0 	.word	0x72bea4d0
 8013ee4:	3e663769 	.word	0x3e663769
 8013ee8:	c5d26bf1 	.word	0xc5d26bf1
 8013eec:	3ebbbd41 	.word	0x3ebbbd41
 8013ef0:	af25de2c 	.word	0xaf25de2c
 8013ef4:	3f11566a 	.word	0x3f11566a
 8013ef8:	16bebd93 	.word	0x16bebd93
 8013efc:	3f66c16c 	.word	0x3f66c16c
 8013f00:	5555553e 	.word	0x5555553e
 8013f04:	3fc55555 	.word	0x3fc55555
 8013f08:	fff00000 	.word	0xfff00000
 8013f0c:	3ff00000 	.word	0x3ff00000
 8013f10:	4090cbff 	.word	0x4090cbff
 8013f14:	3f6f3400 	.word	0x3f6f3400
 8013f18:	3fe00000 	.word	0x3fe00000
 8013f1c:	652b82fe 	.word	0x652b82fe
 8013f20:	3c971547 	.word	0x3c971547
 8013f24:	4090cc00 	.word	0x4090cc00

08013f28 <fabs>:
 8013f28:	ec51 0b10 	vmov	r0, r1, d0
 8013f2c:	4602      	mov	r2, r0
 8013f2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013f32:	ec43 2b10 	vmov	d0, r2, r3
 8013f36:	4770      	bx	lr

08013f38 <scalbn>:
 8013f38:	b570      	push	{r4, r5, r6, lr}
 8013f3a:	ec55 4b10 	vmov	r4, r5, d0
 8013f3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013f42:	4606      	mov	r6, r0
 8013f44:	462b      	mov	r3, r5
 8013f46:	b991      	cbnz	r1, 8013f6e <scalbn+0x36>
 8013f48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013f4c:	4323      	orrs	r3, r4
 8013f4e:	d03d      	beq.n	8013fcc <scalbn+0x94>
 8013f50:	4b35      	ldr	r3, [pc, #212]	@ (8014028 <scalbn+0xf0>)
 8013f52:	4620      	mov	r0, r4
 8013f54:	4629      	mov	r1, r5
 8013f56:	2200      	movs	r2, #0
 8013f58:	f7ec fb6e 	bl	8000638 <__aeabi_dmul>
 8013f5c:	4b33      	ldr	r3, [pc, #204]	@ (801402c <scalbn+0xf4>)
 8013f5e:	429e      	cmp	r6, r3
 8013f60:	4604      	mov	r4, r0
 8013f62:	460d      	mov	r5, r1
 8013f64:	da0f      	bge.n	8013f86 <scalbn+0x4e>
 8013f66:	a328      	add	r3, pc, #160	@ (adr r3, 8014008 <scalbn+0xd0>)
 8013f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6c:	e01e      	b.n	8013fac <scalbn+0x74>
 8013f6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013f72:	4291      	cmp	r1, r2
 8013f74:	d10b      	bne.n	8013f8e <scalbn+0x56>
 8013f76:	4622      	mov	r2, r4
 8013f78:	4620      	mov	r0, r4
 8013f7a:	4629      	mov	r1, r5
 8013f7c:	f7ec f9a6 	bl	80002cc <__adddf3>
 8013f80:	4604      	mov	r4, r0
 8013f82:	460d      	mov	r5, r1
 8013f84:	e022      	b.n	8013fcc <scalbn+0x94>
 8013f86:	460b      	mov	r3, r1
 8013f88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013f8c:	3936      	subs	r1, #54	@ 0x36
 8013f8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013f92:	4296      	cmp	r6, r2
 8013f94:	dd0d      	ble.n	8013fb2 <scalbn+0x7a>
 8013f96:	2d00      	cmp	r5, #0
 8013f98:	a11d      	add	r1, pc, #116	@ (adr r1, 8014010 <scalbn+0xd8>)
 8013f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f9e:	da02      	bge.n	8013fa6 <scalbn+0x6e>
 8013fa0:	a11d      	add	r1, pc, #116	@ (adr r1, 8014018 <scalbn+0xe0>)
 8013fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fa6:	a31a      	add	r3, pc, #104	@ (adr r3, 8014010 <scalbn+0xd8>)
 8013fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fac:	f7ec fb44 	bl	8000638 <__aeabi_dmul>
 8013fb0:	e7e6      	b.n	8013f80 <scalbn+0x48>
 8013fb2:	1872      	adds	r2, r6, r1
 8013fb4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013fb8:	428a      	cmp	r2, r1
 8013fba:	dcec      	bgt.n	8013f96 <scalbn+0x5e>
 8013fbc:	2a00      	cmp	r2, #0
 8013fbe:	dd08      	ble.n	8013fd2 <scalbn+0x9a>
 8013fc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013fc4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013fc8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013fcc:	ec45 4b10 	vmov	d0, r4, r5
 8013fd0:	bd70      	pop	{r4, r5, r6, pc}
 8013fd2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013fd6:	da08      	bge.n	8013fea <scalbn+0xb2>
 8013fd8:	2d00      	cmp	r5, #0
 8013fda:	a10b      	add	r1, pc, #44	@ (adr r1, 8014008 <scalbn+0xd0>)
 8013fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fe0:	dac1      	bge.n	8013f66 <scalbn+0x2e>
 8013fe2:	a10f      	add	r1, pc, #60	@ (adr r1, 8014020 <scalbn+0xe8>)
 8013fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fe8:	e7bd      	b.n	8013f66 <scalbn+0x2e>
 8013fea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013fee:	3236      	adds	r2, #54	@ 0x36
 8013ff0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013ff4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8014030 <scalbn+0xf8>)
 8013ffc:	4629      	mov	r1, r5
 8013ffe:	2200      	movs	r2, #0
 8014000:	e7d4      	b.n	8013fac <scalbn+0x74>
 8014002:	bf00      	nop
 8014004:	f3af 8000 	nop.w
 8014008:	c2f8f359 	.word	0xc2f8f359
 801400c:	01a56e1f 	.word	0x01a56e1f
 8014010:	8800759c 	.word	0x8800759c
 8014014:	7e37e43c 	.word	0x7e37e43c
 8014018:	8800759c 	.word	0x8800759c
 801401c:	fe37e43c 	.word	0xfe37e43c
 8014020:	c2f8f359 	.word	0xc2f8f359
 8014024:	81a56e1f 	.word	0x81a56e1f
 8014028:	43500000 	.word	0x43500000
 801402c:	ffff3cb0 	.word	0xffff3cb0
 8014030:	3c900000 	.word	0x3c900000

08014034 <with_errno>:
 8014034:	b510      	push	{r4, lr}
 8014036:	ed2d 8b02 	vpush	{d8}
 801403a:	eeb0 8a40 	vmov.f32	s16, s0
 801403e:	eef0 8a60 	vmov.f32	s17, s1
 8014042:	4604      	mov	r4, r0
 8014044:	f7fb fbf0 	bl	800f828 <__errno>
 8014048:	eeb0 0a48 	vmov.f32	s0, s16
 801404c:	eef0 0a68 	vmov.f32	s1, s17
 8014050:	ecbd 8b02 	vpop	{d8}
 8014054:	6004      	str	r4, [r0, #0]
 8014056:	bd10      	pop	{r4, pc}

08014058 <xflow>:
 8014058:	4603      	mov	r3, r0
 801405a:	b507      	push	{r0, r1, r2, lr}
 801405c:	ec51 0b10 	vmov	r0, r1, d0
 8014060:	b183      	cbz	r3, 8014084 <xflow+0x2c>
 8014062:	4602      	mov	r2, r0
 8014064:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014068:	e9cd 2300 	strd	r2, r3, [sp]
 801406c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014070:	f7ec fae2 	bl	8000638 <__aeabi_dmul>
 8014074:	ec41 0b10 	vmov	d0, r0, r1
 8014078:	2022      	movs	r0, #34	@ 0x22
 801407a:	b003      	add	sp, #12
 801407c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014080:	f7ff bfd8 	b.w	8014034 <with_errno>
 8014084:	4602      	mov	r2, r0
 8014086:	460b      	mov	r3, r1
 8014088:	e7ee      	b.n	8014068 <xflow+0x10>
 801408a:	0000      	movs	r0, r0
 801408c:	0000      	movs	r0, r0
	...

08014090 <__math_uflow>:
 8014090:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014098 <__math_uflow+0x8>
 8014094:	f7ff bfe0 	b.w	8014058 <xflow>
 8014098:	00000000 	.word	0x00000000
 801409c:	10000000 	.word	0x10000000

080140a0 <__math_oflow>:
 80140a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80140a8 <__math_oflow+0x8>
 80140a4:	f7ff bfd8 	b.w	8014058 <xflow>
 80140a8:	00000000 	.word	0x00000000
 80140ac:	70000000 	.word	0x70000000

080140b0 <_init>:
 80140b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140b2:	bf00      	nop
 80140b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140b6:	bc08      	pop	{r3}
 80140b8:	469e      	mov	lr, r3
 80140ba:	4770      	bx	lr

080140bc <_fini>:
 80140bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140be:	bf00      	nop
 80140c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140c2:	bc08      	pop	{r3}
 80140c4:	469e      	mov	lr, r3
 80140c6:	4770      	bx	lr
